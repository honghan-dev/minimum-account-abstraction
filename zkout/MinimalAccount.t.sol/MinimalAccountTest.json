{"abi":null,"bytecode":{"object":""},"assembly":"\t.text\n\t.file\t\"MinimalAccount.t.sol:MinimalAccountTest\"\n\t.globl\t__entry\n__entry:\n.func_begin0:\n\tnop\tstack+=[14]\n\tptr.add\tr1, r0, r3\n\tadd\tr3, r0, r1\n\tshr.s\t96, r1, r1\n\tand\t@CPI0_0[0], r1, r1\n\tptr.add\tr3, r1, stack[@ptr_return_data]\n\tand!\t1, r2, r2\n\tjump.ne\t@.BB0_31\n\tadd\t128, r0, r7\n\tst.1\t64, r7\n\tsub.s!\t4, r1, r2\n\tjump.lt\t@.BB0_565\n\tptr.add\tr3, r1, r1\n\tld\tr3, r2\n\tshr.s\t224, r2, r2\n\tsub.s!\t@CPI0_13[0], r2, r3\n\tjump.le\t@.BB0_49\n\tsub.s!\t@CPI0_14[0], r2, r3\n\tjump.gt\t@.BB0_56\n\tsub.s!\t@CPI0_22[0], r2, r1\n\tjump.gt\t@.BB0_76\n\tsub.s!\t@CPI0_26[0], r2, r1\n\tjump.eq\t@.BB0_166\n\tsub.s!\t@CPI0_27[0], r2, r1\n\tjump.eq\t@.BB0_118\n\tsub.s!\t@CPI0_28[0], r2, r1\n\tjump.ne\t@.BB0_565\n\tcontext.get_context_u128\tr1\n\tsub!\tr1, r0, r1\n\tjump.ne\t@.BB0_565\n\tadd\t34, r0, r1\n\tsload\tr1, r1\n\tadd\tr1, r0, stack-[14]\n\tadd\t31, r0, r1\n\tadd\tr1, r0, stack-[12]\n\tsload\tr1, r1\n\tadd\t@CPI0_45[0], r0, r2\n\tst.1\t160, r2\n\tshr.s\t8, r1, r1\n\tand\t@CPI0_6[0], r1, r1\n\tst.1\t164, r1\n\tadd\t@CPI0_46[0], r0, r1\n\tst.1\t196, r1\n\tadd\t68, r0, r1\n\tst.1\t128, r1\n\tadd\t256, r0, r1\n\tst.1\t64, r1\n\tadd\t37, r0, r1\n\tsload\tr1, r1\n\tadd\tr1, r0, stack-[13]\n\tadd\t@CPI0_7[0], r0, r1\n\tst.2\t0, r1\n\tadd\t@CPI0_5[0], r0, r1\n\tst.2\t4, r1\n\tadd\t@CPI0_0[0], r0, r1\n\tcontext.gas_left\tr2\n\tsub.s!\t@CPI0_0[0], r2, r3\n\tadd.ge\tr1, r0, r2\n\tshl.s\t192, r2, r1\n\tor\t@CPI0_8[0], r1, r1\n\tadd\t32770, r0, r2\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tadd\tstack-[14], r0, r3\n\tand\t@CPI0_6[0], r3, r4\n\tadd\tstack-[13], r0, r3\n\tand\t@CPI0_6[0], r3, r3\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_756\n\tadd\tr4, r0, stack-[14]\n\tld\tr1, r1\n\tsub!\tr1, r0, r1\n\tjump.eq\t@.BB0_565\n\tld.1\t64, r4\n\tadd\t@CPI0_53[0], r0, r1\n\tst.1\tr4, r1\n\tadd\t4, r4, r1\n\tst.1\tr1, r3\n\tadd\t@CPI0_0[0], r0, r1\n\tcontext.gas_left\tr2\n\tsub.s!\t@CPI0_0[0], r2, r3\n\tadd.ge\tr1, r0, r2\n\tsub.s!\t@CPI0_0[0], r4, r3\n\tadd\tr4, r0, stack-[13]\n\tadd.lt\tr4, r0, r1\n\tshl.s\t64, r1, r1\n\tshl.s\t192, r2, r2\n\tor\tr2, r1, r1\n\tor\t@CPI0_54[0], r1, r1\n\tadd\t@CPI0_5[0], r0, r2\n\tnear_call\tr0, @__farcall, @DEFAULT_UNWIND\n\tadd\tr1, r0, r3\n\tshr.s\t96, r3, r3\n\tand\t@CPI0_0[0], r3, stack[@returndatasize]\n\tand\t@CPI0_0[0], r3, r3\n\tptr.add\tr1, r0, stack[@ptr_return_data]\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_408\n\tadd\tstack-[13], r0, r1\n\tsub.s!\t@CPI0_51[0], r1, r1\n\tjump.gt\t@.BB0_210\n\tadd\tstack-[13], r0, r1\n\tst.1\t64, r1\n\tadd\t@CPI0_7[0], r0, r1\n\tst.2\t0, r1\n\tadd\t@CPI0_5[0], r0, r1\n\tst.2\t4, r1\n\tadd\t@CPI0_0[0], r0, r1\n\tcontext.gas_left\tr2\n\tsub.s!\t@CPI0_0[0], r2, r3\n\tadd.ge\tr1, r0, r2\n\tshl.s\t192, r2, r1\n\tor\t@CPI0_8[0], r1, r1\n\tadd\t32770, r0, r2\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_756\n\tld\tr1, r1\n\tsub!\tr1, r0, r1\n\tjump.eq\t@.BB0_565\n\tld.1\t64, r4\n\tadd\t@CPI0_71[0], r0, r1\n\tst.1\tr4, r1\n\tadd\t4, r4, r1\n\tadd\t@CPI0_72[0], r0, r2\n\tst.1\tr1, r2\n\tadd\t@CPI0_0[0], r0, r1\n\tcontext.gas_left\tr2\n\tsub.s!\t@CPI0_0[0], r2, r3\n\tadd.ge\tr1, r0, r2\n\tsub.s!\t@CPI0_0[0], r4, r3\n\tadd\tr4, r0, stack-[13]\n\tadd.lt\tr4, r0, r1\n\tshl.s\t64, r1, r1\n\tshl.s\t192, r2, r2\n\tor\tr2, r1, r1\n\tor\t@CPI0_54[0], r1, r1\n\tadd\t@CPI0_5[0], r0, r2\n\tnear_call\tr0, @__farcall, @DEFAULT_UNWIND\n\tadd\tr1, r0, r3\n\tshr.s\t96, r3, r3\n\tand\t@CPI0_0[0], r3, stack[@returndatasize]\n\tand\t@CPI0_0[0], r3, r3\n\tptr.add\tr1, r0, stack[@ptr_return_data]\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_551\n\tadd\tstack-[13], r0, r1\n\tsub.s!\t@CPI0_51[0], r1, r1\n\tjump.gt\t@.BB0_210\n\tadd\tstack-[13], r0, r1\n\tst.1\t64, r1\n\tadd\tstack-[12], r0, r1\n\tsload\tr1, r1\n\tadd\t@CPI0_7[0], r0, r2\n\tst.2\t0, r2\n\tshr.s\t8, r1, r1\n\tand\t@CPI0_6[0], r1, r1\n\tadd\tr1, r0, stack-[13]\n\tst.2\t4, r1\n\tadd\t@CPI0_0[0], r0, r1\n\tcontext.gas_left\tr2\n\tsub.s!\t@CPI0_0[0], r2, r3\n\tadd.ge\tr1, r0, r2\n\tshl.s\t192, r2, r1\n\tor\t@CPI0_8[0], r1, r1\n\tadd\t32770, r0, r2\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_756\n\tld\tr1, r1\n\tsub!\tr1, r0, r1\n\tjump.eq\t@.BB0_565\n\tld.1\t64, r3\n\tadd\t68, r3, r1\n\tadd\t96, r0, r2\n\tst.1\tr1, r2\n\tadd\t@CPI0_47[0], r0, r1\n\tst.1\tr3, r1\n\tadd\t4, r3, r1\n\tadd\tstack-[14], r0, r2\n\tst.1\tr1, r2\n\tadd\t36, r3, r1\n\tst.1\tr1, r0\n\tadd\t100, r3, r2\n\tld.1\t128, r1\n\tst.1\tr2, r1\n\tadd\tr3, r0, stack-[14]\n\tadd\t132, r3, r2\n\tsub!\tr1, r0, r3\n\tjump.eq\t@.BB0_22\n\tadd\tr0, r0, r3\n.BB0_21:\n\tadd\tr3, r2, r4\n\tadd\t160, r3, r5\n\tld.1\tr5, r5\n\tst.1\tr4, r5\n\tadd\t32, r3, r3\n\tsub!\tr3, r1, r4\n\tjump.lt\t@.BB0_21\n.BB0_22:\n\tadd\tr1, r2, r2\n\tst.1\tr2, r0\n\tcontext.gas_left\tr2\n\tadd\tstack-[13], r0, r3\n\tsub.s!\t4, r3, r3\n\tjump.eq\t@.BB0_24\n\tadd\t31, r1, r1\n\tsub.s\t32, r0, r3\n\tand\tr1, r3, r1\n\tadd\t@CPI0_0[0], r0, r3\n\tadd\tstack-[14], r0, r5\n\tsub.s!\t@CPI0_0[0], r5, r4\n\tadd\tr3, r0, r4\n\tadd.lt\tr5, r0, r4\n\tshl.s\t64, r4, r4\n\tadd\t132, r1, r1\n\tsub.s!\t@CPI0_0[0], r1, r5\n\tadd.ge\tr3, r0, r1\n\tshl.s\t96, r1, r1\n\tor\tr1, r4, r1\n\tsub.s!\t@CPI0_0[0], r2, r4\n\tadd.ge\tr3, r0, r2\n\tshl.s\t192, r2, r2\n\tor\tr2, r1, r1\n\tadd\tstack-[13], r0, r2\n\tnear_call\tr0, @__farcall, @DEFAULT_UNWIND\n\tadd\tr1, r0, r3\n\tshr.s\t96, r3, r3\n\tand\t@CPI0_0[0], r3, stack[@returndatasize]\n\tand\t@CPI0_0[0], r3, r3\n\tptr.add\tr1, r0, stack[@ptr_return_data]\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_627\n.BB0_24:\n\tadd\tstack-[14], r0, r1\n\tsub.s!\t@CPI0_51[0], r1, r1\n\tjump.gt\t@.BB0_210\n\tadd\tstack-[14], r0, r1\n\tst.1\t64, r1\n\tadd\t@CPI0_7[0], r0, r1\n\tst.2\t0, r1\n\tadd\t@CPI0_5[0], r0, r1\n\tst.2\t4, r1\n\tadd\t@CPI0_0[0], r0, r1\n\tcontext.gas_left\tr2\n\tsub.s!\t@CPI0_0[0], r2, r3\n\tadd.ge\tr1, r0, r2\n\tshl.s\t192, r2, r1\n\tor\t@CPI0_8[0], r1, r1\n\tadd\t32770, r0, r2\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_756\n\tld\tr1, r1\n\tsub!\tr1, r0, r1\n\tjump.eq\t@.BB0_565\n\tld.1\t64, r4\n\tadd\t@CPI0_58[0], r0, r1\n\tst.1\tr4, r1\n\tadd\t@CPI0_0[0], r0, r1\n\tcontext.gas_left\tr2\n\tsub.s!\t@CPI0_0[0], r2, r3\n\tadd.ge\tr1, r0, r2\n\tsub.s!\t@CPI0_0[0], r4, r3\n\tadd\tr4, r0, stack-[14]\n\tadd.lt\tr4, r0, r1\n\tshl.s\t64, r1, r1\n\tshl.s\t192, r2, r2\n\tor\tr2, r1, r1\n\tor\t@CPI0_59[0], r1, r1\n\tadd\t@CPI0_5[0], r0, r2\n\tnear_call\tr0, @__farcall, @DEFAULT_UNWIND\n\tadd\tr1, r0, r3\n\tshr.s\t96, r3, r3\n\tand\t@CPI0_0[0], r3, stack[@returndatasize]\n\tand\t@CPI0_0[0], r3, r3\n\tptr.add\tr1, r0, stack[@ptr_return_data]\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_715\n.BB0_29:\n\tadd\tstack-[14], r0, r1\n\tsub.s!\t@CPI0_51[0], r1, r1\n\tjump.gt\t@.BB0_210\n\tadd\tstack-[14], r0, r1\n\tst.1\t64, r1\n\tadd\tr0, r0, r1\n\tret.ok.to_label\tr1, @DEFAULT_FAR_RETURN\n.BB0_31:\n\tcontext.get_context_u128\tr1\n\tsub!\tr1, r0, r1\n\tjump.ne\t@.BB0_565\n\tadd\t12, r0, r1\n\tsload\tr1, r2\n\tsub.s\t256, r0, r3\n\tand\tr2, r3, r2\n\tor\t1, r2, r2\n\tsstore\tr1, r2\n\tadd\t31, r0, r1\n\tsload\tr1, r2\n\tand\tr2, r3, r2\n\tor\t1, r2, r2\n\tsstore\tr1, r2\n\tadd\t10, r0, r1\n\tst.1\t128, r1\n\tadd\t@CPI0_1[0], r0, r2\n\tst.1\t160, r2\n\tst.1\t224, r2\n\tst.1\t234, r0\n\tst.1\t192, r1\n\tadd\t256, r0, r1\n\tst.1\t64, r1\n\tadd\t@CPI0_0[0], r0, r3\n\tcontext.gas_left\tr1\n\tsub.s!\t@CPI0_0[0], r1, r2\n\tadd.ge\tr3, r0, r1\n\tshl.s\t192, r1, r1\n\tor\t@CPI0_2[0], r1, r1\n\tadd\t32784, r0, r2\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_565\n\tld\tr1, r1\n\tadd\t@CPI0_3[0], r0, r2\n\tst.1\t256, r2\n\tst.1\t260, r1\n\tcontext.gas_left\tr1\n\tsub.s!\t@CPI0_0[0], r1, r2\n\tadd.ge\t@CPI0_0[0], r0, r1\n\tshl.s\t192, r1, r1\n\tor\t@CPI0_4[0], r1, r1\n\tadd\t@CPI0_5[0], r0, r2\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tadd\tr1, r0, r3\n\tshr.s\t96, r3, r3\n\tand\t@CPI0_0[0], r3, r3\n\tsub.s!\t32, r3, r4\n\tadd\tr3, r0, r4\n\tadd.ge\t32, r0, r4\n\tand\t31, r4, r5\n\tshr.s!\t5, r4, r6\n\tjump.eq\t@.BB0_36\n\tadd\tr0, r0, r7\n.BB0_35:\n\tshl.s\t5, r7, r8\n\tptr.add\tr1, r8, r9\n\tld\tr9, r9\n\tadd\t256, r8, r8\n\tst.1\tr8, r9\n\tadd\t1, r7, r7\n\tsub!\tr7, r6, r8\n\tjump.lt\t@.BB0_35\n.BB0_36:\n\tsub!\tr5, r0, r7\n\tjump.eq\t@.BB0_38\n\tshl.s\t5, r6, r6\n\tptr.add\tr1, r6, r7\n\tshl.s\t3, r5, r5\n\tadd\t256, r6, r6\n\tld.1\tr6, r8\n\tshl\tr8, r5, r8\n\tshr\tr8, r5, r8\n\tld\tr7, r7\n\tsub\t256, r5, r5\n\tshr\tr7, r5, r7\n\tshl\tr7, r5, r5\n\tor\tr5, r8, r5\n\tst.1\tr6, r5\n.BB0_38:\n\tadd\tr3, r0, stack[@returndatasize]\n\tptr.add\tr1, r0, stack[@ptr_return_data]\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_63\n\tadd\t31, r4, r1\n\tand\t96, r1, r1\n\tor\t256, r1, r1\n\tst.1\t64, r1\n\tsub.s!\t32, r3, r1\n\tjump.lt\t@.BB0_565\n\tld.1\t256, r1\n\tadd\tr1, r0, stack-[14]\n\tsub.s!\t@CPI0_6[0], r1, r1\n\tjump.gt\t@.BB0_565\n\tadd\t@CPI0_7[0], r0, r1\n\tst.2\t0, r1\n\tadd\t@CPI0_5[0], r0, r1\n\tst.2\t4, r1\n\tadd\t@CPI0_0[0], r0, r1\n\tcontext.gas_left\tr2\n\tsub.s!\t@CPI0_0[0], r2, r3\n\tadd.ge\tr1, r0, r2\n\tshl.s\t192, r2, r1\n\tor\t@CPI0_8[0], r1, r1\n\tadd\t32770, r0, r2\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_756\n\tld\tr1, r1\n\tsub!\tr1, r0, r1\n\tjump.eq\t@.BB0_565\n\tld.1\t64, r6\n\tadd\t36, r6, r1\n\tadd\t64, r0, r2\n\tst.1\tr1, r2\n\tadd\t@CPI0_9[0], r0, r1\n\tst.1\tr6, r1\n\tadd\t4, r6, r1\n\tadd\tstack-[14], r0, r2\n\tst.1\tr1, r2\n\tadd\t68, r6, r2\n\tld.1\t128, r1\n\tst.1\tr2, r1\n\tadd\t100, r6, r2\n\tsub!\tr1, r0, r3\n\tjump.eq\t@.BB0_46\n\tadd\tr0, r0, r3\n.BB0_45:\n\tadd\tr3, r2, r4\n\tadd\t160, r3, r5\n\tld.1\tr5, r5\n\tst.1\tr4, r5\n\tadd\t32, r3, r3\n\tsub!\tr3, r1, r4\n\tjump.lt\t@.BB0_45\n.BB0_46:\n\tadd\tr1, r2, r2\n\tst.1\tr2, r0\n\tadd\t31, r1, r1\n\tsub.s\t32, r0, r2\n\tand\tr1, r2, r1\n\tadd\t@CPI0_0[0], r0, r2\n\tsub.s!\t@CPI0_0[0], r6, r3\n\tadd\tr2, r0, r3\n\tadd.lt\tr6, r0, r3\n\tshl.s\t64, r3, r3\n\tadd\t100, r1, r1\n\tsub.s!\t@CPI0_0[0], r1, r4\n\tadd.ge\tr2, r0, r1\n\tshl.s\t96, r1, r1\n\tor\tr1, r3, r1\n\tcontext.gas_left\tr3\n\tsub.s!\t@CPI0_0[0], r3, r4\n\tadd.ge\tr2, r0, r3\n\tshl.s\t192, r3, r2\n\tor\tr2, r1, r1\n\tadd\t@CPI0_5[0], r0, r2\n\tadd\tr6, r0, stack-[13]\n\tnear_call\tr0, @__farcall, @DEFAULT_UNWIND\n\tadd\tr1, r0, r3\n\tshr.s\t96, r3, r3\n\tand\t@CPI0_0[0], r3, stack[@returndatasize]\n\tand\t@CPI0_0[0], r3, r3\n\tptr.add\tr1, r0, stack[@ptr_return_data]\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_330\n\tadd\tstack-[13], r0, r1\n\tadd\tr1, r0, r2\n\tsub.s!\t@CPI0_10[0], r1, r1\n\tjump.ge\t@.BB0_210\n\tst.1\t64, r2\n\tadd\t37, r0, r1\n\tsload\tr1, r2\n\tand\t@CPI0_11[0], r2, r2\n\tor\tstack-[14], r2, r2\n\tsstore\tr1, r2\n\tadd\t32, r0, r1\n\tst.2\t256, r1\n\tst.2\t288, r0\n\tadd\t@CPI0_12[0], r0, r1\n\tret.ok.to_label\tr1, @DEFAULT_FAR_RETURN\n.BB0_49:\n\tsub.s!\t@CPI0_29[0], r2, r3\n\tjump.le\t@.BB0_69\n\tsub.s!\t@CPI0_30[0], r2, r1\n\tjump.gt\t@.BB0_101\n\tsub.s!\t@CPI0_34[0], r2, r1\n\tjump.eq\t@.BB0_207\n\tsub.s!\t@CPI0_35[0], r2, r1\n\tjump.eq\t@.BB0_200\n\tsub.s!\t@CPI0_36[0], r2, r1\n\tjump.ne\t@.BB0_565\n\tcontext.get_context_u128\tr1\n\tsub!\tr1, r0, r1\n\tjump.ne\t@.BB0_565\n\tadd\t34, r0, r1\n\tjump\t@.BB0_202\n.BB0_56:\n\tsub.s!\t@CPI0_15[0], r2, r3\n\tjump.gt\t@.BB0_96\n\tsub.s!\t@CPI0_19[0], r2, r3\n\tjump.eq\t@.BB0_185\n\tsub.s!\t@CPI0_20[0], r2, r3\n\tjump.eq\t@.BB0_149\n\tsub.s!\t@CPI0_21[0], r2, r2\n\tjump.ne\t@.BB0_565\n\tcontext.get_context_u128\tr2\n\tsub!\tr2, r0, r2\n\tjump.ne\t@.BB0_565\n\tadd\t34, r0, r2\n\tsload\tr2, r2\n\tadd\t31, r0, r3\n\tadd\tr3, r0, stack-[14]\n\tsload\tr3, r3\n\tadd\t@CPI0_45[0], r0, r4\n\tst.1\t160, r4\n\tshr.s\t8, r3, r3\n\tand\t@CPI0_6[0], r3, r3\n\tst.1\t164, r3\n\tadd\t@CPI0_46[0], r0, r3\n\tst.1\t196, r3\n\tadd\t68, r0, r3\n\tst.1\t128, r3\n\tadd\t@CPI0_47[0], r0, r4\n\tst.1\t288, r4\n\tand\t@CPI0_6[0], r2, r2\n\tst.1\t292, r2\n\tst.1\t324, r0\n\tadd\t96, r0, r5\n\tst.1\t356, r5\n\tst.1\t388, r3\n\tld.1\t160, r2\n\tst.1\t420, r2\n\tld.1\t192, r2\n\tst.1\t452, r2\n\tld.1\t224, r2\n\tst.1\t484, r2\n\tst.1\t488, r0\n\tadd\t228, r0, r2\n\tst.1\t256, r2\n\tadd\t544, r0, r2\n\tst.1\t64, r2\n\tadd\t33, r0, r2\n\tsload\tr2, r2\n\tadd\t35, r0, r3\n\tsload\tr3, r3\n\tadd\t@CPI0_48[0], r0, r4\n\tst.1\t544, r4\n\tand\t@CPI0_6[0], r3, stack-[13]\n\tcontext.gas_left\tr3\n\tand\t@CPI0_6[0], r2, r2\n\tsub.s!\t4, r2, r4\n\tadd\tr5, r0, stack-[12]\n\tjump.ne\t@.BB0_264\n\tadd\tstack[@returndatasize], r0, r3\n\tsub.s!\t64, r3, r2\n\tadd\tr3, r0, r4\n\tadd.ge\t64, r0, r4\n\tjump\t@.BB0_271\n.BB0_63:\n\tld.1\t64, r2\n\tand\t31, r3, r4\n\tshr.s!\t5, r3, r5\n\tjump.eq\t@.BB0_66\n\tadd\tr0, r0, r6\n.BB0_65:\n\tshl.s\t5, r6, r7\n\tadd\tr2, r7, r8\n\tptr.add\tr1, r7, r7\n\tld\tr7, r7\n\tst.1\tr8, r7\n\tadd\t1, r6, r6\n\tsub!\tr6, r5, r7\n\tjump.lt\t@.BB0_65\n.BB0_66:\n\tsub!\tr4, r0, r6\n\tjump.eq\t@.BB0_68\n.BB0_67:\n\tshl.s\t5, r5, r5\n\tptr.add\tr1, r5, r1\n\tadd\tr2, r5, r5\n\tshl.s\t3, r4, r4\n\tld.1\tr5, r6\n\tshl\tr6, r4, r6\n\tshr\tr6, r4, r6\n\tld\tr1, r1\n\tsub\t256, r4, r4\n\tshr\tr1, r4, r1\n\tshl\tr1, r4, r1\n\tor\tr1, r6, r1\n\tst.1\tr5, r1\n.BB0_68:\n\tadd\t@CPI0_0[0], r0, r1\n\tsub.s!\t@CPI0_0[0], r2, r4\n\tadd.ge\tr1, r0, r2\n\tshl.s\t64, r2, r1\n\tshl.s\t96, r3, r2\n\tor\tr1, r2, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.BB0_69:\n\tsub.s!\t@CPI0_37[0], r2, r3\n\tjump.le\t@.BB0_110\n\tsub.s!\t@CPI0_38[0], r2, r3\n\tjump.eq\t@.BB0_151\n\tsub.s!\t@CPI0_39[0], r2, r1\n\tjump.eq\t@.BB0_115\n\tsub.s!\t@CPI0_40[0], r2, r1\n\tjump.ne\t@.BB0_565\n\tcontext.get_context_u128\tr1\n\tsub!\tr1, r0, r1\n\tjump.ne\t@.BB0_565\n\tadd\t34, r0, r1\n\tadd\tr1, r0, stack-[13]\n\tsload\tr1, r2\n\tadd\t@CPI0_80[0], r0, r1\n\tst.1\t128, r1\n\tcontext.this\tr1\n\tst.1\t132, r1\n\tcontext.gas_left\tr1\n\tand\t@CPI0_6[0], r2, r2\n\tsub.s!\t4, r2, r3\n\tadd\tr2, r0, stack-[14]\n\tjump.ne\t@.BB0_214\n\tadd\tstack[@returndatasize], r0, r3\n\tsub.s!\t32, r3, r1\n\tadd\tr3, r0, r4\n\tadd.ge\t32, r0, r4\n\tjump\t@.BB0_220\n.BB0_76:\n\tsub.s!\t@CPI0_23[0], r2, r1\n\tjump.eq\t@.BB0_196\n\tsub.s!\t@CPI0_24[0], r2, r1\n\tjump.eq\t@.BB0_154\n\tsub.s!\t@CPI0_25[0], r2, r1\n\tjump.ne\t@.BB0_565\n\tcontext.get_context_u128\tr1\n\tsub!\tr1, r0, r1\n\tjump.ne\t@.BB0_565\n\tadd\t25, r0, r4\n\tsload\tr4, r5\n\tsub.s!\t@CPI0_51[0], r5, r2\n\tjump.gt\t@.BB0_210\n\tshl.s\t5, r5, r2\n\tadd\t63, r2, r2\n\tand\t@CPI0_64[0], r2, r2\n\tsub.s!\t@CPI0_65[0], r2, r3\n\tjump.gt\t@.BB0_210\n\tadd\t128, r2, r1\n\tst.1\t64, r1\n\tst.1\t128, r5\n\tst.1\t0, r4\n\tsub!\tr5, r0, r2\n\tjump.eq\t@.BB0_183\n\tadd\t160, r0, r6\n\tadd\t@CPI0_66[0], r0, r7\n\tadd\tr0, r0, r8\n\tadd\tr5, r0, stack-[8]\n.BB0_84:\n\tsload\tr7, r1\n\tand!\t1, r1, r2\n\tshr.s\t1, r1, r3\n\tand\t127, r3, r4\n\tadd.ne\tr3, r0, r4\n\tsub.s!\t31, r4, r3\n\tadd\t0, r0, r3\n\tadd.gt\t1, r0, r3\n\txor\tr1, r3, r3\n\tand!\t1, r3, r3\n\tjump.ne\t@.BB0_471\n\tld.1\t64, r9\n\tst.1.inc\tr9, r4, r3\n\tsub!\tr2, r0, r2\n\tjump.eq\t@.BB0_90\n\tadd\tr3, r0, stack-[9]\n\tadd\tr4, r0, stack-[10]\n\tadd\tr9, r0, stack-[11]\n\tadd\tr8, r0, stack-[12]\n\tadd\tr6, r0, stack-[14]\n\tadd\tr7, r0, stack-[13]\n\tst.1\t0, r7\n\tcontext.gas_left\tr1\n\tsub.s!\t@CPI0_0[0], r1, r2\n\tadd.ge\t@CPI0_0[0], r0, r1\n\tshl.s\t192, r1, r1\n\tor\t@CPI0_67[0], r1, r1\n\tadd\t32784, r0, r2\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_565\n\tadd\tstack-[10], r0, r10\n\tsub!\tr10, r0, r2\n\tadd\tstack-[8], r0, r5\n\tadd\tstack-[14], r0, r6\n\tadd\tstack-[12], r0, r8\n\tjump.eq\t@.BB0_91\n\tld\tr1, r2\n\tadd\tr0, r0, r1\n\tadd\tstack-[13], r0, r7\n\tadd\tstack-[11], r0, r9\n\tadd\tstack-[9], r0, r11\n.BB0_89:\n\tadd\tr11, r1, r3\n\tsload\tr2, r4\n\tst.1\tr3, r4\n\tadd\t1, r2, r2\n\tadd\t32, r1, r1\n\tsub!\tr1, r10, r3\n\tjump.lt\t@.BB0_89\n\tjump\t@.BB0_92\n.BB0_90:\n\tsub.s\t256, r0, r2\n\tand\tr1, r2, r1\n\tst.1\tr3, r1\n\tsub!\tr4, r0, r1\n\tadd\t32, r0, r1\n\tadd.eq\t0, r0, r1\n\tjump\t@.BB0_92\n.BB0_91:\n\tadd\tr0, r0, r1\n\tadd\tstack-[13], r0, r7\n\tadd\tstack-[11], r0, r9\n.BB0_92:\n\tadd\t63, r1, r1\n\tsub.s\t32, r0, r2\n\tand\tr1, r2, r2\n\tadd\tr2, r9, r1\n\tsub!\tr1, r2, r2\n\tadd\t0, r0, r2\n\tadd.lt\t1, r0, r2\n\tsub.s!\t@CPI0_51[0], r1, r3\n\tjump.gt\t@.BB0_210\n\tand!\t1, r2, r2\n\tjump.ne\t@.BB0_210\n\tst.1\t64, r1\n\tst.1.inc\tr6, r9, r6\n\tadd\t1, r7, r7\n\tadd\t1, r8, r8\n\tsub!\tr8, r5, r1\n\tjump.lt\t@.BB0_84\n\tjump\t@.BB0_182\n.BB0_96:\n\tsub.s!\t@CPI0_16[0], r2, r1\n\tjump.eq\t@.BB0_198\n\tsub.s!\t@CPI0_17[0], r2, r1\n\tjump.eq\t@.BB0_159\n\tsub.s!\t@CPI0_18[0], r2, r1\n\tjump.ne\t@.BB0_565\n\tcontext.get_context_u128\tr1\n\tsub!\tr1, r0, r1\n\tjump.ne\t@.BB0_565\n\tadd\t31, r0, r1\n\tsload\tr1, r1\n\tand!\t255, r1, r1\n\tadd\t0, r0, r1\n\tadd.ne\t1, r0, r1\n\tst.1\t128, r1\n\tadd\t@CPI0_43[0], r0, r1\n\tret.ok.to_label\tr1, @DEFAULT_FAR_RETURN\n.BB0_101:\n\tsub.s!\t@CPI0_31[0], r2, r1\n\tjump.eq\t@.BB0_211\n\tsub.s!\t@CPI0_32[0], r2, r1\n\tjump.eq\t@.BB0_204\n\tsub.s!\t@CPI0_33[0], r2, r1\n\tjump.ne\t@.BB0_565\n\tcontext.get_context_u128\tr1\n\tsub!\tr1, r0, r1\n\tjump.ne\t@.BB0_565\n\tadd\t27, r0, r1\n\tsload\tr1, r2\n\tadd\tr2, r0, stack-[5]\n\tsub.s!\t@CPI0_51[0], r2, r2\n\tjump.gt\t@.BB0_210\n\tadd\tstack-[5], r0, r2\n\tshl.s\t5, r2, r2\n\tadd\t63, r2, r2\n\tand\t@CPI0_64[0], r2, r2\n\tsub.s!\t@CPI0_65[0], r2, r3\n\tjump.gt\t@.BB0_210\n\tadd\t128, r2, r15\n\tst.1\t64, r15\n\tadd\tstack-[5], r0, r2\n\tst.1\t128, r2\n\tst.1\t0, r1\n\tsub!\tr2, r0, r1\n\tjump.ne\t@.BB0_413\n.BB0_108:\n\tadd\t32, r0, r1\n\tst.1.inc\tr15, r1, r2\n\tld.1\t128, r1\n\tst.1\tr2, r1\n\tadd\t64, r15, r3\n\tshl.s\t5, r1, r2\n\tadd\tr2, r3, r2\n\tsub!\tr1, r0, r4\n\tjump.ne\t@.BB0_472\n.BB0_109:\n\tsub\tr2, r15, r1\n\tadd\t@CPI0_0[0], r0, r2\n\tsub.s!\t@CPI0_0[0], r1, r3\n\tadd.ge\tr2, r0, r1\n\tsub.s!\t@CPI0_0[0], r15, r3\n\tadd.ge\tr2, r0, r15\n\tshl.s\t64, r15, r2\n\tshl.s\t96, r1, r1\n\tor\tr1, r2, r1\n\tret.ok.to_label\tr1, @DEFAULT_FAR_RETURN\n.BB0_110:\n\tsub.s!\t@CPI0_41[0], r2, r3\n\tjump.eq\t@.BB0_162\n\tsub.s!\t@CPI0_42[0], r2, r2\n\tjump.ne\t@.BB0_565\n\tcontext.get_context_u128\tr2\n\tsub!\tr2, r0, r2\n\tjump.ne\t@.BB0_565\n\tadd\t34, r0, r5\n\tsload\tr5, r2\n\tadd\t31, r0, r3\n\tadd\tr3, r0, stack-[13]\n\tsload\tr3, r3\n\tadd\t@CPI0_45[0], r0, r4\n\tst.1\t160, r4\n\tshr.s\t8, r3, r3\n\tand\t@CPI0_6[0], r3, r3\n\tst.1\t164, r3\n\tadd\t@CPI0_46[0], r0, r3\n\tst.1\t196, r3\n\tadd\t68, r0, r3\n\tst.1\t128, r3\n\tadd\t@CPI0_47[0], r0, r4\n\tst.1\t288, r4\n\tand\t@CPI0_6[0], r2, r2\n\tst.1\t292, r2\n\tst.1\t324, r0\n\tadd\t96, r0, r6\n\tst.1\t356, r6\n\tst.1\t388, r3\n\tld.1\t160, r2\n\tst.1\t420, r2\n\tld.1\t192, r2\n\tst.1\t452, r2\n\tld.1\t224, r2\n\tst.1\t484, r2\n\tst.1\t488, r0\n\tadd\t228, r0, r2\n\tst.1\t256, r2\n\tadd\t544, r0, r2\n\tst.1\t64, r2\n\tadd\t33, r0, r2\n\tsload\tr2, r2\n\tadd\t35, r0, r3\n\tsload\tr3, r3\n\tadd\t@CPI0_48[0], r0, r4\n\tst.1\t544, r4\n\tand\t@CPI0_6[0], r3, stack-[14]\n\tcontext.gas_left\tr3\n\tand\t@CPI0_6[0], r2, r2\n\tsub.s!\t4, r2, r4\n\tadd\tr5, r0, stack-[11]\n\tadd\tr6, r0, stack-[12]\n\tjump.ne\t@.BB0_289\n\tadd\tstack[@returndatasize], r0, r3\n\tsub.s!\t64, r3, r2\n\tadd\tr3, r0, r4\n\tadd.ge\t64, r0, r4\n\tjump\t@.BB0_295\n.BB0_115:\n\tcontext.get_context_u128\tr1\n\tsub!\tr1, r0, r1\n\tjump.ne\t@.BB0_565\n\tadd\t22, r0, r2\n\tsload\tr2, r1\n\tst.1\t128, r1\n\tst.1\t0, r2\n\tsub!\tr1, r0, r2\n\tjump.eq\t@.BB0_117\n\tadd\t160, r0, r4\n\tadd\t@CPI0_83[0], r0, r2\n\tadd\tr0, r0, r3\n.BB0_229:\n\tadd\tr4, r0, r5\n\tsload\tr2, r4\n\tand\t@CPI0_6[0], r4, r4\n\tst.1.inc\tr5, r4, r4\n\tadd\t1, r2, r2\n\tadd\t1, r3, r3\n\tsub!\tr3, r1, r6\n\tjump.lt\t@.BB0_229\n\tjump\t@.BB0_326\n.BB0_118:\n\tcontext.get_context_u128\tr1\n\tsub!\tr1, r0, r1\n\tjump.ne\t@.BB0_565\n\tadd\t29, r0, r4\n\tsload\tr4, r1\n\tadd\tr1, r0, stack-[6]\n\tsub.s!\t@CPI0_51[0], r1, r2\n\tjump.gt\t@.BB0_210\n\tadd\tstack-[6], r0, r1\n\tshl.s\t5, r1, r2\n\tadd\t63, r2, r2\n\tand\t@CPI0_64[0], r2, r2\n\tsub.s!\t@CPI0_65[0], r2, r3\n\tjump.gt\t@.BB0_210\n\tadd\t128, r2, r1\n\tst.1\t64, r1\n\tadd\tstack-[6], r0, r2\n\tst.1\t128, r2\n\tst.1\t0, r4\n\tsub!\tr2, r0, r2\n\tjump.eq\t@.BB0_158\n\tadd\t160, r0, r4\n\tadd\t@CPI0_73[0], r0, r5\n\tadd\t32784, r0, stack-[5]\n\tadd\tr0, r0, r6\n.BB0_123:\n\tsub.s!\t@CPI0_69[0], r1, r2\n\tjump.gt\t@.BB0_210\n\tadd\tr6, r0, stack-[11]\n\tadd\tr4, r0, stack-[13]\n\tadd\t64, r1, r2\n\tst.1\t64, r2\n\tsload\tr5, r2\n\tand\t@CPI0_6[0], r2, r2\n\tadd\tr1, r0, stack-[14]\n\tst.1.inc\tr1, r2, r1\n\tadd\tr1, r0, stack-[7]\n\tadd\tr5, r0, stack-[12]\n\tadd\t1, r5, r1\n\tsload\tr1, r3\n\tld.1\t64, r2\n\tadd\tr2, r0, stack-[10]\n\tadd\tr3, r0, stack-[8]\n\tst.1.inc\tr2, r3, r2\n\tadd\tr2, r0, stack-[9]\n\tst.1\t0, r1\n\tcontext.gas_left\tr1\n\tsub.s!\t@CPI0_0[0], r1, r2\n\tadd.ge\t@CPI0_0[0], r0, r1\n\tshl.s\t192, r1, r1\n\tor\t@CPI0_67[0], r1, r1\n\tadd\tstack-[5], r0, r2\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_565\n\tld\tr1, r2\n\tadd\tstack-[8], r0, r9\n\tsub.s!\t8, r9, r1\n\tjump.lt\t@.BB0_142\n\tadd\tr0, r0, r1\n\tadd\tstack-[11], r0, r6\n\tadd\tstack-[10], r0, r7\n\tadd\tstack-[9], r0, r8\n.BB0_127:\n\tadd\t224, r8, r3\n\tsload\tr2, r4\n\tand\t@CPI0_70[0], r4, r5\n\tst.1\tr3, r5\n\tshl.s\t32, r4, r3\n\tand\t@CPI0_70[0], r3, r3\n\tadd\t192, r8, r5\n\tst.1\tr5, r3\n\tshl.s\t64, r4, r3\n\tand\t@CPI0_70[0], r3, r3\n\tadd\t160, r8, r5\n\tst.1\tr5, r3\n\tshl.s\t96, r4, r3\n\tand\t@CPI0_70[0], r3, r3\n\tadd\t128, r8, r5\n\tst.1\tr5, r3\n\tshl.s\t128, r4, r3\n\tand\t@CPI0_70[0], r3, r3\n\tadd\t96, r8, r5\n\tst.1\tr5, r3\n\tshl.s\t160, r4, r3\n\tand\t@CPI0_70[0], r3, r3\n\tadd\t64, r8, r5\n\tst.1\tr5, r3\n\tshl.s\t192, r4, r3\n\tand\t@CPI0_70[0], r3, r3\n\tadd\t32, r8, r5\n\tst.1\tr5, r3\n\tshl.s\t224, r4, r3\n\tst.1\tr8, r3\n\tadd\t1, r2, r2\n\tadd\t256, r8, r8\n\tadd\t8, r1, r1\n\tor\t7, r1, r3\n\tsub!\tr3, r9, r3\n\tjump.lt\t@.BB0_127\n\tsload\tr2, r2\n\tsub!\tr1, r9, r3\n\tjump.ge\t@.BB0_130\n.BB0_129:\n\tshl.s\t224, r2, r3\n\tst.1.inc\tr8, r3, r8\n\tor\t1, r1, r1\n.BB0_130:\n\tadd\tstack-[13], r0, r4\n\tadd\tstack-[12], r0, r5\n\tsub!\tr1, r9, r3\n\tjump.ge\t@.BB0_132\n\tshl.s\t192, r2, r3\n\tand\t@CPI0_70[0], r3, r3\n\tst.1.inc\tr8, r3, r8\n\tadd\t1, r1, r1\n\tsub!\tr1, r9, r3\n\tjump.lt\t@.BB0_144\n.BB0_133:\n\tsub!\tr1, r9, r3\n\tjump.ge\t@.BB0_134\n.BB0_145:\n\tshl.s\t128, r2, r3\n\tand\t@CPI0_70[0], r3, r3\n\tst.1.inc\tr8, r3, r8\n\tadd\t1, r1, r1\n\tsub!\tr1, r9, r3\n\tjump.lt\t@.BB0_146\n.BB0_135:\n\tsub!\tr1, r9, r3\n\tjump.ge\t@.BB0_136\n.BB0_147:\n\tshl.s\t64, r2, r3\n\tand\t@CPI0_70[0], r3, r3\n\tst.1.inc\tr8, r3, r8\n\tadd\t1, r1, r1\n\tsub!\tr1, r9, r3\n\tjump.lt\t@.BB0_148\n.BB0_137:\n\tsub!\tr1, r9, r1\n\tjump.ge\t@.BB0_139\n.BB0_138:\n\tand\t@CPI0_70[0], r2, r1\n\tst.1.inc\tr8, r1, r8\n.BB0_139:\n\tsub\tr8, r7, r1\n\tadd\t31, r1, r1\n\tsub.s\t32, r0, r2\n\tand\tr1, r2, r2\n\tadd\tr2, r7, r1\n\tsub!\tr1, r2, r2\n\tadd\t0, r0, r2\n\tadd.lt\t1, r0, r2\n\tsub.s!\t@CPI0_51[0], r1, r3\n\tadd\tstack-[14], r0, r3\n\tjump.gt\t@.BB0_210\n\tand!\t1, r2, r2\n\tjump.ne\t@.BB0_210\n\tst.1\t64, r1\n\tadd\tstack-[7], r0, r1\n\tst.1\tr1, r7\n\tst.1.inc\tr4, r3, r4\n\tadd\t2, r5, r5\n\tld.1\t64, r1\n\tadd\t1, r6, r6\n\tsub.s!\tstack-[6], r6, r2\n\tjump.lt\t@.BB0_123\n\tjump\t@.BB0_158\n.BB0_132:\n\tsub!\tr1, r9, r3\n\tjump.ge\t@.BB0_133\n.BB0_144:\n\tshl.s\t160, r2, r3\n\tand\t@CPI0_70[0], r3, r3\n\tst.1.inc\tr8, r3, r8\n\tadd\t1, r1, r1\n\tsub!\tr1, r9, r3\n\tjump.lt\t@.BB0_145\n.BB0_134:\n\tsub!\tr1, r9, r3\n\tjump.ge\t@.BB0_135\n.BB0_146:\n\tshl.s\t96, r2, r3\n\tand\t@CPI0_70[0], r3, r3\n\tst.1.inc\tr8, r3, r8\n\tadd\t1, r1, r1\n\tsub!\tr1, r9, r3\n\tjump.lt\t@.BB0_147\n.BB0_136:\n\tsub!\tr1, r9, r3\n\tjump.ge\t@.BB0_137\n.BB0_148:\n\tshl.s\t32, r2, r3\n\tand\t@CPI0_70[0], r3, r3\n\tst.1.inc\tr8, r3, r8\n\tadd\t1, r1, r1\n\tsub!\tr1, r9, r1\n\tjump.lt\t@.BB0_138\n\tjump\t@.BB0_139\n.BB0_142:\n\tadd\tr0, r0, r1\n\tadd\tstack-[11], r0, r6\n\tadd\tstack-[10], r0, r7\n\tadd\tstack-[9], r0, r8\n\tsload\tr2, r2\n\tsub!\tr1, r9, r3\n\tjump.lt\t@.BB0_129\n\tjump\t@.BB0_130\n.BB0_149:\n\tcontext.get_context_u128\tr1\n\tsub!\tr1, r0, r1\n\tjump.ne\t@.BB0_565\n\tadd\t31, r0, r1\n\tsload\tr1, r1\n\tshr.s\t8, r1, r1\n\tjump\t@.BB0_203\n.BB0_151:\n\tcontext.get_context_u128\tr2\n\tsub!\tr2, r0, r2\n\tjump.ne\t@.BB0_565\n\tadd\t34, r0, r2\n\tsload\tr2, r2\n\tadd\t31, r0, r3\n\tadd\tr3, r0, stack-[13]\n\tsload\tr3, r3\n\tadd\t@CPI0_45[0], r0, r4\n\tst.1\t160, r4\n\tshr.s\t8, r3, r3\n\tand\t@CPI0_6[0], r3, r3\n\tst.1\t164, r3\n\tadd\t@CPI0_46[0], r0, r3\n\tst.1\t196, r3\n\tadd\t68, r0, r3\n\tst.1\t128, r3\n\tadd\t@CPI0_47[0], r0, r4\n\tst.1\t288, r4\n\tand\t@CPI0_6[0], r2, r2\n\tst.1\t292, r2\n\tst.1\t324, r0\n\tadd\t96, r0, r2\n\tst.1\t356, r2\n\tst.1\t388, r3\n\tld.1\t160, r2\n\tst.1\t420, r2\n\tld.1\t192, r2\n\tst.1\t452, r2\n\tld.1\t224, r2\n\tst.1\t484, r2\n\tst.1\t488, r0\n\tadd\t228, r0, r2\n\tst.1\t256, r2\n\tadd\t544, r0, r2\n\tst.1\t64, r2\n\tadd\t33, r0, r2\n\tsload\tr2, r2\n\tadd\t35, r0, r3\n\tsload\tr3, r3\n\tadd\t@CPI0_48[0], r0, r4\n\tst.1\t544, r4\n\tand\t@CPI0_6[0], r3, stack-[14]\n\tcontext.gas_left\tr3\n\tand\t@CPI0_6[0], r2, r2\n\tsub.s!\t4, r2, r4\n\tjump.ne\t@.BB0_230\n\tadd\tstack[@returndatasize], r0, r3\n\tsub.s!\t64, r3, r2\n\tadd\tr3, r0, r4\n\tadd.ge\t64, r0, r4\n\tjump\t@.BB0_236\n.BB0_154:\n\tcontext.get_context_u128\tr1\n\tsub!\tr1, r0, r1\n\tjump.ne\t@.BB0_565\n\tadd\t28, r0, r4\n\tsload\tr4, r1\n\tadd\tr1, r0, stack-[6]\n\tsub.s!\t@CPI0_51[0], r1, r2\n\tjump.gt\t@.BB0_210\n\tadd\tstack-[6], r0, r1\n\tshl.s\t5, r1, r2\n\tadd\t63, r2, r2\n\tand\t@CPI0_64[0], r2, r2\n\tsub.s!\t@CPI0_65[0], r2, r3\n\tjump.gt\t@.BB0_210\n\tadd\t128, r2, r1\n\tst.1\t64, r1\n\tadd\tstack-[6], r0, r2\n\tst.1\t128, r2\n\tst.1\t0, r4\n\tsub!\tr2, r0, r2\n\tjump.ne\t@.BB0_366\n.BB0_158:\n\tadd\tr1, r0, stack-[14]\n\tadd\t128, r0, r2\n\tnear_call\tr0, @abi_encode_array_struct_FuzzSelector_dyn, @DEFAULT_UNWIND\n\tjump\t@.BB0_184\n.BB0_159:\n\tcontext.get_context_u128\tr1\n\tsub!\tr1, r0, r1\n\tjump.ne\t@.BB0_565\n\tadd\t21, r0, r2\n\tsload\tr2, r1\n\tst.1\t128, r1\n\tst.1\t0, r2\n\tsub!\tr1, r0, r2\n\tjump.ne\t@.BB0_254\n\tjump\t@.BB0_117\n.BB0_162:\n\tcontext.get_context_u128\tr1\n\tsub!\tr1, r0, r1\n\tjump.ne\t@.BB0_565\n\tadd\t@CPI0_96[0], r0, r1\n\tst.1\t164, r1\n\tcontext.gas_left\tr1\n\tadd\t@CPI0_97[0], r0, r2\n\tst.1\t128, r2\n\tst.1\t132, r0\n\tadd\t96, r0, r2\n\tadd\tr2, r0, stack-[14]\n\tst.1\t196, r2\n\tadd\t@CPI0_0[0], r0, r2\n\tsub.s!\t@CPI0_0[0], r1, r3\n\tadd.ge\tr2, r0, r1\n\tshl.s\t192, r1, r1\n\tor\t@CPI0_98[0], r1, r1\n\tst.1\t228, r0\n\tadd\t32774, r0, r2\n\tnear_call\tr0, @__farcall, @DEFAULT_UNWIND\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_257\n\tld\tr1, r1\n\tsub!\tr1, r0, r2\n\tjump.ne\t@.BB0_335\n\tptr.add\tstack[@ptr_return_data], r0, r1\n\tadd\tstack[@returndatasize], r0, r2\n\tjump\t@.BB0_258\n.BB0_166:\n\tcontext.get_context_u128\tr1\n\tsub!\tr1, r0, r1\n\tjump.ne\t@.BB0_565\n\tadd\t26, r0, r4\n\tsload\tr4, r5\n\tsub.s!\t@CPI0_51[0], r5, r2\n\tjump.gt\t@.BB0_210\n\tshl.s\t5, r5, r2\n\tadd\t63, r2, r2\n\tand\t@CPI0_64[0], r2, r2\n\tsub.s!\t@CPI0_65[0], r2, r3\n\tjump.gt\t@.BB0_210\n\tadd\t128, r2, r1\n\tst.1\t64, r1\n\tst.1\t128, r5\n\tst.1\t0, r4\n\tsub!\tr5, r0, r2\n\tjump.eq\t@.BB0_183\n\tadd\t160, r0, r6\n\tadd\t@CPI0_74[0], r0, r7\n\tadd\tr0, r0, r8\n\tadd\tr5, r0, stack-[8]\n.BB0_171:\n\tsload\tr7, r1\n\tand!\t1, r1, r2\n\tshr.s\t1, r1, r3\n\tand\t127, r3, r4\n\tadd.ne\tr3, r0, r4\n\tsub.s!\t31, r4, r3\n\tadd\t0, r0, r3\n\tadd.gt\t1, r0, r3\n\txor\tr1, r3, r3\n\tand!\t1, r3, r3\n\tjump.ne\t@.BB0_471\n\tld.1\t64, r9\n\tst.1.inc\tr9, r4, r3\n\tsub!\tr2, r0, r2\n\tjump.eq\t@.BB0_177\n\tadd\tr3, r0, stack-[9]\n\tadd\tr4, r0, stack-[10]\n\tadd\tr9, r0, stack-[11]\n\tadd\tr8, r0, stack-[12]\n\tadd\tr6, r0, stack-[14]\n\tadd\tr7, r0, stack-[13]\n\tst.1\t0, r7\n\tcontext.gas_left\tr1\n\tsub.s!\t@CPI0_0[0], r1, r2\n\tadd.ge\t@CPI0_0[0], r0, r1\n\tshl.s\t192, r1, r1\n\tor\t@CPI0_67[0], r1, r1\n\tadd\t32784, r0, r2\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_565\n\tadd\tstack-[10], r0, r10\n\tsub!\tr10, r0, r2\n\tadd\tstack-[8], r0, r5\n\tadd\tstack-[14], r0, r6\n\tadd\tstack-[12], r0, r8\n\tjump.eq\t@.BB0_178\n\tld\tr1, r2\n\tadd\tr0, r0, r1\n\tadd\tstack-[13], r0, r7\n\tadd\tstack-[11], r0, r9\n\tadd\tstack-[9], r0, r11\n.BB0_176:\n\tadd\tr11, r1, r3\n\tsload\tr2, r4\n\tst.1\tr3, r4\n\tadd\t1, r2, r2\n\tadd\t32, r1, r1\n\tsub!\tr1, r10, r3\n\tjump.lt\t@.BB0_176\n\tjump\t@.BB0_179\n.BB0_177:\n\tsub.s\t256, r0, r2\n\tand\tr1, r2, r1\n\tst.1\tr3, r1\n\tsub!\tr4, r0, r1\n\tadd\t32, r0, r1\n\tadd.eq\t0, r0, r1\n\tjump\t@.BB0_179\n.BB0_178:\n\tadd\tr0, r0, r1\n\tadd\tstack-[13], r0, r7\n\tadd\tstack-[11], r0, r9\n.BB0_179:\n\tadd\t63, r1, r1\n\tsub.s\t32, r0, r2\n\tand\tr1, r2, r2\n\tadd\tr2, r9, r1\n\tsub!\tr1, r2, r2\n\tadd\t0, r0, r2\n\tadd.lt\t1, r0, r2\n\tsub.s!\t@CPI0_51[0], r1, r3\n\tjump.gt\t@.BB0_210\n\tand!\t1, r2, r2\n\tjump.ne\t@.BB0_210\n\tst.1\t64, r1\n\tst.1.inc\tr6, r9, r6\n\tadd\t1, r7, r7\n\tadd\t1, r8, r8\n\tsub!\tr8, r5, r1\n\tjump.lt\t@.BB0_171\n.BB0_182:\n\tld.1\t64, r1\n.BB0_183:\n\tadd\tr1, r0, stack-[14]\n\tadd\t128, r0, r2\n\tnear_call\tr0, @abi_encode_array_string_dyn, @DEFAULT_UNWIND\n.BB0_184:\n\tadd\tstack-[14], r0, r4\n\tjump\t@.BB0_328\n.BB0_185:\n\tcontext.get_context_u128\tr1\n\tsub!\tr1, r0, r1\n\tjump.ne\t@.BB0_565\n\tadd\t8, r0, r1\n\tsload\tr1, r1\n\tand!\t255, r1, r1\n\tjump.ne\t@.BB0_195\n\tadd\t@CPI0_60[0], r0, r1\n\tst.1\t128, r1\n\tadd\t@CPI0_5[0], r0, r1\n\tst.1\t132, r1\n\tadd\t@CPI0_61[0], r0, r1\n\tst.1\t164, r1\n\tadd\t@CPI0_0[0], r0, r1\n\tcontext.gas_left\tr2\n\tsub.s!\t@CPI0_0[0], r2, r3\n\tadd.ge\tr1, r0, r2\n\tshl.s\t192, r2, r1\n\tor\t@CPI0_62[0], r1, r1\n\tadd\t@CPI0_5[0], r0, r2\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tadd\tr1, r0, r3\n\tshr.s\t96, r3, r3\n\tand\t@CPI0_0[0], r3, r3\n\tsub.s!\t32, r3, r4\n\tadd\tr3, r0, r4\n\tadd.ge\t32, r0, r4\n\tand\t31, r4, r5\n\tshr.s!\t5, r4, r6\n\tjump.eq\t@.BB0_190\n\tadd\tr0, r0, r7\n.BB0_189:\n\tshl.s\t5, r7, r8\n\tptr.add\tr1, r8, r9\n\tld\tr9, r9\n\tadd\t128, r8, r8\n\tst.1\tr8, r9\n\tadd\t1, r7, r7\n\tsub!\tr7, r6, r8\n\tjump.lt\t@.BB0_189\n.BB0_190:\n\tsub!\tr5, r0, r7\n\tjump.eq\t@.BB0_192\n\tshl.s\t5, r6, r6\n\tptr.add\tr1, r6, r7\n\tshl.s\t3, r5, r5\n\tadd\t128, r6, r6\n\tld.1\tr6, r8\n\tshl\tr8, r5, r8\n\tshr\tr8, r5, r8\n\tld\tr7, r7\n\tsub\t256, r5, r5\n\tshr\tr7, r5, r7\n\tshl\tr7, r5, r5\n\tor\tr5, r8, r5\n\tst.1\tr6, r5\n.BB0_192:\n\tadd\tr3, r0, stack[@returndatasize]\n\tptr.add\tr1, r0, stack[@ptr_return_data]\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_337\n\tadd\t31, r4, r1\n\tand\t96, r1, r1\n\tor\t128, r1, r7\n\tst.1\t64, r7\n\tsub.s!\t32, r3, r1\n\tjump.lt\t@.BB0_565\n\tld.1\t128, r1\n\tsub!\tr1, r0, r1\n\tadd\t0, r0, r1\n\tadd.ne\t1, r0, r1\n.BB0_195:\n\tsub!\tr1, r0, r1\n\tadd\t0, r0, r1\n\tadd.ne\t1, r0, r1\n\tst.1\tr7, r1\n\tshl.s\t64, r7, r1\n\tor\t@CPI0_63[0], r1, r1\n\tret.ok.to_label\tr1, @DEFAULT_FAR_RETURN\n.BB0_196:\n\tcontext.get_context_u128\tr1\n\tsub!\tr1, r0, r1\n\tjump.ne\t@.BB0_565\n\tadd\t32, r0, r1\n\tjump\t@.BB0_202\n.BB0_198:\n\tcontext.get_context_u128\tr1\n\tsub!\tr1, r0, r1\n\tjump.ne\t@.BB0_565\n\tadd\t35, r0, r1\n\tjump\t@.BB0_202\n.BB0_200:\n\tcontext.get_context_u128\tr1\n\tsub!\tr1, r0, r1\n\tjump.ne\t@.BB0_565\n\tadd\t33, r0, r1\n.BB0_202:\n\tsload\tr1, r1\n.BB0_203:\n\tand\t@CPI0_6[0], r1, r1\n\tst.1\t128, r1\n\tadd\t@CPI0_43[0], r0, r1\n\tret.ok.to_label\tr1, @DEFAULT_FAR_RETURN\n.BB0_204:\n\tcontext.get_context_u128\tr1\n\tsub!\tr1, r0, r1\n\tjump.ne\t@.BB0_565\n\tadd\t23, r0, r2\n\tsload\tr2, r1\n\tst.1\t128, r1\n\tst.1\t0, r2\n\tsub!\tr1, r0, r2\n\tjump.ne\t@.BB0_320\n\tjump\t@.BB0_117\n.BB0_207:\n\tcontext.get_context_u128\tr1\n\tsub!\tr1, r0, r1\n\tjump.ne\t@.BB0_565\n\tadd\t30, r0, r1\n\tsload\tr1, r2\n\tadd\tr2, r0, stack-[1]\n\tsub.s!\t@CPI0_51[0], r2, r2\n\tjump.gt\t@.BB0_210\n\tadd\tstack-[1], r0, r2\n\tshl.s\t5, r2, r2\n\tadd\t63, r2, r2\n\tand\t@CPI0_64[0], r2, r2\n\tsub.s!\t@CPI0_65[0], r2, r3\n\tjump.le\t@.BB0_352\n.BB0_210:\n\tadd\t@CPI0_79[0], r0, r1\n\tst.1\t0, r1\n\tadd\t65, r0, r1\n\tst.1\t4, r1\n\tadd\t@CPI0_54[0], r0, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.BB0_211:\n\tcontext.get_context_u128\tr1\n\tsub!\tr1, r0, r1\n\tjump.ne\t@.BB0_565\n\tadd\t24, r0, r2\n\tsload\tr2, r1\n\tst.1\t128, r1\n\tst.1\t0, r2\n\tsub!\tr1, r0, r2\n\tjump.ne\t@.BB0_323\n.BB0_117:\n\tadd\t32, r0, r2\n\tjump\t@.BB0_327\n.BB0_214:\n\tadd\t@CPI0_0[0], r0, r4\n\tsub.s!\t@CPI0_0[0], r1, r3\n\tadd.ge\tr4, r0, r1\n\tshl.s\t192, r1, r1\n\tor\t@CPI0_81[0], r1, r1\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tadd\tr1, r0, r3\n\tshr.s\t96, r3, r3\n\tand\t@CPI0_0[0], r3, r3\n\tsub.s!\t32, r3, r4\n\tadd\tr3, r0, r4\n\tadd.ge\t32, r0, r4\n\tand\t31, r4, r5\n\tshr.s!\t5, r4, r6\n\tjump.eq\t@.BB0_217\n\tadd\tr0, r0, r7\n.BB0_216:\n\tshl.s\t5, r7, r8\n\tptr.add\tr1, r8, r9\n\tld\tr9, r9\n\tadd\t128, r8, r8\n\tst.1\tr8, r9\n\tadd\t1, r7, r7\n\tsub!\tr7, r6, r8\n\tjump.lt\t@.BB0_216\n.BB0_217:\n\tsub!\tr5, r0, r7\n\tjump.eq\t@.BB0_219\n\tshl.s\t5, r6, r6\n\tptr.add\tr1, r6, r7\n\tshl.s\t3, r5, r5\n\tadd\t128, r6, r6\n\tld.1\tr6, r8\n\tshl\tr8, r5, r8\n\tshr\tr8, r5, r8\n\tld\tr7, r7\n\tsub\t256, r5, r5\n\tshr\tr7, r5, r7\n\tshl\tr7, r5, r5\n\tor\tr5, r8, r5\n\tst.1\tr6, r5\n.BB0_219:\n\tadd\tr3, r0, stack[@returndatasize]\n\tptr.add\tr1, r0, stack[@ptr_return_data]\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_342\n.BB0_220:\n\tadd\t31, r4, r1\n\tand\t96, r1, r1\n\tor\t128, r1, r1\n\tst.1\t64, r1\n\tsub.s!\t32, r3, r1\n\tjump.lt\t@.BB0_565\n\tld.1\t128, r1\n\tadd\tr1, r0, stack-[12]\n\tadd\t@CPI0_7[0], r0, r1\n\tst.2\t0, r1\n\tadd\t@CPI0_5[0], r0, r1\n\tst.2\t4, r1\n\tadd\t@CPI0_0[0], r0, r1\n\tcontext.gas_left\tr2\n\tsub.s!\t@CPI0_0[0], r2, r3\n\tadd.ge\tr1, r0, r2\n\tshl.s\t192, r2, r1\n\tor\t@CPI0_8[0], r1, r1\n\tadd\t32770, r0, r2\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_756\n\tld\tr1, r1\n\tsub!\tr1, r0, r1\n\tjump.eq\t@.BB0_565\n\tld.1\t64, r4\n\tadd\t@CPI0_56[0], r0, r1\n\tst.1.inc\tr4, r1, r1\n\tadd\tr1, r0, stack-[10]\n\tadd\t4, r4, r1\n\tadd\tstack-[12], r0, r2\n\tst.1\tr1, r2\n\tadd\t36, r4, r1\n\tadd\tr1, r0, stack-[12]\n\tst.1\tr1, r0\n\tadd\t@CPI0_0[0], r0, r1\n\tcontext.gas_left\tr2\n\tsub.s!\t@CPI0_0[0], r2, r3\n\tadd.ge\tr1, r0, r2\n\tsub.s!\t@CPI0_0[0], r4, r3\n\tadd\tr4, r0, stack-[11]\n\tadd.lt\tr4, r0, r1\n\tshl.s\t64, r1, r1\n\tshl.s\t192, r2, r2\n\tor\tr2, r1, r1\n\tor\t@CPI0_57[0], r1, r1\n\tadd\t@CPI0_5[0], r0, r2\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tadd\tr1, r0, r3\n\tshr.s\t96, r3, r3\n\tand\t@CPI0_0[0], r3, stack[@returndatasize]\n\tand\t@CPI0_0[0], r3, r3\n\tptr.add\tr1, r0, stack[@ptr_return_data]\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_493\n\tadd\tstack-[11], r0, r1\n\tsub.s!\t@CPI0_51[0], r1, r1\n\tjump.gt\t@.BB0_210\n\tadd\tstack-[11], r0, r5\n\tst.1\t64, r5\n\tadd\t31, r0, r1\n\tadd\tr1, r0, stack-[9]\n\tsload\tr1, r1\n\tadd\t@CPI0_45[0], r0, r2\n\tadd\tstack-[10], r0, r4\n\tst.1\tr4, r2\n\tshr.s\t8, r1, r1\n\tand\t@CPI0_6[0], r1, r2\n\tadd\tstack-[12], r0, r1\n\tst.1\tr1, r2\n\tadd\t68, r5, r1\n\tadd\t@CPI0_46[0], r0, r4\n\tst.1\tr1, r4\n\tadd\t68, r0, r1\n\tst.1\tr5, r1\n\tsub.s!\t@CPI0_65[0], r5, r1\n\tjump.gt\t@.BB0_210\n\tadd\tstack-[11], r0, r1\n\tadd\t128, r1, r4\n\tst.1\t64, r4\n\tadd\t@CPI0_82[0], r0, r1\n\tadd\tr4, r0, stack-[12]\n\tst.1\tr4, r1\n\tcontext.gas_left\tr1\n\tsub.s!\t4, r2, r4\n\tjump.ne\t@.BB0_556\n\tsub.s!\t32, r3, r1\n\tadd\tr3, r0, r4\n\tadd.ge\t32, r0, r4\n\tjump\t@.BB0_562\n.BB0_230:\n\tadd\t@CPI0_0[0], r0, r1\n\tsub.s!\t@CPI0_0[0], r3, r4\n\tadd.ge\tr1, r0, r3\n\tshl.s\t192, r3, r1\n\tor\t@CPI0_49[0], r1, r1\n\tnear_call\tr0, @__farcall, @DEFAULT_UNWIND\n\tadd\tr1, r0, r3\n\tshr.s\t96, r3, r3\n\tand\t@CPI0_0[0], r3, r3\n\tsub.s!\t64, r3, r4\n\tadd\tr3, r0, r4\n\tadd.ge\t64, r0, r4\n\tand\t31, r4, r5\n\tshr.s!\t5, r4, r6\n\tjump.eq\t@.BB0_233\n\tadd\tr0, r0, r7\n.BB0_232:\n\tshl.s\t5, r7, r8\n\tptr.add\tr1, r8, r9\n\tld\tr9, r9\n\tadd\t544, r8, r8\n\tst.1\tr8, r9\n\tadd\t1, r7, r7\n\tsub!\tr7, r6, r8\n\tjump.lt\t@.BB0_232\n.BB0_233:\n\tsub!\tr5, r0, r7\n\tjump.eq\t@.BB0_235\n\tshl.s\t5, r6, r6\n\tptr.add\tr1, r6, r7\n\tshl.s\t3, r5, r5\n\tadd\t544, r6, r6\n\tld.1\tr6, r8\n\tshl\tr8, r5, r8\n\tshr\tr8, r5, r8\n\tld\tr7, r7\n\tsub\t256, r5, r5\n\tshr\tr7, r5, r7\n\tshl\tr7, r5, r5\n\tor\tr5, r8, r5\n\tst.1\tr6, r5\n.BB0_235:\n\tadd\tr3, r0, stack[@returndatasize]\n\tptr.add\tr1, r0, stack[@ptr_return_data]\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_347\n.BB0_236:\n\tadd\t31, r4, r2\n\tand\t224, r2, r4\n\tadd\t544, r4, r2\n\tst.1\t64, r2\n\tsub.s!\t64, r3, r5\n\tjump.lt\t@.BB0_565\n\tadd\t608, r4, r5\n\tst.1\t64, r5\n\tld.1\t544, r5\n\tsub.s!\t@CPI0_6[0], r5, r6\n\tjump.gt\t@.BB0_565\n\tst.1\tr2, r5\n\tld.1\t576, r6\n\tsub.s!\t@CPI0_6[0], r6, r5\n\tjump.gt\t@.BB0_565\n\tadd\t576, r4, r5\n\tst.1\tr5, r6\n\tadd\tstack-[13], r0, r4\n\tsload\tr4, r7\n\tld.1\t64, r11\n\tadd\t@CPI0_50[0], r0, r4\n\tst.1\tr11, r4\n\tadd\t4, r11, r4\n\tadd\t128, r0, r6\n\tst.1\tr4, r6\n\tadd\t132, r11, r6\n\tld.1\t256, r4\n\tst.1\tr6, r4\n\tadd\t164, r11, r6\n\tshr.s\t8, r7, r7\n\tand\t@CPI0_6[0], r7, r10\n\tsub!\tr4, r0, r7\n\tjump.eq\t@.BB0_242\n\tadd\tr0, r0, r7\n.BB0_241:\n\tadd\tr7, r6, r8\n\tadd\t288, r7, r9\n\tld.1\tr9, r9\n\tst.1\tr8, r9\n\tadd\t32, r7, r7\n\tsub!\tr7, r4, r8\n\tjump.lt\t@.BB0_241\n.BB0_242:\n\tadd\tr4, r6, r6\n\tst.1\tr6, r0\n\tld.1\tr2, r2\n\tand\t@CPI0_6[0], r2, r2\n\tadd\t36, r11, r6\n\tst.1\tr6, r2\n\tld.1\tr5, r2\n\tadd\t100, r11, r5\n\tst.1\tr5, r10\n\tadd\t68, r11, r5\n\tand\t@CPI0_6[0], r2, r2\n\tst.1\tr5, r2\n\tcontext.gas_left\tr6\n\tadd\tstack-[14], r0, r2\n\tsub.s!\t4, r2, r5\n\tadd\tr10, r0, stack-[13]\n\tjump.eq\t@.BB0_245\n\tadd\t31, r4, r1\n\tsub.s\t32, r0, r3\n\tand\tr1, r3, r1\n\tadd\t@CPI0_0[0], r0, r3\n\tsub.s!\t@CPI0_0[0], r11, r4\n\tadd\tr11, r0, stack-[12]\n\tadd\tr3, r0, r4\n\tadd.lt\tr11, r0, r4\n\tshl.s\t64, r4, r4\n\tadd\t164, r1, r1\n\tsub.s!\t@CPI0_0[0], r1, r5\n\tadd.ge\tr3, r0, r1\n\tshl.s\t96, r1, r1\n\tor\tr1, r4, r1\n\tsub.s!\t@CPI0_0[0], r6, r4\n\tadd.ge\tr3, r0, r6\n\tshl.s\t192, r6, r3\n\tor\tr3, r1, r1\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tadd\tr1, r0, r3\n\tshr.s\t96, r3, r3\n\tand\t@CPI0_0[0], r3, stack[@returndatasize]\n\tand\t@CPI0_0[0], r3, r3\n\tptr.add\tr1, r0, stack[@ptr_return_data]\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_498\n\tadd\tstack-[12], r0, r11\n.BB0_245:\n\tand\t31, r3, r2\n\tshr.s!\t5, r3, r4\n\tjump.eq\t@.BB0_248\n\tadd\tr0, r0, r5\n.BB0_247:\n\tshl.s\t5, r5, r6\n\tadd\tr11, r6, r7\n\tptr.add\tr1, r6, r6\n\tld\tr6, r6\n\tst.1\tr7, r6\n\tadd\t1, r5, r5\n\tsub!\tr5, r4, r6\n\tjump.lt\t@.BB0_247\n.BB0_248:\n\tsub!\tr2, r0, r5\n\tjump.eq\t@.BB0_250\n\tshl.s\t5, r4, r4\n\tptr.add\tr1, r4, r1\n\tadd\tr11, r4, r4\n\tshl.s\t3, r2, r2\n\tld.1\tr4, r5\n\tshl\tr5, r2, r5\n\tshr\tr5, r2, r5\n\tld\tr1, r1\n\tsub\t256, r2, r2\n\tshr\tr1, r2, r1\n\tshl\tr1, r2, r1\n\tor\tr1, r5, r1\n\tst.1\tr4, r1\n.BB0_250:\n\tadd\t31, r3, r1\n\tsub.s\t32, r0, r2\n\tand\tr1, r2, r2\n\tadd\tr11, r0, r5\n\tadd\tr2, r11, r1\n\tsub!\tr1, r2, r2\n\tadd\t0, r0, r2\n\tadd.lt\t1, r0, r2\n\tsub.s!\t@CPI0_51[0], r1, r4\n\tjump.gt\t@.BB0_210\n\tand!\t1, r2, r2\n\tjump.ne\t@.BB0_210\n\tst.1\t64, r1\n\tadd\tr5, r0, r1\n\tadd\tr3, r1, r2\n\tnear_call\tr0, @abi_decode_struct_PackedUserOperation_fromMemory, @DEFAULT_UNWIND\n\tadd\t36, r0, r2\n\tsload\tr2, r2\n\tadd\tr2, r0, stack-[12]\n\tld.1\t64, r4\n\tadd\t@CPI0_52[0], r0, r2\n\tst.1\tr4, r2\n\tadd\t4, r4, r2\n\tadd\t32, r0, r3\n\tst.1\tr2, r3\n\tadd\tr4, r0, stack-[14]\n\tadd\t36, r4, r2\n\tadd\tr1, r0, stack-[11]\n\tnear_call\tr0, @abi_encode_struct_PackedUserOperation, @DEFAULT_UNWIND\n\tcontext.gas_left\tr3\n\tadd\tstack-[12], r0, r2\n\tand\t@CPI0_6[0], r2, r2\n\tsub.s!\t4, r2, r4\n\tjump.ne\t@.BB0_513\n\tadd\tstack[@returndatasize], r0, r4\n\tsub.s!\t32, r4, r1\n\tadd.ge\t32, r0, r4\n\tadd\tstack-[14], r0, r10\n\tjump\t@.BB0_519\n.BB0_254:\n\tadd\t160, r0, r4\n\tadd\t@CPI0_44[0], r0, r2\n\tadd\tr0, r0, r3\n.BB0_255:\n\tadd\tr4, r0, r5\n\tsload\tr2, r4\n\tand\t@CPI0_6[0], r4, r4\n\tst.1.inc\tr5, r4, r4\n\tadd\t1, r2, r2\n\tadd\t1, r3, r3\n\tsub!\tr3, r1, r6\n\tjump.lt\t@.BB0_255\n\tjump\t@.BB0_326\n.BB0_257:\n\tptr.add\tr1, r0, stack[@ptr_return_data]\n\tadd\tr1, r0, r2\n\tshr.s\t96, r2, r2\n\tand\t@CPI0_0[0], r2, stack[@returndatasize]\n\tand\t@CPI0_0[0], r2, r2\n.BB0_258:\n\tld.1\t64, r3\n\tand\t31, r2, r4\n\tshr.s!\t5, r2, r5\n\tjump.eq\t@.BB0_261\n\tadd\tr0, r0, r6\n.BB0_260:\n\tshl.s\t5, r6, r7\n\tadd\tr3, r7, r8\n\tptr.add\tr1, r7, r7\n\tld\tr7, r7\n\tst.1\tr8, r7\n\tadd\t1, r6, r6\n\tsub!\tr6, r5, r7\n\tjump.lt\t@.BB0_260\n.BB0_261:\n\tsub!\tr4, r0, r6\n\tjump.eq\t@.BB0_263\n.BB0_262:\n\tshl.s\t5, r5, r5\n\tptr.add\tr1, r5, r1\n\tadd\tr3, r5, r5\n\tshl.s\t3, r4, r4\n\tld.1\tr5, r6\n\tshl\tr6, r4, r6\n\tshr\tr6, r4, r6\n\tld\tr1, r1\n\tsub\t256, r4, r4\n\tshr\tr1, r4, r1\n\tshl\tr1, r4, r1\n\tor\tr1, r6, r1\n\tst.1\tr5, r1\n.BB0_263:\n\tadd\t@CPI0_0[0], r0, r1\n\tsub.s!\t@CPI0_0[0], r3, r4\n\tadd.ge\tr1, r0, r3\n\tsub.s!\t@CPI0_0[0], r2, r4\n\tadd.ge\tr1, r0, r2\n\tshl.s\t96, r2, r1\n\tshl.s\t64, r3, r2\n\tor\tr2, r1, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.BB0_264:\n\tadd\tr7, r0, stack-[11]\n\tadd\t@CPI0_0[0], r0, r1\n\tsub.s!\t@CPI0_0[0], r3, r4\n\tadd.ge\tr1, r0, r3\n\tshl.s\t192, r3, r1\n\tor\t@CPI0_49[0], r1, r1\n\tnear_call\tr0, @__farcall, @DEFAULT_UNWIND\n\tadd\tr1, r0, r3\n\tshr.s\t96, r3, r3\n\tand\t@CPI0_0[0], r3, r3\n\tsub.s!\t64, r3, r4\n\tadd\tr3, r0, r4\n\tadd.ge\t64, r0, r4\n\tand\t31, r4, r5\n\tshr.s!\t5, r4, r6\n\tjump.eq\t@.BB0_267\n\tadd\tr0, r0, r7\n.BB0_266:\n\tshl.s\t5, r7, r8\n\tptr.add\tr1, r8, r9\n\tld\tr9, r9\n\tadd\t544, r8, r8\n\tst.1\tr8, r9\n\tadd\t1, r7, r7\n\tsub!\tr7, r6, r8\n\tjump.lt\t@.BB0_266\n.BB0_267:\n\tsub!\tr5, r0, r7\n\tjump.eq\t@.BB0_269\n\tshl.s\t5, r6, r6\n\tptr.add\tr1, r6, r7\n\tshl.s\t3, r5, r5\n\tadd\t544, r6, r6\n\tld.1\tr6, r8\n\tshl\tr8, r5, r8\n\tshr\tr8, r5, r8\n\tld\tr7, r7\n\tsub\t256, r5, r5\n\tshr\tr7, r5, r7\n\tshl\tr7, r5, r5\n\tor\tr5, r8, r5\n\tst.1\tr6, r5\n.BB0_269:\n\tadd\tr3, r0, stack[@returndatasize]\n\tptr.add\tr1, r0, stack[@ptr_return_data]\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_356\n\tadd\tstack-[11], r0, r7\n.BB0_271:\n\tadd\t31, r4, r2\n\tand\t224, r2, r4\n\tadd\t544, r4, r2\n\tst.1\t64, r2\n\tsub.s!\t64, r3, r5\n\tjump.lt\t@.BB0_565\n\tadd\t608, r4, r5\n\tst.1\t64, r5\n\tld.1\t544, r5\n\tsub.s!\t@CPI0_6[0], r5, r6\n\tjump.gt\t@.BB0_565\n\tst.1\tr2, r5\n\tld.1\t576, r6\n\tsub.s!\t@CPI0_6[0], r6, r5\n\tjump.gt\t@.BB0_565\n\tadd\t576, r4, r5\n\tst.1\tr5, r6\n\tadd\tstack-[14], r0, r4\n\tsload\tr4, r6\n\tld.1\t64, r11\n\tadd\t@CPI0_50[0], r0, r4\n\tst.1\tr11, r4\n\tadd\t4, r11, r4\n\tst.1\tr4, r7\n\tadd\t132, r11, r7\n\tld.1\t256, r4\n\tst.1\tr7, r4\n\tadd\t164, r11, r7\n\tshr.s\t8, r6, r6\n\tand\t@CPI0_6[0], r6, r6\n\tsub!\tr4, r0, r8\n\tjump.eq\t@.BB0_277\n\tadd\tr0, r0, r8\n.BB0_276:\n\tadd\tr8, r7, r9\n\tadd\t288, r8, r10\n\tld.1\tr10, r10\n\tst.1\tr9, r10\n\tadd\t32, r8, r8\n\tsub!\tr8, r4, r9\n\tjump.lt\t@.BB0_276\n.BB0_277:\n\tadd\tr4, r7, r7\n\tst.1\tr7, r0\n\tld.1\tr2, r2\n\tand\t@CPI0_6[0], r2, r2\n\tadd\t36, r11, r7\n\tst.1\tr7, r2\n\tld.1\tr5, r2\n\tadd\t100, r11, r5\n\tst.1\tr5, r6\n\tadd\t68, r11, r5\n\tand\t@CPI0_6[0], r2, r2\n\tst.1\tr5, r2\n\tcontext.gas_left\tr6\n\tadd\tstack-[13], r0, r2\n\tsub.s!\t4, r2, r5\n\tjump.eq\t@.BB0_280\n\tadd\t31, r4, r1\n\tsub.s\t32, r0, r3\n\tand\tr1, r3, r1\n\tadd\t@CPI0_0[0], r0, r3\n\tsub.s!\t@CPI0_0[0], r11, r4\n\tadd\tr11, r0, stack-[11]\n\tadd\tr3, r0, r4\n\tadd.lt\tr11, r0, r4\n\tshl.s\t64, r4, r4\n\tadd\t164, r1, r1\n\tsub.s!\t@CPI0_0[0], r1, r5\n\tadd.ge\tr3, r0, r1\n\tshl.s\t96, r1, r1\n\tor\tr1, r4, r1\n\tsub.s!\t@CPI0_0[0], r6, r4\n\tadd.ge\tr3, r0, r6\n\tshl.s\t192, r6, r3\n\tor\tr3, r1, r1\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tadd\tr1, r0, r3\n\tshr.s\t96, r3, r3\n\tand\t@CPI0_0[0], r3, stack[@returndatasize]\n\tand\t@CPI0_0[0], r3, r3\n\tptr.add\tr1, r0, stack[@ptr_return_data]\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_503\n\tadd\tstack-[11], r0, r11\n.BB0_280:\n\tand\t31, r3, r2\n\tshr.s!\t5, r3, r4\n\tjump.eq\t@.BB0_283\n\tadd\tr0, r0, r5\n.BB0_282:\n\tshl.s\t5, r5, r6\n\tadd\tr11, r6, r7\n\tptr.add\tr1, r6, r6\n\tld\tr6, r6\n\tst.1\tr7, r6\n\tadd\t1, r5, r5\n\tsub!\tr5, r4, r6\n\tjump.lt\t@.BB0_282\n.BB0_283:\n\tsub!\tr2, r0, r5\n\tjump.eq\t@.BB0_285\n\tshl.s\t5, r4, r4\n\tptr.add\tr1, r4, r1\n\tadd\tr11, r4, r4\n\tshl.s\t3, r2, r2\n\tld.1\tr4, r5\n\tshl\tr5, r2, r5\n\tshr\tr5, r2, r5\n\tld\tr1, r1\n\tsub\t256, r2, r2\n\tshr\tr1, r2, r1\n\tshl\tr1, r2, r1\n\tor\tr1, r5, r1\n\tst.1\tr4, r1\n.BB0_285:\n\tadd\t31, r3, r1\n\tsub.s\t32, r0, r2\n\tand\tr1, r2, r2\n\tadd\tr11, r0, r5\n\tadd\tr2, r11, r1\n\tsub!\tr1, r2, r2\n\tadd\t0, r0, r2\n\tadd.lt\t1, r0, r2\n\tsub.s!\t@CPI0_51[0], r1, r4\n\tjump.gt\t@.BB0_210\n\tand!\t1, r2, r2\n\tjump.ne\t@.BB0_210\n\tst.1\t64, r1\n\tadd\tr5, r0, r1\n\tadd\tr3, r1, r2\n\tnear_call\tr0, @abi_decode_struct_PackedUserOperation_fromMemory, @DEFAULT_UNWIND\n\tadd\t36, r0, r2\n\tsload\tr2, r2\n\tadd\tr2, r0, stack-[11]\n\tld.1\t64, r4\n\tadd\t@CPI0_52[0], r0, r2\n\tst.1\tr4, r2\n\tadd\t4, r4, r2\n\tadd\t32, r0, r3\n\tst.1\tr2, r3\n\tadd\tr4, r0, stack-[13]\n\tadd\t36, r4, r2\n\tadd\tr1, r0, stack-[10]\n\tnear_call\tr0, @abi_encode_struct_PackedUserOperation, @DEFAULT_UNWIND\n\tcontext.gas_left\tr6\n\tadd\tstack-[11], r0, r2\n\tand\t@CPI0_6[0], r2, r2\n\tsub.s!\t4, r2, r3\n\tadd\tr2, r0, stack-[11]\n\tjump.ne\t@.BB0_526\n\tadd\tstack[@returndatasize], r0, r4\n\tsub.s!\t32, r4, r1\n\tadd.ge\t32, r0, r4\n\tadd\tstack-[13], r0, r10\n\tjump\t@.BB0_532\n.BB0_289:\n\tadd\t@CPI0_0[0], r0, r1\n\tsub.s!\t@CPI0_0[0], r3, r4\n\tadd.ge\tr1, r0, r3\n\tshl.s\t192, r3, r1\n\tor\t@CPI0_49[0], r1, r1\n\tnear_call\tr0, @__farcall, @DEFAULT_UNWIND\n\tadd\tr1, r0, r3\n\tshr.s\t96, r3, r3\n\tand\t@CPI0_0[0], r3, r3\n\tsub.s!\t64, r3, r4\n\tadd\tr3, r0, r4\n\tadd.ge\t64, r0, r4\n\tand\t31, r4, r5\n\tshr.s!\t5, r4, r6\n\tjump.eq\t@.BB0_292\n\tadd\tr0, r0, r7\n.BB0_291:\n\tshl.s\t5, r7, r8\n\tptr.add\tr1, r8, r9\n\tld\tr9, r9\n\tadd\t544, r8, r8\n\tst.1\tr8, r9\n\tadd\t1, r7, r7\n\tsub!\tr7, r6, r8\n\tjump.lt\t@.BB0_291\n.BB0_292:\n\tsub!\tr5, r0, r7\n\tjump.eq\t@.BB0_294\n\tshl.s\t5, r6, r6\n\tptr.add\tr1, r6, r7\n\tshl.s\t3, r5, r5\n\tadd\t544, r6, r6\n\tld.1\tr6, r8\n\tshl\tr8, r5, r8\n\tshr\tr8, r5, r8\n\tld\tr7, r7\n\tsub\t256, r5, r5\n\tshr\tr7, r5, r7\n\tshl\tr7, r5, r5\n\tor\tr5, r8, r5\n\tst.1\tr6, r5\n.BB0_294:\n\tadd\tr3, r0, stack[@returndatasize]\n\tptr.add\tr1, r0, stack[@ptr_return_data]\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_361\n.BB0_295:\n\tadd\t31, r4, r2\n\tand\t224, r2, r4\n\tadd\t544, r4, r2\n\tst.1\t64, r2\n\tsub.s!\t64, r3, r5\n\tjump.lt\t@.BB0_565\n\tadd\t608, r4, r5\n\tst.1\t64, r5\n\tld.1\t544, r5\n\tsub.s!\t@CPI0_6[0], r5, r6\n\tjump.gt\t@.BB0_565\n\tst.1\tr2, r5\n\tld.1\t576, r6\n\tsub.s!\t@CPI0_6[0], r6, r5\n\tjump.gt\t@.BB0_565\n\tadd\t576, r4, r5\n\tst.1\tr5, r6\n\tadd\tstack-[13], r0, r4\n\tsload\tr4, r7\n\tld.1\t64, r11\n\tadd\t@CPI0_50[0], r0, r4\n\tst.1\tr11, r4\n\tadd\t4, r11, r4\n\tadd\t128, r0, r6\n\tst.1\tr4, r6\n\tadd\t132, r11, r6\n\tld.1\t256, r4\n\tst.1\tr6, r4\n\tadd\t164, r11, r6\n\tshr.s\t8, r7, r7\n\tand\t@CPI0_6[0], r7, r10\n\tsub!\tr4, r0, r7\n\tjump.eq\t@.BB0_301\n\tadd\tr0, r0, r7\n.BB0_300:\n\tadd\tr7, r6, r8\n\tadd\t288, r7, r9\n\tld.1\tr9, r9\n\tst.1\tr8, r9\n\tadd\t32, r7, r7\n\tsub!\tr7, r4, r8\n\tjump.lt\t@.BB0_300\n.BB0_301:\n\tadd\tr4, r6, r6\n\tst.1\tr6, r0\n\tld.1\tr2, r2\n\tand\t@CPI0_6[0], r2, r2\n\tadd\t36, r11, r6\n\tst.1\tr6, r2\n\tld.1\tr5, r2\n\tadd\t100, r11, r5\n\tst.1\tr5, r10\n\tadd\t68, r11, r5\n\tand\t@CPI0_6[0], r2, r2\n\tst.1\tr5, r2\n\tcontext.gas_left\tr6\n\tadd\tstack-[14], r0, r2\n\tsub.s!\t4, r2, r5\n\tadd\tr10, r0, stack-[10]\n\tjump.eq\t@.BB0_304\n\tadd\t31, r4, r1\n\tsub.s\t32, r0, r3\n\tand\tr1, r3, r1\n\tadd\t@CPI0_0[0], r0, r3\n\tsub.s!\t@CPI0_0[0], r11, r4\n\tadd\tr11, r0, stack-[9]\n\tadd\tr3, r0, r4\n\tadd.lt\tr11, r0, r4\n\tshl.s\t64, r4, r4\n\tadd\t164, r1, r1\n\tsub.s!\t@CPI0_0[0], r1, r5\n\tadd.ge\tr3, r0, r1\n\tshl.s\t96, r1, r1\n\tor\tr1, r4, r1\n\tsub.s!\t@CPI0_0[0], r6, r4\n\tadd.ge\tr3, r0, r6\n\tshl.s\t192, r6, r3\n\tor\tr3, r1, r1\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tadd\tr1, r0, r3\n\tshr.s\t96, r3, r3\n\tand\t@CPI0_0[0], r3, stack[@returndatasize]\n\tand\t@CPI0_0[0], r3, r3\n\tptr.add\tr1, r0, stack[@ptr_return_data]\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_508\n\tadd\tstack-[9], r0, r11\n.BB0_304:\n\tand\t31, r3, r2\n\tshr.s!\t5, r3, r4\n\tjump.eq\t@.BB0_307\n\tadd\tr0, r0, r5\n.BB0_306:\n\tshl.s\t5, r5, r6\n\tadd\tr11, r6, r7\n\tptr.add\tr1, r6, r6\n\tld\tr6, r6\n\tst.1\tr7, r6\n\tadd\t1, r5, r5\n\tsub!\tr5, r4, r6\n\tjump.lt\t@.BB0_306\n.BB0_307:\n\tsub!\tr2, r0, r5\n\tjump.eq\t@.BB0_309\n\tshl.s\t5, r4, r4\n\tptr.add\tr1, r4, r1\n\tadd\tr11, r4, r4\n\tshl.s\t3, r2, r2\n\tld.1\tr4, r5\n\tshl\tr5, r2, r5\n\tshr\tr5, r2, r5\n\tld\tr1, r1\n\tsub\t256, r2, r2\n\tshr\tr1, r2, r1\n\tshl\tr1, r2, r1\n\tor\tr1, r5, r1\n\tst.1\tr4, r1\n.BB0_309:\n\tadd\t31, r3, r1\n\tsub.s\t32, r0, stack-[9]\n\tand\tstack-[9], r1, r2\n\tadd\tr11, r0, r5\n\tadd\tr2, r11, r1\n\tsub!\tr1, r2, r2\n\tadd\t0, r0, r2\n\tadd.lt\t1, r0, r2\n\tsub.s!\t@CPI0_51[0], r1, r4\n\tjump.gt\t@.BB0_210\n\tand!\t1, r2, r2\n\tjump.ne\t@.BB0_210\n\tst.1\t64, r1\n\tadd\tr5, r0, r1\n\tadd\tr3, r1, r2\n\tnear_call\tr0, @abi_decode_struct_PackedUserOperation_fromMemory, @DEFAULT_UNWIND\n\tadd\t@CPI0_7[0], r0, r2\n\tst.2\t0, r2\n\tadd\t@CPI0_5[0], r0, r2\n\tst.2\t4, r2\n\tadd\tr1, r0, stack-[14]\n\tadd\t@CPI0_0[0], r0, r1\n\tcontext.gas_left\tr2\n\tsub.s!\t@CPI0_0[0], r2, r3\n\tadd.ge\tr1, r0, r2\n\tshl.s\t192, r2, r1\n\tor\t@CPI0_8[0], r1, r1\n\tadd\t32770, r0, r2\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_756\n\tld\tr1, r1\n\tsub!\tr1, r0, r1\n\tjump.eq\t@.BB0_565\n\tld.1\t64, r4\n\tadd\t36, r4, r1\n\tadd\t@CPI0_92[0], r0, r2\n\tst.1\tr1, r2\n\tadd\t@CPI0_93[0], r0, r1\n\tst.1.inc\tr4, r1, r1\n\tadd\tr1, r0, stack-[8]\n\tadd\t4, r4, r1\n\tadd\tstack-[10], r0, r2\n\tst.1\tr1, r2\n\tadd\t@CPI0_0[0], r0, r1\n\tcontext.gas_left\tr2\n\tsub.s!\t@CPI0_0[0], r2, r3\n\tadd.ge\tr1, r0, r2\n\tsub.s!\t@CPI0_0[0], r4, r3\n\tadd\tr4, r0, stack-[10]\n\tadd.lt\tr4, r0, r1\n\tshl.s\t64, r1, r1\n\tshl.s\t192, r2, r2\n\tor\tr2, r1, r1\n\tor\t@CPI0_57[0], r1, r1\n\tadd\t@CPI0_5[0], r0, r2\n\tnear_call\tr0, @__farcall, @DEFAULT_UNWIND\n\tadd\tr1, r0, r3\n\tshr.s\t96, r3, r3\n\tand\t@CPI0_0[0], r3, stack[@returndatasize]\n\tand\t@CPI0_0[0], r3, r3\n\tptr.add\tr1, r0, stack[@ptr_return_data]\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_566\n\tadd\tstack-[10], r0, r1\n\tsub.s!\t@CPI0_51[0], r1, r1\n\tjump.gt\t@.BB0_210\n\tadd\tstack-[10], r0, r1\n\tst.1\t64, r1\n\tsub.s!\t@CPI0_69[0], r1, r1\n\tjump.gt\t@.BB0_210\n\tadd\tstack-[10], r0, r2\n\tadd\t64, r2, r1\n\tst.1\t64, r1\n\tadd\t1, r0, r1\n\tst.1\tr2, r1\n\tld.1\t64, r1\n\tsub.s!\t@CPI0_94[0], r1, r2\n\tjump.gt\t@.BB0_210\n\tadd\t288, r1, r2\n\tst.1\t64, r2\n\tadd\t256, r1, r2\n\tadd\tstack-[12], r0, r3\n\tst.1\tr2, r3\n\tadd\t224, r1, r2\n\tst.1\tr2, r3\n\tadd\t96, r1, r2\n\tst.1\tr2, r3\n\tadd\t64, r1, r2\n\tst.1\tr2, r3\n\tadd\t192, r1, r2\n\tst.1\tr2, r0\n\tadd\t160, r1, r2\n\tst.1\tr2, r0\n\tadd\t128, r1, r2\n\tst.1\tr2, r0\n\tadd\t32, r1, r2\n\tst.1\tr2, r0\n\tst.1\tr1, r0\n\tadd\tstack-[8], r0, r2\n\tst.1\tr2, r1\n\tadd\tstack-[10], r0, r1\n\tld.1\tr1, r1\n\tsub!\tr1, r0, r1\n\tjump.eq\t@.BB0_319\n\tadd\tstack-[8], r0, r1\n\tadd\tstack-[14], r0, r2\n\tst.1\tr1, r2\n\tadd\tstack-[10], r0, r1\n\tld.1\tr1, r1\n\tsub!\tr1, r0, r1\n\tjump.ne\t@.BB0_669\n.BB0_319:\n\tadd\t@CPI0_79[0], r0, r1\n\tst.1\t0, r1\n\tadd\t50, r0, r1\n\tst.1\t4, r1\n\tadd\t@CPI0_54[0], r0, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.BB0_320:\n\tadd\t160, r0, r4\n\tadd\t@CPI0_76[0], r0, r2\n\tadd\tr0, r0, r3\n.BB0_321:\n\tadd\tr4, r0, r5\n\tsload\tr2, r4\n\tand\t@CPI0_6[0], r4, r4\n\tst.1.inc\tr5, r4, r4\n\tadd\t1, r2, r2\n\tadd\t1, r3, r3\n\tsub!\tr3, r1, r6\n\tjump.lt\t@.BB0_321\n\tjump\t@.BB0_326\n.BB0_323:\n\tadd\t160, r0, r4\n\tadd\t@CPI0_77[0], r0, r2\n\tadd\tr0, r0, r3\n.BB0_324:\n\tadd\tr4, r0, r5\n\tsload\tr2, r4\n\tand\t@CPI0_6[0], r4, r4\n\tst.1.inc\tr5, r4, r4\n\tadd\t1, r2, r2\n\tadd\t1, r3, r3\n\tsub!\tr3, r1, r6\n\tjump.lt\t@.BB0_324\n.BB0_326:\n\tsub.s\t96, r5, r2\n.BB0_327:\n\tadd\t128, r0, r1\n\tadd\tr1, r0, stack-[14]\n\tnear_call\tr0, @finalize_allocation, @DEFAULT_UNWIND\n\tld.1\t64, r1\n\tadd\tr1, r0, stack-[13]\n\tadd\tstack-[14], r0, r2\n\tnear_call\tr0, @abi_encode_array_address_dyn, @DEFAULT_UNWIND\n\tadd\tstack-[13], r0, r4\n.BB0_328:\n\tsub\tr1, r4, r1\n.BB0_329:\n\tadd\t@CPI0_0[0], r0, r2\n\tsub.s!\t@CPI0_0[0], r1, r3\n\tadd.ge\tr2, r0, r1\n\tsub.s!\t@CPI0_0[0], r4, r3\n\tadd.ge\tr2, r0, r4\n\tshl.s\t64, r4, r2\n\tshl.s\t96, r1, r1\n\tor\tr1, r2, r1\n\tret.ok.to_label\tr1, @DEFAULT_FAR_RETURN\n.BB0_330:\n\tld.1\t64, r2\n\tand\t31, r3, r4\n\tshr.s!\t5, r3, r5\n\tjump.eq\t@.BB0_333\n\tadd\tr0, r0, r6\n.BB0_332:\n\tshl.s\t5, r6, r7\n\tadd\tr2, r7, r8\n\tptr.add\tr1, r7, r7\n\tld\tr7, r7\n\tst.1\tr8, r7\n\tadd\t1, r6, r6\n\tsub!\tr6, r5, r7\n\tjump.lt\t@.BB0_332\n.BB0_333:\n\tsub!\tr4, r0, r6\n\tjump.eq\t@.BB0_68\n\tjump\t@.BB0_67\n.BB0_335:\n\tand\t@CPI0_6[0], r1, r2\n\tadd\t32, r0, r1\n\tsload\tr1, r3\n\tand\t@CPI0_11[0], r3, r3\n\tor\tr3, r2, r3\n\tsstore\tr1, r3\n\tadd\t@CPI0_99[0], r0, r1\n\tld.1\t64, r10\n\tst.1.inc\tr10, r1, r1\n\tadd\tr1, r0, stack-[13]\n\tcontext.gas_left\tr1\n\tsub.s!\t4, r2, r3\n\tjump.ne\t@.BB0_393\n\tadd\tstack[@returndatasize], r0, r3\n\tsub.s!\t64, r3, r1\n\tadd\tr3, r0, r4\n\tadd.ge\t64, r0, r4\n\tjump\t@.BB0_399\n.BB0_337:\n\tld.1\t64, r2\n\tand\t31, r3, r4\n\tshr.s!\t5, r3, r5\n\tjump.eq\t@.BB0_340\n\tadd\tr0, r0, r6\n.BB0_339:\n\tshl.s\t5, r6, r7\n\tadd\tr2, r7, r8\n\tptr.add\tr1, r7, r7\n\tld\tr7, r7\n\tst.1\tr8, r7\n\tadd\t1, r6, r6\n\tsub!\tr6, r5, r7\n\tjump.lt\t@.BB0_339\n.BB0_340:\n\tsub!\tr4, r0, r6\n\tjump.eq\t@.BB0_68\n\tjump\t@.BB0_67\n.BB0_342:\n\tld.1\t64, r2\n\tand\t31, r3, r4\n\tshr.s!\t5, r3, r5\n\tjump.eq\t@.BB0_345\n\tadd\tr0, r0, r6\n.BB0_344:\n\tshl.s\t5, r6, r7\n\tadd\tr2, r7, r8\n\tptr.add\tr1, r7, r7\n\tld\tr7, r7\n\tst.1\tr8, r7\n\tadd\t1, r6, r6\n\tsub!\tr6, r5, r7\n\tjump.lt\t@.BB0_344\n.BB0_345:\n\tsub!\tr4, r0, r6\n\tjump.eq\t@.BB0_68\n\tjump\t@.BB0_67\n.BB0_347:\n\tld.1\t64, r2\n\tand\t31, r3, r4\n\tshr.s!\t5, r3, r5\n\tjump.eq\t@.BB0_350\n\tadd\tr0, r0, r6\n.BB0_349:\n\tshl.s\t5, r6, r7\n\tadd\tr2, r7, r8\n\tptr.add\tr1, r7, r7\n\tld\tr7, r7\n\tst.1\tr8, r7\n\tadd\t1, r6, r6\n\tsub!\tr6, r5, r7\n\tjump.lt\t@.BB0_349\n.BB0_350:\n\tsub!\tr4, r0, r6\n\tjump.eq\t@.BB0_68\n\tjump\t@.BB0_67\n.BB0_352:\n\tadd\t128, r2, r3\n\tst.1\t64, r3\n\tadd\tstack-[1], r0, r2\n\tst.1\t128, r2\n\tst.1\t0, r1\n\tsub!\tr2, r0, r1\n\tjump.ne\t@.BB0_451\n.BB0_353:\n\tadd\t32, r0, r1\n\tst.1.inc\tr3, r1, r2\n\tld.1\t128, r1\n\tst.1\tr2, r1\n\tadd\tr3, r0, stack-[14]\n\tadd\t64, r3, r2\n\tshl.s\t5, r1, r3\n\tadd\tr2, r3, r5\n\tadd\tr1, r0, stack-[13]\n\tsub!\tr1, r0, r3\n\tjump.ne\t@.BB0_480\n\tadd\tr5, r0, r11\n.BB0_355:\n\tadd\tstack-[14], r0, r4\n\tsub\tr11, r4, r1\n\tjump\t@.BB0_329\n.BB0_356:\n\tld.1\t64, r2\n\tand\t31, r3, r4\n\tshr.s!\t5, r3, r5\n\tjump.eq\t@.BB0_359\n\tadd\tr0, r0, r6\n.BB0_358:\n\tshl.s\t5, r6, r7\n\tadd\tr2, r7, r8\n\tptr.add\tr1, r7, r7\n\tld\tr7, r7\n\tst.1\tr8, r7\n\tadd\t1, r6, r6\n\tsub!\tr6, r5, r7\n\tjump.lt\t@.BB0_358\n.BB0_359:\n\tsub!\tr4, r0, r6\n\tjump.eq\t@.BB0_68\n\tjump\t@.BB0_67\n.BB0_361:\n\tld.1\t64, r2\n\tand\t31, r3, r4\n\tshr.s!\t5, r3, r5\n\tjump.eq\t@.BB0_364\n\tadd\tr0, r0, r6\n.BB0_363:\n\tshl.s\t5, r6, r7\n\tadd\tr2, r7, r8\n\tptr.add\tr1, r7, r7\n\tld\tr7, r7\n\tst.1\tr8, r7\n\tadd\t1, r6, r6\n\tsub!\tr6, r5, r7\n\tjump.lt\t@.BB0_363\n.BB0_364:\n\tsub!\tr4, r0, r6\n\tjump.eq\t@.BB0_68\n\tjump\t@.BB0_67\n.BB0_366:\n\tadd\t160, r0, r4\n\tadd\t@CPI0_68[0], r0, r5\n\tadd\t32784, r0, stack-[5]\n\tadd\tr0, r0, r6\n.BB0_367:\n\tsub.s!\t@CPI0_69[0], r1, r2\n\tjump.gt\t@.BB0_210\n\tadd\tr6, r0, stack-[11]\n\tadd\tr4, r0, stack-[13]\n\tadd\t64, r1, r2\n\tst.1\t64, r2\n\tsload\tr5, r2\n\tand\t@CPI0_6[0], r2, r2\n\tadd\tr1, r0, stack-[14]\n\tst.1.inc\tr1, r2, r1\n\tadd\tr1, r0, stack-[7]\n\tadd\tr5, r0, stack-[12]\n\tadd\t1, r5, r1\n\tsload\tr1, r3\n\tld.1\t64, r2\n\tadd\tr2, r0, stack-[10]\n\tadd\tr3, r0, stack-[8]\n\tst.1.inc\tr2, r3, r2\n\tadd\tr2, r0, stack-[9]\n\tst.1\t0, r1\n\tcontext.gas_left\tr1\n\tsub.s!\t@CPI0_0[0], r1, r2\n\tadd.ge\t@CPI0_0[0], r0, r1\n\tshl.s\t192, r1, r1\n\tor\t@CPI0_67[0], r1, r1\n\tadd\tstack-[5], r0, r2\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_565\n\tld\tr1, r2\n\tadd\tstack-[8], r0, r9\n\tsub.s!\t8, r9, r1\n\tjump.lt\t@.BB0_386\n\tadd\tr0, r0, r1\n\tadd\tstack-[11], r0, r6\n\tadd\tstack-[10], r0, r7\n\tadd\tstack-[9], r0, r8\n.BB0_371:\n\tadd\t224, r8, r3\n\tsload\tr2, r4\n\tand\t@CPI0_70[0], r4, r5\n\tst.1\tr3, r5\n\tshl.s\t32, r4, r3\n\tand\t@CPI0_70[0], r3, r3\n\tadd\t192, r8, r5\n\tst.1\tr5, r3\n\tshl.s\t64, r4, r3\n\tand\t@CPI0_70[0], r3, r3\n\tadd\t160, r8, r5\n\tst.1\tr5, r3\n\tshl.s\t96, r4, r3\n\tand\t@CPI0_70[0], r3, r3\n\tadd\t128, r8, r5\n\tst.1\tr5, r3\n\tshl.s\t128, r4, r3\n\tand\t@CPI0_70[0], r3, r3\n\tadd\t96, r8, r5\n\tst.1\tr5, r3\n\tshl.s\t160, r4, r3\n\tand\t@CPI0_70[0], r3, r3\n\tadd\t64, r8, r5\n\tst.1\tr5, r3\n\tshl.s\t192, r4, r3\n\tand\t@CPI0_70[0], r3, r3\n\tadd\t32, r8, r5\n\tst.1\tr5, r3\n\tshl.s\t224, r4, r3\n\tst.1\tr8, r3\n\tadd\t1, r2, r2\n\tadd\t256, r8, r8\n\tadd\t8, r1, r1\n\tor\t7, r1, r3\n\tsub!\tr3, r9, r3\n\tjump.lt\t@.BB0_371\n\tsload\tr2, r2\n\tsub!\tr1, r9, r3\n\tjump.ge\t@.BB0_374\n.BB0_373:\n\tshl.s\t224, r2, r3\n\tst.1.inc\tr8, r3, r8\n\tor\t1, r1, r1\n.BB0_374:\n\tadd\tstack-[13], r0, r4\n\tadd\tstack-[12], r0, r5\n\tsub!\tr1, r9, r3\n\tjump.ge\t@.BB0_376\n\tshl.s\t192, r2, r3\n\tand\t@CPI0_70[0], r3, r3\n\tst.1.inc\tr8, r3, r8\n\tadd\t1, r1, r1\n\tsub!\tr1, r9, r3\n\tjump.lt\t@.BB0_388\n.BB0_377:\n\tsub!\tr1, r9, r3\n\tjump.ge\t@.BB0_378\n.BB0_389:\n\tshl.s\t128, r2, r3\n\tand\t@CPI0_70[0], r3, r3\n\tst.1.inc\tr8, r3, r8\n\tadd\t1, r1, r1\n\tsub!\tr1, r9, r3\n\tjump.lt\t@.BB0_390\n.BB0_379:\n\tsub!\tr1, r9, r3\n\tjump.ge\t@.BB0_380\n.BB0_391:\n\tshl.s\t64, r2, r3\n\tand\t@CPI0_70[0], r3, r3\n\tst.1.inc\tr8, r3, r8\n\tadd\t1, r1, r1\n\tsub!\tr1, r9, r3\n\tjump.lt\t@.BB0_392\n.BB0_381:\n\tsub!\tr1, r9, r1\n\tjump.ge\t@.BB0_383\n.BB0_382:\n\tand\t@CPI0_70[0], r2, r1\n\tst.1.inc\tr8, r1, r8\n.BB0_383:\n\tsub\tr8, r7, r1\n\tadd\t31, r1, r1\n\tsub.s\t32, r0, r2\n\tand\tr1, r2, r2\n\tadd\tr2, r7, r1\n\tsub!\tr1, r2, r2\n\tadd\t0, r0, r2\n\tadd.lt\t1, r0, r2\n\tsub.s!\t@CPI0_51[0], r1, r3\n\tadd\tstack-[14], r0, r3\n\tjump.gt\t@.BB0_210\n\tand!\t1, r2, r2\n\tjump.ne\t@.BB0_210\n\tst.1\t64, r1\n\tadd\tstack-[7], r0, r1\n\tst.1\tr1, r7\n\tst.1.inc\tr4, r3, r4\n\tadd\t2, r5, r5\n\tld.1\t64, r1\n\tadd\t1, r6, r6\n\tsub.s!\tstack-[6], r6, r2\n\tjump.lt\t@.BB0_367\n\tjump\t@.BB0_158\n.BB0_376:\n\tsub!\tr1, r9, r3\n\tjump.ge\t@.BB0_377\n.BB0_388:\n\tshl.s\t160, r2, r3\n\tand\t@CPI0_70[0], r3, r3\n\tst.1.inc\tr8, r3, r8\n\tadd\t1, r1, r1\n\tsub!\tr1, r9, r3\n\tjump.lt\t@.BB0_389\n.BB0_378:\n\tsub!\tr1, r9, r3\n\tjump.ge\t@.BB0_379\n.BB0_390:\n\tshl.s\t96, r2, r3\n\tand\t@CPI0_70[0], r3, r3\n\tst.1.inc\tr8, r3, r8\n\tadd\t1, r1, r1\n\tsub!\tr1, r9, r3\n\tjump.lt\t@.BB0_391\n.BB0_380:\n\tsub!\tr1, r9, r3\n\tjump.ge\t@.BB0_381\n.BB0_392:\n\tshl.s\t32, r2, r3\n\tand\t@CPI0_70[0], r3, r3\n\tst.1.inc\tr8, r3, r8\n\tadd\t1, r1, r1\n\tsub!\tr1, r9, r1\n\tjump.lt\t@.BB0_382\n\tjump\t@.BB0_383\n.BB0_386:\n\tadd\tr0, r0, r1\n\tadd\tstack-[11], r0, r6\n\tadd\tstack-[10], r0, r7\n\tadd\tstack-[9], r0, r8\n\tsload\tr2, r2\n\tsub!\tr1, r9, r3\n\tjump.lt\t@.BB0_373\n\tjump\t@.BB0_374\n.BB0_393:\n\tadd\t@CPI0_0[0], r0, r3\n\tsub.s!\t@CPI0_0[0], r1, r4\n\tadd.ge\tr3, r0, r1\n\tsub.s!\t@CPI0_0[0], r10, r4\n\tadd.lt\tr10, r0, r3\n\tshl.s\t64, r3, r3\n\tshl.s\t192, r1, r1\n\tor\tr1, r3, r1\n\tor\t@CPI0_59[0], r1, r1\n\tadd\tr10, r0, stack-[12]\n\tnear_call\tr0, @__farcall, @DEFAULT_UNWIND\n\tadd\tstack-[12], r0, r10\n\tadd\tr1, r0, r3\n\tshr.s\t96, r3, r3\n\tand\t@CPI0_0[0], r3, r3\n\tsub.s!\t64, r3, r4\n\tadd\tr3, r0, r4\n\tadd.ge\t64, r0, r4\n\tand\t31, r4, r5\n\tshr.s!\t5, r4, r6\n\tjump.eq\t@.BB0_396\n\tadd\tr0, r0, r7\n.BB0_395:\n\tshl.s\t5, r7, r8\n\tadd\tr10, r8, r9\n\tptr.add\tr1, r8, r8\n\tld\tr8, r8\n\tst.1\tr9, r8\n\tadd\t1, r7, r7\n\tsub!\tr7, r6, r8\n\tjump.lt\t@.BB0_395\n.BB0_396:\n\tsub!\tr5, r0, r7\n\tjump.eq\t@.BB0_398\n\tshl.s\t5, r6, r6\n\tptr.add\tr1, r6, r7\n\tadd\tr10, r6, r6\n\tshl.s\t3, r5, r5\n\tld.1\tr6, r8\n\tshl\tr8, r5, r8\n\tshr\tr8, r5, r8\n\tld\tr7, r7\n\tsub\t256, r5, r5\n\tshr\tr7, r5, r7\n\tshl\tr7, r5, r5\n\tor\tr5, r8, r5\n\tst.1\tr6, r5\n.BB0_398:\n\tadd\tr3, r0, stack[@returndatasize]\n\tptr.add\tr1, r0, stack[@ptr_return_data]\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_488\n.BB0_399:\n\tadd\t31, r4, r1\n\tand\t224, r1, r2\n\tadd\tr10, r0, r5\n\tadd\tr2, r10, r1\n\tsub!\tr1, r2, r2\n\tadd\t0, r0, r2\n\tadd.lt\t1, r0, r2\n\tsub.s!\t@CPI0_51[0], r1, r4\n\tjump.gt\t@.BB0_210\n\tand!\t1, r2, r2\n\tjump.ne\t@.BB0_210\n\tst.1\t64, r1\n\tsub.s!\t64, r3, r2\n\tjump.lt\t@.BB0_565\n\tld.1\tr5, r2\n\tsub.s!\t@CPI0_6[0], r2, r3\n\tjump.gt\t@.BB0_565\n\tadd\tstack-[13], r0, r3\n\tld.1\tr3, r3\n\tsub.s!\t@CPI0_100[0], r3, r4\n\tjump.ge\t@.BB0_565\n\tshl.s\t8, r3, r3\n\tand\t@CPI0_101[0], r3, r3\n\tadd\t31, r0, r4\n\tsload\tr4, r5\n\tand\t@CPI0_102[0], r5, r5\n\tor\tr5, r3, r3\n\tsstore\tr4, r3\n\tadd\t33, r0, r4\n\tsload\tr4, r3\n\tand\t@CPI0_11[0], r3, r3\n\tor\tr3, r2, r2\n\tadd\tr4, r0, stack-[13]\n\tsstore\tr4, r2\n\tsub.s!\t@CPI0_103[0], r1, r2\n\tjump.gt\t@.BB0_210\n\tadd\t36, r1, r2\n\tadd\t@CPI0_104[0], r0, r3\n\tst.1\tr2, r3\n\tadd\t68, r1, r2\n\tcontext.gas_left\tr3\n\tadd\tstack-[14], r0, r4\n\tst.1\tr2, r4\n\tadd\t@CPI0_97[0], r0, r2\n\tst.1\tr1, r2\n\tadd\t100, r1, r2\n\tst.1\tr2, r0\n\tadd\t4, r1, r2\n\tst.1\tr2, r0\n\tadd\t@CPI0_0[0], r0, r2\n\tsub.s!\t@CPI0_0[0], r3, r4\n\tadd.ge\tr2, r0, r3\n\tsub.s!\t@CPI0_0[0], r1, r4\n\tadd.ge\tr2, r0, r1\n\tshl.s\t64, r1, r1\n\tshl.s\t192, r3, r2\n\tor\tr1, r2, r1\n\tor\t@CPI0_105[0], r1, r1\n\tadd\t32774, r0, r2\n\tnear_call\tr0, @__farcall, @DEFAULT_UNWIND\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_571\n\tld\tr1, r1\n\tsub!\tr1, r0, r2\n\tjump.ne\t@.BB0_584\n\tptr.add\tstack[@ptr_return_data], r0, r1\n\tadd\tstack[@returndatasize], r0, r2\n\tjump\t@.BB0_572\n.BB0_408:\n\tld.1\t64, r2\n\tand\t31, r3, r4\n\tshr.s!\t5, r3, r5\n\tjump.eq\t@.BB0_411\n\tadd\tr0, r0, r6\n.BB0_410:\n\tshl.s\t5, r6, r7\n\tadd\tr2, r7, r8\n\tptr.add\tr1, r7, r7\n\tld\tr7, r7\n\tst.1\tr8, r7\n\tadd\t1, r6, r6\n\tsub!\tr6, r5, r7\n\tjump.lt\t@.BB0_410\n.BB0_411:\n\tsub!\tr4, r0, r6\n\tjump.eq\t@.BB0_68\n\tjump\t@.BB0_67\n.BB0_413:\n\tadd\t160, r0, stack-[12]\n\tadd\t@CPI0_75[0], r0, r7\n\tadd\tr0, r0, stack-[11]\n.BB0_414:\n\tsub.s!\t@CPI0_69[0], r15, r1\n\tjump.gt\t@.BB0_210\n\tadd\t64, r15, r6\n\tst.1\t64, r6\n\tsload\tr7, r1\n\tand!\t1, r1, r2\n\tshr.s\t1, r1, r3\n\tand\t127, r3, r4\n\tadd.ne\tr3, r0, r4\n\tsub.s!\t31, r4, r3\n\tadd\t0, r0, r3\n\tadd.gt\t1, r0, r3\n\txor\tr1, r3, r3\n\tand!\t1, r3, r3\n\tjump.ne\t@.BB0_471\n\tst.1\tr6, r4\n\tsub!\tr2, r0, r2\n\tadd\tr15, r0, stack-[14]\n\tadd\tr7, r0, stack-[13]\n\tjump.eq\t@.BB0_421\n\tadd\tr4, r0, stack-[9]\n\tadd\tr6, r0, stack-[10]\n\tst.1\t0, r7\n\tcontext.gas_left\tr1\n\tsub.s!\t@CPI0_0[0], r1, r2\n\tadd.ge\t@CPI0_0[0], r0, r1\n\tshl.s\t192, r1, r1\n\tor\t@CPI0_67[0], r1, r1\n\tadd\t32784, r0, r2\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_565\n\tadd\tstack-[9], r0, r8\n\tsub!\tr8, r0, r2\n\tjump.eq\t@.BB0_422\n\tadd\tstack-[14], r0, r15\n\tadd\t96, r15, r2\n\tld\tr1, r3\n\tadd\tr0, r0, r1\n\tadd\tstack-[13], r0, r7\n\tadd\tstack-[10], r0, r6\n.BB0_420:\n\tadd\tr2, r1, r4\n\tsload\tr3, r5\n\tst.1\tr4, r5\n\tadd\t1, r3, r3\n\tadd\t32, r1, r1\n\tsub!\tr1, r8, r4\n\tjump.lt\t@.BB0_420\n\tjump\t@.BB0_423\n.BB0_421:\n\tsub.s\t256, r0, r2\n\tand\tr1, r2, r1\n\tadd\t96, r15, r2\n\tst.1\tr2, r1\n\tsub!\tr4, r0, r1\n\tadd\t32, r0, r1\n\tadd.eq\t0, r0, r1\n\tjump\t@.BB0_423\n.BB0_422:\n\tadd\tr0, r0, r1\n\tadd\tstack-[14], r0, r15\n\tadd\tstack-[13], r0, r7\n\tadd\tstack-[10], r0, r6\n.BB0_423:\n\tadd\t63, r1, r1\n\tsub.s\t32, r0, stack-[10]\n\tand\tstack-[10], r1, r2\n\tadd\tr2, r6, r1\n\tsub!\tr1, r2, r2\n\tadd\t0, r0, r2\n\tadd.lt\t1, r0, r2\n\tsub.s!\t@CPI0_51[0], r1, r3\n\tjump.gt\t@.BB0_210\n\tand!\t1, r2, r2\n\tjump.ne\t@.BB0_210\n\tst.1\t64, r1\n\tst.1.inc\tr15, r6, r1\n\tadd\tr1, r0, stack-[6]\n\tadd\t1, r7, r1\n\tsload\tr1, r3\n\tld.1\t64, r2\n\tadd\tr2, r0, stack-[9]\n\tadd\tr3, r0, stack-[7]\n\tst.1.inc\tr2, r3, r2\n\tadd\tr2, r0, stack-[8]\n\tst.1\t0, r1\n\tcontext.gas_left\tr1\n\tsub.s!\t@CPI0_0[0], r1, r2\n\tadd.ge\t@CPI0_0[0], r0, r1\n\tshl.s\t192, r1, r1\n\tor\t@CPI0_67[0], r1, r1\n\tadd\t32784, r0, r2\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_565\n\tld\tr1, r2\n\tadd\tstack-[7], r0, r9\n\tsub.s!\t8, r9, r1\n\tjump.lt\t@.BB0_445\n\tadd\tr0, r0, r1\n\tadd\tstack-[14], r0, r6\n\tadd\tstack-[13], r0, r7\n\tadd\tstack-[8], r0, r8\n.BB0_428:\n\tadd\t224, r8, r3\n\tsload\tr2, r4\n\tand\t@CPI0_70[0], r4, r5\n\tst.1\tr3, r5\n\tshl.s\t32, r4, r3\n\tand\t@CPI0_70[0], r3, r3\n\tadd\t192, r8, r5\n\tst.1\tr5, r3\n\tshl.s\t64, r4, r3\n\tand\t@CPI0_70[0], r3, r3\n\tadd\t160, r8, r5\n\tst.1\tr5, r3\n\tshl.s\t96, r4, r3\n\tand\t@CPI0_70[0], r3, r3\n\tadd\t128, r8, r5\n\tst.1\tr5, r3\n\tshl.s\t128, r4, r3\n\tand\t@CPI0_70[0], r3, r3\n\tadd\t96, r8, r5\n\tst.1\tr5, r3\n\tshl.s\t160, r4, r3\n\tand\t@CPI0_70[0], r3, r3\n\tadd\t64, r8, r5\n\tst.1\tr5, r3\n\tshl.s\t192, r4, r3\n\tand\t@CPI0_70[0], r3, r3\n\tadd\t32, r8, r5\n\tst.1\tr5, r3\n\tshl.s\t224, r4, r3\n\tst.1\tr8, r3\n\tadd\t1, r2, r2\n\tadd\t256, r8, r8\n\tadd\t8, r1, r1\n\tor\t7, r1, r3\n\tsub!\tr3, r9, r3\n\tjump.lt\t@.BB0_428\n\tsload\tr2, r2\n\tsub!\tr1, r9, r3\n\tjump.ge\t@.BB0_431\n.BB0_430:\n\tshl.s\t224, r2, r3\n\tst.1.inc\tr8, r3, r8\n\tor\t1, r1, r1\n.BB0_431:\n\tadd\tstack-[9], r0, r4\n\tsub!\tr1, r9, r3\n\tjump.ge\t@.BB0_433\n\tshl.s\t192, r2, r3\n\tand\t@CPI0_70[0], r3, r3\n\tst.1.inc\tr8, r3, r8\n\tadd\t1, r1, r1\n\tsub!\tr1, r9, r3\n\tjump.lt\t@.BB0_447\n.BB0_434:\n\tsub!\tr1, r9, r3\n\tjump.ge\t@.BB0_435\n.BB0_448:\n\tshl.s\t128, r2, r3\n\tand\t@CPI0_70[0], r3, r3\n\tst.1.inc\tr8, r3, r8\n\tadd\t1, r1, r1\n\tsub!\tr1, r9, r3\n\tjump.lt\t@.BB0_449\n.BB0_436:\n\tsub!\tr1, r9, r3\n\tjump.ge\t@.BB0_437\n.BB0_450:\n\tshl.s\t64, r2, r3\n\tand\t@CPI0_70[0], r3, r3\n\tst.1.inc\tr8, r3, r8\n\tadd\t1, r1, r1\n\tsub!\tr1, r9, r3\n\tjump.lt\t@.BB0_438\n\tjump\t@.BB0_439\n.BB0_433:\n\tsub!\tr1, r9, r3\n\tjump.ge\t@.BB0_434\n.BB0_447:\n\tshl.s\t160, r2, r3\n\tand\t@CPI0_70[0], r3, r3\n\tst.1.inc\tr8, r3, r8\n\tadd\t1, r1, r1\n\tsub!\tr1, r9, r3\n\tjump.lt\t@.BB0_448\n.BB0_435:\n\tsub!\tr1, r9, r3\n\tjump.ge\t@.BB0_436\n.BB0_449:\n\tshl.s\t96, r2, r3\n\tand\t@CPI0_70[0], r3, r3\n\tst.1.inc\tr8, r3, r8\n\tadd\t1, r1, r1\n\tsub!\tr1, r9, r3\n\tjump.lt\t@.BB0_450\n.BB0_437:\n\tsub!\tr1, r9, r3\n\tjump.ge\t@.BB0_439\n.BB0_438:\n\tshl.s\t32, r2, r3\n\tand\t@CPI0_70[0], r3, r3\n\tst.1.inc\tr8, r3, r8\n\tadd\t1, r1, r1\n.BB0_439:\n\tadd\tstack-[10], r0, r3\n\tsub!\tr1, r9, r1\n\tjump.ge\t@.BB0_442\n\tand\t@CPI0_70[0], r2, r1\n\tst.1.inc\tr8, r1, r8\n.BB0_442:\n\tsub\tr8, r4, r1\n\tadd\t31, r1, r1\n\tand\tr1, r3, r2\n\tadd\tr2, r4, r1\n\tsub!\tr1, r2, r2\n\tadd\t0, r0, r2\n\tadd.lt\t1, r0, r2\n\tsub.s!\t@CPI0_51[0], r1, r3\n\tjump.gt\t@.BB0_210\n\tand!\t1, r2, r2\n\tjump.ne\t@.BB0_210\n\tst.1\t64, r1\n\tadd\tstack-[6], r0, r1\n\tst.1\tr1, r4\n\tadd\tstack-[12], r0, r1\n\tst.1.inc\tr1, r6, r1\n\tadd\tr1, r0, stack-[12]\n\tadd\t2, r7, r7\n\tld.1\t64, r15\n\tadd\tstack-[11], r0, r2\n\tadd\t1, r2, r2\n\tadd\tr2, r0, stack-[11]\n\tsub.s!\tstack-[5], r2, r1\n\tjump.lt\t@.BB0_414\n\tjump\t@.BB0_108\n.BB0_445:\n\tadd\tr0, r0, r1\n\tadd\tstack-[14], r0, r6\n\tadd\tstack-[13], r0, r7\n\tadd\tstack-[8], r0, r8\n\tsload\tr2, r2\n\tsub!\tr1, r9, r3\n\tjump.lt\t@.BB0_430\n\tjump\t@.BB0_431\n.BB0_451:\n\tadd\t160, r0, stack-[4]\n\tadd\t@CPI0_78[0], r0, stack-[5]\n\tadd\tr0, r0, stack-[3]\n\tjump\t@.BB0_453\n.BB0_452:\n\tadd\tstack-[2], r0, r1\n\tadd\tstack-[6], r0, r2\n\tst.1\tr1, r2\n\tadd\tstack-[14], r0, r1\n\tadd\tstack-[4], r0, r2\n\tst.1.inc\tr2, r1, r2\n\tadd\tr2, r0, stack-[4]\n\tadd\tstack-[5], r0, r1\n\tadd\t2, r1, stack-[5]\n\tld.1\t64, r3\n\tadd\tstack-[3], r0, r2\n\tadd\t1, r2, r2\n\tadd\tr2, r0, stack-[3]\n\tsub.s!\tstack-[1], r2, r1\n\tjump.ge\t@.BB0_353\n.BB0_453:\n\tadd\tr3, r0, stack-[14]\n\tsub.s!\t@CPI0_69[0], r3, r1\n\tjump.gt\t@.BB0_210\n\tadd\tstack-[14], r0, r2\n\tadd\t64, r2, r1\n\tst.1\t64, r1\n\tadd\tstack-[5], r0, r3\n\tsload\tr3, r1\n\tand\t@CPI0_6[0], r1, r1\n\tst.1.inc\tr2, r1, r1\n\tadd\tr1, r0, stack-[2]\n\tor\t1, r3, r1\n\tsload\tr1, r5\n\tsub.s!\t@CPI0_51[0], r5, r2\n\tjump.gt\t@.BB0_210\n\tshl.s\t5, r5, r2\n\tadd\t63, r2, r2\n\tand\t@CPI0_64[0], r2, r2\n\tld.1\t64, r3\n\tadd\tr3, r2, r2\n\tadd\tr3, r0, stack-[6]\n\tsub!\tr2, r3, r3\n\tadd\t0, r0, r3\n\tadd.lt\t1, r0, r3\n\tsub.s!\t@CPI0_51[0], r2, r4\n\tjump.gt\t@.BB0_210\n\tand!\t1, r3, r3\n\tjump.ne\t@.BB0_210\n\tst.1\t64, r2\n\tadd\tr5, r0, stack-[7]\n\tadd\tstack-[6], r0, r2\n\tst.1\tr2, r5\n\tst.1\t0, r1\n\tcontext.gas_left\tr1\n\tsub.s!\t@CPI0_0[0], r1, r2\n\tadd.ge\t@CPI0_0[0], r0, r1\n\tshl.s\t192, r1, r1\n\tor\t@CPI0_67[0], r1, r1\n\tadd\t32784, r0, r2\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_565\n\tadd\tstack-[7], r0, r5\n\tsub!\tr5, r0, r2\n\tjump.eq\t@.BB0_452\n\tld\tr1, r6\n\tadd\tr0, r0, r7\n\tadd\tstack-[6], r0, r8\n.BB0_460:\n\tsload\tr6, r1\n\tand!\t1, r1, r2\n\tshr.s\t1, r1, r3\n\tand\t127, r3, r4\n\tadd.ne\tr3, r0, r4\n\tsub.s!\t31, r4, r3\n\tadd\t0, r0, r3\n\tadd.gt\t1, r0, r3\n\tsub!\tr2, r3, r3\n\tjump.ne\t@.BB0_471\n\tld.1\t64, r9\n\tst.1.inc\tr9, r4, r3\n\tsub!\tr2, r0, r2\n\tjump.eq\t@.BB0_466\n\tadd\tr3, r0, stack-[8]\n\tadd\tr4, r0, stack-[9]\n\tadd\tr9, r0, stack-[10]\n\tadd\tr8, r0, stack-[11]\n\tadd\tr7, r0, stack-[12]\n\tadd\tr6, r0, stack-[13]\n\tst.1\t0, r6\n\tcontext.gas_left\tr1\n\tsub.s!\t@CPI0_0[0], r1, r2\n\tadd.ge\t@CPI0_0[0], r0, r1\n\tshl.s\t192, r1, r1\n\tor\t@CPI0_67[0], r1, r1\n\tadd\t32784, r0, r2\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_565\n\tadd\tstack-[9], r0, r10\n\tsub!\tr10, r0, r2\n\tadd\tstack-[12], r0, r7\n\tadd\tstack-[11], r0, r8\n\tjump.eq\t@.BB0_467\n\tld\tr1, r2\n\tadd\tr0, r0, r1\n\tadd\tstack-[7], r0, r5\n\tadd\tstack-[13], r0, r6\n\tadd\tstack-[10], r0, r9\n\tadd\tstack-[8], r0, r11\n.BB0_465:\n\tadd\tr11, r1, r3\n\tsload\tr2, r4\n\tst.1\tr3, r4\n\tadd\t1, r2, r2\n\tadd\t32, r1, r1\n\tsub!\tr1, r10, r3\n\tjump.lt\t@.BB0_465\n\tjump\t@.BB0_468\n.BB0_466:\n\tsub.s\t256, r0, r2\n\tand\tr1, r2, r1\n\tst.1\tr3, r1\n\tsub!\tr4, r0, r1\n\tadd\t32, r0, r1\n\tadd.eq\t0, r0, r1\n\tjump\t@.BB0_468\n.BB0_467:\n\tadd\tr0, r0, r1\n\tadd\tstack-[7], r0, r5\n\tadd\tstack-[13], r0, r6\n\tadd\tstack-[10], r0, r9\n.BB0_468:\n\tadd\t63, r1, r1\n\tsub.s\t32, r0, r2\n\tand\tr1, r2, r2\n\tadd\tr2, r9, r1\n\tsub!\tr1, r2, r2\n\tadd\t0, r0, r2\n\tadd.lt\t1, r0, r2\n\tsub.s!\t@CPI0_51[0], r1, r3\n\tjump.gt\t@.BB0_210\n\tand!\t1, r2, r2\n\tjump.ne\t@.BB0_210\n\tadd\t32, r8, r8\n\tst.1\t64, r1\n\tst.1\tr8, r9\n\tadd\t1, r6, r6\n\tadd\t1, r7, r7\n\tsub!\tr7, r5, r1\n\tjump.lt\t@.BB0_460\n\tjump\t@.BB0_452\n.BB0_471:\n\tadd\t@CPI0_79[0], r0, r1\n\tst.1\t0, r1\n\tadd\t34, r0, r1\n\tst.1\t4, r1\n\tadd\t@CPI0_54[0], r0, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.BB0_472:\n\tadd\t160, r0, r4\n\tadd\t64, r0, r5\n\tadd\tr0, r0, r6\n\tjump\t@.BB0_474\n.BB0_473:\n\tadd\t1, r6, r6\n\tsub!\tr6, r1, r7\n\tjump.ge\t@.BB0_109\n.BB0_474:\n\tsub\tr2, r15, r7\n\tsub.s\t64, r7, r7\n\tst.1.inc\tr3, r7, r3\n\tld.1.inc\tr4, r7, r4\n\tld.1.inc\tr7, r9, r8\n\tst.1.inc\tr2, r5, r7\n\tadd\t64, r2, r12\n\tld.1.inc\tr9, r10, r11\n\tst.1\tr12, r10\n\tadd\t96, r2, r9\n\tsub!\tr10, r0, r12\n\tjump.eq\t@.BB0_477\n\tadd\tr0, r0, r12\n.BB0_476:\n\tadd\tr12, r9, r13\n\tadd\tr11, r12, r14\n\tld.1\tr14, r14\n\tst.1\tr13, r14\n\tadd\t32, r12, r12\n\tsub!\tr12, r10, r13\n\tjump.lt\t@.BB0_476\n.BB0_477:\n\tadd\tr10, r9, r11\n\tst.1\tr11, r0\n\tadd\t31, r10, r10\n\tsub.s\t32, r0, r11\n\tand\tr10, r11, r10\n\tadd\tr10, r9, r9\n\tld.1\tr8, r8\n\tsub\tr9, r2, r2\n\tst.1\tr7, r2\n\tld.1\tr8, r7\n\tst.1.inc\tr9, r7, r2\n\tsub!\tr7, r0, r9\n\tjump.eq\t@.BB0_473\n\tadd\tr0, r0, r9\n.BB0_479:\n\tadd\t32, r8, r8\n\tld.1\tr8, r10\n\tand\t@CPI0_70[0], r10, r10\n\tst.1.inc\tr2, r10, r2\n\tadd\t1, r9, r9\n\tsub!\tr9, r7, r10\n\tjump.lt\t@.BB0_479\n\tjump\t@.BB0_473\n.BB0_480:\n\tadd\t160, r0, r3\n\tadd\t64, r0, r4\n\tadd\tr0, r0, r6\n\tjump\t@.BB0_482\n.BB0_481:\n\tadd\t1, r6, r6\n\tsub.s!\tstack-[13], r6, r1\n\tadd\tr11, r0, r5\n\tjump.ge\t@.BB0_355\n.BB0_482:\n\tsub.s\tstack-[14], r5, r7\n\tsub.s\t64, r7, r7\n\tst.1.inc\tr2, r7, r2\n\tld.1.inc\tr3, r7, r3\n\tld.1.inc\tr7, r7, r8\n\tand\t@CPI0_6[0], r7, r7\n\tst.1.inc\tr5, r7, r9\n\tld.1\tr8, r7\n\tst.1\tr9, r4\n\tadd\t64, r5, r9\n\tld.1\tr7, r8\n\tst.1\tr9, r8\n\tadd\t96, r5, r9\n\tshl.s\t5, r8, r10\n\tadd\tr10, r9, r11\n\tsub!\tr8, r0, r10\n\tjump.eq\t@.BB0_481\n\tadd\tr0, r0, r10\n\tjump\t@.BB0_485\n.BB0_484:\n\tadd\t31, r12, r1\n\tsub.s\t32, r0, r13\n\tand\tr1, r13, r1\n\tadd\tr12, r11, r12\n\tst.1\tr12, r0\n\tadd\tr1, r11, r11\n\tadd\t1, r10, r10\n\tsub!\tr10, r8, r1\n\tjump.ge\t@.BB0_481\n.BB0_485:\n\tsub\tr11, r5, r12\n\tsub.s\t96, r12, r12\n\tst.1.inc\tr9, r12, r9\n\tadd\t32, r7, r7\n\tld.1\tr7, r12\n\tld.1.inc\tr12, r12, r13\n\tst.1.inc\tr11, r12, r11\n\tsub!\tr12, r0, r14\n\tjump.eq\t@.BB0_484\n\tadd\tr0, r0, r14\n.BB0_487:\n\tadd\tr14, r11, r15\n\tadd\tr13, r14, r1\n\tld.1\tr1, r1\n\tst.1\tr15, r1\n\tadd\t32, r14, r14\n\tsub!\tr14, r12, r1\n\tjump.lt\t@.BB0_487\n\tjump\t@.BB0_484\n.BB0_488:\n\tld.1\t64, r2\n\tand\t31, r3, r4\n\tshr.s!\t5, r3, r5\n\tjump.eq\t@.BB0_491\n\tadd\tr0, r0, r6\n.BB0_490:\n\tshl.s\t5, r6, r7\n\tadd\tr2, r7, r8\n\tptr.add\tr1, r7, r7\n\tld\tr7, r7\n\tst.1\tr8, r7\n\tadd\t1, r6, r6\n\tsub!\tr6, r5, r7\n\tjump.lt\t@.BB0_490\n.BB0_491:\n\tsub!\tr4, r0, r6\n\tjump.eq\t@.BB0_68\n\tjump\t@.BB0_67\n.BB0_493:\n\tld.1\t64, r2\n\tand\t31, r3, r4\n\tshr.s!\t5, r3, r5\n\tjump.eq\t@.BB0_496\n\tadd\tr0, r0, r6\n.BB0_495:\n\tshl.s\t5, r6, r7\n\tadd\tr2, r7, r8\n\tptr.add\tr1, r7, r7\n\tld\tr7, r7\n\tst.1\tr8, r7\n\tadd\t1, r6, r6\n\tsub!\tr6, r5, r7\n\tjump.lt\t@.BB0_495\n.BB0_496:\n\tsub!\tr4, r0, r6\n\tjump.eq\t@.BB0_68\n\tjump\t@.BB0_67\n.BB0_498:\n\tld.1\t64, r2\n\tand\t31, r3, r4\n\tshr.s!\t5, r3, r5\n\tjump.eq\t@.BB0_501\n\tadd\tr0, r0, r6\n.BB0_500:\n\tshl.s\t5, r6, r7\n\tadd\tr2, r7, r8\n\tptr.add\tr1, r7, r7\n\tld\tr7, r7\n\tst.1\tr8, r7\n\tadd\t1, r6, r6\n\tsub!\tr6, r5, r7\n\tjump.lt\t@.BB0_500\n.BB0_501:\n\tsub!\tr4, r0, r6\n\tjump.eq\t@.BB0_68\n\tjump\t@.BB0_67\n.BB0_503:\n\tld.1\t64, r2\n\tand\t31, r3, r4\n\tshr.s!\t5, r3, r5\n\tjump.eq\t@.BB0_506\n\tadd\tr0, r0, r6\n.BB0_505:\n\tshl.s\t5, r6, r7\n\tadd\tr2, r7, r8\n\tptr.add\tr1, r7, r7\n\tld\tr7, r7\n\tst.1\tr8, r7\n\tadd\t1, r6, r6\n\tsub!\tr6, r5, r7\n\tjump.lt\t@.BB0_505\n.BB0_506:\n\tsub!\tr4, r0, r6\n\tjump.eq\t@.BB0_68\n\tjump\t@.BB0_67\n.BB0_508:\n\tld.1\t64, r2\n\tand\t31, r3, r4\n\tshr.s!\t5, r3, r5\n\tjump.eq\t@.BB0_511\n\tadd\tr0, r0, r6\n.BB0_510:\n\tshl.s\t5, r6, r7\n\tadd\tr2, r7, r8\n\tptr.add\tr1, r7, r7\n\tld\tr7, r7\n\tst.1\tr8, r7\n\tadd\t1, r6, r6\n\tsub!\tr6, r5, r7\n\tjump.lt\t@.BB0_510\n.BB0_511:\n\tsub!\tr4, r0, r6\n\tjump.eq\t@.BB0_68\n\tjump\t@.BB0_67\n.BB0_513:\n\tadd\tstack-[14], r0, r6\n\tsub\tr1, r6, r1\n\tadd\t@CPI0_0[0], r0, r4\n\tsub.s!\t@CPI0_0[0], r6, r5\n\tadd\tr4, r0, r5\n\tadd.lt\tr6, r0, r5\n\tshl.s\t64, r5, r5\n\tsub.s!\t@CPI0_0[0], r1, r6\n\tadd.ge\tr4, r0, r1\n\tshl.s\t96, r1, r1\n\tor\tr1, r5, r1\n\tsub.s!\t@CPI0_0[0], r3, r5\n\tadd.ge\tr4, r0, r3\n\tshl.s\t192, r3, r3\n\tor\tr1, r3, r1\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tadd\tstack-[14], r0, r10\n\tadd\tr1, r0, r3\n\tshr.s\t96, r3, r3\n\tand\t@CPI0_0[0], r3, r3\n\tsub.s!\t32, r3, r4\n\tadd\tr3, r0, r4\n\tadd.ge\t32, r0, r4\n\tand\t31, r4, r5\n\tshr.s!\t5, r4, r6\n\tjump.eq\t@.BB0_516\n\tadd\tr0, r0, r7\n.BB0_515:\n\tshl.s\t5, r7, r8\n\tadd\tr10, r8, r9\n\tptr.add\tr1, r8, r8\n\tld\tr8, r8\n\tst.1\tr9, r8\n\tadd\t1, r7, r7\n\tsub!\tr7, r6, r8\n\tjump.lt\t@.BB0_515\n.BB0_516:\n\tsub!\tr5, r0, r7\n\tjump.eq\t@.BB0_518\n\tshl.s\t5, r6, r6\n\tptr.add\tr1, r6, r7\n\tadd\tr10, r6, r6\n\tshl.s\t3, r5, r5\n\tld.1\tr6, r8\n\tshl\tr8, r5, r8\n\tshr\tr8, r5, r8\n\tld\tr7, r7\n\tsub\t256, r5, r5\n\tshr\tr7, r5, r7\n\tshl\tr7, r5, r5\n\tor\tr5, r8, r5\n\tst.1\tr6, r5\n.BB0_518:\n\tadd\tr3, r0, stack[@returndatasize]\n\tptr.add\tr1, r0, stack[@ptr_return_data]\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_541\n.BB0_519:\n\tadd\t31, r4, r1\n\tand\t96, r1, r2\n\tadd\tr2, r10, r1\n\tsub!\tr1, r2, r2\n\tadd\t0, r0, r2\n\tadd.lt\t1, r0, r2\n\tsub.s!\t@CPI0_51[0], r1, r3\n\tjump.gt\t@.BB0_210\n\tand!\t1, r2, r2\n\tjump.ne\t@.BB0_210\n\tst.1\t64, r1\n\tsub.s!\t32, r4, r1\n\tjump.lt\t@.BB0_565\n\tadd\tstack-[14], r0, r1\n\tld.1\tr1, r1\n\tadd\t@CPI0_84[0], r0, r2\n\tst.1\t0, r2\n\tst.1\t28, r1\n\tadd\t@CPI0_0[0], r0, r1\n\tcontext.gas_left\tr2\n\tsub.s!\t@CPI0_0[0], r2, r3\n\tadd.ge\tr1, r0, r2\n\tshl.s\t192, r2, r1\n\tor\t@CPI0_85[0], r1, r1\n\tadd\t32784, r0, r2\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_565\n\tld.1\t64, r2\n\tld\tr1, r1\n\tadd\tstack-[11], r0, r3\n\tadd\t256, r3, r3\n\tld.1\tr3, r5\n\tld.1.inc\tr5, r3, r4\n\tsub.s!\t65, r3, r6\n\tjump.ne\t@.BB0_582\n\tadd\t64, r5, r3\n\tld.1\tr3, r3\n\tsub.s!\t@CPI0_87[0], r3, r6\n\tjump.le\t@.BB0_602\n\tadd\t@CPI0_91[0], r0, r1\n\tjump\t@.BB0_583\n.BB0_526:\n\tadd\tstack-[13], r0, r5\n\tsub\tr1, r5, r1\n\tadd\t@CPI0_0[0], r0, r3\n\tsub.s!\t@CPI0_0[0], r5, r4\n\tadd\tr3, r0, r4\n\tadd.lt\tr5, r0, r4\n\tshl.s\t64, r4, r4\n\tsub.s!\t@CPI0_0[0], r1, r5\n\tadd.ge\tr3, r0, r1\n\tshl.s\t96, r1, r1\n\tor\tr1, r4, r1\n\tsub.s!\t@CPI0_0[0], r6, r4\n\tadd.ge\tr3, r0, r6\n\tshl.s\t192, r6, r3\n\tor\tr1, r3, r1\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tadd\tstack-[13], r0, r10\n\tadd\tr1, r0, r3\n\tshr.s\t96, r3, r3\n\tand\t@CPI0_0[0], r3, r3\n\tsub.s!\t32, r3, r4\n\tadd\tr3, r0, r4\n\tadd.ge\t32, r0, r4\n\tand\t31, r4, r5\n\tshr.s!\t5, r4, r6\n\tjump.eq\t@.BB0_529\n\tadd\tr0, r0, r7\n.BB0_528:\n\tshl.s\t5, r7, r8\n\tadd\tr10, r8, r9\n\tptr.add\tr1, r8, r8\n\tld\tr8, r8\n\tst.1\tr9, r8\n\tadd\t1, r7, r7\n\tsub!\tr7, r6, r8\n\tjump.lt\t@.BB0_528\n.BB0_529:\n\tsub!\tr5, r0, r7\n\tjump.eq\t@.BB0_531\n\tshl.s\t5, r6, r6\n\tptr.add\tr1, r6, r7\n\tadd\tr10, r6, r6\n\tshl.s\t3, r5, r5\n\tld.1\tr6, r8\n\tshl\tr8, r5, r8\n\tshr\tr8, r5, r8\n\tld\tr7, r7\n\tsub\t256, r5, r5\n\tshr\tr7, r5, r7\n\tshl\tr7, r5, r5\n\tor\tr5, r8, r5\n\tst.1\tr6, r5\n.BB0_531:\n\tadd\tr3, r0, stack[@returndatasize]\n\tptr.add\tr1, r0, stack[@ptr_return_data]\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_546\n.BB0_532:\n\tadd\t31, r4, r1\n\tand\t96, r1, r2\n\tadd\tr2, r10, r1\n\tsub!\tr1, r2, r2\n\tadd\t0, r0, r2\n\tadd.lt\t1, r0, r2\n\tsub.s!\t@CPI0_51[0], r1, r3\n\tjump.gt\t@.BB0_210\n\tand!\t1, r2, r2\n\tjump.ne\t@.BB0_210\n\tst.1\t64, r1\n\tsub.s!\t32, r4, r1\n\tjump.lt\t@.BB0_565\n\tadd\tstack-[13], r0, r1\n\tld.1\tr1, r1\n\tadd\tr1, r0, stack-[13]\n\tadd\t@CPI0_7[0], r0, r1\n\tst.2\t0, r1\n\tadd\t@CPI0_5[0], r0, r1\n\tst.2\t4, r1\n\tadd\t@CPI0_0[0], r0, r1\n\tcontext.gas_left\tr2\n\tsub.s!\t@CPI0_0[0], r2, r3\n\tadd.ge\tr1, r0, r2\n\tshl.s\t192, r2, r1\n\tor\t@CPI0_8[0], r1, r1\n\tadd\t32770, r0, r2\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_756\n\tld\tr1, r1\n\tsub!\tr1, r0, r1\n\tjump.eq\t@.BB0_565\n\tld.1\t64, r4\n\tadd\t@CPI0_53[0], r0, r1\n\tst.1\tr4, r1\n\tadd\t4, r4, r2\n\tadd\tstack-[11], r0, r1\n\tadd\tr2, r0, stack-[8]\n\tst.1\tr2, r1\n\tadd\t@CPI0_0[0], r0, r1\n\tcontext.gas_left\tr2\n\tsub.s!\t@CPI0_0[0], r2, r3\n\tadd.ge\tr1, r0, r2\n\tsub.s!\t@CPI0_0[0], r4, r3\n\tadd\tr4, r0, stack-[9]\n\tadd.lt\tr4, r0, r1\n\tshl.s\t64, r1, stack-[11]\n\tshl.s\t192, r2, r1\n\tor\tstack-[11], r1, r1\n\tor\t@CPI0_54[0], r1, r1\n\tadd\t@CPI0_5[0], r0, r2\n\tnear_call\tr0, @__farcall, @DEFAULT_UNWIND\n\tadd\tr1, r0, r3\n\tshr.s\t96, r3, r3\n\tand\t@CPI0_0[0], r3, stack[@returndatasize]\n\tand\t@CPI0_0[0], r3, r3\n\tptr.add\tr1, r0, stack[@ptr_return_data]\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_610\n\tadd\tstack-[9], r0, r1\n\tsub.s!\t@CPI0_51[0], r1, r1\n\tjump.gt\t@.BB0_210\n\tadd\tstack-[9], r0, r3\n\tst.1\t64, r3\n\tadd\tstack-[14], r0, r1\n\tsload\tr1, r1\n\tadd\tr1, r0, stack-[14]\n\tadd\t@CPI0_55[0], r0, r1\n\tst.1\tr3, r1\n\tadd\tstack-[12], r0, r1\n\tadd\tstack-[8], r0, r2\n\tst.1\tr2, r1\n\tadd\t100, r3, r2\n\tadd\tstack-[10], r0, r1\n\tnear_call\tr0, @abi_encode_struct_PackedUserOperation, @DEFAULT_UNWIND\n\tadd\tstack-[9], r0, r4\n\tadd\t68, r4, r2\n\tadd\t@CPI0_46[0], r0, r3\n\tst.1\tr2, r3\n\tadd\t36, r4, r2\n\tadd\tstack-[13], r0, r3\n\tst.1\tr2, r3\n\tcontext.gas_left\tr3\n\tadd\tstack-[14], r0, r2\n\tshr.s\t8, r2, r2\n\tand\t@CPI0_6[0], r2, r2\n\tsub.s!\t4, r2, r4\n\tjump.ne\t@.BB0_632\n\tadd\tstack[@returndatasize], r0, r3\n\tsub.s!\t32, r3, r1\n\tadd\tr3, r0, r4\n\tadd.ge\t32, r0, r4\n\tjump\t@.BB0_638\n.BB0_541:\n\tld.1\t64, r2\n\tand\t31, r3, r4\n\tshr.s!\t5, r3, r5\n\tjump.eq\t@.BB0_544\n\tadd\tr0, r0, r6\n.BB0_543:\n\tshl.s\t5, r6, r7\n\tadd\tr2, r7, r8\n\tptr.add\tr1, r7, r7\n\tld\tr7, r7\n\tst.1\tr8, r7\n\tadd\t1, r6, r6\n\tsub!\tr6, r5, r7\n\tjump.lt\t@.BB0_543\n.BB0_544:\n\tsub!\tr4, r0, r6\n\tjump.eq\t@.BB0_68\n\tjump\t@.BB0_67\n.BB0_546:\n\tld.1\t64, r2\n\tand\t31, r3, r4\n\tshr.s!\t5, r3, r5\n\tjump.eq\t@.BB0_549\n\tadd\tr0, r0, r6\n.BB0_548:\n\tshl.s\t5, r6, r7\n\tadd\tr2, r7, r8\n\tptr.add\tr1, r7, r7\n\tld\tr7, r7\n\tst.1\tr8, r7\n\tadd\t1, r6, r6\n\tsub!\tr6, r5, r7\n\tjump.lt\t@.BB0_548\n.BB0_549:\n\tsub!\tr4, r0, r6\n\tjump.eq\t@.BB0_68\n\tjump\t@.BB0_67\n.BB0_551:\n\tld.1\t64, r2\n\tand\t31, r3, r4\n\tshr.s!\t5, r3, r5\n\tjump.eq\t@.BB0_554\n\tadd\tr0, r0, r6\n.BB0_553:\n\tshl.s\t5, r6, r7\n\tadd\tr2, r7, r8\n\tptr.add\tr1, r7, r7\n\tld\tr7, r7\n\tst.1\tr8, r7\n\tadd\t1, r6, r6\n\tsub!\tr6, r5, r7\n\tjump.lt\t@.BB0_553\n.BB0_554:\n\tsub!\tr4, r0, r6\n\tjump.eq\t@.BB0_68\n\tjump\t@.BB0_67\n.BB0_556:\n\tadd\t@CPI0_0[0], r0, r3\n\tsub.s!\t@CPI0_0[0], r1, r4\n\tadd.ge\tr3, r0, r1\n\tadd\tstack-[12], r0, r5\n\tsub.s!\t@CPI0_0[0], r5, r4\n\tadd.lt\tr5, r0, r3\n\tshl.s\t64, r3, r3\n\tshl.s\t192, r1, r1\n\tor\tr1, r3, r1\n\tor\t@CPI0_59[0], r1, r1\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tadd\tstack-[12], r0, r10\n\tadd\tr1, r0, r3\n\tshr.s\t96, r3, r3\n\tand\t@CPI0_0[0], r3, r3\n\tsub.s!\t32, r3, r4\n\tadd\tr3, r0, r4\n\tadd.ge\t32, r0, r4\n\tand\t31, r4, r5\n\tshr.s!\t5, r4, r6\n\tjump.eq\t@.BB0_559\n\tadd\tr0, r0, r7\n.BB0_558:\n\tshl.s\t5, r7, r8\n\tadd\tr10, r8, r9\n\tptr.add\tr1, r8, r8\n\tld\tr8, r8\n\tst.1\tr9, r8\n\tadd\t1, r7, r7\n\tsub!\tr7, r6, r8\n\tjump.lt\t@.BB0_558\n.BB0_559:\n\tsub!\tr5, r0, r7\n\tjump.eq\t@.BB0_561\n\tshl.s\t5, r6, r6\n\tptr.add\tr1, r6, r7\n\tadd\tstack-[12], r6, r6\n\tshl.s\t3, r5, r5\n\tld.1\tr6, r8\n\tshl\tr8, r5, r8\n\tshr\tr8, r5, r8\n\tld\tr7, r7\n\tsub\t256, r5, r5\n\tshr\tr7, r5, r7\n\tshl\tr7, r5, r5\n\tor\tr5, r8, r5\n\tst.1\tr6, r5\n.BB0_561:\n\tadd\tr3, r0, stack[@returndatasize]\n\tptr.add\tr1, r0, stack[@ptr_return_data]\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_577\n.BB0_562:\n\tadd\t31, r4, r1\n\tand\t96, r1, r1\n\tadd\tstack-[12], r1, r1\n\tsub.s!\t@CPI0_51[0], r1, r2\n\tjump.gt\t@.BB0_210\n\tst.1\t64, r1\n\tsub.s!\t32, r3, r1\n\tjump.lt\t@.BB0_565\n\tadd\tstack-[12], r0, r1\n\tld.1\tr1, r1\n\tadd\tr1, r0, stack-[12]\n\tsub.s!\t@CPI0_6[0], r1, r1\n\tjump.le\t@.BB0_588\n.BB0_565:\n\tadd\tr0, r0, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.BB0_566:\n\tld.1\t64, r2\n\tand\t31, r3, r4\n\tshr.s!\t5, r3, r5\n\tjump.eq\t@.BB0_569\n\tadd\tr0, r0, r6\n.BB0_568:\n\tshl.s\t5, r6, r7\n\tadd\tr2, r7, r8\n\tptr.add\tr1, r7, r7\n\tld\tr7, r7\n\tst.1\tr8, r7\n\tadd\t1, r6, r6\n\tsub!\tr6, r5, r7\n\tjump.lt\t@.BB0_568\n.BB0_569:\n\tsub!\tr4, r0, r6\n\tjump.eq\t@.BB0_68\n\tjump\t@.BB0_67\n.BB0_571:\n\tptr.add\tr1, r0, stack[@ptr_return_data]\n\tadd\tr1, r0, r2\n\tshr.s\t96, r2, r2\n\tand\t@CPI0_0[0], r2, stack[@returndatasize]\n\tand\t@CPI0_0[0], r2, r2\n.BB0_572:\n\tld.1\t64, r3\n\tand\t31, r2, r4\n\tshr.s!\t5, r2, r5\n\tjump.eq\t@.BB0_575\n\tadd\tr0, r0, r6\n.BB0_574:\n\tshl.s\t5, r6, r7\n\tadd\tr3, r7, r8\n\tptr.add\tr1, r7, r7\n\tld\tr7, r7\n\tst.1\tr8, r7\n\tadd\t1, r6, r6\n\tsub!\tr6, r5, r7\n\tjump.lt\t@.BB0_574\n.BB0_575:\n\tsub!\tr4, r0, r6\n\tjump.eq\t@.BB0_263\n\tjump\t@.BB0_262\n.BB0_577:\n\tld.1\t64, r2\n\tand\t31, r3, r4\n\tshr.s!\t5, r3, r5\n\tjump.eq\t@.BB0_580\n\tadd\tr0, r0, r6\n.BB0_579:\n\tshl.s\t5, r6, r7\n\tadd\tr2, r7, r8\n\tptr.add\tr1, r7, r7\n\tld\tr7, r7\n\tst.1\tr8, r7\n\tadd\t1, r6, r6\n\tsub!\tr6, r5, r7\n\tjump.lt\t@.BB0_579\n.BB0_580:\n\tsub!\tr4, r0, r6\n\tjump.eq\t@.BB0_68\n\tjump\t@.BB0_67\n.BB0_582:\n\tadd\t@CPI0_86[0], r0, r1\n.BB0_583:\n\tst.1\tr2, r1\n\tadd\t4, r2, r1\n\tst.1\tr1, r3\n\tadd\t@CPI0_0[0], r0, r1\n\tsub.s!\t@CPI0_0[0], r2, r3\n\tadd.ge\tr1, r0, r2\n\tshl.s\t64, r2, r1\n\tor\t@CPI0_54[0], r1, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.BB0_584:\n\tand\t@CPI0_6[0], r1, r1\n\tadd\t34, r0, r2\n\tsload\tr2, r3\n\tand\t@CPI0_11[0], r3, r3\n\tor\tr3, r1, r1\n\tsstore\tr2, r1\n\tld.1\t64, r1\n\tsub.s!\t@CPI0_103[0], r1, r2\n\tjump.gt\t@.BB0_210\n\tadd\t36, r1, r2\n\tadd\t@CPI0_106[0], r0, r3\n\tst.1\tr2, r3\n\tadd\t68, r1, r2\n\tcontext.gas_left\tr3\n\tadd\tstack-[14], r0, r4\n\tst.1\tr2, r4\n\tadd\t@CPI0_97[0], r0, r2\n\tst.1\tr1, r2\n\tadd\t100, r1, r2\n\tst.1\tr2, r0\n\tadd\t4, r1, r2\n\tst.1\tr2, r0\n\tadd\t@CPI0_0[0], r0, r2\n\tsub.s!\t@CPI0_0[0], r3, r4\n\tadd.ge\tr2, r0, r3\n\tsub.s!\t@CPI0_0[0], r1, r4\n\tadd.ge\tr2, r0, r1\n\tshl.s\t64, r1, r1\n\tshl.s\t192, r3, r2\n\tor\tr1, r2, r1\n\tor\t@CPI0_105[0], r1, r1\n\tadd\t32774, r0, r2\n\tnear_call\tr0, @__farcall, @DEFAULT_UNWIND\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_621\n\tld\tr1, r1\n\tsub!\tr1, r0, r2\n\tjump.ne\t@.BB0_667\n\tptr.add\tstack[@ptr_return_data], r0, r1\n\tadd\tstack[@returndatasize], r0, r2\n\tjump\t@.BB0_622\n.BB0_588:\n\tadd\t@CPI0_7[0], r0, r1\n\tst.2\t0, r1\n\tadd\t@CPI0_5[0], r0, r1\n\tst.2\t4, r1\n\tadd\t@CPI0_0[0], r0, r1\n\tcontext.gas_left\tr2\n\tsub.s!\t@CPI0_0[0], r2, r3\n\tadd.ge\tr1, r0, r2\n\tshl.s\t192, r2, r1\n\tor\t@CPI0_8[0], r1, r1\n\tadd\t32770, r0, r2\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_756\n\tld\tr1, r1\n\tsub!\tr1, r0, r1\n\tjump.eq\t@.BB0_565\n\tld.1\t64, r4\n\tadd\t@CPI0_53[0], r0, r1\n\tst.1\tr4, r1\n\tadd\t4, r4, r1\n\tadd\tstack-[12], r0, r2\n\tst.1\tr1, r2\n\tadd\t@CPI0_0[0], r0, r1\n\tcontext.gas_left\tr2\n\tsub.s!\t@CPI0_0[0], r2, r3\n\tadd.ge\tr1, r0, r2\n\tsub.s!\t@CPI0_0[0], r4, r3\n\tadd\tr4, r0, stack-[12]\n\tadd.lt\tr4, r0, r1\n\tshl.s\t64, r1, r1\n\tshl.s\t192, r2, r2\n\tor\tr2, r1, r1\n\tor\t@CPI0_54[0], r1, r1\n\tadd\t@CPI0_5[0], r0, r2\n\tnear_call\tr0, @__farcall, @DEFAULT_UNWIND\n\tadd\tr1, r0, r3\n\tshr.s\t96, r3, r3\n\tand\t@CPI0_0[0], r3, stack[@returndatasize]\n\tand\t@CPI0_0[0], r3, r3\n\tptr.add\tr1, r0, stack[@ptr_return_data]\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_685\n\tadd\tstack-[12], r0, r1\n\tsub.s!\t@CPI0_51[0], r1, r1\n\tjump.gt\t@.BB0_210\n\tadd\tstack-[12], r0, r1\n\tst.1\t64, r1\n\tadd\tstack-[9], r0, r1\n\tsload\tr1, r1\n\tadd\t@CPI0_7[0], r0, r2\n\tst.2\t0, r2\n\tshr.s\t8, r1, r1\n\tand\t@CPI0_6[0], r1, r1\n\tadd\tr1, r0, stack-[12]\n\tst.2\t4, r1\n\tadd\t@CPI0_0[0], r0, r1\n\tcontext.gas_left\tr2\n\tsub.s!\t@CPI0_0[0], r2, r3\n\tadd.ge\tr1, r0, r2\n\tshl.s\t192, r2, r1\n\tor\t@CPI0_8[0], r1, r1\n\tadd\t32770, r0, r2\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_756\n\tld\tr1, r1\n\tsub!\tr1, r0, r1\n\tjump.eq\t@.BB0_565\n\tld.1\t64, r3\n\tadd\t68, r3, r1\n\tadd\t96, r0, r2\n\tst.1\tr1, r2\n\tadd\t@CPI0_47[0], r0, r1\n\tst.1\tr3, r1\n\tadd\t4, r3, r2\n\tadd\tstack-[14], r0, r1\n\tadd\tr2, r0, stack-[7]\n\tst.1\tr2, r1\n\tadd\t36, r3, r1\n\tst.1\tr1, r0\n\tadd\tstack-[11], r0, r1\n\tld.1\tr1, r1\n\tadd\t100, r3, r2\n\tst.1\tr2, r1\n\tadd\tr3, r0, stack-[8]\n\tadd\t132, r3, r2\n\tsub!\tr1, r0, r3\n\tadd\tstack-[10], r0, r6\n\tjump.eq\t@.BB0_597\n\tadd\tr0, r0, r3\n.BB0_596:\n\tadd\tr3, r2, r4\n\tadd\tr3, r6, r5\n\tld.1\tr5, r5\n\tst.1\tr4, r5\n\tadd\t32, r3, r3\n\tsub!\tr3, r1, r4\n\tjump.lt\t@.BB0_596\n.BB0_597:\n\tadd\tr1, r2, r2\n\tst.1\tr2, r0\n\tcontext.gas_left\tr2\n\tadd\tstack-[12], r0, r3\n\tsub.s!\t4, r3, r3\n\tjump.eq\t@.BB0_599\n\tadd\t31, r1, r1\n\tsub.s\t32, r0, r3\n\tand\tr1, r3, r1\n\tadd\t@CPI0_0[0], r0, r3\n\tadd\tstack-[8], r0, r5\n\tsub.s!\t@CPI0_0[0], r5, r4\n\tadd\tr3, r0, r4\n\tadd.lt\tr5, r0, r4\n\tshl.s\t64, r4, r4\n\tadd\t132, r1, r1\n\tsub.s!\t@CPI0_0[0], r1, r5\n\tadd.ge\tr3, r0, r1\n\tshl.s\t96, r1, r1\n\tor\tr1, r4, r1\n\tsub.s!\t@CPI0_0[0], r2, r4\n\tadd.ge\tr3, r0, r2\n\tshl.s\t192, r2, r2\n\tor\tr2, r1, r1\n\tadd\tstack-[12], r0, r2\n\tnear_call\tr0, @__farcall, @DEFAULT_UNWIND\n\tadd\tr1, r0, r3\n\tshr.s\t96, r3, r3\n\tand\t@CPI0_0[0], r3, stack[@returndatasize]\n\tand\t@CPI0_0[0], r3, r3\n\tptr.add\tr1, r0, stack[@ptr_return_data]\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_735\n.BB0_599:\n\tadd\tstack-[8], r0, r1\n\tsub.s!\t@CPI0_51[0], r1, r1\n\tjump.gt\t@.BB0_210\n\tadd\tstack-[8], r0, r4\n\tst.1\t64, r4\n\tadd\tstack-[13], r0, r1\n\tsload\tr1, r2\n\tadd\tstack-[9], r0, r1\n\tsload\tr1, r1\n\tadd\t@CPI0_80[0], r0, r3\n\tst.1\tr4, r3\n\tshr.s\t8, r1, r1\n\tand\t@CPI0_6[0], r1, r1\n\tadd\tstack-[7], r0, r3\n\tst.1\tr3, r1\n\tcontext.gas_left\tr1\n\tand\t@CPI0_6[0], r2, r2\n\tsub.s!\t4, r2, r3\n\tjump.ne\t@.BB0_740\n\tadd\tstack[@returndatasize], r0, r4\n\tsub.s!\t32, r4, r1\n\tadd.ge\t32, r0, r4\n\tjump\t@.BB0_746\n.BB0_602:\n\tadd\t96, r5, r5\n\tld.1\tr5, r5\n\tld.1\tr4, r4\n\tadd\t96, r2, r6\n\tst.1\tr6, r3\n\tadd\t64, r2, r3\n\tst.1\tr3, r4\n\tshr.s\t248, r5, r3\n\tadd\t32, r2, r4\n\tst.1\tr4, r3\n\tst.1\tr2, r1\n\tst.1\t0, r0\n\tadd\t@CPI0_0[0], r0, r1\n\tcontext.gas_left\tr3\n\tsub.s!\t@CPI0_0[0], r3, r4\n\tadd.ge\tr1, r0, r3\n\tsub.s!\t@CPI0_0[0], r2, r4\n\tadd.ge\tr1, r0, r2\n\tshl.s\t64, r2, r1\n\tshl.s\t192, r3, r2\n\tor\tr2, r1, r1\n\tor\t@CPI0_88[0], r1, r1\n\tadd\t1, r0, r2\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tadd\tr1, r0, r3\n\tshr.s\t96, r3, r3\n\tand\t@CPI0_0[0], r3, r4\n\tsub.s!\t32, r4, r3\n\tadd\tr4, r0, r3\n\tadd.ge\t32, r0, r3\n\tand\t31, r3, r6\n\tshr.s!\t5, r3, r5\n\tjump.eq\t@.BB0_605\n\tadd\tr0, r0, r7\n.BB0_604:\n\tshl.s\t5, r7, r8\n\tptr.add\tr1, r8, r9\n\tld\tr9, r9\n\tst.1\tr8, r9\n\tadd\t1, r7, r7\n\tsub!\tr7, r5, r8\n\tjump.lt\t@.BB0_604\n.BB0_605:\n\tsub!\tr6, r0, r7\n\tjump.eq\t@.BB0_607\n\tshl.s\t3, r6, r6\n\tshl.s\t5, r5, r5\n\tld.1\tr5, r7\n\tshl\tr7, r6, r7\n\tshr\tr7, r6, r7\n\tptr.add\tr1, r5, r8\n\tld\tr8, r8\n\tsub\t256, r6, r6\n\tshr\tr8, r6, r8\n\tshl\tr8, r6, r6\n\tor\tr6, r7, r6\n\tst.1\tr5, r6\n.BB0_607:\n\tadd\tr4, r0, stack[@returndatasize]\n\tptr.add\tr1, r0, stack[@ptr_return_data]\n\tld.1\t64, r5\n\tadd\tr5, r0, stack-[14]\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_615\n\tld.1\t0, r1\n\tand!\t@CPI0_6[0], r1, stack-[12]\n\tjump.ne\t@.BB0_648\n\tadd\t@CPI0_90[0], r0, r1\n\tadd\tstack-[14], r0, r3\n\tst.1\tr3, r1\n\tadd\t@CPI0_0[0], r0, r1\n\tsub.s!\t@CPI0_0[0], r3, r2\n\tadd.ge\tr1, r0, r3\n\tshl.s\t64, r3, r1\n\tor\t@CPI0_59[0], r1, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.BB0_610:\n\tld.1\t64, r2\n\tand\t31, r3, r4\n\tshr.s!\t5, r3, r5\n\tjump.eq\t@.BB0_613\n\tadd\tr0, r0, r6\n.BB0_612:\n\tshl.s\t5, r6, r7\n\tadd\tr2, r7, r8\n\tptr.add\tr1, r7, r7\n\tld\tr7, r7\n\tst.1\tr8, r7\n\tadd\t1, r6, r6\n\tsub!\tr6, r5, r7\n\tjump.lt\t@.BB0_612\n.BB0_613:\n\tsub!\tr4, r0, r6\n\tjump.eq\t@.BB0_68\n\tjump\t@.BB0_67\n.BB0_615:\n\tand\t31, r4, r2\n\tshr.s!\t5, r4, r3\n\tadd\tstack-[14], r0, r8\n\tjump.eq\t@.BB0_618\n\tadd\tr0, r0, r5\n.BB0_617:\n\tshl.s\t5, r5, r6\n\tadd\tr8, r6, r7\n\tptr.add\tr1, r6, r6\n\tld\tr6, r6\n\tst.1\tr7, r6\n\tadd\t1, r5, r5\n\tsub!\tr5, r3, r6\n\tjump.lt\t@.BB0_617\n.BB0_618:\n\tsub!\tr2, r0, r5\n\tjump.eq\t@.BB0_620\n\tshl.s\t5, r3, r3\n\tptr.add\tr1, r3, r1\n\tadd\tstack-[14], r3, r3\n\tshl.s\t3, r2, r2\n\tld.1\tr3, r5\n\tshl\tr5, r2, r5\n\tshr\tr5, r2, r5\n\tld\tr1, r1\n\tsub\t256, r2, r2\n\tshr\tr1, r2, r1\n\tshl\tr1, r2, r1\n\tor\tr1, r5, r1\n\tst.1\tr3, r1\n.BB0_620:\n\tadd\t@CPI0_0[0], r0, r1\n\tadd\tstack-[14], r0, r3\n\tsub.s!\t@CPI0_0[0], r3, r2\n\tadd.ge\tr1, r0, r3\n\tshl.s\t64, r3, r1\n\tshl.s\t96, r4, r2\n\tor\tr1, r2, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.BB0_621:\n\tptr.add\tr1, r0, stack[@ptr_return_data]\n\tadd\tr1, r0, r2\n\tshr.s\t96, r2, r2\n\tand\t@CPI0_0[0], r2, stack[@returndatasize]\n\tand\t@CPI0_0[0], r2, r2\n.BB0_622:\n\tld.1\t64, r3\n\tand\t31, r2, r4\n\tshr.s!\t5, r2, r5\n\tjump.eq\t@.BB0_625\n\tadd\tr0, r0, r6\n.BB0_624:\n\tshl.s\t5, r6, r7\n\tadd\tr3, r7, r8\n\tptr.add\tr1, r7, r7\n\tld\tr7, r7\n\tst.1\tr8, r7\n\tadd\t1, r6, r6\n\tsub!\tr6, r5, r7\n\tjump.lt\t@.BB0_624\n.BB0_625:\n\tsub!\tr4, r0, r6\n\tjump.eq\t@.BB0_263\n\tjump\t@.BB0_262\n.BB0_627:\n\tld.1\t64, r2\n\tand\t31, r3, r4\n\tshr.s!\t5, r3, r5\n\tjump.eq\t@.BB0_630\n\tadd\tr0, r0, r6\n.BB0_629:\n\tshl.s\t5, r6, r7\n\tadd\tr2, r7, r8\n\tptr.add\tr1, r7, r7\n\tld\tr7, r7\n\tst.1\tr8, r7\n\tadd\t1, r6, r6\n\tsub!\tr6, r5, r7\n\tjump.lt\t@.BB0_629\n.BB0_630:\n\tsub!\tr4, r0, r6\n\tjump.eq\t@.BB0_68\n\tjump\t@.BB0_67\n.BB0_632:\n\tsub.s\tstack-[9], r1, r1\n\tadd\t@CPI0_0[0], r0, r4\n\tsub.s!\t@CPI0_0[0], r1, r5\n\tadd.ge\tr4, r0, r1\n\tsub.s!\t@CPI0_0[0], r3, r5\n\tadd.ge\tr4, r0, r3\n\tshl.s\t192, r3, r3\n\tshl.s\t96, r1, r1\n\tor\tr3, r1, r1\n\tor\tstack-[11], r1, r1\n\tnear_call\tr0, @__farcall, @DEFAULT_UNWIND\n\tadd\tstack-[9], r0, r10\n\tadd\tr1, r0, r3\n\tshr.s\t96, r3, r3\n\tand\t@CPI0_0[0], r3, r3\n\tsub.s!\t32, r3, r4\n\tadd\tr3, r0, r4\n\tadd.ge\t32, r0, r4\n\tand\t31, r4, r5\n\tshr.s!\t5, r4, r6\n\tjump.eq\t@.BB0_635\n\tadd\tr0, r0, r7\n.BB0_634:\n\tshl.s\t5, r7, r8\n\tadd\tr10, r8, r9\n\tptr.add\tr1, r8, r8\n\tld\tr8, r8\n\tst.1\tr9, r8\n\tadd\t1, r7, r7\n\tsub!\tr7, r6, r8\n\tjump.lt\t@.BB0_634\n.BB0_635:\n\tsub!\tr5, r0, r7\n\tjump.eq\t@.BB0_637\n\tshl.s\t5, r6, r6\n\tptr.add\tr1, r6, r7\n\tadd\tstack-[9], r6, r6\n\tshl.s\t3, r5, r5\n\tld.1\tr6, r8\n\tshl\tr8, r5, r8\n\tshr\tr8, r5, r8\n\tld\tr7, r7\n\tsub\t256, r5, r5\n\tshr\tr7, r5, r7\n\tshl\tr7, r5, r5\n\tor\tr5, r8, r5\n\tst.1\tr6, r5\n.BB0_637:\n\tadd\tr3, r0, stack[@returndatasize]\n\tptr.add\tr1, r0, stack[@ptr_return_data]\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_690\n.BB0_638:\n\tadd\t31, r4, r1\n\tand\t96, r1, r1\n\tadd\tstack-[9], r1, r1\n\tsub.s!\t@CPI0_51[0], r1, r2\n\tjump.gt\t@.BB0_210\n\tst.1\t64, r1\n\tsub.s!\t32, r3, r1\n\tjump.lt\t@.BB0_565\n\tadd\tstack-[9], r0, r1\n\tld.1\tr1, r1\n\tadd\tr1, r0, stack-[14]\n\tadd\t@CPI0_7[0], r0, r1\n\tst.2\t0, r1\n\tadd\t@CPI0_5[0], r0, r1\n\tst.2\t4, r1\n\tadd\t@CPI0_0[0], r0, r1\n\tcontext.gas_left\tr2\n\tsub.s!\t@CPI0_0[0], r2, r3\n\tadd.ge\tr1, r0, r2\n\tshl.s\t192, r2, r1\n\tor\t@CPI0_8[0], r1, r1\n\tadd\t32770, r0, r2\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_756\n\tld\tr1, r1\n\tsub!\tr1, r0, r1\n\tjump.eq\t@.BB0_565\n\tld.1\t64, r4\n\tadd\t@CPI0_56[0], r0, r1\n\tst.1\tr4, r1\n\tadd\t4, r4, r1\n\tadd\tstack-[14], r0, r2\n\tst.1\tr1, r2\n\tadd\t36, r4, r1\n\tst.1\tr1, r0\n\tadd\t@CPI0_0[0], r0, r1\n\tcontext.gas_left\tr2\n\tsub.s!\t@CPI0_0[0], r2, r3\n\tadd.ge\tr1, r0, r2\n\tsub.s!\t@CPI0_0[0], r4, r3\n\tadd\tr4, r0, stack-[14]\n\tadd.lt\tr4, r0, r1\n\tshl.s\t64, r1, r1\n\tshl.s\t192, r2, r2\n\tor\tr2, r1, r1\n\tor\t@CPI0_57[0], r1, r1\n\tadd\t@CPI0_5[0], r0, r2\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tadd\tr1, r0, r3\n\tshr.s\t96, r3, r3\n\tand\t@CPI0_0[0], r3, stack[@returndatasize]\n\tand\t@CPI0_0[0], r3, r3\n\tptr.add\tr1, r0, stack[@ptr_return_data]\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_730\n\tadd\tstack-[14], r0, r1\n\tsub.s!\t@CPI0_51[0], r1, r1\n\tjump.gt\t@.BB0_210\n\tadd\tstack-[14], r0, r1\n\tst.1\t64, r1\n\tadd\t@CPI0_7[0], r0, r1\n\tst.2\t0, r1\n\tadd\t@CPI0_5[0], r0, r1\n\tst.2\t4, r1\n\tadd\t@CPI0_0[0], r0, r1\n\tcontext.gas_left\tr2\n\tsub.s!\t@CPI0_0[0], r2, r3\n\tadd.ge\tr1, r0, r2\n\tshl.s\t192, r2, r1\n\tor\t@CPI0_8[0], r1, r1\n\tadd\t32770, r0, r2\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_756\n\tld\tr1, r1\n\tsub!\tr1, r0, r1\n\tjump.eq\t@.BB0_565\n\tld.1\t64, r4\n\tadd\t@CPI0_58[0], r0, r1\n\tst.1\tr4, r1\n\tadd\t@CPI0_0[0], r0, r1\n\tcontext.gas_left\tr2\n\tsub.s!\t@CPI0_0[0], r2, r3\n\tadd.ge\tr1, r0, r2\n\tsub.s!\t@CPI0_0[0], r4, r3\n\tadd\tr4, r0, stack-[14]\n\tadd.lt\tr4, r0, r1\n\tshl.s\t64, r1, r1\n\tshl.s\t192, r2, r2\n\tor\tr2, r1, r1\n\tor\t@CPI0_59[0], r1, r1\n\tadd\t@CPI0_5[0], r0, r2\n\tnear_call\tr0, @__farcall, @DEFAULT_UNWIND\n\tadd\tr1, r0, r3\n\tshr.s\t96, r3, r3\n\tand\t@CPI0_0[0], r3, stack[@returndatasize]\n\tand\t@CPI0_0[0], r3, r3\n\tptr.add\tr1, r0, stack[@ptr_return_data]\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_776\n\tjump\t@.BB0_29\n.BB0_648:\n\tadd\t@CPI0_82[0], r0, r1\n\tadd\tstack-[14], r0, r2\n\tst.1\tr2, r1\n\tcontext.gas_left\tr1\n\tadd\tstack-[13], r0, r2\n\tsub.s!\t4, r2, r2\n\tjump.eq\t@.BB0_655\n\tadd\t@CPI0_0[0], r0, r2\n\tsub.s!\t@CPI0_0[0], r1, r3\n\tadd.ge\tr2, r0, r1\n\tadd\tstack-[14], r0, r4\n\tsub.s!\t@CPI0_0[0], r4, r3\n\tadd.lt\tr4, r0, r2\n\tshl.s\t64, r2, r2\n\tshl.s\t192, r1, r1\n\tor\tr1, r2, r1\n\tor\t@CPI0_59[0], r1, r1\n\tadd\tstack-[13], r0, r2\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tadd\tstack-[14], r0, r10\n\tadd\tr1, r0, r3\n\tshr.s\t96, r3, r3\n\tand\t@CPI0_0[0], r3, r4\n\tsub.s!\t32, r4, r3\n\tadd\tr4, r0, r3\n\tadd.ge\t32, r0, r3\n\tand\t31, r3, r5\n\tshr.s!\t5, r3, r6\n\tjump.eq\t@.BB0_652\n\tadd\tr0, r0, r7\n.BB0_651:\n\tshl.s\t5, r7, r8\n\tadd\tr10, r8, r9\n\tptr.add\tr1, r8, r8\n\tld\tr8, r8\n\tst.1\tr9, r8\n\tadd\t1, r7, r7\n\tsub!\tr7, r6, r8\n\tjump.lt\t@.BB0_651\n.BB0_652:\n\tsub!\tr5, r0, r7\n\tjump.eq\t@.BB0_654\n\tshl.s\t5, r6, r6\n\tptr.add\tr1, r6, r7\n\tadd\tstack-[14], r6, r6\n\tshl.s\t3, r5, r5\n\tld.1\tr6, r8\n\tshl\tr8, r5, r8\n\tshr\tr8, r5, r8\n\tld\tr7, r7\n\tsub\t256, r5, r5\n\tshr\tr7, r5, r7\n\tshl\tr7, r5, r5\n\tor\tr5, r8, r5\n\tst.1\tr6, r5\n.BB0_654:\n\tadd\tr4, r0, stack[@returndatasize]\n\tptr.add\tr1, r0, stack[@ptr_return_data]\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_708\n.BB0_655:\n\tadd\t31, r3, r1\n\tand\t96, r1, r2\n\tadd\tstack-[14], r2, r1\n\tsub!\tr1, r2, r2\n\tadd\t0, r0, r2\n\tadd.lt\t1, r0, r2\n\tsub.s!\t@CPI0_51[0], r1, r4\n\tjump.gt\t@.BB0_210\n\tand!\t1, r2, r2\n\tjump.ne\t@.BB0_210\n\tst.1\t64, r1\n\tsub.s!\t32, r3, r1\n\tjump.lt\t@.BB0_565\n\tadd\tstack-[14], r0, r1\n\tld.1\tr1, r1\n\tadd\tr1, r0, stack-[14]\n\tsub.s!\t@CPI0_6[0], r1, r1\n\tjump.gt\t@.BB0_565\n\tadd\t@CPI0_7[0], r0, r1\n\tst.2\t0, r1\n\tadd\t@CPI0_5[0], r0, r1\n\tst.2\t4, r1\n\tadd\t@CPI0_0[0], r0, r1\n\tcontext.gas_left\tr2\n\tsub.s!\t@CPI0_0[0], r2, r3\n\tadd.ge\tr1, r0, r2\n\tshl.s\t192, r2, r1\n\tor\t@CPI0_8[0], r1, r1\n\tadd\t32770, r0, r2\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_756\n\tld\tr1, r1\n\tsub!\tr1, r0, r1\n\tjump.eq\t@.BB0_565\n\tld.1\t64, r4\n\tadd\t36, r4, r1\n\tadd\tstack-[14], r0, r2\n\tst.1\tr1, r2\n\tadd\t@CPI0_89[0], r0, r1\n\tst.1\tr4, r1\n\tadd\t4, r4, r1\n\tadd\tstack-[12], r0, r2\n\tst.1\tr1, r2\n\tadd\t@CPI0_0[0], r0, r1\n\tcontext.gas_left\tr2\n\tsub.s!\t@CPI0_0[0], r2, r3\n\tadd.ge\tr1, r0, r2\n\tsub.s!\t@CPI0_0[0], r4, r3\n\tadd\tr4, r0, stack-[14]\n\tadd.lt\tr4, r0, r1\n\tshl.s\t64, r1, r1\n\tshl.s\t192, r2, r2\n\tor\tr2, r1, r1\n\tor\t@CPI0_57[0], r1, r1\n\tadd\t@CPI0_5[0], r0, r2\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tadd\tr1, r0, r3\n\tshr.s\t96, r3, r3\n\tand\t@CPI0_0[0], r3, stack[@returndatasize]\n\tand\t@CPI0_0[0], r3, r3\n\tptr.add\tr1, r0, stack[@ptr_return_data]\n\tand!\t1, r2, r2\n\tjump.ne\t@.BB0_29\n\tld.1\t64, r2\n\tand\t31, r3, r4\n\tshr.s!\t5, r3, r5\n\tjump.eq\t@.BB0_665\n\tadd\tr0, r0, r6\n.BB0_664:\n\tshl.s\t5, r6, r7\n\tadd\tr2, r7, r8\n\tptr.add\tr1, r7, r7\n\tld\tr7, r7\n\tst.1\tr8, r7\n\tadd\t1, r6, r6\n\tsub!\tr6, r5, r7\n\tjump.lt\t@.BB0_664\n.BB0_665:\n\tsub!\tr4, r0, r6\n\tjump.eq\t@.BB0_68\n\tjump\t@.BB0_67\n.BB0_667:\n\tand\t@CPI0_6[0], r1, r1\n\tadd\t35, r0, r2\n\tsload\tr2, r3\n\tand\t@CPI0_11[0], r3, r3\n\tor\tr3, r1, r1\n\tsstore\tr2, r1\n\tadd\tstack-[13], r0, r1\n\tsload\tr1, r2\n\tld.1\t64, r3\n\tadd\t@CPI0_48[0], r0, r1\n\tadd\tr3, r0, stack-[14]\n\tst.1.inc\tr3, r1, r1\n\tadd\tr1, r0, stack-[13]\n\tcontext.gas_left\tr1\n\tand\t@CPI0_6[0], r2, r2\n\tsub.s!\t4, r2, r3\n\tjump.ne\t@.BB0_695\n\tadd\tstack[@returndatasize], r0, r3\n\tsub.s!\t64, r3, r1\n\tadd\tr3, r0, r4\n\tadd.ge\t64, r0, r4\n\tjump\t@.BB0_701\n.BB0_669:\n\tadd\t37, r0, r1\n\tadd\tr1, r0, stack-[12]\n\tsload\tr1, r1\n\tadd\tr1, r0, stack-[14]\n\tadd\t@CPI0_7[0], r0, r1\n\tst.2\t0, r1\n\tadd\t@CPI0_5[0], r0, r1\n\tst.2\t4, r1\n\tadd\t@CPI0_0[0], r0, r1\n\tcontext.gas_left\tr2\n\tsub.s!\t@CPI0_0[0], r2, r3\n\tadd.ge\tr1, r0, r2\n\tshl.s\t192, r2, r1\n\tor\t@CPI0_8[0], r1, r1\n\tadd\t32770, r0, r2\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tadd\tstack-[14], r0, r3\n\tand\t@CPI0_6[0], r3, r3\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_756\n\tld\tr1, r1\n\tsub!\tr1, r0, r1\n\tjump.eq\t@.BB0_565\n\tld.1\t64, r4\n\tadd\t@CPI0_53[0], r0, r1\n\tst.1\tr4, r1\n\tadd\t4, r4, r1\n\tst.1\tr1, r3\n\tadd\t@CPI0_0[0], r0, r1\n\tcontext.gas_left\tr2\n\tsub.s!\t@CPI0_0[0], r2, r3\n\tadd.ge\tr1, r0, r2\n\tsub.s!\t@CPI0_0[0], r4, r3\n\tadd\tr4, r0, stack-[14]\n\tadd.lt\tr4, r0, r1\n\tshl.s\t64, r1, r1\n\tshl.s\t192, r2, r2\n\tor\tr2, r1, r1\n\tor\t@CPI0_54[0], r1, r1\n\tadd\t@CPI0_5[0], r0, r2\n\tnear_call\tr0, @__farcall, @DEFAULT_UNWIND\n\tadd\tr1, r0, r3\n\tshr.s\t96, r3, r3\n\tand\t@CPI0_0[0], r3, stack[@returndatasize]\n\tand\t@CPI0_0[0], r3, r3\n\tptr.add\tr1, r0, stack[@ptr_return_data]\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_725\n\tadd\tstack-[14], r0, r1\n\tsub.s!\t@CPI0_51[0], r1, r1\n\tjump.gt\t@.BB0_210\n\tadd\tstack-[14], r0, r1\n\tst.1\t64, r1\n\tadd\tstack-[12], r0, r1\n\tsload\tr1, r1\n\tadd\tr1, r0, stack-[14]\n\tadd\t36, r0, r1\n\tsload\tr1, r1\n\tadd\t@CPI0_7[0], r0, r2\n\tst.2\t0, r2\n\tand\t@CPI0_6[0], r1, r1\n\tadd\tr1, r0, stack-[12]\n\tst.2\t4, r1\n\tadd\t@CPI0_0[0], r0, r1\n\tcontext.gas_left\tr2\n\tsub.s!\t@CPI0_0[0], r2, r3\n\tadd.ge\tr1, r0, r2\n\tshl.s\t192, r2, r1\n\tor\t@CPI0_8[0], r1, r1\n\tadd\t32770, r0, r2\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tadd\tstack-[14], r0, r3\n\tand\t@CPI0_6[0], r3, r3\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_756\n\tld\tr1, r1\n\tsub!\tr1, r0, r1\n\tjump.eq\t@.BB0_565\n\tld.1\t64, r4\n\tadd\t@CPI0_95[0], r0, r1\n\tst.1\tr4, r1\n\tadd\t4, r4, r1\n\tadd\t64, r0, r2\n\tst.1\tr1, r2\n\tadd\tstack-[10], r0, r1\n\tld.1\tr1, r1\n\tadd\t68, r4, r2\n\tst.1\tr2, r1\n\tadd\tr4, r0, stack-[14]\n\tadd\t100, r4, r2\n\tshl.s\t5, r1, r4\n\tadd\tr4, r2, r6\n\tsub!\tr1, r0, r4\n\tjump.ne\t@.BB0_762\n.BB0_676:\n\tadd\tstack-[14], r0, r1\n\tadd\t36, r1, r1\n\tst.1\tr1, r3\n\tcontext.gas_left\tr1\n\tadd\tstack-[12], r0, r2\n\tsub.s!\t4, r2, r2\n\tjump.eq\t@.BB0_678\n\tadd\tstack-[14], r0, r5\n\tsub\tr6, r5, r2\n\tadd\t@CPI0_0[0], r0, r3\n\tsub.s!\t@CPI0_0[0], r5, r4\n\tadd\tr3, r0, r4\n\tadd.lt\tr5, r0, r4\n\tshl.s\t64, r4, r4\n\tsub.s!\t@CPI0_0[0], r2, r5\n\tadd.ge\tr3, r0, r2\n\tshl.s\t96, r2, r2\n\tor\tr2, r4, r2\n\tsub.s!\t@CPI0_0[0], r1, r4\n\tadd.ge\tr3, r0, r1\n\tshl.s\t192, r1, r1\n\tor\tr2, r1, r1\n\tadd\tstack-[12], r0, r2\n\tnear_call\tr0, @__farcall, @DEFAULT_UNWIND\n\tadd\tr1, r0, r3\n\tshr.s\t96, r3, r3\n\tand\t@CPI0_0[0], r3, stack[@returndatasize]\n\tand\t@CPI0_0[0], r3, r3\n\tptr.add\tr1, r0, stack[@ptr_return_data]\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_781\n.BB0_678:\n\tadd\tstack-[14], r0, r1\n\tsub.s!\t@CPI0_51[0], r1, r1\n\tjump.gt\t@.BB0_210\n\tadd\tstack-[14], r0, r1\n\tst.1\t64, r1\n\tadd\t@CPI0_7[0], r0, r1\n\tst.2\t0, r1\n\tadd\t@CPI0_5[0], r0, r1\n\tst.2\t4, r1\n\tadd\t@CPI0_0[0], r0, r1\n\tcontext.gas_left\tr2\n\tsub.s!\t@CPI0_0[0], r2, r3\n\tadd.ge\tr1, r0, r2\n\tshl.s\t192, r2, r1\n\tor\t@CPI0_8[0], r1, r1\n\tadd\t32770, r0, r2\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_756\n\tld\tr1, r1\n\tsub!\tr1, r0, r1\n\tjump.eq\t@.BB0_565\n\tld.1\t64, r4\n\tadd\t@CPI0_58[0], r0, r1\n\tst.1\tr4, r1\n\tadd\t@CPI0_0[0], r0, r1\n\tcontext.gas_left\tr2\n\tsub.s!\t@CPI0_0[0], r2, r3\n\tadd.ge\tr1, r0, r2\n\tsub.s!\t@CPI0_0[0], r4, r3\n\tadd\tr4, r0, stack-[14]\n\tadd.lt\tr4, r0, r1\n\tshl.s\t64, r1, stack-[12]\n\tshl.s\t192, r2, r1\n\tor\tstack-[12], r1, r1\n\tor\t@CPI0_59[0], r1, r1\n\tadd\t@CPI0_5[0], r0, r2\n\tnear_call\tr0, @__farcall, @DEFAULT_UNWIND\n\tadd\tr1, r0, r3\n\tshr.s\t96, r3, r3\n\tand\t@CPI0_0[0], r3, stack[@returndatasize]\n\tand\t@CPI0_0[0], r3, r3\n\tptr.add\tr1, r0, stack[@ptr_return_data]\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_791\n\tadd\tstack-[14], r0, r1\n\tsub.s!\t@CPI0_51[0], r1, r1\n\tjump.gt\t@.BB0_210\n\tadd\tstack-[14], r0, r5\n\tst.1\t64, r5\n\tadd\tstack-[11], r0, r1\n\tsload\tr1, r2\n\tadd\tstack-[13], r0, r1\n\tsload\tr1, r1\n\tadd\t@CPI0_80[0], r0, r4\n\tst.1\tr5, r4\n\tadd\t4, r5, r4\n\tshr.s\t8, r1, r1\n\tand\t@CPI0_6[0], r1, r1\n\tst.1\tr4, r1\n\tcontext.gas_left\tr1\n\tand\t@CPI0_6[0], r2, r2\n\tsub.s!\t4, r2, r4\n\tjump.ne\t@.BB0_796\n\tsub.s!\t32, r3, r1\n\tadd.ge\t32, r0, r3\n\tjump\t@.BB0_802\n.BB0_685:\n\tld.1\t64, r2\n\tand\t31, r3, r4\n\tshr.s!\t5, r3, r5\n\tjump.eq\t@.BB0_688\n\tadd\tr0, r0, r6\n.BB0_687:\n\tshl.s\t5, r6, r7\n\tadd\tr2, r7, r8\n\tptr.add\tr1, r7, r7\n\tld\tr7, r7\n\tst.1\tr8, r7\n\tadd\t1, r6, r6\n\tsub!\tr6, r5, r7\n\tjump.lt\t@.BB0_687\n.BB0_688:\n\tsub!\tr4, r0, r6\n\tjump.eq\t@.BB0_68\n\tjump\t@.BB0_67\n.BB0_690:\n\tld.1\t64, r2\n\tand\t31, r3, r4\n\tshr.s!\t5, r3, r5\n\tjump.eq\t@.BB0_693\n\tadd\tr0, r0, r6\n.BB0_692:\n\tshl.s\t5, r6, r7\n\tadd\tr2, r7, r8\n\tptr.add\tr1, r7, r7\n\tld\tr7, r7\n\tst.1\tr8, r7\n\tadd\t1, r6, r6\n\tsub!\tr6, r5, r7\n\tjump.lt\t@.BB0_692\n.BB0_693:\n\tsub!\tr4, r0, r6\n\tjump.eq\t@.BB0_68\n\tjump\t@.BB0_67\n.BB0_695:\n\tadd\t@CPI0_0[0], r0, r3\n\tsub.s!\t@CPI0_0[0], r1, r4\n\tadd.ge\tr3, r0, r1\n\tadd\tstack-[14], r0, r5\n\tsub.s!\t@CPI0_0[0], r5, r4\n\tadd.lt\tr5, r0, r3\n\tshl.s\t64, r3, r3\n\tshl.s\t192, r1, r1\n\tor\tr1, r3, r1\n\tor\t@CPI0_59[0], r1, r1\n\tnear_call\tr0, @__farcall, @DEFAULT_UNWIND\n\tadd\tstack-[14], r0, r10\n\tadd\tr1, r0, r3\n\tshr.s\t96, r3, r3\n\tand\t@CPI0_0[0], r3, r3\n\tsub.s!\t64, r3, r4\n\tadd\tr3, r0, r4\n\tadd.ge\t64, r0, r4\n\tand\t31, r4, r5\n\tshr.s!\t5, r4, r6\n\tjump.eq\t@.BB0_698\n\tadd\tr0, r0, r7\n.BB0_697:\n\tshl.s\t5, r7, r8\n\tadd\tr10, r8, r9\n\tptr.add\tr1, r8, r8\n\tld\tr8, r8\n\tst.1\tr9, r8\n\tadd\t1, r7, r7\n\tsub!\tr7, r6, r8\n\tjump.lt\t@.BB0_697\n.BB0_698:\n\tsub!\tr5, r0, r7\n\tjump.eq\t@.BB0_700\n\tshl.s\t5, r6, r6\n\tptr.add\tr1, r6, r7\n\tadd\tstack-[14], r6, r6\n\tshl.s\t3, r5, r5\n\tld.1\tr6, r8\n\tshl\tr8, r5, r8\n\tshr\tr8, r5, r8\n\tld\tr7, r7\n\tsub\t256, r5, r5\n\tshr\tr7, r5, r7\n\tshl\tr7, r5, r5\n\tor\tr5, r8, r5\n\tst.1\tr6, r5\n.BB0_700:\n\tadd\tr3, r0, stack[@returndatasize]\n\tptr.add\tr1, r0, stack[@ptr_return_data]\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_720\n.BB0_701:\n\tadd\t31, r4, r1\n\tand\t224, r1, r2\n\tadd\tstack-[14], r2, r1\n\tsub!\tr1, r2, r2\n\tadd\t0, r0, r2\n\tadd.lt\t1, r0, r2\n\tsub.s!\t@CPI0_51[0], r1, r4\n\tjump.gt\t@.BB0_210\n\tand!\t1, r2, r2\n\tjump.ne\t@.BB0_210\n\tst.1\t64, r1\n\tsub.s!\t64, r3, r2\n\tjump.lt\t@.BB0_565\n\tsub.s!\t@CPI0_69[0], r1, r2\n\tjump.gt\t@.BB0_210\n\tadd\t64, r1, r2\n\tst.1\t64, r2\n\tadd\tstack-[14], r0, r2\n\tld.1\tr2, r2\n\tsub.s!\t@CPI0_6[0], r2, r3\n\tjump.gt\t@.BB0_565\n\tst.1.inc\tr1, r2, r2\n\tadd\tstack-[13], r0, r3\n\tld.1\tr3, r3\n\tsub.s!\t@CPI0_6[0], r3, r4\n\tjump.gt\t@.BB0_565\n\tst.1\tr2, r3\n\tld.1\tr1, r1\n\tand\t@CPI0_6[0], r1, r1\n\tadd\t36, r0, r2\n\tsload\tr2, r3\n\tand\t@CPI0_11[0], r3, r3\n\tor\tr3, r1, r1\n\tsstore\tr2, r1\n\tadd\tr0, r0, r1\n\tret.ok.to_label\tr1, @DEFAULT_FAR_RETURN\n.BB0_708:\n\tld.1\t64, r2\n\tand\t31, r4, r3\n\tshr.s!\t5, r4, r5\n\tjump.eq\t@.BB0_711\n\tadd\tr0, r0, r6\n.BB0_710:\n\tshl.s\t5, r6, r7\n\tadd\tr2, r7, r8\n\tptr.add\tr1, r7, r7\n\tld\tr7, r7\n\tst.1\tr8, r7\n\tadd\t1, r6, r6\n\tsub!\tr6, r5, r7\n\tjump.lt\t@.BB0_710\n.BB0_711:\n\tsub!\tr3, r0, r6\n\tjump.eq\t@.BB0_714\n.BB0_713:\n\tshl.s\t5, r5, r5\n\tptr.add\tr1, r5, r1\n\tadd\tr2, r5, r5\n\tshl.s\t3, r3, r3\n\tld.1\tr5, r6\n\tshl\tr6, r3, r6\n\tshr\tr6, r3, r6\n\tld\tr1, r1\n\tsub\t256, r3, r3\n\tshr\tr1, r3, r1\n\tshl\tr1, r3, r1\n\tor\tr1, r6, r1\n\tst.1\tr5, r1\n.BB0_714:\n\tadd\t@CPI0_0[0], r0, r1\n\tsub.s!\t@CPI0_0[0], r2, r3\n\tadd.ge\tr1, r0, r2\n\tshl.s\t64, r2, r1\n\tshl.s\t96, r4, r2\n\tor\tr1, r2, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.BB0_715:\n\tld.1\t64, r2\n\tand\t31, r3, r4\n\tshr.s!\t5, r3, r5\n\tjump.eq\t@.BB0_718\n\tadd\tr0, r0, r6\n.BB0_717:\n\tshl.s\t5, r6, r7\n\tadd\tr2, r7, r8\n\tptr.add\tr1, r7, r7\n\tld\tr7, r7\n\tst.1\tr8, r7\n\tadd\t1, r6, r6\n\tsub!\tr6, r5, r7\n\tjump.lt\t@.BB0_717\n.BB0_718:\n\tsub!\tr4, r0, r6\n\tjump.eq\t@.BB0_68\n\tjump\t@.BB0_67\n.BB0_720:\n\tld.1\t64, r2\n\tand\t31, r3, r4\n\tshr.s!\t5, r3, r5\n\tjump.eq\t@.BB0_723\n\tadd\tr0, r0, r6\n.BB0_722:\n\tshl.s\t5, r6, r7\n\tadd\tr2, r7, r8\n\tptr.add\tr1, r7, r7\n\tld\tr7, r7\n\tst.1\tr8, r7\n\tadd\t1, r6, r6\n\tsub!\tr6, r5, r7\n\tjump.lt\t@.BB0_722\n.BB0_723:\n\tsub!\tr4, r0, r6\n\tjump.eq\t@.BB0_68\n\tjump\t@.BB0_67\n.BB0_725:\n\tld.1\t64, r2\n\tand\t31, r3, r4\n\tshr.s!\t5, r3, r5\n\tjump.eq\t@.BB0_728\n\tadd\tr0, r0, r6\n.BB0_727:\n\tshl.s\t5, r6, r7\n\tadd\tr2, r7, r8\n\tptr.add\tr1, r7, r7\n\tld\tr7, r7\n\tst.1\tr8, r7\n\tadd\t1, r6, r6\n\tsub!\tr6, r5, r7\n\tjump.lt\t@.BB0_727\n.BB0_728:\n\tsub!\tr4, r0, r6\n\tjump.eq\t@.BB0_68\n\tjump\t@.BB0_67\n.BB0_730:\n\tld.1\t64, r2\n\tand\t31, r3, r4\n\tshr.s!\t5, r3, r5\n\tjump.eq\t@.BB0_733\n\tadd\tr0, r0, r6\n.BB0_732:\n\tshl.s\t5, r6, r7\n\tadd\tr2, r7, r8\n\tptr.add\tr1, r7, r7\n\tld\tr7, r7\n\tst.1\tr8, r7\n\tadd\t1, r6, r6\n\tsub!\tr6, r5, r7\n\tjump.lt\t@.BB0_732\n.BB0_733:\n\tsub!\tr4, r0, r6\n\tjump.eq\t@.BB0_68\n\tjump\t@.BB0_67\n.BB0_735:\n\tld.1\t64, r2\n\tand\t31, r3, r4\n\tshr.s!\t5, r3, r5\n\tjump.eq\t@.BB0_738\n\tadd\tr0, r0, r6\n.BB0_737:\n\tshl.s\t5, r6, r7\n\tadd\tr2, r7, r8\n\tptr.add\tr1, r7, r7\n\tld\tr7, r7\n\tst.1\tr8, r7\n\tadd\t1, r6, r6\n\tsub!\tr6, r5, r7\n\tjump.lt\t@.BB0_737\n.BB0_738:\n\tsub!\tr4, r0, r6\n\tjump.eq\t@.BB0_68\n\tjump\t@.BB0_67\n.BB0_740:\n\tadd\t@CPI0_0[0], r0, r3\n\tsub.s!\t@CPI0_0[0], r1, r4\n\tadd.ge\tr3, r0, r1\n\tadd\tstack-[8], r0, r5\n\tsub.s!\t@CPI0_0[0], r5, r4\n\tadd.lt\tr5, r0, r3\n\tshl.s\t64, r3, r3\n\tshl.s\t192, r1, r1\n\tor\tr1, r3, r1\n\tor\t@CPI0_54[0], r1, r1\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tadd\tstack-[8], r0, r10\n\tadd\tr1, r0, r3\n\tshr.s\t96, r3, r3\n\tand\t@CPI0_0[0], r3, r3\n\tsub.s!\t32, r3, r4\n\tadd\tr3, r0, r4\n\tadd.ge\t32, r0, r4\n\tand\t31, r4, r5\n\tshr.s!\t5, r4, r6\n\tjump.eq\t@.BB0_743\n\tadd\tr0, r0, r7\n.BB0_742:\n\tshl.s\t5, r7, r8\n\tadd\tr10, r8, r9\n\tptr.add\tr1, r8, r8\n\tld\tr8, r8\n\tst.1\tr9, r8\n\tadd\t1, r7, r7\n\tsub!\tr7, r6, r8\n\tjump.lt\t@.BB0_742\n.BB0_743:\n\tsub!\tr5, r0, r7\n\tjump.eq\t@.BB0_745\n\tshl.s\t5, r6, r6\n\tptr.add\tr1, r6, r7\n\tadd\tstack-[8], r6, r6\n\tshl.s\t3, r5, r5\n\tld.1\tr6, r8\n\tshl\tr8, r5, r8\n\tshr\tr8, r5, r8\n\tld\tr7, r7\n\tsub\t256, r5, r5\n\tshr\tr7, r5, r7\n\tshl\tr7, r5, r5\n\tor\tr5, r8, r5\n\tst.1\tr6, r5\n.BB0_745:\n\tadd\tr3, r0, stack[@returndatasize]\n\tptr.add\tr1, r0, stack[@ptr_return_data]\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_757\n.BB0_746:\n\tadd\t31, r4, r1\n\tand\t96, r1, r1\n\tadd\tstack-[8], r1, r1\n\tsub.s!\t@CPI0_51[0], r1, r2\n\tjump.gt\t@.BB0_210\n\tst.1\t64, r1\n\tsub.s!\t32, r4, r1\n\tjump.lt\t@.BB0_565\n\tadd\tstack-[8], r0, r1\n\tld.1\tr1, r1\n\tadd\tr1, r0, stack-[14]\n\tadd\t@CPI0_7[0], r0, r1\n\tst.2\t0, r1\n\tadd\t@CPI0_5[0], r0, r1\n\tst.2\t4, r1\n\tadd\t@CPI0_0[0], r0, r1\n\tcontext.gas_left\tr2\n\tsub.s!\t@CPI0_0[0], r2, r3\n\tadd.ge\tr1, r0, r2\n\tshl.s\t192, r2, r1\n\tor\t@CPI0_8[0], r1, r1\n\tadd\t32770, r0, r2\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_756\n\tld\tr1, r1\n\tsub!\tr1, r0, r1\n\tjump.eq\t@.BB0_565\n\tld.1\t64, r4\n\tadd\t36, r4, r1\n\tadd\t@CPI0_46[0], r0, r2\n\tst.1\tr1, r2\n\tadd\t@CPI0_56[0], r0, r1\n\tst.1\tr4, r1\n\tadd\t4, r4, r1\n\tadd\tstack-[14], r0, r2\n\tst.1\tr1, r2\n\tadd\t@CPI0_0[0], r0, r1\n\tcontext.gas_left\tr2\n\tsub.s!\t@CPI0_0[0], r2, r3\n\tadd.ge\tr1, r0, r2\n\tsub.s!\t@CPI0_0[0], r4, r3\n\tadd\tr4, r0, stack-[14]\n\tadd.lt\tr4, r0, r1\n\tshl.s\t64, r1, r1\n\tshl.s\t192, r2, r2\n\tor\tr2, r1, r1\n\tor\t@CPI0_57[0], r1, r1\n\tadd\t@CPI0_5[0], r0, r2\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tadd\tr1, r0, r3\n\tshr.s\t96, r3, r3\n\tand\t@CPI0_0[0], r3, stack[@returndatasize]\n\tand\t@CPI0_0[0], r3, r3\n\tptr.add\tr1, r0, stack[@ptr_return_data]\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_786\n\tadd\tstack-[14], r0, r1\n\tsub.s!\t@CPI0_51[0], r1, r1\n\tjump.gt\t@.BB0_210\n\tadd\tstack-[14], r0, r1\n\tst.1\t64, r1\n\tadd\t@CPI0_7[0], r0, r1\n\tst.2\t0, r1\n\tadd\t@CPI0_5[0], r0, r1\n\tst.2\t4, r1\n\tadd\t@CPI0_0[0], r0, r1\n\tcontext.gas_left\tr2\n\tsub.s!\t@CPI0_0[0], r2, r3\n\tadd.ge\tr1, r0, r2\n\tshl.s\t192, r2, r1\n\tor\t@CPI0_8[0], r1, r1\n\tadd\t32770, r0, r2\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_756\n\tld\tr1, r1\n\tsub!\tr1, r0, r1\n\tjump.eq\t@.BB0_565\n\tld.1\t64, r4\n\tadd\t@CPI0_58[0], r0, r1\n\tst.1\tr4, r1\n\tadd\t@CPI0_0[0], r0, r1\n\tcontext.gas_left\tr2\n\tsub.s!\t@CPI0_0[0], r2, r3\n\tadd.ge\tr1, r0, r2\n\tsub.s!\t@CPI0_0[0], r4, r3\n\tadd\tr4, r0, stack-[14]\n\tadd.lt\tr4, r0, r1\n\tshl.s\t64, r1, r1\n\tshl.s\t192, r2, r2\n\tor\tr2, r1, r1\n\tor\t@CPI0_59[0], r1, r1\n\tadd\t@CPI0_5[0], r0, r2\n\tnear_call\tr0, @__farcall, @DEFAULT_UNWIND\n\tadd\tr1, r0, r3\n\tshr.s\t96, r3, r3\n\tand\t@CPI0_0[0], r3, stack[@returndatasize]\n\tand\t@CPI0_0[0], r3, r3\n\tptr.add\tr1, r0, stack[@ptr_return_data]\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_809\n\tjump\t@.BB0_29\n.BB0_756:\n\trevert\n.BB0_757:\n\tld.1\t64, r2\n\tand\t31, r3, r4\n\tshr.s!\t5, r3, r5\n\tjump.eq\t@.BB0_760\n\tadd\tr0, r0, r6\n.BB0_759:\n\tshl.s\t5, r6, r7\n\tadd\tr2, r7, r8\n\tptr.add\tr1, r7, r7\n\tld\tr7, r7\n\tst.1\tr8, r7\n\tadd\t1, r6, r6\n\tsub!\tr6, r5, r7\n\tjump.lt\t@.BB0_759\n.BB0_760:\n\tsub!\tr4, r0, r6\n\tjump.eq\t@.BB0_68\n\tjump\t@.BB0_67\n.BB0_762:\n\tadd\t288, r0, r4\n\tadd\tr0, r0, r5\n\tadd\tstack-[9], r0, r14\n\tadd\tstack-[8], r0, r15\n\tjump\t@.BB0_764\n.BB0_763:\n\tadd\t31, r7, r8\n\tand\tr8, r14, r8\n\tadd\tr7, r6, r7\n\tst.1\tr7, r0\n\tadd\tr8, r6, r6\n\tadd\t1, r5, r5\n\tsub!\tr5, r1, r7\n\tjump.ge\t@.BB0_676\n.BB0_764:\n\tsub.s\tstack-[14], r6, r7\n\tsub.s\t100, r7, r7\n\tst.1.inc\tr2, r7, r2\n\tld.1.inc\tr15, r7, r15\n\tld.1.inc\tr7, r8, r9\n\tand\t@CPI0_6[0], r8, r8\n\tst.1.inc\tr6, r8, r8\n\tld.1\tr9, r9\n\tst.1\tr8, r9\n\tadd\t64, r7, r8\n\tld.1\tr8, r8\n\tadd\t64, r6, r9\n\tst.1\tr9, r4\n\tadd\t288, r6, r9\n\tld.1.inc\tr8, r8, r10\n\tst.1\tr9, r8\n\tadd\t320, r6, r9\n\tsub!\tr8, r0, r11\n\tjump.eq\t@.BB0_767\n\tadd\tr0, r0, r11\n.BB0_766:\n\tadd\tr11, r9, r12\n\tadd\tr10, r11, r13\n\tld.1\tr13, r13\n\tst.1\tr12, r13\n\tadd\t32, r11, r11\n\tsub!\tr11, r8, r12\n\tjump.lt\t@.BB0_766\n.BB0_767:\n\tadd\tr8, r9, r10\n\tst.1\tr10, r0\n\tadd\t31, r8, r8\n\tand\tr8, r14, r8\n\tadd\tr8, r9, r8\n\tadd\t96, r7, r9\n\tld.1\tr9, r9\n\tsub\tr8, r6, r10\n\tadd\t96, r6, r11\n\tst.1\tr11, r10\n\tld.1.inc\tr9, r9, r10\n\tst.1.inc\tr8, r9, r8\n\tsub!\tr9, r0, r11\n\tjump.eq\t@.BB0_770\n\tadd\tr0, r0, r11\n.BB0_769:\n\tadd\tr11, r8, r12\n\tadd\tr10, r11, r13\n\tld.1\tr13, r13\n\tst.1\tr12, r13\n\tadd\t32, r11, r11\n\tsub!\tr11, r9, r12\n\tjump.lt\t@.BB0_769\n.BB0_770:\n\tadd\tr9, r8, r10\n\tst.1\tr10, r0\n\tadd\t128, r7, r10\n\tld.1\tr10, r10\n\tadd\t128, r6, r11\n\tst.1\tr11, r10\n\tadd\t160, r7, r10\n\tld.1\tr10, r10\n\tadd\t160, r6, r11\n\tst.1\tr11, r10\n\tadd\t192, r7, r10\n\tld.1\tr10, r10\n\tadd\t192, r6, r11\n\tst.1\tr11, r10\n\tadd\t31, r9, r9\n\tand\tr9, r14, r9\n\tadd\tr9, r8, r8\n\tsub\tr8, r6, r9\n\tadd\t224, r6, r10\n\tadd\t224, r7, r11\n\tld.1\tr11, r11\n\tst.1\tr10, r9\n\tld.1.inc\tr11, r9, r10\n\tst.1.inc\tr8, r9, r8\n\tsub!\tr9, r0, r11\n\tjump.eq\t@.BB0_773\n\tadd\tr0, r0, r11\n.BB0_772:\n\tadd\tr11, r8, r12\n\tadd\tr10, r11, r13\n\tld.1\tr13, r13\n\tst.1\tr12, r13\n\tadd\t32, r11, r11\n\tsub!\tr11, r9, r12\n\tjump.lt\t@.BB0_772\n.BB0_773:\n\tadd\tr9, r8, r10\n\tst.1\tr10, r0\n\tadd\t31, r9, r9\n\tand\tr9, r14, r9\n\tadd\tr9, r8, r9\n\tadd\t256, r7, r7\n\tld.1\tr7, r7\n\tsub\tr9, r6, r8\n\tadd\t256, r6, r6\n\tst.1\tr6, r8\n\tld.1.inc\tr7, r7, r8\n\tst.1.inc\tr9, r7, r6\n\tsub!\tr7, r0, r9\n\tjump.eq\t@.BB0_763\n\tadd\tr0, r0, r9\n.BB0_775:\n\tadd\tr9, r6, r10\n\tadd\tr8, r9, r11\n\tld.1\tr11, r11\n\tst.1\tr10, r11\n\tadd\t32, r9, r9\n\tsub!\tr9, r7, r10\n\tjump.lt\t@.BB0_775\n\tjump\t@.BB0_763\n.BB0_776:\n\tld.1\t64, r2\n\tand\t31, r3, r4\n\tshr.s!\t5, r3, r5\n\tjump.eq\t@.BB0_779\n\tadd\tr0, r0, r6\n.BB0_778:\n\tshl.s\t5, r6, r7\n\tadd\tr2, r7, r8\n\tptr.add\tr1, r7, r7\n\tld\tr7, r7\n\tst.1\tr8, r7\n\tadd\t1, r6, r6\n\tsub!\tr6, r5, r7\n\tjump.lt\t@.BB0_778\n.BB0_779:\n\tsub!\tr4, r0, r6\n\tjump.eq\t@.BB0_68\n\tjump\t@.BB0_67\n.BB0_781:\n\tld.1\t64, r2\n\tand\t31, r3, r4\n\tshr.s!\t5, r3, r5\n\tjump.eq\t@.BB0_784\n\tadd\tr0, r0, r6\n.BB0_783:\n\tshl.s\t5, r6, r7\n\tadd\tr2, r7, r8\n\tptr.add\tr1, r7, r7\n\tld\tr7, r7\n\tst.1\tr8, r7\n\tadd\t1, r6, r6\n\tsub!\tr6, r5, r7\n\tjump.lt\t@.BB0_783\n.BB0_784:\n\tsub!\tr4, r0, r6\n\tjump.eq\t@.BB0_68\n\tjump\t@.BB0_67\n.BB0_786:\n\tld.1\t64, r2\n\tand\t31, r3, r4\n\tshr.s!\t5, r3, r5\n\tjump.eq\t@.BB0_789\n\tadd\tr0, r0, r6\n.BB0_788:\n\tshl.s\t5, r6, r7\n\tadd\tr2, r7, r8\n\tptr.add\tr1, r7, r7\n\tld\tr7, r7\n\tst.1\tr8, r7\n\tadd\t1, r6, r6\n\tsub!\tr6, r5, r7\n\tjump.lt\t@.BB0_788\n.BB0_789:\n\tsub!\tr4, r0, r6\n\tjump.eq\t@.BB0_68\n\tjump\t@.BB0_67\n.BB0_791:\n\tld.1\t64, r2\n\tand\t31, r3, r4\n\tshr.s!\t5, r3, r5\n\tjump.eq\t@.BB0_794\n\tadd\tr0, r0, r6\n.BB0_793:\n\tshl.s\t5, r6, r7\n\tadd\tr2, r7, r8\n\tptr.add\tr1, r7, r7\n\tld\tr7, r7\n\tst.1\tr8, r7\n\tadd\t1, r6, r6\n\tsub!\tr6, r5, r7\n\tjump.lt\t@.BB0_793\n.BB0_794:\n\tsub!\tr4, r0, r6\n\tjump.eq\t@.BB0_68\n\tjump\t@.BB0_67\n.BB0_796:\n\tadd\t@CPI0_0[0], r0, r3\n\tsub.s!\t@CPI0_0[0], r1, r4\n\tadd.ge\tr3, r0, r1\n\tshl.s\t192, r1, r1\n\tor\tstack-[12], r1, r1\n\tor\t@CPI0_54[0], r1, r1\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tadd\tr1, r0, r3\n\tshr.s\t96, r3, r3\n\tand\t@CPI0_0[0], r3, r4\n\tsub.s!\t32, r4, r3\n\tadd\tr4, r0, r3\n\tadd.ge\t32, r0, r3\n\tand\t31, r3, r5\n\tshr.s!\t5, r3, r6\n\tadd\tstack-[14], r0, r10\n\tjump.eq\t@.BB0_799\n\tadd\tr0, r0, r7\n.BB0_798:\n\tshl.s\t5, r7, r8\n\tadd\tr10, r8, r9\n\tptr.add\tr1, r8, r8\n\tld\tr8, r8\n\tst.1\tr9, r8\n\tadd\t1, r7, r7\n\tsub!\tr7, r6, r8\n\tjump.lt\t@.BB0_798\n.BB0_799:\n\tsub!\tr5, r0, r7\n\tjump.eq\t@.BB0_801\n\tshl.s\t5, r6, r6\n\tptr.add\tr1, r6, r7\n\tadd\tstack-[14], r6, r6\n\tshl.s\t3, r5, r5\n\tld.1\tr6, r8\n\tshl\tr8, r5, r8\n\tshr\tr8, r5, r8\n\tld\tr7, r7\n\tsub\t256, r5, r5\n\tshr\tr7, r5, r7\n\tshl\tr7, r5, r5\n\tor\tr5, r8, r5\n\tst.1\tr6, r5\n.BB0_801:\n\tadd\tr4, r0, stack[@returndatasize]\n\tptr.add\tr1, r0, stack[@ptr_return_data]\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_805\n.BB0_802:\n\tadd\t31, r3, r1\n\tand\t96, r1, r1\n\tadd\tstack-[14], r1, r1\n\tsub.s!\t@CPI0_51[0], r1, r2\n\tjump.gt\t@.BB0_210\n\tst.1\t64, r1\n\tsub.s!\t32, r3, r1\n\tjump.lt\t@.BB0_565\n\tadd\tstack-[14], r0, r1\n\tld.1\tr1, r1\n\tnear_call\tr0, @fun_assertEq_21051, @DEFAULT_UNWIND\n\tadd\tr0, r0, r1\n\tret.ok.to_label\tr1, @DEFAULT_FAR_RETURN\n.BB0_805:\n\tld.1\t64, r2\n\tand\t31, r4, r3\n\tshr.s!\t5, r4, r5\n\tjump.eq\t@.BB0_808\n\tadd\tr0, r0, r6\n.BB0_807:\n\tshl.s\t5, r6, r7\n\tadd\tr2, r7, r8\n\tptr.add\tr1, r7, r7\n\tld\tr7, r7\n\tst.1\tr8, r7\n\tadd\t1, r6, r6\n\tsub!\tr6, r5, r7\n\tjump.lt\t@.BB0_807\n.BB0_808:\n\tsub!\tr3, r0, r6\n\tjump.ne\t@.BB0_713\n\tjump\t@.BB0_714\n.BB0_809:\n\tld.1\t64, r2\n\tand\t31, r3, r4\n\tshr.s!\t5, r3, r5\n\tjump.eq\t@.BB0_812\n\tadd\tr0, r0, r6\n.BB0_811:\n\tshl.s\t5, r6, r7\n\tadd\tr2, r7, r8\n\tptr.add\tr1, r7, r7\n\tld\tr7, r7\n\tst.1\tr8, r7\n\tadd\t1, r6, r6\n\tsub!\tr6, r5, r7\n\tjump.lt\t@.BB0_811\n.BB0_812:\n\tsub!\tr4, r0, r6\n\tjump.eq\t@.BB0_68\n\tjump\t@.BB0_67\n.func_end0:\n\nabi_encode_array_address_dyn:\n.func_begin1:\n\tadd\t32, r0, r3\n\tst.1.inc\tr1, r3, r4\n\tld.1\tr2, r3\n\tst.1\tr4, r3\n\tadd\t64, r1, r1\n\tsub!\tr3, r0, r4\n\tjump.eq\t@.BB1_3\n\tadd\tr0, r0, r4\n.BB1_2:\n\tadd\t32, r2, r2\n\tld.1\tr2, r5\n\tand\t@CPI1_0[0], r5, r5\n\tst.1.inc\tr1, r5, r1\n\tadd\t1, r4, r4\n\tsub!\tr4, r3, r5\n\tjump.lt\t@.BB1_2\n.BB1_3:\n\tret\n.func_end1:\n\nabi_encode_array_string_dyn:\n.func_begin2:\n\tadd\t32, r0, r3\n\tst.1.inc\tr1, r3, r3\n\tld.1\tr2, r4\n\tst.1\tr3, r4\n\tadd\t64, r1, r5\n\tshl.s\t5, r4, r3\n\tadd\tr5, r3, r3\n\tsub!\tr4, r0, r6\n\tjump.eq\t@.BB2_6\n\tadd\tr0, r0, r6\n\tjump\t@.BB2_2\n.BB2_5:\n\tadd\t31, r7, r8\n\tsub.s\t32, r0, r9\n\tand\tr8, r9, r8\n\tadd\tr7, r3, r7\n\tst.1\tr7, r0\n\tadd\tr8, r3, r3\n\tadd\t1, r6, r6\n\tsub!\tr6, r4, r7\n\tjump.ge\t@.BB2_6\n.BB2_2:\n\tsub\tr3, r1, r7\n\tsub.s\t64, r7, r7\n\tst.1.inc\tr5, r7, r5\n\tadd\t32, r2, r2\n\tld.1\tr2, r7\n\tld.1.inc\tr7, r7, r8\n\tst.1.inc\tr3, r7, r3\n\tsub!\tr7, r0, r9\n\tjump.eq\t@.BB2_5\n\tadd\tr0, r0, r9\n.BB2_4:\n\tadd\tr9, r3, r10\n\tadd\tr8, r9, r11\n\tld.1\tr11, r11\n\tst.1\tr10, r11\n\tadd\t32, r9, r9\n\tsub!\tr9, r7, r10\n\tjump.lt\t@.BB2_4\n\tjump\t@.BB2_5\n.BB2_6:\n\tadd\tr3, r0, r1\n\tret\n.func_end2:\n\nabi_encode_array_struct_FuzzSelector_dyn:\n.func_begin3:\n\tadd\t32, r0, r3\n\tst.1.inc\tr1, r3, r3\n\tld.1\tr2, r4\n\tst.1\tr3, r4\n\tadd\t64, r1, r5\n\tshl.s\t5, r4, r3\n\tadd\tr5, r3, r3\n\tsub!\tr4, r0, r6\n\tjump.eq\t@.BB3_6\n\tadd\t64, r0, r6\n\tadd\tr0, r0, r7\n\tjump\t@.BB3_2\n.BB3_5:\n\tadd\t1, r7, r7\n\tsub!\tr7, r4, r8\n\tjump.ge\t@.BB3_6\n.BB3_2:\n\tsub\tr3, r1, r8\n\tsub.s\t64, r8, r8\n\tst.1.inc\tr5, r8, r5\n\tadd\t32, r2, r2\n\tld.1\tr2, r8\n\tld.1.inc\tr8, r8, r9\n\tand\t@CPI3_0[0], r8, r8\n\tst.1.inc\tr3, r8, r10\n\tld.1\tr9, r8\n\tst.1\tr10, r6\n\tadd\t64, r3, r10\n\tld.1\tr8, r9\n\tst.1\tr10, r9\n\tadd\t96, r3, r3\n\tsub!\tr9, r0, r10\n\tjump.eq\t@.BB3_5\n\tadd\tr0, r0, r10\n.BB3_4:\n\tadd\t32, r8, r8\n\tld.1\tr8, r11\n\tand\t@CPI3_1[0], r11, r11\n\tst.1.inc\tr3, r11, r3\n\tadd\t1, r10, r10\n\tsub!\tr10, r9, r11\n\tjump.lt\t@.BB3_4\n\tjump\t@.BB3_5\n.BB3_6:\n\tadd\tr3, r0, r1\n\tret\n.func_end3:\n\nfinalize_allocation:\n.func_begin4:\n\tadd\t31, r2, r2\n\tsub.s\t32, r0, r3\n\tand\tr2, r3, r2\n\tadd\tr2, r1, r1\n\tsub!\tr1, r2, r2\n\tadd\t0, r0, r2\n\tadd.lt\t1, r0, r2\n\tsub.s!\t@CPI4_0[0], r1, r3\n\tjump.gt\t@.BB4_2\n\tand!\t1, r2, r2\n\tjump.ne\t@.BB4_2\n\tst.1\t64, r1\n\tret\n.BB4_2:\n\tadd\t@CPI4_1[0], r0, r1\n\tst.1\t0, r1\n\tadd\t65, r0, r1\n\tst.1\t4, r1\n\tadd\t@CPI4_2[0], r0, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.func_end4:\n\nabi_decode_struct_PackedUserOperation_fromMemory:\n.func_begin5:\n\tsub\tr2, r1, r3\n\tadd\t@CPI5_0[0], r0, r4\n\tsub.s!\t31, r3, r5\n\tadd\tr0, r0, r5\n\tadd.gt\tr4, r0, r5\n\tand\t@CPI5_0[0], r3, r3\n\tsub!\tr3, r0, r6\n\tadd.ge\tr0, r0, r4\n\tsub.s!\t@CPI5_0[0], r3, r3\n\tadd.ne\tr5, r0, r4\n\tsub!\tr4, r0, r3\n\tjump.eq\t@.BB5_1\n\tld.1\tr1, r3\n\tsub.s!\t@CPI5_1[0], r3, r4\n\tjump.gt\t@.BB5_1\n\tadd\tr3, r1, r3\n\tsub\tr2, r3, r1\n\tadd\t@CPI5_0[0], r0, r4\n\tsub.s!\t288, r1, r5\n\tadd\tr0, r0, r5\n\tadd.lt\tr4, r0, r5\n\tand\t@CPI5_0[0], r1, r1\n\tsub!\tr1, r0, r6\n\tadd.le\tr0, r0, r4\n\tsub.s!\t@CPI5_0[0], r1, r1\n\tadd.ne\tr5, r0, r4\n\tsub!\tr4, r0, r1\n\tjump.ne\t@.BB5_1\n\tld.1\t64, r1\n\tsub.s!\t@CPI5_2[0], r1, r4\n\tjump.ge\t@.BB5_5\n\tadd\t288, r1, r4\n\tst.1\t64, r4\n\tld.1.inc\tr3, r5, r4\n\tsub.s!\t@CPI5_3[0], r5, r6\n\tjump.gt\t@.BB5_1\n\tst.1.inc\tr1, r5, r5\n\tld.1\tr4, r4\n\tst.1\tr5, r4\n\tadd\t64, r3, r4\n\tld.1\tr4, r4\n\tsub.s!\t@CPI5_1[0], r4, r5\n\tjump.gt\t@.BB5_1\n\tadd\tr4, r3, r4\n\tadd\t31, r4, r5\n\tadd\t@CPI5_0[0], r0, r6\n\tsub!\tr5, r2, r7\n\tadd\tr0, r0, r7\n\tadd.ge\tr6, r0, r7\n\tand\t@CPI5_0[0], r5, r5\n\tand\t@CPI5_0[0], r2, r8\n\tsub!\tr5, r8, r9\n\tadd.ge\tr0, r0, r6\n\txor\tr5, r8, r5\n\tsub.s!\t@CPI5_0[0], r5, r5\n\tadd.ne\tr7, r0, r6\n\tsub!\tr6, r0, r5\n\tjump.ne\t@.BB5_1\n\tld.1.inc\tr4, r5, r6\n\tsub.s!\t@CPI5_1[0], r5, r4\n\tjump.gt\t@.BB5_5\n\tadd\t31, r5, r7\n\tsub.s\t32, r0, r4\n\tand\tr7, r4, r7\n\tadd\t63, r7, r7\n\tand\tr7, r4, r8\n\tld.1\t64, r7\n\tadd\tr7, r8, r8\n\tsub!\tr8, r7, r9\n\tadd\t0, r0, r9\n\tadd.lt\t1, r0, r9\n\tsub.s!\t@CPI5_1[0], r8, r10\n\tjump.gt\t@.BB5_5\n\tand!\t1, r9, r9\n\tjump.ne\t@.BB5_5\n\tst.1\t64, r8\n\tst.1.inc\tr7, r5, r8\n\tadd\tr5, r6, r9\n\tsub!\tr9, r2, r9\n\tjump.gt\t@.BB5_1\n\tsub!\tr5, r0, r9\n\tjump.eq\t@.BB5_16\n\tadd\tr0, r0, r9\n.BB5_15:\n\tadd\tr9, r8, r10\n\tadd\tr9, r6, r11\n\tld.1\tr11, r11\n\tst.1\tr10, r11\n\tadd\t32, r9, r9\n\tsub!\tr9, r5, r10\n\tjump.lt\t@.BB5_15\n.BB5_16:\n\tadd\tr8, r5, r5\n\tst.1\tr5, r0\n\tadd\t64, r1, r5\n\tst.1\tr5, r7\n\tadd\t96, r3, r5\n\tld.1\tr5, r5\n\tsub.s!\t@CPI5_1[0], r5, r6\n\tjump.gt\t@.BB5_1\n\tadd\tr5, r3, r5\n\tadd\t31, r5, r6\n\tadd\t@CPI5_0[0], r0, r7\n\tsub!\tr6, r2, r8\n\tadd\tr0, r0, r8\n\tadd.ge\tr7, r0, r8\n\tand\t@CPI5_0[0], r6, r6\n\tand\t@CPI5_0[0], r2, r9\n\tsub!\tr6, r9, r10\n\tadd.ge\tr0, r0, r7\n\txor\tr6, r9, r6\n\tsub.s!\t@CPI5_0[0], r6, r6\n\tadd.ne\tr8, r0, r7\n\tsub!\tr7, r0, r6\n\tjump.ne\t@.BB5_1\n\tld.1.inc\tr5, r5, r6\n\tsub.s!\t@CPI5_1[0], r5, r7\n\tjump.gt\t@.BB5_5\n\tadd\t31, r5, r7\n\tand\tr7, r4, r7\n\tadd\t63, r7, r7\n\tand\tr7, r4, r8\n\tld.1\t64, r7\n\tadd\tr7, r8, r8\n\tsub!\tr8, r7, r9\n\tadd\t0, r0, r9\n\tadd.lt\t1, r0, r9\n\tsub.s!\t@CPI5_1[0], r8, r10\n\tjump.gt\t@.BB5_5\n\tand!\t1, r9, r9\n\tjump.ne\t@.BB5_5\n\tst.1\t64, r8\n\tst.1.inc\tr7, r5, r8\n\tadd\tr5, r6, r9\n\tsub!\tr9, r2, r9\n\tjump.gt\t@.BB5_1\n\tsub!\tr5, r0, r9\n\tjump.eq\t@.BB5_25\n\tadd\tr0, r0, r9\n.BB5_24:\n\tadd\tr9, r8, r10\n\tadd\tr9, r6, r11\n\tld.1\tr11, r11\n\tst.1\tr10, r11\n\tadd\t32, r9, r9\n\tsub!\tr9, r5, r10\n\tjump.lt\t@.BB5_24\n.BB5_25:\n\tadd\tr8, r5, r5\n\tst.1\tr5, r0\n\tadd\t96, r1, r5\n\tst.1\tr5, r7\n\tadd\t128, r3, r5\n\tld.1\tr5, r5\n\tadd\t128, r1, r6\n\tst.1\tr6, r5\n\tadd\t160, r3, r5\n\tld.1\tr5, r5\n\tadd\t160, r1, r6\n\tst.1\tr6, r5\n\tadd\t192, r1, r5\n\tadd\t192, r3, r6\n\tld.1\tr6, r6\n\tst.1\tr5, r6\n\tadd\t224, r3, r5\n\tld.1\tr5, r5\n\tsub.s!\t@CPI5_1[0], r5, r6\n\tjump.gt\t@.BB5_1\n\tadd\tr5, r3, r5\n\tadd\t31, r5, r6\n\tadd\t@CPI5_0[0], r0, r7\n\tsub!\tr6, r2, r8\n\tadd\tr0, r0, r8\n\tadd.ge\tr7, r0, r8\n\tand\t@CPI5_0[0], r6, r6\n\tand\t@CPI5_0[0], r2, r9\n\tsub!\tr6, r9, r10\n\tadd.ge\tr0, r0, r7\n\txor\tr6, r9, r6\n\tsub.s!\t@CPI5_0[0], r6, r6\n\tadd.ne\tr8, r0, r7\n\tsub!\tr7, r0, r6\n\tjump.ne\t@.BB5_1\n\tld.1.inc\tr5, r5, r6\n\tsub.s!\t@CPI5_1[0], r5, r7\n\tjump.gt\t@.BB5_5\n\tadd\t31, r5, r7\n\tand\tr7, r4, r7\n\tadd\t63, r7, r7\n\tand\tr7, r4, r8\n\tld.1\t64, r7\n\tadd\tr7, r8, r8\n\tsub!\tr8, r7, r9\n\tadd\t0, r0, r9\n\tadd.lt\t1, r0, r9\n\tsub.s!\t@CPI5_1[0], r8, r10\n\tjump.gt\t@.BB5_5\n\tand!\t1, r9, r9\n\tjump.ne\t@.BB5_5\n\tst.1\t64, r8\n\tst.1.inc\tr7, r5, r8\n\tadd\tr5, r6, r9\n\tsub!\tr9, r2, r9\n\tjump.gt\t@.BB5_1\n\tsub!\tr5, r0, r9\n\tjump.eq\t@.BB5_34\n\tadd\tr0, r0, r9\n.BB5_33:\n\tadd\tr9, r8, r10\n\tadd\tr9, r6, r11\n\tld.1\tr11, r11\n\tst.1\tr10, r11\n\tadd\t32, r9, r9\n\tsub!\tr9, r5, r10\n\tjump.lt\t@.BB5_33\n.BB5_34:\n\tadd\tr8, r5, r5\n\tst.1\tr5, r0\n\tadd\t224, r1, r5\n\tst.1\tr5, r7\n\tadd\t256, r3, r5\n\tld.1\tr5, r5\n\tsub.s!\t@CPI5_1[0], r5, r6\n\tjump.gt\t@.BB5_1\n\tadd\tr5, r3, r3\n\tadd\t31, r3, r5\n\tadd\t@CPI5_0[0], r0, r6\n\tsub!\tr5, r2, r7\n\tadd\tr0, r0, r7\n\tadd.ge\tr6, r0, r7\n\tand\t@CPI5_0[0], r5, r5\n\tand\t@CPI5_0[0], r2, r8\n\tsub!\tr5, r8, r9\n\tadd.ge\tr0, r0, r6\n\txor\tr5, r8, r5\n\tsub.s!\t@CPI5_0[0], r5, r5\n\tadd.ne\tr7, r0, r6\n\tsub!\tr6, r0, r5\n\tjump.ne\t@.BB5_1\n\tld.1.inc\tr3, r3, r5\n\tsub.s!\t@CPI5_1[0], r3, r6\n\tjump.gt\t@.BB5_5\n\tadd\t31, r3, r6\n\tand\tr6, r4, r6\n\tadd\t63, r6, r6\n\tand\tr6, r4, r6\n\tld.1\t64, r4\n\tadd\tr4, r6, r6\n\tsub!\tr6, r4, r7\n\tadd\t0, r0, r7\n\tadd.lt\t1, r0, r7\n\tsub.s!\t@CPI5_1[0], r6, r8\n\tjump.gt\t@.BB5_5\n\tand!\t1, r7, r7\n\tjump.ne\t@.BB5_5\n\tst.1\t64, r6\n\tst.1.inc\tr4, r3, r6\n\tadd\tr3, r5, r7\n\tsub!\tr7, r2, r2\n\tjump.gt\t@.BB5_1\n\tsub!\tr3, r0, r2\n\tjump.eq\t@.BB5_43\n\tadd\tr0, r0, r2\n.BB5_42:\n\tadd\tr2, r6, r7\n\tadd\tr2, r5, r8\n\tld.1\tr8, r8\n\tst.1\tr7, r8\n\tadd\t32, r2, r2\n\tsub!\tr2, r3, r7\n\tjump.lt\t@.BB5_42\n.BB5_43:\n\tadd\tr6, r3, r2\n\tst.1\tr2, r0\n\tadd\t256, r1, r2\n\tst.1\tr2, r4\n\tret\n.BB5_1:\n\tadd\tr0, r0, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.BB5_5:\n\tadd\t@CPI5_4[0], r0, r1\n\tst.1\t0, r1\n\tadd\t65, r0, r1\n\tst.1\t4, r1\n\tadd\t@CPI5_5[0], r0, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.func_end5:\n\nabi_encode_struct_PackedUserOperation:\n.func_begin6:\n\tld.1.inc\tr1, r3, r4\n\tand\t@CPI6_0[0], r3, r3\n\tst.1.inc\tr2, r3, r3\n\tld.1\tr4, r4\n\tst.1\tr3, r4\n\tadd\t64, r1, r3\n\tld.1\tr3, r3\n\tadd\t64, r2, r4\n\tadd\t288, r0, r5\n\tst.1\tr4, r5\n\tadd\t288, r2, r4\n\tld.1.inc\tr3, r3, r5\n\tst.1\tr4, r3\n\tadd\t320, r2, r4\n\tsub!\tr3, r0, r6\n\tjump.eq\t@.BB6_3\n\tadd\tr0, r0, r6\n.BB6_2:\n\tadd\tr6, r4, r7\n\tadd\tr5, r6, r8\n\tld.1\tr8, r8\n\tst.1\tr7, r8\n\tadd\t32, r6, r6\n\tsub!\tr6, r3, r7\n\tjump.lt\t@.BB6_2\n.BB6_3:\n\tadd\tr3, r4, r5\n\tst.1\tr5, r0\n\tadd\t31, r3, r5\n\tsub.s\t32, r0, r3\n\tand\tr5, r3, r5\n\tadd\tr5, r4, r4\n\tadd\t96, r1, r5\n\tld.1\tr5, r5\n\tsub\tr4, r2, r6\n\tadd\t96, r2, r7\n\tst.1\tr7, r6\n\tld.1.inc\tr5, r5, r6\n\tst.1.inc\tr4, r5, r4\n\tsub!\tr5, r0, r7\n\tjump.eq\t@.BB6_6\n\tadd\tr0, r0, r7\n.BB6_5:\n\tadd\tr7, r4, r8\n\tadd\tr6, r7, r9\n\tld.1\tr9, r9\n\tst.1\tr8, r9\n\tadd\t32, r7, r7\n\tsub!\tr7, r5, r8\n\tjump.lt\t@.BB6_5\n.BB6_6:\n\tadd\tr5, r4, r6\n\tst.1\tr6, r0\n\tadd\t128, r1, r6\n\tld.1\tr6, r6\n\tadd\t128, r2, r7\n\tst.1\tr7, r6\n\tadd\t160, r1, r6\n\tld.1\tr6, r6\n\tadd\t160, r2, r7\n\tst.1\tr7, r6\n\tadd\t192, r1, r6\n\tld.1\tr6, r6\n\tadd\t192, r2, r7\n\tst.1\tr7, r6\n\tadd\t31, r5, r5\n\tand\tr5, r3, r5\n\tadd\tr5, r4, r4\n\tsub\tr4, r2, r5\n\tadd\t224, r2, r6\n\tadd\t224, r1, r7\n\tld.1\tr7, r7\n\tst.1\tr6, r5\n\tld.1.inc\tr7, r5, r6\n\tst.1.inc\tr4, r5, r4\n\tsub!\tr5, r0, r7\n\tjump.eq\t@.BB6_9\n\tadd\tr0, r0, r7\n.BB6_8:\n\tadd\tr7, r4, r8\n\tadd\tr6, r7, r9\n\tld.1\tr9, r9\n\tst.1\tr8, r9\n\tadd\t32, r7, r7\n\tsub!\tr7, r5, r8\n\tjump.lt\t@.BB6_8\n.BB6_9:\n\tadd\tr5, r4, r6\n\tst.1\tr6, r0\n\tadd\t31, r5, r5\n\tand\tr5, r3, r5\n\tadd\tr5, r4, r5\n\tadd\t256, r1, r1\n\tld.1\tr1, r1\n\tsub\tr5, r2, r4\n\tadd\t256, r2, r2\n\tst.1\tr2, r4\n\tld.1.inc\tr1, r2, r4\n\tst.1.inc\tr5, r2, r1\n\tsub!\tr2, r0, r5\n\tjump.eq\t@.BB6_12\n\tadd\tr0, r0, r5\n.BB6_11:\n\tadd\tr5, r1, r6\n\tadd\tr4, r5, r7\n\tld.1\tr7, r7\n\tst.1\tr6, r7\n\tadd\t32, r5, r5\n\tsub!\tr5, r2, r6\n\tjump.lt\t@.BB6_11\n.BB6_12:\n\tadd\tr2, r1, r4\n\tst.1\tr4, r0\n\tadd\t31, r2, r2\n\tand\tr2, r3, r2\n\tadd\tr2, r1, r1\n\tret\n.func_end6:\n\nfun_assertEq_21051:\n.func_begin7:\n\tnop\tstack+=[1]\n\tadd\tr1, r0, stack-[1]\n\tadd\t@CPI7_0[0], r0, r1\n\tst.2\t0, r1\n\tadd\t@CPI7_1[0], r0, r1\n\tst.2\t4, r1\n\tadd\t@CPI7_2[0], r0, r1\n\tcontext.gas_left\tr2\n\tsub.s!\t@CPI7_2[0], r2, r3\n\tadd.ge\tr1, r0, r2\n\tshl.s\t192, r2, r1\n\tor\t@CPI7_3[0], r1, r1\n\tadd\t32770, r0, r2\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB7_1\n\tld\tr1, r1\n\tsub!\tr1, r0, r1\n\tjump.eq\t@.BB7_3\n\tld.1\t64, r4\n\tadd\t36, r4, r1\n\tadd\t@CPI7_4[0], r0, r2\n\tst.1\tr1, r2\n\tadd\t@CPI7_5[0], r0, r1\n\tst.1\tr4, r1\n\tadd\t4, r4, r1\n\tadd\tstack-[1], r0, r2\n\tst.1\tr1, r2\n\tadd\t@CPI7_2[0], r0, r1\n\tcontext.gas_left\tr2\n\tsub.s!\t@CPI7_2[0], r2, r3\n\tadd.ge\tr1, r0, r2\n\tsub.s!\t@CPI7_2[0], r4, r3\n\tadd\tr4, r0, stack-[1]\n\tadd.lt\tr4, r0, r1\n\tshl.s\t64, r1, r1\n\tshl.s\t192, r2, r2\n\tor\tr2, r1, r1\n\tor\t@CPI7_6[0], r1, r1\n\tadd\t@CPI7_1[0], r0, r2\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tadd\tr1, r0, r3\n\tshr.s\t96, r3, r3\n\tand\t@CPI7_2[0], r3, stack[@returndatasize]\n\tand\t@CPI7_2[0], r3, r3\n\tptr.add\tr1, r0, stack[@ptr_return_data]\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB7_5\n\tadd\tstack-[1], r0, r2\n\tsub.s!\t@CPI7_7[0], r2, r1\n\tjump.ge\t@.BB7_11\n\tst.1\t64, r2\n\tret\n.BB7_1:\n\trevert\n.BB7_3:\n\tadd\tr0, r0, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.BB7_5:\n\tld.1\t64, r2\n\tand\t31, r3, r4\n\tshr.s!\t5, r3, r5\n\tjump.eq\t@.BB7_13\n\tadd\tr0, r0, r6\n.BB7_7:\n\tshl.s\t5, r6, r7\n\tadd\tr2, r7, r8\n\tptr.add\tr1, r7, r7\n\tld\tr7, r7\n\tst.1\tr8, r7\n\tadd\t1, r6, r6\n\tsub!\tr6, r5, r7\n\tjump.lt\t@.BB7_7\n.BB7_13:\n\tsub!\tr4, r0, r6\n\tjump.eq\t@.BB7_9\n\tshl.s\t5, r5, r5\n\tptr.add\tr1, r5, r1\n\tadd\tr2, r5, r5\n\tshl.s\t3, r4, r4\n\tld.1\tr5, r6\n\tshl\tr6, r4, r6\n\tshr\tr6, r4, r6\n\tld\tr1, r1\n\tsub\t256, r4, r4\n\tshr\tr1, r4, r1\n\tshl\tr1, r4, r1\n\tor\tr1, r6, r1\n\tst.1\tr5, r1\n.BB7_9:\n\tadd\t@CPI7_2[0], r0, r1\n\tsub.s!\t@CPI7_2[0], r2, r4\n\tadd.ge\tr1, r0, r2\n\tshl.s\t64, r2, r1\n\tshl.s\t96, r3, r2\n\tor\tr1, r2, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.BB7_11:\n\tadd\t@CPI7_8[0], r0, r1\n\tst.1\t0, r1\n\tadd\t65, r0, r1\n\tst.1\t4, r1\n\tadd\t@CPI7_9[0], r0, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.func_end7:\n\n__cxa_throw:\n.func_begin8:\n\trevert\n.func_end8:\n\n__farcall:\n.func_begin9:\n.tmp0:\n\tfar_call\tr1, r2, @.BB9_2\n.tmp1:\n\tadd\t1, r0, r2\n\tret\n.BB9_2:\n.tmp2:\n\tadd\tr0, r0, r2\n\tret\n.func_end9:\n\n__staticcall:\n.func_begin10:\n.tmp3:\n\tfar_call.static\tr1, r2, @.BB10_2\n.tmp4:\n\tadd\t1, r0, r2\n\tret\n.BB10_2:\n.tmp5:\n\tadd\tr0, r0, r2\n\tret\n.func_end10:\n\n\t.data\n\t.p2align\t5, 0x0\nreturndatasize:\n\t.cell 0\n\n\t.p2align\t5, 0x0\nptr_return_data:\n.cell\t0\n\n\t.note.GNU-stack\n\t.rodata\nCPI0_0:\nCPI7_2:\n\t.cell 4294967295\nCPI0_1:\n\t.cell 51735810803603326920093875405627034980936023444920712683823047157028839489536\nCPI0_2:\n\t.cell 904625697166532776746648320380374280103671755992598535832976423508200390656\nCPI0_3:\n\t.cell -166923669067369873766191994592930785159943346089370123761369690313261580288\nCPI0_4:\n\t.cell 2852213855235882636237227425792\nCPI0_5:\nCPI7_1:\n\t.cell 645326474426547203313410069153905908525362434349\nCPI0_6:\nCPI1_0:\nCPI3_0:\nCPI5_3:\nCPI6_0:\n\t.cell 1461501637330902918203684832716283019655932542975\nCPI0_7:\nCPI7_0:\n\t.cell 10867283408178898638301172343726954674910073630256871736220740970449699113859\nCPI0_8:\nCPI7_3:\n\t.cell 904625751086426111047927909714404454142933105326819602152923490636624035840\nCPI0_9:\n\t.cell -26079055428631999755169999820041264995593315863804083392934812248473178472448\nCPI0_10:\nCPI7_7:\n\t.cell 18446744073709551616\nCPI0_11:\n\t.cell -1461501637330902918203684832716283019655932542976\nCPI0_12:\n\t.cell 53919893334301279589334030174039261352344891250716429051063678533632\nCPI0_13:\n\t.cell 2233625728\nCPI0_14:\n\t.cell 3124842405\nCPI0_15:\n\t.cell 3435130643\nCPI0_16:\n\t.cell 3435130644\nCPI0_17:\n\t.cell 3792478065\nCPI0_18:\n\t.cell 4202047188\nCPI0_19:\n\t.cell 3124842406\nCPI0_20:\n\t.cell 3296113143\nCPI0_21:\n\t.cell 3412072814\nCPI0_22:\n\t.cell 2956213286\nCPI0_23:\n\t.cell 2956213287\nCPI0_24:\n\t.cell 2957397980\nCPI0_25:\n\t.cell 3041954473\nCPI0_26:\n\t.cell 2233625729\nCPI0_27:\n\t.cell 2439649222\nCPI0_28:\n\t.cell 2650435679\nCPI0_29:\n\t.cell 719206527\nCPI0_30:\n\t.cell 1046363170\nCPI0_31:\n\t.cell 1046363171\nCPI0_32:\n\t.cell 1064470260\nCPI0_33:\n\t.cell 1725540768\nCPI0_34:\n\t.cell 719206528\nCPI0_35:\n\t.cell 891744852\nCPI0_36:\n\t.cell 1044462574\nCPI0_37:\n\t.cell 327102041\nCPI0_38:\n\t.cell 327102042\nCPI0_39:\n\t.cell 517440284\nCPI0_40:\n\t.cell 534123562\nCPI0_41:\n\t.cell 177362148\nCPI0_42:\n\t.cell 297469234\nCPI0_43:\n\t.cell 2535301202817642044428229017600\nCPI0_44:\n\t.cell 38878206584692966203415385907871375197469080758325516314230789535345649042549\nCPI0_45:\n\t.cell 29289127993025145568725129057828671567744754166070328588094505464281371246592\nCPI0_46:\nCPI7_4:\n\t.cell 1000000000000000000\nCPI0_47:\n\t.cell -33419636430028734643022972782987963516055066601414890002813699607517053583360\nCPI0_48:\n\t.cell -27151071013223617441696809311706469891330170172232269417374360038580301070336\nCPI0_49:\n\t.cell 316912660092086126472171880448\nCPI0_50:\n\t.cell -34729219910337523710795532035559220215991222610948606114709752122017868414976\nCPI0_51:\nCPI4_0:\nCPI5_1:\n\t.cell 18446744073709551615\nCPI0_52:\n\t.cell 15742374736755560200867032344613233170649429379879687236804144291568011968512\nCPI0_53:\n\t.cell 2834887728753290660080060877037723411257078492004434445635685037311818465280\nCPI0_54:\nCPI4_2:\nCPI5_5:\nCPI7_9:\n\t.cell 2852213850513516153367582212096\nCPI0_55:\n\t.cell 11537839058114535555356276652086655718983938579725392199733168789926996606976\nCPI0_56:\nCPI7_5:\n\t.cell -46967347869762817211770011756586609677844163125355452868590611683642280247296\nCPI0_57:\nCPI7_6:\n\t.cell 5387515050969974956360988622848\nCPI0_58:\n\t.cell -50310961677181293632432861013544852327003941767832756732232405034170119618560\nCPI0_59:\n\t.cell 316912650057057350374175801344\nCPI0_60:\n\t.cell 46361386726410499263322427381369506175992020241588171917386103515624534704128\nCPI0_61:\n\t.cell 46308022326495007027972728677917914892729792999299745830475596687180801507328\nCPI0_62:\n\t.cell 5387515053331158197795811229696\nCPI0_63:\n\t.cell 2535301200456458802993406410752\nCPI0_64:\n\t.cell 57896044618658097711785492504343953926634992332820282019728792003956564819936\nCPI0_65:\n\t.cell 18446744073709551487\nCPI0_66:\n\t.cell -48719757687822547800745197551118351534541568878739321821808546113428889233771\nCPI0_67:\n\t.cell 904625697166532776746648320380374280103671757735618107014721178055227736064\nCPI0_68:\n\t.cell 6454973039698199198119942482240540643982028891330163610098731264865829167633\nCPI0_69:\n\t.cell 18446744073709551551\nCPI0_70:\nCPI3_1:\n\t.cell -26959946667150639794667015087019630673637144422540572481103610249216\nCPI0_71:\n\t.cell -27536857605250809579915372324135987738810261726803944444161409881874687328256\nCPI0_72:\n\t.cell -39165109270908834849380646331348321621025003097693324482361482928097352220672\nCPI0_73:\n\t.cell 49422300655976383518971161772042036479724517635858811238160587340303074464591\nCPI0_74:\n\t.cell 2481041784956016742021570618494952475758789857281704946240779902470294861374\nCPI0_75:\n\t.cell 26616959624788145501257665028759500958019551560565664426117466910078421933505\nCPI0_76:\n\t.cell -26169279673760072341673943167871893214131042372482409454972450661548556448747\nCPI0_77:\n\t.cell -35624623585156310935986566609950774337791491079595188565361216048441042957010\nCPI0_78:\n\t.cell 36516136433507714556481507284757523525550975291680945358964353894568634540880\nCPI0_79:\nCPI4_1:\nCPI5_4:\nCPI7_8:\n\t.cell 35408467139433450592217433187231851964531694900788300625387963629091585785856\nCPI0_80:\n\t.cell 50942633119752846454219349998365661925608737367104304655302372697894809501696\nCPI0_81:\n\t.cell 2852213852874699394802404818944\nCPI0_82:\n\t.cell -51723044313523656053393963764110524395896352204932251959347227769995480006656\nCPI0_83:\n\t.cell -18002263324862296164297574372220909754226456243825434961346737007256845270391\nCPI0_84:\n\t.cell 11430537079145650693387304458692941425836787954612963690241153482819318579200\nCPI0_85:\n\t.cell 904625697166532776746648320380374280103671759954006657414122630674458345472\nCPI0_86:\n\t.cell -1401820844882498205785418849946084699849473257180799186470767787552591052800\nCPI0_87:\n\t.cell 57896044618658097711785492504343953926418782139537452191302581570759080747168\nCPI0_88:\n\t.cell 10141204801825835211973625643008\nCPI0_89:\n\t.cell 36784665143163702161339441327371172859310420721361339561610400621048880955392\nCPI0_90:\n\t.cell -4399567410664312436217910391711023685490938802098584046133129080549566054400\nCPI0_91:\n\t.cell -18297812966642927639546323119482596956946477707846785379148242173554237374464\nCPI0_92:\n\t.cell 2000000000000000000\nCPI0_93:\n\t.cell -25085042922932715679007901429792258562186342537147911894151979128382061281280\nCPI0_94:\n\t.cell 18446744073709551327\nCPI0_95:\n\t.cell 53539900407852911456456701308484928931406331239208729481905787339876560011264\nCPI0_96:\n\t.cell 452317895562261400799492046224497259503568616681915253042818936601056946477\nCPI0_97:\n\t.cell -45094662312588414058508742492242807367897819822786606328124609013070528553987\nCPI0_98:\n\t.cell 904625697166532776746648320380374280103671765658434360802338178844445376512\nCPI0_99:\n\t.cell 56754858411141558304599661950743269417851770002052927676745353822001623465984\nCPI0_100:\n\t.cell 1461501637330902918203684832716283019655932542976\nCPI0_101:\n\t.cell 374144419156711147060143317175368453031918731001600\nCPI0_102:\n\t.cell -374144419156711147060143317175368453031918731001601\nCPI0_103:\n\t.cell 18446744073709551483\nCPI0_104:\n\t.cell 452320427257589735736092501655702212210535795424078143435447840818844483830\nCPI0_105:\n\t.cell 904625697166532776746648320380374280103671765658434358441154937409622769664\nCPI0_106:\n\t.cell 452327441397832573371487365210247488024708984903705214821143173519409381632\nCPI5_0:\n\t.cell -57896044618658097711785492504343953926634992332820282019728792003956564819968\nCPI5_2:\n\t.cell 18446744073709551328\n","methodIdentifiers":{"IS_TEST()":"fa7626d4","deployMinimal()":"b0343c27","excludeArtifacts()":"b5508aa9","excludeContracts()":"e20c9f71","excludeSelectors()":"b0464fdc","excludeSenders()":"1ed7831c","failed()":"ba414fa6","helperConfig()":"3526f254","minimalAccount()":"c476b1f7","sendPackedUserOp()":"ccbfef14","setUp()":"0a9254e4","targetArtifactSelectors()":"66d9a9a0","targetArtifacts()":"85226c81","targetContracts()":"3f7286f4","targetInterfaces()":"2ade3880","targetSelectors()":"916a17c6","targetSenders()":"3e5e3c23","testEntryPointCanCallMinimalAccount()":"11bb0532","testNonOwnerCannotExecuteCommands()":"9dfa705f","testOwnerCanExecuteCommands()":"1fd6142a","testRecoverSignedOp()":"137f2e5a","testValidationOfUserOp()":"cb60196e","usdc()":"3e413bee"},"metadata":{"optimizer_settings":{"is_debug_logging_enabled":false,"is_fallback_to_size_enabled":false,"is_system_request_memoization_disabled":false,"is_verify_each_enabled":false,"jump_table_density_threshold":null,"level_back_end":"Aggressive","level_middle_end":"Aggressive","level_middle_end_size":"Zero"},"solc_metadata":"{\"compiler\":{\"version\":\"0.8.24+commit.3a2587f6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"ECDSAInvalidSignature\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"length\",\"type\":\"uint256\"}],\"name\":\"ECDSAInvalidSignatureLength\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"ECDSAInvalidSignatureS\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"log\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"log_address\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"val\",\"type\":\"uint256[]\"}],\"name\":\"log_array\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"int256[]\",\"name\":\"val\",\"type\":\"int256[]\"}],\"name\":\"log_array\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"val\",\"type\":\"address[]\"}],\"name\":\"log_array\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"log_bytes\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"log_bytes32\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"name\":\"log_int\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"val\",\"type\":\"address\"}],\"name\":\"log_named_address\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"val\",\"type\":\"uint256[]\"}],\"name\":\"log_named_array\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"int256[]\",\"name\":\"val\",\"type\":\"int256[]\"}],\"name\":\"log_named_array\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"val\",\"type\":\"address[]\"}],\"name\":\"log_named_array\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"val\",\"type\":\"bytes\"}],\"name\":\"log_named_bytes\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"val\",\"type\":\"bytes32\"}],\"name\":\"log_named_bytes32\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"val\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"decimals\",\"type\":\"uint256\"}],\"name\":\"log_named_decimal_int\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"val\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"decimals\",\"type\":\"uint256\"}],\"name\":\"log_named_decimal_uint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"val\",\"type\":\"int256\"}],\"name\":\"log_named_int\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"val\",\"type\":\"string\"}],\"name\":\"log_named_string\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"val\",\"type\":\"uint256\"}],\"name\":\"log_named_uint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"log_string\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"log_uint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"logs\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"IS_TEST\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deployMinimal\",\"outputs\":[{\"internalType\":\"contract DeployMinimal\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"excludeArtifacts\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"excludedArtifacts_\",\"type\":\"string[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"excludeContracts\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"excludedContracts_\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"excludeSelectors\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"bytes4[]\",\"name\":\"selectors\",\"type\":\"bytes4[]\"}],\"internalType\":\"struct StdInvariant.FuzzSelector[]\",\"name\":\"excludedSelectors_\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"excludeSenders\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"excludedSenders_\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"failed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"helperConfig\",\"outputs\":[{\"internalType\":\"contract HelperConfig\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minimalAccount\",\"outputs\":[{\"internalType\":\"contract MinimalAccount\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sendPackedUserOp\",\"outputs\":[{\"internalType\":\"contract SendPackedUserOp\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setUp\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"targetArtifactSelectors\",\"outputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"artifact\",\"type\":\"string\"},{\"internalType\":\"bytes4[]\",\"name\":\"selectors\",\"type\":\"bytes4[]\"}],\"internalType\":\"struct StdInvariant.FuzzArtifactSelector[]\",\"name\":\"targetedArtifactSelectors_\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"targetArtifacts\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"targetedArtifacts_\",\"type\":\"string[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"targetContracts\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"targetedContracts_\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"targetInterfaces\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"string[]\",\"name\":\"artifacts\",\"type\":\"string[]\"}],\"internalType\":\"struct StdInvariant.FuzzInterface[]\",\"name\":\"targetedInterfaces_\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"targetSelectors\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"bytes4[]\",\"name\":\"selectors\",\"type\":\"bytes4[]\"}],\"internalType\":\"struct StdInvariant.FuzzSelector[]\",\"name\":\"targetedSelectors_\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"targetSenders\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"targetedSenders_\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"testEntryPointCanCallMinimalAccount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"testNonOwnerCannotExecuteCommands\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"testOwnerCanExecuteCommands\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"testRecoverSignedOp\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"testValidationOfUserOp\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdc\",\"outputs\":[{\"internalType\":\"contract ERC20Mock\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"ECDSAInvalidSignature()\":[{\"details\":\"The signature derives the `address(0)`.\"}],\"ECDSAInvalidSignatureLength(uint256)\":[{\"details\":\"The signature has an invalid length.\"}],\"ECDSAInvalidSignatureS(bytes32)\":[{\"details\":\"The signature has an S value that is in the upper half order.\"}]},\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"test/ethereum/MinimalAccount.t.sol\":\"MinimalAccountTest\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\"},\"optimizer\":{\"details\":{\"constantOptimizer\":false,\"cse\":false,\"deduplicate\":false,\"inliner\":false,\"jumpdestRemover\":false,\"orderLiterals\":false,\"peephole\":false,\"simpleCounterForLoopUncheckedIncrement\":true,\"yul\":true,\"yulDetails\":{\"optimizerSteps\":\"dhfoDgvulfnTUtnIf[xa[r]EscLMcCTUtTOntnfDIulLculVcul [j]Tpeulxa[rul]xa[r]cLgvifCTUca[r]LSsTFOtfDnca[r]Iulc]jmul[jul] VcTOcul jmul:fDnTOcmu\",\"stackAllocation\":true}},\"runs\":200},\"remappings\":[\":@openzeppelin/=lib/openzeppelin-contracts/\",\":@openzeppelin/contracts-upgradeable/=lib/foundry-era-contracts/lib/openzeppelin-contracts-upgradeable/contracts/\",\":@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/\",\":account-abstraction/=lib/account-abstraction/\",\":ds-test/=lib/openzeppelin-contracts/lib/forge-std/lib/ds-test/src/\",\":erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/\",\":forge-std/=lib/forge-std/src/\",\":foundry-era-contracts/=lib/foundry-era-contracts/src/system-contracts/\",\":murky/=lib/foundry-era-contracts/lib/murky/\",\":openzeppelin-contracts-upgradeable/=lib/foundry-era-contracts/lib/openzeppelin-contracts-upgradeable/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\",\":solpp/=lib/foundry-era-contracts/src/solpp/solpp-generated-contracts/\"]},\"sources\":{\"lib/account-abstraction/contracts/core/EntryPoint.sol\":{\"keccak256\":\"0xde1b6ee98784612164b14d94a4327716ad4872dbcd01e72b6b383adfdf0f4a16\",\"license\":\"GPL-3.0\",\"urls\":[\"bzz-raw://13eebdb3bca2b482cafcde2d9feea87fd2f4f1e9a8f642632550539437511455\",\"dweb:/ipfs/QmTa83r22x3LF1jKNHaBMqgoF23VXZYDU8HMdPP5zJs84A\"]},\"lib/account-abstraction/contracts/core/Helpers.sol\":{\"keccak256\":\"0x6247e011a6cb0b263b3aa098822977181674d91b62e5bdfe04c6e66f72da25d6\",\"license\":\"GPL-3.0\",\"urls\":[\"bzz-raw://ca829a69b3fbc74fec8e140d42a2bf93bc3512609272f031c846470f61f0ab7e\",\"dweb:/ipfs/QmP3r3MBgAN39KeVB1rCGJWwcBcotNt26ALtAR54poQ1Jc\"]},\"lib/account-abstraction/contracts/core/NonceManager.sol\":{\"keccak256\":\"0x1f951786ce6f171e7ed0242fee73ee4a205c7523404ee6cffca48b8c64ea5fe9\",\"license\":\"GPL-3.0\",\"urls\":[\"bzz-raw://a602bf2274d478dae7a532cca31f8179131808c324cc26ece5c7e87c5a1015a6\",\"dweb:/ipfs/QmaaSyw5GGbAWzUhAPCtsb38P3MmaVr1ngp61PYHCU2a5a\"]},\"lib/account-abstraction/contracts/core/SenderCreator.sol\":{\"keccak256\":\"0xeb95afb6e4cf921c1ed105ecb9f549ca46bee57f68acd1d2f4f84607ac0db5c5\",\"license\":\"GPL-3.0\",\"urls\":[\"bzz-raw://d2ac91562f1fcabe4809a1b4256895efebcf46f89e08336a6c09ee2d29733238\",\"dweb:/ipfs/QmPsQnPcCzioPwVtUhxkbnwKPC1bnhHSbAwK9GXVpjN3mH\"]},\"lib/account-abstraction/contracts/core/StakeManager.sol\":{\"keccak256\":\"0x673eb19600058d8642605ca409c9e1d4cab13735564b856270b92c330ffb1b8d\",\"license\":\"GPL-3.0-only\",\"urls\":[\"bzz-raw://06599c57c7075ee8eb5f1710fccca3eb322876b968ec271e1fb34af41510ab2c\",\"dweb:/ipfs/QmVsDEjmZYtzgXa4AYKxbQEYQVh6NBq8GmFJCariBUqK4G\"]},\"lib/account-abstraction/contracts/core/UserOperationLib.sol\":{\"keccak256\":\"0x9d50ece985d35f82e33e5da417595c86fac10449e3d10895d08363d33aad454b\",\"license\":\"GPL-3.0\",\"urls\":[\"bzz-raw://b1d11cc364c8bf7ed5388268c895b5ffed16e87dfbcb320ddeeba5e7974315dc\",\"dweb:/ipfs/QmYSpvjxEjweietQrYZagwQ52ipy7eXx4rwvnTzXKeGeMS\"]},\"lib/account-abstraction/contracts/interfaces/IAccount.sol\":{\"keccak256\":\"0x38710bec0cb20ff4ceef46a80475b5bdabc27b7efd2687fd473db68332f61b78\",\"license\":\"GPL-3.0\",\"urls\":[\"bzz-raw://dea7a723e1ef852e8764e69914a345d2e8bc5e13facfc9d5c29d791cb4ab0020\",\"dweb:/ipfs/QmU8dYgyF4DBJXFqjwLAtnE3q8q259ChfoEk9a6wyhHzEP\"]},\"lib/account-abstraction/contracts/interfaces/IAccountExecute.sol\":{\"keccak256\":\"0xd3dc32dde1add1fb6377f939ceff6be31c2e21343522311f7b88db666be9ee6c\",\"license\":\"GPL-3.0\",\"urls\":[\"bzz-raw://5b8f065171bd32e23b306868189c730f849ce6147f753c59e396e7afcf384577\",\"dweb:/ipfs/QmZpDRNEZ9YNgGgyLQo5yM4bB1FNbtnfDABsChbgSQKXUh\"]},\"lib/account-abstraction/contracts/interfaces/IAggregator.sol\":{\"keccak256\":\"0xf100d6fcc0c3b450b13e979b6a42c628c292a1bc340eccc2e7796b80e3975588\",\"license\":\"GPL-3.0\",\"urls\":[\"bzz-raw://192938b5b27234d35c8098a319e879363c79f750eea4d0e409dc889a8ce5b155\",\"dweb:/ipfs/QmURpaJFPqEtkKP2ngBsgZhAGN8wAWh5XQpYmCkiz4Urz5\"]},\"lib/account-abstraction/contracts/interfaces/IEntryPoint.sol\":{\"keccak256\":\"0x1972a5fcb3a808b58c85af5741949ef6af11ab0debd3ae8c708171ae1ae0d0c4\",\"license\":\"GPL-3.0\",\"urls\":[\"bzz-raw://baa9837ae73b9e2362a47d42d081d7c0f3d8e878e5edb381117d94a6968949c9\",\"dweb:/ipfs/QmUmo6FUE7fv5z1WzW1YFjxp8PqaeN2JrEee9au59w3Xhe\"]},\"lib/account-abstraction/contracts/interfaces/INonceManager.sol\":{\"keccak256\":\"0xd575af0f6ebbd5f0b2933307d44cd7b4e03a69f4b817a67db5409bd3c89aeecb\",\"license\":\"GPL-3.0\",\"urls\":[\"bzz-raw://3b1e2dea9b05cfba9d13339ed16d96457dc861013cc4f3f35b71a80f82448db3\",\"dweb:/ipfs/QmVaGy5uGDMSiU2SzyokTjoHFyb39VVG5wtaM9KTnHyZSk\"]},\"lib/account-abstraction/contracts/interfaces/IPaymaster.sol\":{\"keccak256\":\"0x49d8dbf8a85b006bcd89bbc40e4e9e113997cc016007de85263bdae70572d07f\",\"license\":\"GPL-3.0\",\"urls\":[\"bzz-raw://bc0d83804c1b795d5c216b3518cd176c48f90db28550f267cbd89746d6b476c8\",\"dweb:/ipfs/QmNdCm4c6hnt7f6Q8q21QjtCNZWWRUaMVEYnQHEv68VnKt\"]},\"lib/account-abstraction/contracts/interfaces/IStakeManager.sol\":{\"keccak256\":\"0xbe5ca9e7f254d031687419e7b96ef48c9c63e9398bbe992dc72ffc6dc14e0a04\",\"license\":\"GPL-3.0-only\",\"urls\":[\"bzz-raw://1fffec71c38627a26fabb423350148009579f092623fb02b471a12d973763a00\",\"dweb:/ipfs/QmRBi31QEYXHj3x1AnQ2jKa2eziZH1b9av396P3b4dw6bj\"]},\"lib/account-abstraction/contracts/interfaces/PackedUserOperation.sol\":{\"keccak256\":\"0x1129b46381db68eddbc5cb49e50664667b66b03c480453858e7b25eabe444359\",\"license\":\"GPL-3.0\",\"urls\":[\"bzz-raw://499a948aba60480dba6e25c763b8d918f1c246eb7a3302e04f493e080f3295be\",\"dweb:/ipfs/QmeRhhswf4NACcBKam2PyjpTP2ddSm648kah5kkQJsvwz3\"]},\"lib/account-abstraction/contracts/utils/Exec.sol\":{\"keccak256\":\"0x86b1b1cd11158dddb9d381040c57fdc643c74b5e4eed3e7e036f32452672ad74\",\"license\":\"LGPL-3.0-only\",\"urls\":[\"bzz-raw://ad88663b6c76df73cf09a272cf333d038df7bb4c51281284b572bf9b46e1cd77\",\"dweb:/ipfs/QmVKxYF8avyPBtqejVhFCM2CuHsfpsCh7TsPqkBLtrgwJQ\"]},\"lib/forge-std/src/Base.sol\":{\"keccak256\":\"0x4ff1a785311017d1eedb1b4737956fa383067ad34eb439abfec1d989754dde1c\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://f553622969b9fdb930246704a4c10dfaee6b1a4468c142fa7eb9dc292a438224\",\"dweb:/ipfs/QmcxqHnqdQsMVtgsfH9VNLmZ3g7GhgNagfq7yvNCDcCHFK\"]},\"lib/forge-std/src/Script.sol\":{\"keccak256\":\"0x2315be74cc2826f9da401bea3da46a10ad6a6efdf73176d79160b453286d0ed2\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://af0d4dc826911d6cb4d6272ed5cbdb6950e1476141cca328e178b808d848789c\",\"dweb:/ipfs/QmV2ytjUEkV84VtdMs1nZqQTBoVE987cHboQMpiha5yo3e\"]},\"lib/forge-std/src/StdAssertions.sol\":{\"keccak256\":\"0x4584f551c3a875c26423c1e50a77179bc2f9c9c1ee6d0f0c6be0f89ca5ee8270\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://ef118876a862b60ba8a6612b8b3f3a6c226e11a0071a2e9695f021586d1bfdbe\",\"dweb:/ipfs/QmXd2vD91PkvoFWasFkgbDi89PctmgsHVxGvGNyhjmRK2b\"]},\"lib/forge-std/src/StdChains.sol\":{\"keccak256\":\"0x1e2c73d51d6b0d1101f3a4cf0e6def9818a891d6aa8d306f2b127943a69dca2d\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0ab436d74b405f890e2634c6077df15cc196b4032ec1bdabaaf021ef209e68db\",\"dweb:/ipfs/Qmbb1Qgtdn6S4aqrnpg3y9TDX7erFFcRir9GN62Y7QazaY\"]},\"lib/forge-std/src/StdCheats.sol\":{\"keccak256\":\"0xb72f3519e0bf7d31df5d68557525f4fc55d861c3fb3b0f7793144ef7c94cbeb7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://f3456d0f78e6f61203fa7871ba2df0d35925f10db3baee14be623ce2a35b84e2\",\"dweb:/ipfs/QmWE6QQSBvJifHMraisBTrf1x4WCwrDoTPLX8UKajTiApc\"]},\"lib/forge-std/src/StdError.sol\":{\"keccak256\":\"0xbf477b11a42d7611696956546bcfaa29317d1166bf65e402344599c05943fc77\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://bc2e117d1135e030862b96a6526a43feb38d396cc79857f1fb696d4eff0e5fd6\",\"dweb:/ipfs/QmdSuQ5RrQudTLsNmWXGEeVJX8gR5U9XPm6m4dwwuQnJrj\"]},\"lib/forge-std/src/StdInvariant.sol\":{\"keccak256\":\"0x4dab3021edfa9511bbdd80c48f060ef62eaf457f99eaf841f561fc2557d9a08d\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://07668628673174cf8f27f8f4e1f862bab775013ec247eb34f698c5005f229391\",\"dweb:/ipfs/QmPJsiiYwmCZXMsHmQv5tg8VF3CAhNdat7WnKLTWZZH2v5\"]},\"lib/forge-std/src/StdJson.sol\":{\"keccak256\":\"0x62bed173cb126f6d5006706cf249bac8a2d51bfa18f773f314784ff18adc622d\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://5acc33dddbf2492e37dc32e89cd56ce917272d303a6874805f3a5768a6bfbf54\",\"dweb:/ipfs/QmTsgFhcpUf16gAVazUXU3WspgX8nHke2hzVCvoqS25WEp\"]},\"lib/forge-std/src/StdMath.sol\":{\"keccak256\":\"0xd90ad4fd8aeaeb8929964e686e769fdedd5eded3fc3815df194a0ab9f91a3fb2\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://7919b70f636c7b805223992f28ad1ad0145d6c1385b5931a3589aface5fe6c92\",\"dweb:/ipfs/QmY7FRaULwoGgFteF8GawjQJRfasNgpWnU2aiMsFrYpuTC\"]},\"lib/forge-std/src/StdStorage.sol\":{\"keccak256\":\"0x651d84d948832f0ef45686417aa68ffb871378fa788a4123dbf37844903c66f3\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://ff20f5ac9de3dc3ba86b1bf1f2723174e82ce3499ad67cb0ccfa7d28baeee678\",\"dweb:/ipfs/QmRZkUFKz7AmF7yk6o317sk822HHhGVPXZQgX8G4LfYfft\"]},\"lib/forge-std/src/StdStyle.sol\":{\"keccak256\":\"0x43e2a8a9b9c2574dabe74f11adf6f782df218f463540e3b5b563609fe108597d\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://51363ca97404cf4128e1141428949768c31929e75e014b02c85e887fbbb4f1b8\",\"dweb:/ipfs/QmVhtbQc2fU4rRmbcfBtz34mAgG4BAZBsbna1Ca4SkoPsK\"]},\"lib/forge-std/src/StdToml.sol\":{\"keccak256\":\"0xc8a57915ace96f5b6a85b57e57690fc038cad9034a3dc368c11828a3707c61ab\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://fa880a1a6e5d94005dcf4811b4c0df8d9c06407017ae111bd351483e2b76a72d\",\"dweb:/ipfs/QmcxkEE58gE1vDcZofTr8QpvdjXjgR72yYg7o4vTPSLCsy\"]},\"lib/forge-std/src/StdUtils.sol\":{\"keccak256\":\"0x4a5853bb9688c4e1c65626036cddd8ea2af84ef1046b704ddc3782d84a892410\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://09c1024e6aac9657312fcfcf5c3dee62c22edf9f74a1065e6924c4ec710ecafa\",\"dweb:/ipfs/QmRNURoTUkd6DiZnf8yY8o3stJpVQBifopdSpQgP9RhvRr\"]},\"lib/forge-std/src/Test.sol\":{\"keccak256\":\"0x3b4bb409a156dee9ce261458117fe9f81080ca844a8a26c07c857c46d155effe\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://5792c69fe24bdc063a14e08fe68275007fdb1e5e7e343840a77938cb7e95a64e\",\"dweb:/ipfs/QmcAMhaurUwzhytJFYix4vRNeZeV8g27b8LnV3t7dvYtiK\"]},\"lib/forge-std/src/Vm.sol\":{\"keccak256\":\"0xfd9e719ff0673fdd8ff83bbe72ee8cae0273d61937d27fde5d9159d9849233f4\",\"license\":\"MIT OR Apache-2.0\",\"urls\":[\"bzz-raw://b14aaef0d76f2e5257e4e3ab33895d5260d4c7707ff4d37fea1f31d25c8684a8\",\"dweb:/ipfs/QmRd6BMh4FNDPW8Niy4TU2XrtKqAc6GRTfw8xjSwpQ42Gy\"]},\"lib/forge-std/src/console.sol\":{\"keccak256\":\"0x0b7475858d62180b6ccbea2181cf9fa0ed6773fdb8b0f5cbd946d13c5660579f\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://4ba7fa71d8d3ace512ee0a3d9d4d5923a6eb01fcbd93219726e40eeb50a8e52f\",\"dweb:/ipfs/QmScHyHRhrWp21Gazmzq1HR1YDjkbpya6SPTHEs5wzjhwg\"]},\"lib/forge-std/src/console2.sol\":{\"keccak256\":\"0x3b8fe79f48f065a4e4d35362171304a33784c3a90febae5f2787805a438de12f\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://61de63af08803549299e68b6e6e88d40f3c5afac450e4ee0a228c66a61ba003d\",\"dweb:/ipfs/QmWVoQ5rrVxnczD4ZZoPbD4PC9Z3uExJtzjD4awTqd14MZ\"]},\"lib/forge-std/src/interfaces/IERC165.sol\":{\"keccak256\":\"0x414b2861b1acbf816ccb7346d3f16cf6c1e002e9e5e40d2f1f26fa5ddc2ea600\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://698352fb240868ea8f1d1fe389993035eeab930f10d06934f80ccfb2b6ccbfbc\",\"dweb:/ipfs/QmT6WLHAgXxFhh12kWym895oTzXid1326iZiwT3pyfggoT\"]},\"lib/forge-std/src/interfaces/IERC20.sol\":{\"keccak256\":\"0x4cab887298790f908c27de107e4e2907ca5413aee482ef776f8d2f353c5ef947\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://bb715e0c4a2bdbe432bb624501506041f06e878e0b72675aebba30ad2c2b72e7\",\"dweb:/ipfs/QmWhhLSvkxS2NrukJJHqFY8gDVE5r9rD4PfHvR24pwdKv9\"]},\"lib/forge-std/src/interfaces/IERC721.sol\":{\"keccak256\":\"0xf069262a264fdb69f8f37a10d2df7374649e9ba73f8414c9c8a3b51184625f15\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://924a41ca82a68ffbd503a5faf2f76d13e9938f10501a71094716f12bb64b4b7f\",\"dweb:/ipfs/QmdWnqfKc5ZGhmxNPTde4zrFchnv9Yk9MpCMb2rdhXE5gm\"]},\"lib/forge-std/src/interfaces/IMulticall3.sol\":{\"keccak256\":\"0x7aac1389150499a922d1f9ef5749c908cef127cb2075b92fa17e9cb611263d0a\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://d95ebb7c7c463e08ebc12dab639945752fb2480acfc6e86da32f72732a7fd0c0\",\"dweb:/ipfs/QmNXK8P8oPWwajsQHvAHw3JPyQidPLCGQN3hWu1Lk6PBL2\"]},\"lib/forge-std/src/mocks/MockERC20.sol\":{\"keccak256\":\"0xadbdfc6639edec00ba94bb1133a0fd8de31ccafe45c2ef5df9b3ca61b60b559b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://bc766f01bccf669abac8cc7b2096cc1352a66471ca3772ae61b1801dedc4ed4f\",\"dweb:/ipfs/QmNigaPj1LYkP7Z5xr4ijkUxr2K66fDGeoifG3WoM9ruyw\"]},\"lib/forge-std/src/mocks/MockERC721.sol\":{\"keccak256\":\"0xbfbb755bb379f58b97699f7cda0e9a2b9113daaa072e41b280a5ce6a3bff44c9\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://5ae0c31d29db14d6a0e9b62d33d550feb307f48a6f45068901a013321f337f87\",\"dweb:/ipfs/QmX25DVXW6XZDvRm6SNBGCWrZQ6oNhdq5CmgtVocvsUdwv\"]},\"lib/forge-std/src/safeconsole.sol\":{\"keccak256\":\"0xbaf41fdc6c54297e7cd8250e48b0f20eaac918e342a1028cef3f9a52ac086381\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://a500ad81dea226f9910e6b50f99a9ff930105e393a692cbfb2185e4cdb4424ae\",\"dweb:/ipfs/QmVbUQpXNMmMWRiy4FvBNczzq46BMGfUoBikvSHNiCxVTq\"]},\"lib/openzeppelin-contracts/contracts/access/Ownable.sol\":{\"keccak256\":\"0xff6d0bb2e285473e5311d9d3caacb525ae3538a80758c10649a4d61029b017bb\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://8ed324d3920bb545059d66ab97d43e43ee85fd3bd52e03e401f020afb0b120f6\",\"dweb:/ipfs/QmfEckWLmZkDDcoWrkEvMWhms66xwTLff9DDhegYpvHo1a\"]},\"lib/openzeppelin-contracts/contracts/interfaces/draft-IERC6093.sol\":{\"keccak256\":\"0x60c65f701957fdd6faea1acb0bb45825791d473693ed9ecb34726fdfaa849dd7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://ea290300e0efc4d901244949dc4d877fd46e6c5e43dc2b26620e8efab3ab803f\",\"dweb:/ipfs/QmcLLJppxKeJWqHxE2CUkcfhuRTgHSn8J4kijcLa5MYhSt\"]},\"lib/openzeppelin-contracts/contracts/mocks/token/ERC20Mock.sol\":{\"keccak256\":\"0x3ae81a443846c6d9bd387d6c6a5d7271a25095c83bb93817eefdaa22e13ca9e0\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://f98462a56f254dc0046038e92527e3b7ee5bf0e03f60e3459fbd400c14be01a7\",\"dweb:/ipfs/QmevANfRaMrqy8Jh33LxEs5vP2xBPQspxtij8bsonw3GHM\"]},\"lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":{\"keccak256\":\"0xc3e1fa9d1987f8d349dfb4d6fe93bf2ca014b52ba335cfac30bfe71e357e6f80\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://c5703ccdeb7b1d685e375ed719117e9edf2ab4bc544f24f23b0d50ec82257229\",\"dweb:/ipfs/QmTdwkbQq7owpCiyuzE7eh5LrD2ddrBCZ5WHVsWPi1RrTS\"]},\"lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0ea104e577e63faea3b69c415637e99e755dcbf64c5833d7140c35a714d6d90c\",\"dweb:/ipfs/Qmau6x4Ns9XdyynRCNNp3RhLqijJjFm7z5fyZazfYFGYdq\"]},\"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"keccak256\":\"0xaa761817f6cd7892fcf158b3c776b34551cde36f48ff9703d53898bc45a94ea2\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0ad7c8d4d08938c8dfc43d75a148863fb324b80cf53e0a36f7e5a4ac29008850\",\"dweb:/ipfs/QmcrhfPgVNf5mkdhQvy1pMv51TFokD3Y4Wa5WZhFqVh8UV\"]},\"lib/openzeppelin-contracts/contracts/utils/Context.sol\":{\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6a708e8a5bdb1011c2c381c9a5cfd8a9a956d7d0a9dc1bd8bcdaf52f76ef2f12\",\"dweb:/ipfs/Qmax9WHBnVsZP46ZxEMNRQpLQnrdE4dK8LehML1Py8FowF\"]},\"lib/openzeppelin-contracts/contracts/utils/ReentrancyGuard.sol\":{\"keccak256\":\"0xf980daa263b661ab8ddee7d4fd833c7da7e7995e2c359ff1f17e67e4112f2236\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://7448ab095d6940130bcf76ba47a2eab14148c83119523b93dd89f6d84edd6c02\",\"dweb:/ipfs/QmawrZ4voKQjH3oomXT3Kuheb3Mnmo2VvVpxg8Ne5UJUrd\"]},\"lib/openzeppelin-contracts/contracts/utils/Strings.sol\":{\"keccak256\":\"0x55f102ea785d8399c0e58d1108e2d289506dde18abc6db1b7f68c1f9f9bc5792\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6e52e0a7765c943ef14e5bcf11e46e6139fa044be564881378349236bf2e3453\",\"dweb:/ipfs/QmZEeeXoFPW47amyP35gfzomF9DixqqTEPwzBakv6cZw6i\"]},\"lib/openzeppelin-contracts/contracts/utils/cryptography/ECDSA.sol\":{\"keccak256\":\"0xeed0a08b0b091f528356cbc7245891a4c748682d4f6a18055e8e6ca77d12a6cf\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://ba80ba06c8e6be852847e4c5f4492cef801feb6558ae09ed705ff2e04ea8b13c\",\"dweb:/ipfs/QmXRJDv3xHLVQCVXg1ZvR35QS9sij5y9NDWYzMfUfAdTHF\"]},\"lib/openzeppelin-contracts/contracts/utils/cryptography/MessageHashUtils.sol\":{\"keccak256\":\"0xba333517a3add42cd35fe877656fc3dfcc9de53baa4f3aabbd6d12a92e4ea435\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://2ceacff44c0fdc81e48e0e0b1db87a2076d3c1fb497341de077bf1da9f6b406c\",\"dweb:/ipfs/QmRUo1muMRAewxrKQ7TkXUtknyRoR57AyEkoPpiuZQ8FzX\"]},\"lib/openzeppelin-contracts/contracts/utils/introspection/ERC165.sol\":{\"keccak256\":\"0x9e8778b14317ba9e256c30a76fd6c32b960af621987f56069e1e819c77c6a133\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://1777404f1dcd0fac188e55a288724ec3c67b45288e49cc64723e95e702b49ab8\",\"dweb:/ipfs/QmZFdC626GButBApwDUvvTnUzdinevC3B24d7yyh57XkiA\"]},\"lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol\":{\"keccak256\":\"0x4296879f55019b23e135000eb36896057e7101fb7fb859c5ef690cf14643757b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://87b3541437c8c443ccd36795e56a338ed12855eec17f8da624511b8d1a7e14df\",\"dweb:/ipfs/QmeJQCtZrQjtJLr6u7ZHWeH3pBnjtLWzvRrKViAi7UZqxL\"]},\"lib/openzeppelin-contracts/contracts/utils/math/Math.sol\":{\"keccak256\":\"0x005ec64c6313f0555d59e278f9a7a5ab2db5bdc72a027f255a37c327af1ec02d\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://4ece9f0b9c8daca08c76b6b5405a6446b6f73b3a15fab7ff56e296cbd4a2c875\",\"dweb:/ipfs/QmQyRpyPRL5SQuAgj6SHmbir3foX65FJjbVTTQrA2EFg6L\"]},\"lib/openzeppelin-contracts/contracts/utils/math/SignedMath.sol\":{\"keccak256\":\"0x5f7e4076e175393767754387c962926577f1660dd9b810187b9002407656be72\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://7d533a1c97cd43a57cd9c465f7ee8dd0e39ae93a8fb8ff8e5303a356b081cdcc\",\"dweb:/ipfs/QmVBEei6aTnvYNZp2CHYVNKyZS4q1KkjANfY39WVXZXVoT\"]},\"script/DeployMinimalAccount.s.sol\":{\"keccak256\":\"0x9caa4c1f6b1c279d55206e380a9433fd96850701404e12c2914dea53bc593bbf\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://1cd0372b274824e8b1831697710f880bfa64e84dae98be793a3a29cc9a5d2012\",\"dweb:/ipfs/QmdgS2bLkeeyXqJ8WzbovrHxN7m4cC2KXaiRZW4k5hFe6c\"]},\"script/HelperConfig.s.sol\":{\"keccak256\":\"0x30cac6fd23529d4b43d574a272d8f0efc107ec0e9ba1f85ae6475ee6395e8cd8\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://f05155378a606a1d69d1762f3ae8cb4945e9931fe3fa20244fe06b114d300c01\",\"dweb:/ipfs/QmZJYzhrz5VSDrTRUZUugfLrmS2229T7BEEgpbEE8xQfF6\"]},\"script/SendPackedUserOp.s.sol\":{\"keccak256\":\"0xd884e4ae0f22ec44c31894b2f8adb47486dd33716648cfbc28326b8e519ea0ec\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://2307590b0bdfd55ed2c6c1315da304d7a9561cca16db353c0228a9affdb5a0d0\",\"dweb:/ipfs/QmVBEm8aabQUaPaTbHYT86H7HxF8ucspAbnTp4zQJxi6MW\"]},\"src/ethereum/MinimalAccount.sol\":{\"keccak256\":\"0x9d27eaa39439a4da830eb36e51dbac338d0be1f48678c6ede452cf03ef6b9bc3\",\"license\":\"SEE LICENSE IN LICENSE\",\"urls\":[\"bzz-raw://562b97cd8a625661c5879850b3c1d0fe8a4e48b06e3f35fca092e6addc8f80ed\",\"dweb:/ipfs/QmTNhoDdfALgA37rq7Z2sssh4Ex4tK75LPV66hF3zBAkRm\"]},\"test/ethereum/MinimalAccount.t.sol\":{\"keccak256\":\"0xb0992c9e4f5837937b471ea6b17af8579f9ee4d3e41508e89bf66a1e2878fec0\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://22641871a240cc7362781e108c363e256168f0b48861ddda354dd93f286f9bdd\",\"dweb:/ipfs/QmX7szbH2yuQ2UjntAj7uPBQZTiDjbzU67NYFFwA6htpRN\"]}},\"version\":1}","solc_version":"0.8.24","solc_zkvm_edition":"1.0.1","zk_version":"1.4.1"},"storageLayout":{"storage":[],"types":{}},"userdoc":{},"devdoc":{},"irOptimized":"/// @use-src 15:\"lib/forge-std/src/Base.sol\", 17:\"lib/forge-std/src/StdAssertions.sol\", 18:\"lib/forge-std/src/StdChains.sol\", 19:\"lib/forge-std/src/StdCheats.sol\", 21:\"lib/forge-std/src/StdInvariant.sol\", 27:\"lib/forge-std/src/StdUtils.sol\", 28:\"lib/forge-std/src/Test.sol\", 83:\"test/ethereum/MinimalAccount.t.sol\"\nobject \"MinimalAccountTest_52031\" {\n    code {\n        {\n            /// @src 83:715:5265  \"contract MinimalAccountTest is Test {...\"\n            let _1 := memoryguard(0x80)\n            if callvalue() { revert(0, 0) }\n            let _2 := not(255)\n            sstore(/** @src 18:3166:3170  \"true\" */ 0x0c, /** @src 83:715:5265  \"contract MinimalAccountTest is Test {...\" */ or(and(sload(/** @src 18:3166:3170  \"true\" */ 0x0c), /** @src 83:715:5265  \"contract MinimalAccountTest is Test {...\" */ _2), /** @src 18:3166:3170  \"true\" */ 0x01))\n            /// @src 83:715:5265  \"contract MinimalAccountTest is Test {...\"\n            sstore(/** @src 28:1038:1042  \"true\" */ 0x1f, /** @src 83:715:5265  \"contract MinimalAccountTest is Test {...\" */ or(and(sload(/** @src 28:1038:1042  \"true\" */ 0x1f), /** @src 83:715:5265  \"contract MinimalAccountTest is Test {...\" */ _2), /** @src 18:3166:3170  \"true\" */ 0x01))\n            /// @src 83:715:5265  \"contract MinimalAccountTest is Test {...\"\n            let _3 := 64\n            let newFreePtr := add(_1, _3)\n            let _4 := sub(shl(64, 1), 1)\n            if or(gt(newFreePtr, _4), lt(newFreePtr, _1))\n            {\n                mstore(0, shl(224, 0x4e487b71))\n                mstore(4, 0x41)\n                revert(0, 0x24)\n            }\n            mstore(_3, newFreePtr)\n            let _5 := 10\n            mstore(_1, 10)\n            let _6 := 0x20\n            mstore(add(_1, _6), \"randomUser\")\n            /// @src 19:20303:20325  \"abi.encodePacked(name)\"\n            let expr_mpos := /** @src 83:715:5265  \"contract MinimalAccountTest is Test {...\" */ mload(_3)\n            let i := 0\n            for { } lt(i, _5) { i := add(i, _6) }\n            {\n                mstore(add(add(/** @src 19:20303:20325  \"abi.encodePacked(name)\" */ expr_mpos, /** @src 83:715:5265  \"contract MinimalAccountTest is Test {...\" */ i), _6), mload(add(add(_1, i), _6)))\n            }\n            mstore(add(/** @src 19:20303:20325  \"abi.encodePacked(name)\" */ expr_mpos, /** @src 83:715:5265  \"contract MinimalAccountTest is Test {...\" */ 42), 0)\n            /// @src 19:20303:20325  \"abi.encodePacked(name)\"\n            mstore(expr_mpos, /** @src 83:715:5265  \"contract MinimalAccountTest is Test {...\" */ 10)\n            let newFreePtr_1 := add(expr_mpos, _3)\n            if or(gt(newFreePtr_1, _4), lt(newFreePtr_1, expr_mpos))\n            {\n                mstore(0, shl(224, 0x4e487b71))\n                mstore(4, 0x41)\n                revert(0, 0x24)\n            }\n            mstore(_3, newFreePtr_1)\n            /// @src 19:20293:20326  \"keccak256(abi.encodePacked(name))\"\n            let _7 := keccak256(/** @src 19:20303:20325  \"abi.encodePacked(name)\" */ add(expr_mpos, /** @src 83:715:5265  \"contract MinimalAccountTest is Test {...\" */ _6), mload(/** @src 19:20293:20326  \"keccak256(abi.encodePacked(name))\" */ expr_mpos))\n            /// @src 19:20344:20363  \"vm.addr(privateKey)\"\n            mstore(newFreePtr_1, /** @src 19:291:350  \"Vm(address(uint160(uint256(keccak256(\\\"hevm cheat code\\\")))))\" */ shl(224, 0xffa18649))\n            mstore(/** @src 19:20344:20363  \"vm.addr(privateKey)\" */ add(/** @src 83:715:5265  \"contract MinimalAccountTest is Test {...\" */ expr_mpos, /** @src 19:20344:20363  \"vm.addr(privateKey)\" */ 68), /** @src 19:291:350  \"Vm(address(uint160(uint256(keccak256(\\\"hevm cheat code\\\")))))\" */ _7)\n            /// @src 83:715:5265  \"contract MinimalAccountTest is Test {...\"\n            let _8 := 0x7109709ecfa91a80626ff3989d68f67f5b1dd12d\n            /// @src 19:20344:20363  \"vm.addr(privateKey)\"\n            let _9 := staticcall(gas(), /** @src 83:715:5265  \"contract MinimalAccountTest is Test {...\" */ _8, /** @src 19:20344:20363  \"vm.addr(privateKey)\" */ newFreePtr_1, /** @src 19:291:350  \"Vm(address(uint160(uint256(keccak256(\\\"hevm cheat code\\\")))))\" */ 36, /** @src 19:20344:20363  \"vm.addr(privateKey)\" */ newFreePtr_1, /** @src 83:715:5265  \"contract MinimalAccountTest is Test {...\" */ _6)\n            /// @src 19:20344:20363  \"vm.addr(privateKey)\"\n            if iszero(_9)\n            {\n                /// @src 19:291:350  \"Vm(address(uint160(uint256(keccak256(\\\"hevm cheat code\\\")))))\"\n                let pos := /** @src 83:715:5265  \"contract MinimalAccountTest is Test {...\" */ mload(_3)\n                /// @src 19:291:350  \"Vm(address(uint160(uint256(keccak256(\\\"hevm cheat code\\\")))))\"\n                returndatacopy(pos, /** @src 83:715:5265  \"contract MinimalAccountTest is Test {...\" */ 0, /** @src 19:291:350  \"Vm(address(uint160(uint256(keccak256(\\\"hevm cheat code\\\")))))\" */ returndatasize())\n                revert(pos, returndatasize())\n            }\n            /// @src 19:20344:20363  \"vm.addr(privateKey)\"\n            let expr := /** @src 83:715:5265  \"contract MinimalAccountTest is Test {...\" */ 0\n            /// @src 19:20344:20363  \"vm.addr(privateKey)\"\n            if _9\n            {\n                let _10 := /** @src 83:715:5265  \"contract MinimalAccountTest is Test {...\" */ _6\n                /// @src 19:20344:20363  \"vm.addr(privateKey)\"\n                if gt(/** @src 83:715:5265  \"contract MinimalAccountTest is Test {...\" */ _6, /** @src 19:20344:20363  \"vm.addr(privateKey)\" */ returndatasize()) { _10 := returndatasize() }\n                /// @src 83:715:5265  \"contract MinimalAccountTest is Test {...\"\n                let newFreePtr_2 := add(add(expr_mpos, and(add(_10, /** @src 28:1038:1042  \"true\" */ 0x1f), /** @src 83:715:5265  \"contract MinimalAccountTest is Test {...\" */ not(31))), _3)\n                if or(gt(newFreePtr_2, _4), lt(newFreePtr_2, newFreePtr_1))\n                {\n                    mstore(expr, shl(224, 0x4e487b71))\n                    mstore(/** @src 19:20344:20363  \"vm.addr(privateKey)\" */ 4, /** @src 83:715:5265  \"contract MinimalAccountTest is Test {...\" */ 0x41)\n                    revert(expr, /** @src 19:291:350  \"Vm(address(uint160(uint256(keccak256(\\\"hevm cheat code\\\")))))\" */ 36)\n                }\n                /// @src 83:715:5265  \"contract MinimalAccountTest is Test {...\"\n                mstore(_3, newFreePtr_2)\n                /// @src 19:291:350  \"Vm(address(uint160(uint256(keccak256(\\\"hevm cheat code\\\")))))\"\n                if slt(sub(/** @src 19:20344:20363  \"vm.addr(privateKey)\" */ add(/** @src 83:715:5265  \"contract MinimalAccountTest is Test {...\" */ expr_mpos, /** @src 19:20344:20363  \"vm.addr(privateKey)\" */ _10), /** @src 83:715:5265  \"contract MinimalAccountTest is Test {...\" */ expr_mpos), _6)\n                /// @src 19:291:350  \"Vm(address(uint160(uint256(keccak256(\\\"hevm cheat code\\\")))))\"\n                {\n                    /// @src 83:715:5265  \"contract MinimalAccountTest is Test {...\"\n                    revert(expr, expr)\n                }\n                /// @src 19:291:350  \"Vm(address(uint160(uint256(keccak256(\\\"hevm cheat code\\\")))))\"\n                let value := mload(newFreePtr_1)\n                if iszero(eq(value, /** @src 83:715:5265  \"contract MinimalAccountTest is Test {...\" */ and(/** @src 19:291:350  \"Vm(address(uint160(uint256(keccak256(\\\"hevm cheat code\\\")))))\" */ value, /** @src 83:715:5265  \"contract MinimalAccountTest is Test {...\" */ sub(shl(160, 1), 1))))\n                /// @src 19:291:350  \"Vm(address(uint160(uint256(keccak256(\\\"hevm cheat code\\\")))))\"\n                {\n                    revert(/** @src 83:715:5265  \"contract MinimalAccountTest is Test {...\" */ expr, expr)\n                }\n                /// @src 19:20344:20363  \"vm.addr(privateKey)\"\n                expr := value\n            }\n            /// @src 19:20373:20393  \"vm.label(addr, name)\"\n            if iszero(extcodesize(/** @src 83:715:5265  \"contract MinimalAccountTest is Test {...\" */ _8))\n            /// @src 19:20373:20393  \"vm.label(addr, name)\"\n            {\n                /// @src 83:715:5265  \"contract MinimalAccountTest is Test {...\"\n                revert(0, 0)\n            }\n            /// @src 19:20373:20393  \"vm.label(addr, name)\"\n            let _11 := /** @src 83:715:5265  \"contract MinimalAccountTest is Test {...\" */ mload(_3)\n            /// @src 19:20373:20393  \"vm.label(addr, name)\"\n            mstore(_11, /** @src 19:291:350  \"Vm(address(uint160(uint256(keccak256(\\\"hevm cheat code\\\")))))\" */ shl(227, 0x18caf8e3))\n            /// @src 83:715:5265  \"contract MinimalAccountTest is Test {...\"\n            let _12 := and(/** @src 19:291:350  \"Vm(address(uint160(uint256(keccak256(\\\"hevm cheat code\\\")))))\" */ expr, /** @src 83:715:5265  \"contract MinimalAccountTest is Test {...\" */ sub(shl(160, 1), 1))\n            /// @src 19:291:350  \"Vm(address(uint160(uint256(keccak256(\\\"hevm cheat code\\\")))))\"\n            mstore(/** @src 19:20373:20393  \"vm.label(addr, name)\" */ add(_11, /** @src 19:20344:20363  \"vm.addr(privateKey)\" */ 4), /** @src 83:715:5265  \"contract MinimalAccountTest is Test {...\" */ _12)\n            /// @src 19:291:350  \"Vm(address(uint160(uint256(keccak256(\\\"hevm cheat code\\\")))))\"\n            mstore(add(/** @src 19:20373:20393  \"vm.label(addr, name)\" */ _11, /** @src 19:291:350  \"Vm(address(uint160(uint256(keccak256(\\\"hevm cheat code\\\")))))\" */ 36), /** @src 83:715:5265  \"contract MinimalAccountTest is Test {...\" */ _3)\n            /// @src 19:291:350  \"Vm(address(uint160(uint256(keccak256(\\\"hevm cheat code\\\")))))\"\n            let length := /** @src 83:715:5265  \"contract MinimalAccountTest is Test {...\" */ mload(/** @src 19:291:350  \"Vm(address(uint160(uint256(keccak256(\\\"hevm cheat code\\\")))))\" */ _1)\n            mstore(add(/** @src 19:20373:20393  \"vm.label(addr, name)\" */ _11, /** @src 19:20344:20363  \"vm.addr(privateKey)\" */ 68), /** @src 19:291:350  \"Vm(address(uint160(uint256(keccak256(\\\"hevm cheat code\\\")))))\" */ length)\n            /// @src 83:715:5265  \"contract MinimalAccountTest is Test {...\"\n            let i_1 := 0\n            for { } lt(i_1, length) { i_1 := add(i_1, _6) }\n            {\n                mstore(add(add(/** @src 19:20373:20393  \"vm.label(addr, name)\" */ _11, /** @src 83:715:5265  \"contract MinimalAccountTest is Test {...\" */ i_1), /** @src 19:291:350  \"Vm(address(uint160(uint256(keccak256(\\\"hevm cheat code\\\")))))\" */ 100), /** @src 83:715:5265  \"contract MinimalAccountTest is Test {...\" */ mload(add(add(_1, i_1), _6)))\n            }\n            mstore(add(add(/** @src 19:20373:20393  \"vm.label(addr, name)\" */ _11, /** @src 83:715:5265  \"contract MinimalAccountTest is Test {...\" */ length), /** @src 19:291:350  \"Vm(address(uint160(uint256(keccak256(\\\"hevm cheat code\\\")))))\" */ 100), /** @src 83:715:5265  \"contract MinimalAccountTest is Test {...\" */ 0)\n            /// @src 19:20373:20393  \"vm.label(addr, name)\"\n            let _13 := call(gas(), /** @src 83:715:5265  \"contract MinimalAccountTest is Test {...\" */ _8, 0, /** @src 19:20373:20393  \"vm.label(addr, name)\" */ _11, add(sub(/** @src 19:291:350  \"Vm(address(uint160(uint256(keccak256(\\\"hevm cheat code\\\")))))\" */ add(/** @src 19:20373:20393  \"vm.label(addr, name)\" */ _11, /** @src 83:715:5265  \"contract MinimalAccountTest is Test {...\" */ and(add(/** @src 19:291:350  \"Vm(address(uint160(uint256(keccak256(\\\"hevm cheat code\\\")))))\" */ length, /** @src 28:1038:1042  \"true\" */ 0x1f), /** @src 83:715:5265  \"contract MinimalAccountTest is Test {...\" */ not(31))), /** @src 19:20373:20393  \"vm.label(addr, name)\" */ _11), /** @src 19:291:350  \"Vm(address(uint160(uint256(keccak256(\\\"hevm cheat code\\\")))))\" */ 100), /** @src 19:20373:20393  \"vm.label(addr, name)\" */ _11, /** @src 83:715:5265  \"contract MinimalAccountTest is Test {...\" */ 0)\n            /// @src 19:20373:20393  \"vm.label(addr, name)\"\n            if iszero(_13)\n            {\n                /// @src 19:291:350  \"Vm(address(uint160(uint256(keccak256(\\\"hevm cheat code\\\")))))\"\n                let pos_1 := /** @src 83:715:5265  \"contract MinimalAccountTest is Test {...\" */ mload(_3)\n                /// @src 19:291:350  \"Vm(address(uint160(uint256(keccak256(\\\"hevm cheat code\\\")))))\"\n                returndatacopy(pos_1, /** @src 83:715:5265  \"contract MinimalAccountTest is Test {...\" */ 0, /** @src 19:291:350  \"Vm(address(uint160(uint256(keccak256(\\\"hevm cheat code\\\")))))\" */ returndatasize())\n                revert(pos_1, returndatasize())\n            }\n            /// @src 19:20373:20393  \"vm.label(addr, name)\"\n            if _13\n            {\n                /// @src 83:715:5265  \"contract MinimalAccountTest is Test {...\"\n                if gt(_11, _4)\n                {\n                    mstore(0, shl(224, 0x4e487b71))\n                    mstore(/** @src 19:20344:20363  \"vm.addr(privateKey)\" */ 4, /** @src 83:715:5265  \"contract MinimalAccountTest is Test {...\" */ 0x41)\n                    revert(0, /** @src 19:291:350  \"Vm(address(uint160(uint256(keccak256(\\\"hevm cheat code\\\")))))\" */ 36)\n                }\n                /// @src 83:715:5265  \"contract MinimalAccountTest is Test {...\"\n                mstore(_3, _11)\n            }\n            sstore(/** @src 83:1042:1064  \"makeAddr(\\\"randomUser\\\")\" */ 0x25, /** @src 83:715:5265  \"contract MinimalAccountTest is Test {...\" */ or(and(sload(/** @src 83:1042:1064  \"makeAddr(\\\"randomUser\\\")\" */ 0x25), /** @src 83:715:5265  \"contract MinimalAccountTest is Test {...\" */ not(sub(shl(160, 1), 1))), _12))\n            let _14 := mload(_3)\n            let _15 := datasize(\"MinimalAccountTest_52031_deployed\")\n            codecopy(_14, dataoffset(\"MinimalAccountTest_52031_deployed\"), _15)\n            return(_14, _15)\n        }\n    }\n    /// @use-src 15:\"lib/forge-std/src/Base.sol\", 17:\"lib/forge-std/src/StdAssertions.sol\", 21:\"lib/forge-std/src/StdInvariant.sol\", 28:\"lib/forge-std/src/Test.sol\", 72:\"lib/openzeppelin-contracts/contracts/utils/cryptography/ECDSA.sol\", 73:\"lib/openzeppelin-contracts/contracts/utils/cryptography/MessageHashUtils.sol\", 83:\"test/ethereum/MinimalAccount.t.sol\"\n    object \"MinimalAccountTest_52031_deployed\" {\n        code {\n            {\n                /// @src 83:715:5265  \"contract MinimalAccountTest is Test {...\"\n                let _1 := memoryguard(0x80)\n                let _2 := 64\n                mstore(_2, _1)\n                let _3 := 4\n                if iszero(lt(calldatasize(), _3))\n                {\n                    let _4 := 0\n                    let _5 := 224\n                    switch shr(224, calldataload(_4))\n                    case 0x0a9254e4 {\n                        if callvalue() { revert(_4, _4) }\n                        if slt(add(calldatasize(), not(3)), _4) { revert(_4, _4) }\n                        /// @src 83:1194:1213  \"new DeployMinimal()\"\n                        let _6 := datasize(\"DeployMinimal_50440\")\n                        let _7 := add(_1, _6)\n                        let _8 := 0xffffffffffffffff\n                        if or(gt(_7, _8), lt(_7, _1))\n                        {\n                            /// @src 83:715:5265  \"contract MinimalAccountTest is Test {...\"\n                            mstore(_4, shl(224, 0x4e487b71))\n                            mstore(_3, 0x41)\n                            revert(_4, 0x24)\n                        }\n                        /// @src 83:1194:1213  \"new DeployMinimal()\"\n                        datacopy(_1, dataoffset(\"DeployMinimal_50440\"), _6)\n                        let expr_address := create(/** @src 83:715:5265  \"contract MinimalAccountTest is Test {...\" */ _4, /** @src 83:1194:1213  \"new DeployMinimal()\" */ _1, sub(_7, _1))\n                        if iszero(expr_address)\n                        {\n                            /// @src 83:715:5265  \"contract MinimalAccountTest is Test {...\"\n                            let pos := mload(_2)\n                            returndatacopy(pos, _4, returndatasize())\n                            revert(pos, returndatasize())\n                        }\n                        let _9 := sub(shl(160, /** @src 83:1194:1213  \"new DeployMinimal()\" */ 1), 1)\n                        /// @src 83:715:5265  \"contract MinimalAccountTest is Test {...\"\n                        let _10 := and(expr_address, _9)\n                        let _11 := shl(160, 0xffffffffffffffffffffffff)\n                        sstore(/** @src 83:1178:1213  \"deployMinimal = new DeployMinimal()\" */ 0x20, /** @src 83:715:5265  \"contract MinimalAccountTest is Test {...\" */ or(and(sload(/** @src 83:1178:1213  \"deployMinimal = new DeployMinimal()\" */ 0x20), /** @src 83:715:5265  \"contract MinimalAccountTest is Test {...\" */ _11), _10))\n                        /// @src 83:1256:1292  \"deployMinimal.deployMinimalAccount()\"\n                        let _12 := /** @src 83:715:5265  \"contract MinimalAccountTest is Test {...\" */ mload(_2)\n                        /// @src 83:1256:1292  \"deployMinimal.deployMinimalAccount()\"\n                        mstore(_12, /** @src 83:715:5265  \"contract MinimalAccountTest is Test {...\" */ shl(224, 0x7d7a1c8b))\n                        /// @src 83:1256:1292  \"deployMinimal.deployMinimalAccount()\"\n                        let _13 := call(gas(), _10, /** @src 83:715:5265  \"contract MinimalAccountTest is Test {...\" */ _4, /** @src 83:1256:1292  \"deployMinimal.deployMinimalAccount()\" */ _12, /** @src 83:715:5265  \"contract MinimalAccountTest is Test {...\" */ _3, /** @src 83:1256:1292  \"deployMinimal.deployMinimalAccount()\" */ _12, /** @src 83:715:5265  \"contract MinimalAccountTest is Test {...\" */ _2)\n                        /// @src 83:1256:1292  \"deployMinimal.deployMinimalAccount()\"\n                        if iszero(_13)\n                        {\n                            /// @src 83:715:5265  \"contract MinimalAccountTest is Test {...\"\n                            let pos_1 := mload(_2)\n                            returndatacopy(pos_1, _4, returndatasize())\n                            revert(pos_1, returndatasize())\n                        }\n                        /// @src 83:1256:1292  \"deployMinimal.deployMinimalAccount()\"\n                        let expr_component_address := /** @src 83:715:5265  \"contract MinimalAccountTest is Test {...\" */ _4\n                        let expr_component_address_1 := _4\n                        /// @src 83:1256:1292  \"deployMinimal.deployMinimalAccount()\"\n                        if _13\n                        {\n                            let _14 := /** @src 83:715:5265  \"contract MinimalAccountTest is Test {...\" */ _2\n                            /// @src 83:1256:1292  \"deployMinimal.deployMinimalAccount()\"\n                            if gt(/** @src 83:715:5265  \"contract MinimalAccountTest is Test {...\" */ _2, /** @src 83:1256:1292  \"deployMinimal.deployMinimalAccount()\" */ returndatasize()) { _14 := returndatasize() }\n                            finalize_allocation(_12, _14)\n                            /// @src 83:715:5265  \"contract MinimalAccountTest is Test {...\"\n                            if slt(sub(/** @src 83:1256:1292  \"deployMinimal.deployMinimalAccount()\" */ add(_12, _14), /** @src 83:715:5265  \"contract MinimalAccountTest is Test {...\" */ _12), _2) { revert(_4, _4) }\n                            let value := mload(_12)\n                            if iszero(eq(value, and(value, _9))) { revert(_4, _4) }\n                            let value_1 := mload(add(_12, /** @src 83:1178:1213  \"deployMinimal = new DeployMinimal()\" */ 0x20))\n                            /// @src 83:715:5265  \"contract MinimalAccountTest is Test {...\"\n                            if iszero(eq(value_1, and(value_1, _9))) { revert(_4, _4) }\n                            /// @src 83:1256:1292  \"deployMinimal.deployMinimalAccount()\"\n                            expr_component_address := value\n                            expr_component_address_1 := value_1\n                        }\n                        /// @src 83:715:5265  \"contract MinimalAccountTest is Test {...\"\n                        let _15 := sload(/** @src 83:1223:1292  \"(helperConfig, minimalAccount) = deployMinimal.deployMinimalAccount()\" */ 0x1f)\n                        /// @src 83:715:5265  \"contract MinimalAccountTest is Test {...\"\n                        sstore(/** @src 83:1223:1292  \"(helperConfig, minimalAccount) = deployMinimal.deployMinimalAccount()\" */ 0x1f, /** @src 83:715:5265  \"contract MinimalAccountTest is Test {...\" */ or(and(_15, not(sub(shl(168, /** @src 83:1194:1213  \"new DeployMinimal()\" */ 1), /** @src 83:715:5265  \"contract MinimalAccountTest is Test {...\" */ 256))), and(shl(8, expr_component_address_1), sub(shl(168, /** @src 83:1194:1213  \"new DeployMinimal()\" */ 1), /** @src 83:715:5265  \"contract MinimalAccountTest is Test {...\" */ 256))))\n                        sstore(/** @src 83:1223:1292  \"(helperConfig, minimalAccount) = deployMinimal.deployMinimalAccount()\" */ 0x21, /** @src 83:715:5265  \"contract MinimalAccountTest is Test {...\" */ or(and(sload(/** @src 83:1223:1292  \"(helperConfig, minimalAccount) = deployMinimal.deployMinimalAccount()\" */ 0x21), /** @src 83:715:5265  \"contract MinimalAccountTest is Test {...\" */ _11), and(expr_component_address, _9)))\n                        /// @src 83:1309:1324  \"new ERC20Mock()\"\n                        let _16 := /** @src 83:715:5265  \"contract MinimalAccountTest is Test {...\" */ mload(_2)\n                        /// @src 83:1309:1324  \"new ERC20Mock()\"\n                        let _17 := datasize(\"ERC20Mock_47192\")\n                        let _18 := add(_16, _17)\n                        if or(gt(_18, /** @src 83:1194:1213  \"new DeployMinimal()\" */ _8), /** @src 83:1309:1324  \"new ERC20Mock()\" */ lt(_18, _16))\n                        {\n                            /// @src 83:715:5265  \"contract MinimalAccountTest is Test {...\"\n                            mstore(_4, shl(224, 0x4e487b71))\n                            mstore(_3, 0x41)\n                            revert(_4, 0x24)\n                        }\n                        /// @src 83:1309:1324  \"new ERC20Mock()\"\n                        datacopy(_16, dataoffset(\"ERC20Mock_47192\"), _17)\n                        let expr_address_1 := create(/** @src 83:715:5265  \"contract MinimalAccountTest is Test {...\" */ _4, /** @src 83:1309:1324  \"new ERC20Mock()\" */ _16, sub(_18, _16))\n                        if iszero(expr_address_1)\n                        {\n                            /// @src 83:715:5265  \"contract MinimalAccountTest is Test {...\"\n                            let pos_2 := mload(_2)\n                            returndatacopy(pos_2, _4, returndatasize())\n                            revert(pos_2, returndatasize())\n                        }\n                        sstore(/** @src 83:1302:1324  \"usdc = new ERC20Mock()\" */ 0x22, /** @src 83:715:5265  \"contract MinimalAccountTest is Test {...\" */ or(and(sload(/** @src 83:1302:1324  \"usdc = new ERC20Mock()\" */ 0x22), /** @src 83:715:5265  \"contract MinimalAccountTest is Test {...\" */ _11), and(expr_address_1, _9)))\n                        /// @src 83:1353:1375  \"new SendPackedUserOp()\"\n                        let _19 := /** @src 83:715:5265  \"contract MinimalAccountTest is Test {...\" */ mload(_2)\n                        /// @src 83:1353:1375  \"new SendPackedUserOp()\"\n                        let _20 := datasize(\"SendPackedUserOp_50935\")\n                        let _21 := add(_19, _20)\n                        if or(gt(_21, /** @src 83:1194:1213  \"new DeployMinimal()\" */ _8), /** @src 83:1353:1375  \"new SendPackedUserOp()\" */ lt(_21, _19))\n                        {\n                            /// @src 83:715:5265  \"contract MinimalAccountTest is Test {...\"\n                            mstore(_4, shl(224, 0x4e487b71))\n                            mstore(_3, 0x41)\n                            revert(_4, 0x24)\n                        }\n                        /// @src 83:1353:1375  \"new SendPackedUserOp()\"\n                        datacopy(_19, dataoffset(\"SendPackedUserOp_50935\"), _20)\n                        let expr_address_2 := create(/** @src 83:715:5265  \"contract MinimalAccountTest is Test {...\" */ _4, /** @src 83:1353:1375  \"new SendPackedUserOp()\" */ _19, sub(_21, _19))\n                        if iszero(expr_address_2)\n                        {\n                            /// @src 83:715:5265  \"contract MinimalAccountTest is Test {...\"\n                            let pos_3 := mload(_2)\n                            returndatacopy(pos_3, _4, returndatasize())\n                            revert(pos_3, returndatasize())\n                        }\n                        sstore(/** @src 83:1334:1375  \"sendPackedUserOp = new SendPackedUserOp()\" */ 0x23, /** @src 83:715:5265  \"contract MinimalAccountTest is Test {...\" */ or(and(sload(/** @src 83:1334:1375  \"sendPackedUserOp = new SendPackedUserOp()\" */ 0x23), /** @src 83:715:5265  \"contract MinimalAccountTest is Test {...\" */ _11), and(expr_address_2, _9)))\n                        let cleaned := and(sload(/** @src 83:1223:1292  \"(helperConfig, minimalAccount) = deployMinimal.deployMinimalAccount()\" */ 0x21), /** @src 83:715:5265  \"contract MinimalAccountTest is Test {...\" */ _9)\n                        /// @src 83:1410:1434  \"helperConfig.getConfig()\"\n                        let _22 := /** @src 83:715:5265  \"contract MinimalAccountTest is Test {...\" */ mload(_2)\n                        /// @src 83:1410:1434  \"helperConfig.getConfig()\"\n                        mstore(_22, /** @src 83:715:5265  \"contract MinimalAccountTest is Test {...\" */ shl(226, 0x30fe4275))\n                        /// @src 83:1410:1434  \"helperConfig.getConfig()\"\n                        let _23 := call(gas(), cleaned, /** @src 83:715:5265  \"contract MinimalAccountTest is Test {...\" */ _4, /** @src 83:1410:1434  \"helperConfig.getConfig()\" */ _22, /** @src 83:715:5265  \"contract MinimalAccountTest is Test {...\" */ _3, /** @src 83:1410:1434  \"helperConfig.getConfig()\" */ _22, /** @src 83:715:5265  \"contract MinimalAccountTest is Test {...\" */ _2)\n                        /// @src 83:1410:1434  \"helperConfig.getConfig()\"\n                        if iszero(_23)\n                        {\n                            /// @src 83:715:5265  \"contract MinimalAccountTest is Test {...\"\n                            let pos_4 := mload(_2)\n                            returndatacopy(pos_4, _4, returndatasize())\n                            revert(pos_4, returndatasize())\n                        }\n                        /// @src 83:1410:1434  \"helperConfig.getConfig()\"\n                        let expr_mpos := /** @src 83:715:5265  \"contract MinimalAccountTest is Test {...\" */ _4\n                        /// @src 83:1410:1434  \"helperConfig.getConfig()\"\n                        if _23\n                        {\n                            let _24 := /** @src 83:715:5265  \"contract MinimalAccountTest is Test {...\" */ _2\n                            /// @src 83:1410:1434  \"helperConfig.getConfig()\"\n                            if gt(/** @src 83:715:5265  \"contract MinimalAccountTest is Test {...\" */ _2, /** @src 83:1410:1434  \"helperConfig.getConfig()\" */ returndatasize()) { _24 := returndatasize() }\n                            finalize_allocation(_22, _24)\n                            expr_mpos := abi_decode_struct_NetworkConfig_fromMemory(_22, add(_22, _24))\n                        }\n                        /// @src 83:715:5265  \"contract MinimalAccountTest is Test {...\"\n                        sstore(/** @src 83:1385:1446  \"entryPoint = IEntryPoint(helperConfig.getConfig().entryPoint)\" */ 0x24, /** @src 83:715:5265  \"contract MinimalAccountTest is Test {...\" */ or(and(sload(/** @src 83:1385:1446  \"entryPoint = IEntryPoint(helperConfig.getConfig().entryPoint)\" */ 0x24), /** @src 83:715:5265  \"contract MinimalAccountTest is Test {...\" */ _11), and(mload(/** @src 83:1410:1445  \"helperConfig.getConfig().entryPoint\" */ expr_mpos), /** @src 83:715:5265  \"contract MinimalAccountTest is Test {...\" */ _9)))\n                        return(_4, _4)\n                    }\n                    case 0x11bb0532 {\n                        if callvalue() { revert(_4, _4) }\n                        if slt(add(calldatasize(), not(3)), _4) { revert(_4, _4) }\n                        let _25 := sub(shl(160, /** @src 83:1194:1213  \"new DeployMinimal()\" */ 1), 1)\n                        /// @src 83:715:5265  \"contract MinimalAccountTest is Test {...\"\n                        let cleaned_1 := and(sload(/** @src 83:4398:4402  \"usdc\" */ 0x22), /** @src 83:715:5265  \"contract MinimalAccountTest is Test {...\" */ _25)\n                        let _26 := sload(/** @src 83:4524:4538  \"minimalAccount\" */ 0x1f)\n                        /// @src 83:4468:4548  \"abi.encodeWithSelector(ERC20Mock.mint.selector, address(minimalAccount), AMOUNT)\"\n                        let expr_mpos_1 := /** @src 83:715:5265  \"contract MinimalAccountTest is Test {...\" */ mload(_2)\n                        /// @src 83:4468:4548  \"abi.encodeWithSelector(ERC20Mock.mint.selector, address(minimalAccount), AMOUNT)\"\n                        let _27 := 0x20\n                        mstore(add(expr_mpos_1, _27), /** @src 83:4491:4514  \"ERC20Mock.mint.selector\" */ shl(224, 0x40c10f19))\n                        /// @src 83:4468:4548  \"abi.encodeWithSelector(ERC20Mock.mint.selector, address(minimalAccount), AMOUNT)\"\n                        let _28 := 36\n                        /// @src 83:715:5265  \"contract MinimalAccountTest is Test {...\"\n                        mstore(/** @src 83:4468:4548  \"abi.encodeWithSelector(ERC20Mock.mint.selector, address(minimalAccount), AMOUNT)\" */ add(expr_mpos_1, _28), /** @src 83:715:5265  \"contract MinimalAccountTest is Test {...\" */ and(shr(8, _26), _25))\n                        /// @src 83:1097:1101  \"1e18\"\n                        mstore(add(/** @src 83:4468:4548  \"abi.encodeWithSelector(ERC20Mock.mint.selector, address(minimalAccount), AMOUNT)\" */ expr_mpos_1, /** @src 83:1097:1101  \"1e18\" */ 68), 0x0de0b6b3a7640000)\n                        /// @src 83:4468:4548  \"abi.encodeWithSelector(ERC20Mock.mint.selector, address(minimalAccount), AMOUNT)\"\n                        mstore(expr_mpos_1, /** @src 83:1097:1101  \"1e18\" */ 68)\n                        /// @src 83:4468:4548  \"abi.encodeWithSelector(ERC20Mock.mint.selector, address(minimalAccount), AMOUNT)\"\n                        finalize_allocation_30149(expr_mpos_1)\n                        /// @src 83:4668:4750  \"abi.encodeWithSelector(MinimalAccount.execute.selector, dest, value, functionData)\"\n                        let expr_mpos_2 := /** @src 83:715:5265  \"contract MinimalAccountTest is Test {...\" */ mload(_2)\n                        /// @src 83:4668:4750  \"abi.encodeWithSelector(MinimalAccount.execute.selector, dest, value, functionData)\"\n                        mstore(add(expr_mpos_2, /** @src 83:4468:4548  \"abi.encodeWithSelector(ERC20Mock.mint.selector, address(minimalAccount), AMOUNT)\" */ _27), /** @src 83:4691:4722  \"MinimalAccount.execute.selector\" */ shl(225, 0x5b0e93fb))\n                        /// @src 83:715:5265  \"contract MinimalAccountTest is Test {...\"\n                        mstore(/** @src 83:4668:4750  \"abi.encodeWithSelector(MinimalAccount.execute.selector, dest, value, functionData)\" */ add(expr_mpos_2, /** @src 83:4468:4548  \"abi.encodeWithSelector(ERC20Mock.mint.selector, address(minimalAccount), AMOUNT)\" */ _28), /** @src 83:715:5265  \"contract MinimalAccountTest is Test {...\" */ cleaned_1)\n                        /// @src 83:1097:1101  \"1e18\"\n                        mstore(add(/** @src 83:4668:4750  \"abi.encodeWithSelector(MinimalAccount.execute.selector, dest, value, functionData)\" */ expr_mpos_2, /** @src 83:1097:1101  \"1e18\" */ 68), /** @src 83:715:5265  \"contract MinimalAccountTest is Test {...\" */ _4)\n                        /// @src 83:1097:1101  \"1e18\"\n                        let _29 := 96\n                        mstore(add(/** @src 83:4668:4750  \"abi.encodeWithSelector(MinimalAccount.execute.selector, dest, value, functionData)\" */ expr_mpos_2, /** @src 83:1097:1101  \"1e18\" */ 100), _29)\n                        /// @src 83:4668:4750  \"abi.encodeWithSelector(MinimalAccount.execute.selector, dest, value, functionData)\"\n                        let _30 := sub(/** @src 83:1097:1101  \"1e18\" */ abi_encode_string(expr_mpos_1, add(/** @src 83:4668:4750  \"abi.encodeWithSelector(MinimalAccount.execute.selector, dest, value, functionData)\" */ expr_mpos_2, /** @src 83:1097:1101  \"1e18\" */ 132)), /** @src 83:4668:4750  \"abi.encodeWithSelector(MinimalAccount.execute.selector, dest, value, functionData)\" */ expr_mpos_2)\n                        mstore(expr_mpos_2, add(_30, /** @src 83:4468:4548  \"abi.encodeWithSelector(ERC20Mock.mint.selector, address(minimalAccount), AMOUNT)\" */ not(31)))\n                        /// @src 83:4668:4750  \"abi.encodeWithSelector(MinimalAccount.execute.selector, dest, value, functionData)\"\n                        finalize_allocation(expr_mpos_2, _30)\n                        /// @src 83:715:5265  \"contract MinimalAccountTest is Test {...\"\n                        let cleaned_2 := and(/** @src 83:1097:1101  \"1e18\" */ sload(/** @src 83:4814:4830  \"sendPackedUserOp\" */ 0x23), /** @src 83:715:5265  \"contract MinimalAccountTest is Test {...\" */ _25)\n                        let cleaned_3 := and(sload(/** @src 83:4869:4881  \"helperConfig\" */ 0x21), /** @src 83:715:5265  \"contract MinimalAccountTest is Test {...\" */ _25)\n                        /// @src 83:4869:4893  \"helperConfig.getConfig()\"\n                        let _31 := /** @src 83:715:5265  \"contract MinimalAccountTest is Test {...\" */ mload(_2)\n                        /// @src 83:4869:4893  \"helperConfig.getConfig()\"\n                        mstore(_31, /** @src 83:715:5265  \"contract MinimalAccountTest is Test {...\" */ shl(226, 0x30fe4275))\n                        /// @src 83:4869:4893  \"helperConfig.getConfig()\"\n                        let _32 := call(gas(), cleaned_3, /** @src 83:715:5265  \"contract MinimalAccountTest is Test {...\" */ _4, /** @src 83:4869:4893  \"helperConfig.getConfig()\" */ _31, /** @src 83:715:5265  \"contract MinimalAccountTest is Test {...\" */ _3, /** @src 83:4869:4893  \"helperConfig.getConfig()\" */ _31, /** @src 83:715:5265  \"contract MinimalAccountTest is Test {...\" */ _2)\n                        /// @src 83:4869:4893  \"helperConfig.getConfig()\"\n                        if iszero(_32)\n                        {\n                            /// @src 83:715:5265  \"contract MinimalAccountTest is Test {...\"\n                            let pos_5 := mload(_2)\n                            returndatacopy(pos_5, _4, returndatasize())\n                            revert(pos_5, returndatasize())\n                        }\n                        /// @src 83:4869:4893  \"helperConfig.getConfig()\"\n                        let expr_mpos_3 := /** @src 83:715:5265  \"contract MinimalAccountTest is Test {...\" */ _4\n                        /// @src 83:4869:4893  \"helperConfig.getConfig()\"\n                        if _32\n                        {\n                            let _33 := /** @src 83:715:5265  \"contract MinimalAccountTest is Test {...\" */ _2\n                            /// @src 83:4869:4893  \"helperConfig.getConfig()\"\n                            if gt(/** @src 83:715:5265  \"contract MinimalAccountTest is Test {...\" */ _2, /** @src 83:4869:4893  \"helperConfig.getConfig()\" */ returndatasize()) { _33 := returndatasize() }\n                            finalize_allocation(_31, _33)\n                            expr_mpos_3 := abi_decode_struct_NetworkConfig_fromMemory(_31, add(_31, _33))\n                        }\n                        /// @src 83:715:5265  \"contract MinimalAccountTest is Test {...\"\n                        let value_2 := and(shr(8, sload(/** @src 83:4524:4538  \"minimalAccount\" */ 0x1f)), /** @src 83:715:5265  \"contract MinimalAccountTest is Test {...\" */ _25)\n                        /// @src 83:4814:4919  \"sendPackedUserOp.generatePackedUserOp(executeCallData, helperConfig.getConfig(), address(minimalAccount))\"\n                        let _34 := /** @src 83:715:5265  \"contract MinimalAccountTest is Test {...\" */ mload(_2)\n                        /// @src 83:4814:4919  \"sendPackedUserOp.generatePackedUserOp(executeCallData, helperConfig.getConfig(), address(minimalAccount))\"\n                        mstore(_34, /** @src 83:715:5265  \"contract MinimalAccountTest is Test {...\" */ shl(224, 0xb337f547))\n                        /// @src 83:4814:4919  \"sendPackedUserOp.generatePackedUserOp(executeCallData, helperConfig.getConfig(), address(minimalAccount))\"\n                        let _35 := staticcall(gas(), cleaned_2, _34, sub(abi_encode_bytes_struct_NetworkConfig_address(add(_34, /** @src 83:715:5265  \"contract MinimalAccountTest is Test {...\" */ _3), /** @src 83:4814:4919  \"sendPackedUserOp.generatePackedUserOp(executeCallData, helperConfig.getConfig(), address(minimalAccount))\" */ expr_mpos_2, expr_mpos_3, value_2), _34), _34, /** @src 83:715:5265  \"contract MinimalAccountTest is Test {...\" */ _4)\n                        /// @src 83:4814:4919  \"sendPackedUserOp.generatePackedUserOp(executeCallData, helperConfig.getConfig(), address(minimalAccount))\"\n                        if iszero(_35)\n                        {\n                            /// @src 83:715:5265  \"contract MinimalAccountTest is Test {...\"\n                            let pos_6 := mload(_2)\n                            returndatacopy(pos_6, _4, returndatasize())\n                            revert(pos_6, returndatasize())\n                        }\n                        /// @src 83:4814:4919  \"sendPackedUserOp.generatePackedUserOp(executeCallData, helperConfig.getConfig(), address(minimalAccount))\"\n                        let expr_mpos_4 := /** @src 83:715:5265  \"contract MinimalAccountTest is Test {...\" */ _4\n                        /// @src 83:4814:4919  \"sendPackedUserOp.generatePackedUserOp(executeCallData, helperConfig.getConfig(), address(minimalAccount))\"\n                        if _35\n                        {\n                            let _36 := returndatasize()\n                            returndatacopy(_34, /** @src 83:715:5265  \"contract MinimalAccountTest is Test {...\" */ _4, /** @src 83:4814:4919  \"sendPackedUserOp.generatePackedUserOp(executeCallData, helperConfig.getConfig(), address(minimalAccount))\" */ _36)\n                            finalize_allocation(_34, _36)\n                            expr_mpos_4 := abi_decode_struct_PackedUserOperation_fromMemory(_34, add(_34, _36))\n                        }\n                        /// @src 83:715:5265  \"contract MinimalAccountTest is Test {...\"\n                        let _37 := 0x7109709ecfa91a80626ff3989d68f67f5b1dd12d\n                        /// @src 83:4929:4967  \"vm.deal(address(minimalAccount), 2e18)\"\n                        if iszero(extcodesize(/** @src 83:715:5265  \"contract MinimalAccountTest is Test {...\" */ _37))\n                        /// @src 83:4929:4967  \"vm.deal(address(minimalAccount), 2e18)\"\n                        {\n                            /// @src 83:715:5265  \"contract MinimalAccountTest is Test {...\"\n                            revert(_4, _4)\n                        }\n                        /// @src 83:4929:4967  \"vm.deal(address(minimalAccount), 2e18)\"\n                        let _38 := /** @src 83:715:5265  \"contract MinimalAccountTest is Test {...\" */ mload(_2)\n                        /// @src 83:4929:4967  \"vm.deal(address(minimalAccount), 2e18)\"\n                        mstore(_38, /** @src 83:715:5265  \"contract MinimalAccountTest is Test {...\" */ shl(224, 0xc88a5e6d))\n                        mstore(/** @src 83:4929:4967  \"vm.deal(address(minimalAccount), 2e18)\" */ add(_38, /** @src 83:715:5265  \"contract MinimalAccountTest is Test {...\" */ _3), value_2)\n                        /// @src 83:1097:1101  \"1e18\"\n                        mstore(/** @src 15:1590:1604  \"Vm(VM_ADDRESS)\" */ add(/** @src 83:4929:4967  \"vm.deal(address(minimalAccount), 2e18)\" */ _38, /** @src 83:4468:4548  \"abi.encodeWithSelector(ERC20Mock.mint.selector, address(minimalAccount), AMOUNT)\" */ _28), /** @src 83:4962:4966  \"2e18\" */ 0x1bc16d674ec80000)\n                        /// @src 83:4929:4967  \"vm.deal(address(minimalAccount), 2e18)\"\n                        let _39 := call(gas(), /** @src 83:715:5265  \"contract MinimalAccountTest is Test {...\" */ _37, _4, /** @src 83:4929:4967  \"vm.deal(address(minimalAccount), 2e18)\" */ _38, /** @src 83:1097:1101  \"1e18\" */ 68, /** @src 83:4929:4967  \"vm.deal(address(minimalAccount), 2e18)\" */ _38, /** @src 83:715:5265  \"contract MinimalAccountTest is Test {...\" */ _4)\n                        /// @src 83:4929:4967  \"vm.deal(address(minimalAccount), 2e18)\"\n                        if iszero(_39)\n                        {\n                            /// @src 83:715:5265  \"contract MinimalAccountTest is Test {...\"\n                            let pos_7 := mload(_2)\n                            returndatacopy(pos_7, _4, returndatasize())\n                            revert(pos_7, returndatasize())\n                        }\n                        /// @src 83:4929:4967  \"vm.deal(address(minimalAccount), 2e18)\"\n                        if _39\n                        {\n                            finalize_allocation_21042(_38)\n                            /// @src 83:715:5265  \"contract MinimalAccountTest is Test {...\"\n                            _4 := _4\n                        }\n                        let memPtr := mload(_2)\n                        finalize_allocation_21058(memPtr)\n                        /// @src 83:5039:5040  \"1\"\n                        let _40 := 0x01\n                        /// @src 15:1590:1604  \"Vm(VM_ADDRESS)\"\n                        mstore(memPtr, /** @src 83:5039:5040  \"1\" */ 0x01)\n                        /// @src 15:1590:1604  \"Vm(VM_ADDRESS)\"\n                        let i := _4\n                        for { }\n                        lt(i, /** @src 83:4468:4548  \"abi.encodeWithSelector(ERC20Mock.mint.selector, address(minimalAccount), AMOUNT)\" */ _27)\n                        /// @src 15:1590:1604  \"Vm(VM_ADDRESS)\"\n                        {\n                            i := add(i, /** @src 83:4468:4548  \"abi.encodeWithSelector(ERC20Mock.mint.selector, address(minimalAccount), AMOUNT)\" */ _27)\n                        }\n                        /// @src 15:1590:1604  \"Vm(VM_ADDRESS)\"\n                        {\n                            /// @src 83:715:5265  \"contract MinimalAccountTest is Test {...\"\n                            let memPtr_1 := mload(_2)\n                            finalize_allocation_21045(memPtr_1)\n                            /// @src 15:1590:1604  \"Vm(VM_ADDRESS)\"\n                            mstore(memPtr_1, /** @src 83:715:5265  \"contract MinimalAccountTest is Test {...\" */ _4)\n                            /// @src 15:1590:1604  \"Vm(VM_ADDRESS)\"\n                            mstore(add(memPtr_1, /** @src 83:4468:4548  \"abi.encodeWithSelector(ERC20Mock.mint.selector, address(minimalAccount), AMOUNT)\" */ _27), /** @src 83:715:5265  \"contract MinimalAccountTest is Test {...\" */ _4)\n                            /// @src 15:1590:1604  \"Vm(VM_ADDRESS)\"\n                            mstore(add(memPtr_1, /** @src 83:715:5265  \"contract MinimalAccountTest is Test {...\" */ _2), /** @src 83:1097:1101  \"1e18\" */ _29)\n                            /// @src 15:1590:1604  \"Vm(VM_ADDRESS)\"\n                            mstore(add(memPtr_1, /** @src 83:1097:1101  \"1e18\" */ _29), _29)\n                            /// @src 15:1590:1604  \"Vm(VM_ADDRESS)\"\n                            mstore(add(memPtr_1, 128), /** @src 83:715:5265  \"contract MinimalAccountTest is Test {...\" */ _4)\n                            /// @src 15:1590:1604  \"Vm(VM_ADDRESS)\"\n                            mstore(add(memPtr_1, 160), /** @src 83:715:5265  \"contract MinimalAccountTest is Test {...\" */ _4)\n                            /// @src 15:1590:1604  \"Vm(VM_ADDRESS)\"\n                            mstore(add(memPtr_1, 192), /** @src 83:715:5265  \"contract MinimalAccountTest is Test {...\" */ _4)\n                            /// @src 15:1590:1604  \"Vm(VM_ADDRESS)\"\n                            mstore(add(memPtr_1, /** @src 83:715:5265  \"contract MinimalAccountTest is Test {...\" */ _5), /** @src 83:1097:1101  \"1e18\" */ _29)\n                            /// @src 15:1590:1604  \"Vm(VM_ADDRESS)\"\n                            mstore(add(memPtr_1, 256), /** @src 83:1097:1101  \"1e18\" */ _29)\n                            /// @src 15:1590:1604  \"Vm(VM_ADDRESS)\"\n                            mstore(add(add(memPtr, i), /** @src 83:4468:4548  \"abi.encodeWithSelector(ERC20Mock.mint.selector, address(minimalAccount), AMOUNT)\" */ _27), /** @src 15:1590:1604  \"Vm(VM_ADDRESS)\" */ memPtr_1)\n                        }\n                        /// @src 83:5051:5072  \"ops[0] = packedUserOp\"\n                        mstore(memory_array_index_access_struct_PackedUserOperation_dyn(memPtr), expr_mpos_4)\n                        pop(memory_array_index_access_struct_PackedUserOperation_dyn(memPtr))\n                        /// @src 83:715:5265  \"contract MinimalAccountTest is Test {...\"\n                        let cleaned_4 := and(/** @src 15:1590:1604  \"Vm(VM_ADDRESS)\" */ sload(/** @src 83:5097:5107  \"randomUser\" */ 0x25), /** @src 83:715:5265  \"contract MinimalAccountTest is Test {...\" */ _25)\n                        /// @src 83:5083:5108  \"vm.startPrank(randomUser)\"\n                        if iszero(extcodesize(/** @src 83:715:5265  \"contract MinimalAccountTest is Test {...\" */ _37))\n                        /// @src 83:5083:5108  \"vm.startPrank(randomUser)\"\n                        {\n                            /// @src 83:715:5265  \"contract MinimalAccountTest is Test {...\"\n                            revert(_4, _4)\n                        }\n                        /// @src 83:5083:5108  \"vm.startPrank(randomUser)\"\n                        let _41 := /** @src 83:715:5265  \"contract MinimalAccountTest is Test {...\" */ mload(_2)\n                        /// @src 83:5083:5108  \"vm.startPrank(randomUser)\"\n                        mstore(_41, /** @src 83:715:5265  \"contract MinimalAccountTest is Test {...\" */ shl(225, 0x03223eab))\n                        mstore(/** @src 83:5083:5108  \"vm.startPrank(randomUser)\" */ add(_41, /** @src 83:715:5265  \"contract MinimalAccountTest is Test {...\" */ _3), cleaned_4)\n                        /// @src 83:5083:5108  \"vm.startPrank(randomUser)\"\n                        let _42 := call(gas(), /** @src 83:715:5265  \"contract MinimalAccountTest is Test {...\" */ _37, _4, /** @src 83:5083:5108  \"vm.startPrank(randomUser)\" */ _41, /** @src 83:4468:4548  \"abi.encodeWithSelector(ERC20Mock.mint.selector, address(minimalAccount), AMOUNT)\" */ _28, /** @src 83:5083:5108  \"vm.startPrank(randomUser)\" */ _41, /** @src 83:715:5265  \"contract MinimalAccountTest is Test {...\" */ _4)\n                        /// @src 83:5083:5108  \"vm.startPrank(randomUser)\"\n                        if iszero(_42)\n                        {\n                            /// @src 83:715:5265  \"contract MinimalAccountTest is Test {...\"\n                            let pos_8 := mload(_2)\n                            returndatacopy(pos_8, _4, returndatasize())\n                            revert(pos_8, returndatasize())\n                        }\n                        /// @src 83:5083:5108  \"vm.startPrank(randomUser)\"\n                        if _42\n                        {\n                            finalize_allocation_21042(_41)\n                            /// @src 83:715:5265  \"contract MinimalAccountTest is Test {...\"\n                            if _4 { revert(_4, _4) }\n                        }\n                        let cleaned_5 := and(/** @src 15:1590:1604  \"Vm(VM_ADDRESS)\" */ sload(/** @src 83:4468:4548  \"abi.encodeWithSelector(ERC20Mock.mint.selector, address(minimalAccount), AMOUNT)\" */ _28), /** @src 83:715:5265  \"contract MinimalAccountTest is Test {...\" */ _25)\n                        let cleaned_6 := and(/** @src 15:1590:1604  \"Vm(VM_ADDRESS)\" */ sload(/** @src 83:5097:5107  \"randomUser\" */ 0x25), /** @src 83:715:5265  \"contract MinimalAccountTest is Test {...\" */ _25)\n                        /// @src 83:5118:5164  \"entryPoint.handleOps(ops, payable(randomUser))\"\n                        if iszero(extcodesize(cleaned_5))\n                        {\n                            /// @src 83:715:5265  \"contract MinimalAccountTest is Test {...\"\n                            revert(_4, _4)\n                        }\n                        /// @src 83:5118:5164  \"entryPoint.handleOps(ops, payable(randomUser))\"\n                        let _43 := /** @src 83:715:5265  \"contract MinimalAccountTest is Test {...\" */ mload(_2)\n                        /// @src 83:5118:5164  \"entryPoint.handleOps(ops, payable(randomUser))\"\n                        mstore(_43, /** @src 83:715:5265  \"contract MinimalAccountTest is Test {...\" */ shl(224, 0x765e827f))\n                        /// @src 15:1590:1604  \"Vm(VM_ADDRESS)\"\n                        let tail := add(/** @src 83:5118:5164  \"entryPoint.handleOps(ops, payable(randomUser))\" */ _43, /** @src 83:1097:1101  \"1e18\" */ 68)\n                        /// @src 15:1590:1604  \"Vm(VM_ADDRESS)\"\n                        mstore(/** @src 83:5118:5164  \"entryPoint.handleOps(ops, payable(randomUser))\" */ add(_43, /** @src 83:715:5265  \"contract MinimalAccountTest is Test {...\" */ _3), _2)\n                        /// @src 15:1590:1604  \"Vm(VM_ADDRESS)\"\n                        let pos_9 := tail\n                        let length := /** @src 83:715:5265  \"contract MinimalAccountTest is Test {...\" */ mload(/** @src 15:1590:1604  \"Vm(VM_ADDRESS)\" */ memPtr)\n                        /// @src 83:715:5265  \"contract MinimalAccountTest is Test {...\"\n                        mstore(tail, length)\n                        /// @src 15:1590:1604  \"Vm(VM_ADDRESS)\"\n                        pos_9 := /** @src 83:715:5265  \"contract MinimalAccountTest is Test {...\" */ add(/** @src 83:5118:5164  \"entryPoint.handleOps(ops, payable(randomUser))\" */ _43, /** @src 83:1097:1101  \"1e18\" */ 100)\n                        /// @src 15:1590:1604  \"Vm(VM_ADDRESS)\"\n                        let tail_1 := add(add(/** @src 83:5118:5164  \"entryPoint.handleOps(ops, payable(randomUser))\" */ _43, /** @src 15:1590:1604  \"Vm(VM_ADDRESS)\" */ shl(5, length)), /** @src 83:1097:1101  \"1e18\" */ 100)\n                        /// @src 15:1590:1604  \"Vm(VM_ADDRESS)\"\n                        let srcPtr := add(memPtr, /** @src 83:4468:4548  \"abi.encodeWithSelector(ERC20Mock.mint.selector, address(minimalAccount), AMOUNT)\" */ _27)\n                        /// @src 15:1590:1604  \"Vm(VM_ADDRESS)\"\n                        let i_1 := _4\n                        for { }\n                        lt(i_1, length)\n                        {\n                            i_1 := add(i_1, /** @src 83:5039:5040  \"1\" */ _40)\n                        }\n                        /// @src 15:1590:1604  \"Vm(VM_ADDRESS)\"\n                        {\n                            mstore(pos_9, add(sub(tail_1, /** @src 83:5118:5164  \"entryPoint.handleOps(ops, payable(randomUser))\" */ _43), /** @src 15:1590:1604  \"Vm(VM_ADDRESS)\" */ not(99)))\n                            tail_1 := abi_encode_struct_PackedUserOperation(mload(srcPtr), tail_1)\n                            srcPtr := /** @src 83:715:5265  \"contract MinimalAccountTest is Test {...\" */ add(/** @src 15:1590:1604  \"Vm(VM_ADDRESS)\" */ srcPtr, /** @src 83:4468:4548  \"abi.encodeWithSelector(ERC20Mock.mint.selector, address(minimalAccount), AMOUNT)\" */ _27)\n                            /// @src 15:1590:1604  \"Vm(VM_ADDRESS)\"\n                            pos_9 := add(pos_9, /** @src 83:4468:4548  \"abi.encodeWithSelector(ERC20Mock.mint.selector, address(minimalAccount), AMOUNT)\" */ _27)\n                        }\n                        /// @src 83:715:5265  \"contract MinimalAccountTest is Test {...\"\n                        mstore(/** @src 15:1590:1604  \"Vm(VM_ADDRESS)\" */ add(/** @src 83:5118:5164  \"entryPoint.handleOps(ops, payable(randomUser))\" */ _43, /** @src 83:4468:4548  \"abi.encodeWithSelector(ERC20Mock.mint.selector, address(minimalAccount), AMOUNT)\" */ _28), /** @src 83:715:5265  \"contract MinimalAccountTest is Test {...\" */ cleaned_6)\n                        /// @src 83:5118:5164  \"entryPoint.handleOps(ops, payable(randomUser))\"\n                        let _44 := call(gas(), cleaned_5, /** @src 83:715:5265  \"contract MinimalAccountTest is Test {...\" */ _4, /** @src 83:5118:5164  \"entryPoint.handleOps(ops, payable(randomUser))\" */ _43, sub(tail_1, _43), _43, /** @src 83:715:5265  \"contract MinimalAccountTest is Test {...\" */ _4)\n                        /// @src 83:5118:5164  \"entryPoint.handleOps(ops, payable(randomUser))\"\n                        if iszero(_44)\n                        {\n                            /// @src 83:715:5265  \"contract MinimalAccountTest is Test {...\"\n                            let pos_10 := mload(_2)\n                            returndatacopy(pos_10, _4, returndatasize())\n                            revert(pos_10, returndatasize())\n                        }\n                        /// @src 83:5118:5164  \"entryPoint.handleOps(ops, payable(randomUser))\"\n                        if _44\n                        {\n                            finalize_allocation_21042(_43)\n                            /// @src 83:715:5265  \"contract MinimalAccountTest is Test {...\"\n                            if _4 { revert(_4, _4) }\n                        }\n                        /// @src 83:5174:5188  \"vm.stopPrank()\"\n                        if iszero(extcodesize(/** @src 83:715:5265  \"contract MinimalAccountTest is Test {...\" */ _37))\n                        /// @src 83:5174:5188  \"vm.stopPrank()\"\n                        {\n                            /// @src 83:715:5265  \"contract MinimalAccountTest is Test {...\"\n                            revert(_4, _4)\n                        }\n                        /// @src 83:5174:5188  \"vm.stopPrank()\"\n                        let _45 := /** @src 83:715:5265  \"contract MinimalAccountTest is Test {...\" */ mload(_2)\n                        /// @src 83:5174:5188  \"vm.stopPrank()\"\n                        mstore(_45, /** @src 83:715:5265  \"contract MinimalAccountTest is Test {...\" */ shl(224, 0x90c5013b))\n                        /// @src 83:5174:5188  \"vm.stopPrank()\"\n                        let _46 := call(gas(), /** @src 83:715:5265  \"contract MinimalAccountTest is Test {...\" */ _37, _4, /** @src 83:5174:5188  \"vm.stopPrank()\" */ _45, /** @src 83:715:5265  \"contract MinimalAccountTest is Test {...\" */ _3, /** @src 83:5174:5188  \"vm.stopPrank()\" */ _45, /** @src 83:715:5265  \"contract MinimalAccountTest is Test {...\" */ _4)\n                        /// @src 83:5174:5188  \"vm.stopPrank()\"\n                        if iszero(_46)\n                        {\n                            /// @src 83:715:5265  \"contract MinimalAccountTest is Test {...\"\n                            let pos_11 := mload(_2)\n                            returndatacopy(pos_11, _4, returndatasize())\n                            revert(pos_11, returndatasize())\n                        }\n                        /// @src 83:5174:5188  \"vm.stopPrank()\"\n                        if _46\n                        {\n                            finalize_allocation_21042(_45)\n                            /// @src 83:715:5265  \"contract MinimalAccountTest is Test {...\"\n                            if _4 { revert(_4, _4) }\n                        }\n                        let cleaned_7 := and(sload(/** @src 83:4398:4402  \"usdc\" */ 0x22), /** @src 83:715:5265  \"contract MinimalAccountTest is Test {...\" */ _25)\n                        let value_3 := and(shr(8, sload(/** @src 83:4524:4538  \"minimalAccount\" */ 0x1f)), /** @src 83:715:5265  \"contract MinimalAccountTest is Test {...\" */ _25)\n                        /// @src 83:5208:5247  \"usdc.balanceOf(address(minimalAccount))\"\n                        let _47 := /** @src 83:715:5265  \"contract MinimalAccountTest is Test {...\" */ mload(_2)\n                        /// @src 83:5208:5247  \"usdc.balanceOf(address(minimalAccount))\"\n                        mstore(_47, /** @src 83:715:5265  \"contract MinimalAccountTest is Test {...\" */ shl(224, 0x70a08231))\n                        mstore(/** @src 83:5208:5247  \"usdc.balanceOf(address(minimalAccount))\" */ add(_47, /** @src 83:715:5265  \"contract MinimalAccountTest is Test {...\" */ _3), value_3)\n                        /// @src 83:5208:5247  \"usdc.balanceOf(address(minimalAccount))\"\n                        let _48 := staticcall(gas(), cleaned_7, _47, /** @src 83:4468:4548  \"abi.encodeWithSelector(ERC20Mock.mint.selector, address(minimalAccount), AMOUNT)\" */ _28, /** @src 83:5208:5247  \"usdc.balanceOf(address(minimalAccount))\" */ _47, /** @src 83:4468:4548  \"abi.encodeWithSelector(ERC20Mock.mint.selector, address(minimalAccount), AMOUNT)\" */ _27)\n                        /// @src 83:5208:5247  \"usdc.balanceOf(address(minimalAccount))\"\n                        if iszero(_48)\n                        {\n                            /// @src 83:715:5265  \"contract MinimalAccountTest is Test {...\"\n                            let pos_12 := mload(_2)\n                            returndatacopy(pos_12, _4, returndatasize())\n                            revert(pos_12, returndatasize())\n                        }\n                        /// @src 83:5208:5247  \"usdc.balanceOf(address(minimalAccount))\"\n                        let expr := _4\n                        if _48\n                        {\n                            let _49 := /** @src 83:4468:4548  \"abi.encodeWithSelector(ERC20Mock.mint.selector, address(minimalAccount), AMOUNT)\" */ _27\n                            /// @src 83:5208:5247  \"usdc.balanceOf(address(minimalAccount))\"\n                            if gt(/** @src 83:4468:4548  \"abi.encodeWithSelector(ERC20Mock.mint.selector, address(minimalAccount), AMOUNT)\" */ _27, /** @src 83:5208:5247  \"usdc.balanceOf(address(minimalAccount))\" */ returndatasize()) { _49 := returndatasize() }\n                            finalize_allocation(_47, _49)\n                            /// @src 15:1590:1604  \"Vm(VM_ADDRESS)\"\n                            if slt(sub(/** @src 83:5208:5247  \"usdc.balanceOf(address(minimalAccount))\" */ add(_47, _49), /** @src 15:1590:1604  \"Vm(VM_ADDRESS)\" */ _47), /** @src 83:4468:4548  \"abi.encodeWithSelector(ERC20Mock.mint.selector, address(minimalAccount), AMOUNT)\" */ _27)\n                            /// @src 15:1590:1604  \"Vm(VM_ADDRESS)\"\n                            {\n                                /// @src 83:715:5265  \"contract MinimalAccountTest is Test {...\"\n                                revert(0, 0)\n                            }\n                            /// @src 83:5208:5247  \"usdc.balanceOf(address(minimalAccount))\"\n                            expr := /** @src 83:1097:1101  \"1e18\" */ mload(_47)\n                        }\n                        /// @src 83:5249:5255  \"AMOUNT\"\n                        fun_assertEq_21051(expr)\n                        /// @src 83:715:5265  \"contract MinimalAccountTest is Test {...\"\n                        return(_4, _4)\n                    }\n                    case 0x137f2e5a {\n                        if callvalue() { revert(_4, _4) }\n                        if slt(add(calldatasize(), not(3)), _4) { revert(_4, _4) }\n                        let _50 := sub(shl(160, /** @src 83:1194:1213  \"new DeployMinimal()\" */ 1), 1)\n                        /// @src 83:715:5265  \"contract MinimalAccountTest is Test {...\"\n                        let cleaned_8 := and(sload(/** @src 83:2502:2506  \"usdc\" */ 0x22), /** @src 83:715:5265  \"contract MinimalAccountTest is Test {...\" */ _50)\n                        let _51 := sload(/** @src 83:2628:2642  \"minimalAccount\" */ 0x1f)\n                        /// @src 83:2572:2652  \"abi.encodeWithSelector(ERC20Mock.mint.selector, address(minimalAccount), AMOUNT)\"\n                        let expr_mpos_5 := /** @src 83:715:5265  \"contract MinimalAccountTest is Test {...\" */ mload(_2)\n                        /// @src 83:2572:2652  \"abi.encodeWithSelector(ERC20Mock.mint.selector, address(minimalAccount), AMOUNT)\"\n                        let _52 := 0x20\n                        mstore(add(expr_mpos_5, _52), /** @src 83:4491:4514  \"ERC20Mock.mint.selector\" */ shl(224, 0x40c10f19))\n                        /// @src 83:715:5265  \"contract MinimalAccountTest is Test {...\"\n                        mstore(/** @src 83:2572:2652  \"abi.encodeWithSelector(ERC20Mock.mint.selector, address(minimalAccount), AMOUNT)\" */ add(expr_mpos_5, 36), /** @src 83:715:5265  \"contract MinimalAccountTest is Test {...\" */ and(shr(8, _51), _50))\n                        /// @src 83:1097:1101  \"1e18\"\n                        mstore(add(/** @src 83:2572:2652  \"abi.encodeWithSelector(ERC20Mock.mint.selector, address(minimalAccount), AMOUNT)\" */ expr_mpos_5, /** @src 83:1097:1101  \"1e18\" */ 68), 0x0de0b6b3a7640000)\n                        /// @src 83:2572:2652  \"abi.encodeWithSelector(ERC20Mock.mint.selector, address(minimalAccount), AMOUNT)\"\n                        mstore(expr_mpos_5, /** @src 83:1097:1101  \"1e18\" */ 68)\n                        /// @src 83:2572:2652  \"abi.encodeWithSelector(ERC20Mock.mint.selector, address(minimalAccount), AMOUNT)\"\n                        finalize_allocation_30149(expr_mpos_5)\n                        /// @src 83:2772:2854  \"abi.encodeWithSelector(MinimalAccount.execute.selector, dest, value, functionData)\"\n                        let expr_mpos_6 := /** @src 83:715:5265  \"contract MinimalAccountTest is Test {...\" */ mload(_2)\n                        /// @src 83:2772:2854  \"abi.encodeWithSelector(MinimalAccount.execute.selector, dest, value, functionData)\"\n                        mstore(add(expr_mpos_6, /** @src 83:2572:2652  \"abi.encodeWithSelector(ERC20Mock.mint.selector, address(minimalAccount), AMOUNT)\" */ _52), /** @src 83:4691:4722  \"MinimalAccount.execute.selector\" */ shl(225, 0x5b0e93fb))\n                        /// @src 83:715:5265  \"contract MinimalAccountTest is Test {...\"\n                        mstore(/** @src 83:2772:2854  \"abi.encodeWithSelector(MinimalAccount.execute.selector, dest, value, functionData)\" */ add(expr_mpos_6, /** @src 83:2572:2652  \"abi.encodeWithSelector(ERC20Mock.mint.selector, address(minimalAccount), AMOUNT)\" */ 36), /** @src 83:715:5265  \"contract MinimalAccountTest is Test {...\" */ cleaned_8)\n                        /// @src 83:1097:1101  \"1e18\"\n                        mstore(add(/** @src 83:2772:2854  \"abi.encodeWithSelector(MinimalAccount.execute.selector, dest, value, functionData)\" */ expr_mpos_6, /** @src 83:1097:1101  \"1e18\" */ 68), /** @src 83:715:5265  \"contract MinimalAccountTest is Test {...\" */ _4)\n                        /// @src 83:1097:1101  \"1e18\"\n                        mstore(add(/** @src 83:2772:2854  \"abi.encodeWithSelector(MinimalAccount.execute.selector, dest, value, functionData)\" */ expr_mpos_6, /** @src 83:1097:1101  \"1e18\" */ 100), 96)\n                        /// @src 83:2772:2854  \"abi.encodeWithSelector(MinimalAccount.execute.selector, dest, value, functionData)\"\n                        let _53 := sub(/** @src 83:1097:1101  \"1e18\" */ abi_encode_string(expr_mpos_5, add(/** @src 83:2772:2854  \"abi.encodeWithSelector(MinimalAccount.execute.selector, dest, value, functionData)\" */ expr_mpos_6, /** @src 83:1097:1101  \"1e18\" */ 132)), /** @src 83:2772:2854  \"abi.encodeWithSelector(MinimalAccount.execute.selector, dest, value, functionData)\" */ expr_mpos_6)\n                        mstore(expr_mpos_6, add(_53, /** @src 83:4468:4548  \"abi.encodeWithSelector(ERC20Mock.mint.selector, address(minimalAccount), AMOUNT)\" */ not(31)))\n                        /// @src 83:2772:2854  \"abi.encodeWithSelector(MinimalAccount.execute.selector, dest, value, functionData)\"\n                        finalize_allocation(expr_mpos_6, _53)\n                        /// @src 83:715:5265  \"contract MinimalAccountTest is Test {...\"\n                        let cleaned_9 := and(/** @src 83:1097:1101  \"1e18\" */ sload(/** @src 83:2918:2934  \"sendPackedUserOp\" */ 0x23), /** @src 83:715:5265  \"contract MinimalAccountTest is Test {...\" */ _50)\n                        let cleaned_10 := and(sload(/** @src 83:2973:2985  \"helperConfig\" */ 0x21), /** @src 83:715:5265  \"contract MinimalAccountTest is Test {...\" */ _50)\n                        /// @src 83:2973:2997  \"helperConfig.getConfig()\"\n                        let _54 := /** @src 83:715:5265  \"contract MinimalAccountTest is Test {...\" */ mload(_2)\n                        /// @src 83:2973:2997  \"helperConfig.getConfig()\"\n                        mstore(_54, /** @src 83:715:5265  \"contract MinimalAccountTest is Test {...\" */ shl(226, 0x30fe4275))\n                        /// @src 83:2973:2997  \"helperConfig.getConfig()\"\n                        let _55 := call(gas(), cleaned_10, /** @src 83:715:5265  \"contract MinimalAccountTest is Test {...\" */ _4, /** @src 83:2973:2997  \"helperConfig.getConfig()\" */ _54, /** @src 83:715:5265  \"contract MinimalAccountTest is Test {...\" */ _3, /** @src 83:2973:2997  \"helperConfig.getConfig()\" */ _54, /** @src 83:715:5265  \"contract MinimalAccountTest is Test {...\" */ _2)\n                        /// @src 83:2973:2997  \"helperConfig.getConfig()\"\n                        if iszero(_55)\n                        {\n                            /// @src 83:715:5265  \"contract MinimalAccountTest is Test {...\"\n                            let pos_13 := mload(_2)\n                            returndatacopy(pos_13, _4, returndatasize())\n                            revert(pos_13, returndatasize())\n                        }\n                        /// @src 83:2973:2997  \"helperConfig.getConfig()\"\n                        let expr_mpos_7 := _4\n                        if _55\n                        {\n                            let _56 := /** @src 83:715:5265  \"contract MinimalAccountTest is Test {...\" */ _2\n                            /// @src 83:2973:2997  \"helperConfig.getConfig()\"\n                            if gt(/** @src 83:715:5265  \"contract MinimalAccountTest is Test {...\" */ _2, /** @src 83:2973:2997  \"helperConfig.getConfig()\" */ returndatasize()) { _56 := returndatasize() }\n                            finalize_allocation(_54, _56)\n                            expr_mpos_7 := abi_decode_struct_NetworkConfig_fromMemory(_54, add(_54, _56))\n                        }\n                        /// @src 83:715:5265  \"contract MinimalAccountTest is Test {...\"\n                        let value_4 := and(shr(8, sload(/** @src 83:2628:2642  \"minimalAccount\" */ 0x1f)), /** @src 83:715:5265  \"contract MinimalAccountTest is Test {...\" */ _50)\n                        /// @src 83:2918:3023  \"sendPackedUserOp.generatePackedUserOp(executeCallData, helperConfig.getConfig(), address(minimalAccount))\"\n                        let _57 := /** @src 83:715:5265  \"contract MinimalAccountTest is Test {...\" */ mload(_2)\n                        /// @src 83:2918:3023  \"sendPackedUserOp.generatePackedUserOp(executeCallData, helperConfig.getConfig(), address(minimalAccount))\"\n                        mstore(_57, /** @src 83:715:5265  \"contract MinimalAccountTest is Test {...\" */ shl(224, 0xb337f547))\n                        /// @src 83:2918:3023  \"sendPackedUserOp.generatePackedUserOp(executeCallData, helperConfig.getConfig(), address(minimalAccount))\"\n                        let _58 := staticcall(gas(), cleaned_9, _57, sub(abi_encode_bytes_struct_NetworkConfig_address(add(_57, /** @src 83:715:5265  \"contract MinimalAccountTest is Test {...\" */ _3), /** @src 83:2918:3023  \"sendPackedUserOp.generatePackedUserOp(executeCallData, helperConfig.getConfig(), address(minimalAccount))\" */ expr_mpos_6, expr_mpos_7, value_4), _57), _57, /** @src 83:715:5265  \"contract MinimalAccountTest is Test {...\" */ _4)\n                        /// @src 83:2918:3023  \"sendPackedUserOp.generatePackedUserOp(executeCallData, helperConfig.getConfig(), address(minimalAccount))\"\n                        if iszero(_58)\n                        {\n                            /// @src 83:715:5265  \"contract MinimalAccountTest is Test {...\"\n                            let pos_14 := mload(_2)\n                            returndatacopy(pos_14, _4, returndatasize())\n                            revert(pos_14, returndatasize())\n                        }\n                        /// @src 83:2918:3023  \"sendPackedUserOp.generatePackedUserOp(executeCallData, helperConfig.getConfig(), address(minimalAccount))\"\n                        let expr_mpos_8 := _4\n                        if _58\n                        {\n                            let _59 := returndatasize()\n                            returndatacopy(_57, /** @src 83:715:5265  \"contract MinimalAccountTest is Test {...\" */ _4, /** @src 83:2918:3023  \"sendPackedUserOp.generatePackedUserOp(executeCallData, helperConfig.getConfig(), address(minimalAccount))\" */ _59)\n                            finalize_allocation(_57, _59)\n                            expr_mpos_8 := abi_decode_struct_PackedUserOperation_fromMemory(_57, add(_57, _59))\n                        }\n                        /// @src 83:715:5265  \"contract MinimalAccountTest is Test {...\"\n                        let cleaned_11 := and(/** @src 15:1590:1604  \"Vm(VM_ADDRESS)\" */ sload(/** @src 83:2572:2652  \"abi.encodeWithSelector(ERC20Mock.mint.selector, address(minimalAccount), AMOUNT)\" */ 36), /** @src 83:715:5265  \"contract MinimalAccountTest is Test {...\" */ _50)\n                        /// @src 83:3061:3112  \"IEntryPoint(entryPoint).getUserOpHash(packedUserOp)\"\n                        let _60 := /** @src 83:715:5265  \"contract MinimalAccountTest is Test {...\" */ mload(_2)\n                        /// @src 83:3061:3112  \"IEntryPoint(entryPoint).getUserOpHash(packedUserOp)\"\n                        mstore(_60, /** @src 83:715:5265  \"contract MinimalAccountTest is Test {...\" */ shl(226, 0x08b37793))\n                        mstore(/** @src 83:3061:3112  \"IEntryPoint(entryPoint).getUserOpHash(packedUserOp)\" */ add(_60, /** @src 83:715:5265  \"contract MinimalAccountTest is Test {...\" */ _3), /** @src 83:2572:2652  \"abi.encodeWithSelector(ERC20Mock.mint.selector, address(minimalAccount), AMOUNT)\" */ _52)\n                        /// @src 83:3061:3112  \"IEntryPoint(entryPoint).getUserOpHash(packedUserOp)\"\n                        let _61 := staticcall(gas(), cleaned_11, _60, sub(/** @src 83:715:5265  \"contract MinimalAccountTest is Test {...\" */ abi_encode_struct_PackedUserOperation(expr_mpos_8, add(/** @src 83:3061:3112  \"IEntryPoint(entryPoint).getUserOpHash(packedUserOp)\" */ _60, /** @src 83:2572:2652  \"abi.encodeWithSelector(ERC20Mock.mint.selector, address(minimalAccount), AMOUNT)\" */ 36)), /** @src 83:3061:3112  \"IEntryPoint(entryPoint).getUserOpHash(packedUserOp)\" */ _60), _60, /** @src 83:2572:2652  \"abi.encodeWithSelector(ERC20Mock.mint.selector, address(minimalAccount), AMOUNT)\" */ _52)\n                        /// @src 83:3061:3112  \"IEntryPoint(entryPoint).getUserOpHash(packedUserOp)\"\n                        if iszero(_61)\n                        {\n                            /// @src 83:715:5265  \"contract MinimalAccountTest is Test {...\"\n                            let pos_15 := mload(_2)\n                            returndatacopy(pos_15, _4, returndatasize())\n                            revert(pos_15, returndatasize())\n                        }\n                        /// @src 83:3061:3112  \"IEntryPoint(entryPoint).getUserOpHash(packedUserOp)\"\n                        let expr_1 := _4\n                        if _61\n                        {\n                            let _62 := /** @src 83:2572:2652  \"abi.encodeWithSelector(ERC20Mock.mint.selector, address(minimalAccount), AMOUNT)\" */ _52\n                            /// @src 83:3061:3112  \"IEntryPoint(entryPoint).getUserOpHash(packedUserOp)\"\n                            if gt(/** @src 83:2572:2652  \"abi.encodeWithSelector(ERC20Mock.mint.selector, address(minimalAccount), AMOUNT)\" */ _52, /** @src 83:3061:3112  \"IEntryPoint(entryPoint).getUserOpHash(packedUserOp)\" */ returndatasize()) { _62 := returndatasize() }\n                            finalize_allocation(_60, _62)\n                            /// @src 15:1590:1604  \"Vm(VM_ADDRESS)\"\n                            if slt(sub(/** @src 83:3061:3112  \"IEntryPoint(entryPoint).getUserOpHash(packedUserOp)\" */ add(_60, _62), /** @src 15:1590:1604  \"Vm(VM_ADDRESS)\" */ _60), /** @src 83:2572:2652  \"abi.encodeWithSelector(ERC20Mock.mint.selector, address(minimalAccount), AMOUNT)\" */ _52)\n                            /// @src 15:1590:1604  \"Vm(VM_ADDRESS)\"\n                            {\n                                /// @src 83:715:5265  \"contract MinimalAccountTest is Test {...\"\n                                revert(0, 0)\n                            }\n                            /// @src 83:3061:3112  \"IEntryPoint(entryPoint).getUserOpHash(packedUserOp)\"\n                            expr_1 := /** @src 83:1097:1101  \"1e18\" */ mload(_60)\n                        }\n                        /// @src 73:1367:1676  \"assembly {...\"\n                        mstore(/** @src 83:715:5265  \"contract MinimalAccountTest is Test {...\" */ _4, /** @src 73:1367:1676  \"assembly {...\" */ \"\\x19Ethereum Signed Message:\\n32\")\n                        mstore(0x1c, expr_1)\n                        let var_digest := keccak256(/** @src 83:715:5265  \"contract MinimalAccountTest is Test {...\" */ _4, /** @src 73:1367:1676  \"assembly {...\" */ 0x3c)\n                        /// @src 72:3859:3886  \"tryRecover(hash, signature)\"\n                        let expr_component, expr_component_1, expr_component_2 := fun_tryRecover_48818(var_digest, /** @src 83:3204:3226  \"packedUserOp.signature\" */ mload(add(expr_mpos_8, 256)))\n                        /// @src 72:3915:3923  \"errorArg\"\n                        fun_throwError(expr_component_1, expr_component_2)\n                        /// @src 83:3260:3282  \"minimalAccount.owner()\"\n                        let _63 := /** @src 83:715:5265  \"contract MinimalAccountTest is Test {...\" */ mload(_2)\n                        /// @src 83:3260:3282  \"minimalAccount.owner()\"\n                        mstore(_63, /** @src 83:715:5265  \"contract MinimalAccountTest is Test {...\" */ shl(224, 0x8da5cb5b))\n                        /// @src 83:3260:3282  \"minimalAccount.owner()\"\n                        let _64 := staticcall(gas(), value_4, _63, /** @src 83:715:5265  \"contract MinimalAccountTest is Test {...\" */ _3, /** @src 83:3260:3282  \"minimalAccount.owner()\" */ _63, /** @src 83:2572:2652  \"abi.encodeWithSelector(ERC20Mock.mint.selector, address(minimalAccount), AMOUNT)\" */ _52)\n                        /// @src 83:3260:3282  \"minimalAccount.owner()\"\n                        if iszero(_64)\n                        {\n                            /// @src 83:715:5265  \"contract MinimalAccountTest is Test {...\"\n                            let pos_16 := mload(_2)\n                            returndatacopy(pos_16, _4, returndatasize())\n                            revert(pos_16, returndatasize())\n                        }\n                        /// @src 83:3260:3282  \"minimalAccount.owner()\"\n                        let expr_2 := _4\n                        if _64\n                        {\n                            let _65 := /** @src 83:2572:2652  \"abi.encodeWithSelector(ERC20Mock.mint.selector, address(minimalAccount), AMOUNT)\" */ _52\n                            /// @src 83:3260:3282  \"minimalAccount.owner()\"\n                            if gt(/** @src 83:2572:2652  \"abi.encodeWithSelector(ERC20Mock.mint.selector, address(minimalAccount), AMOUNT)\" */ _52, /** @src 83:3260:3282  \"minimalAccount.owner()\" */ returndatasize()) { _65 := returndatasize() }\n                            finalize_allocation(_63, _65)\n                            /// @src 83:715:5265  \"contract MinimalAccountTest is Test {...\"\n                            if slt(sub(/** @src 83:3260:3282  \"minimalAccount.owner()\" */ add(_63, _65), /** @src 83:715:5265  \"contract MinimalAccountTest is Test {...\" */ _63), /** @src 83:2572:2652  \"abi.encodeWithSelector(ERC20Mock.mint.selector, address(minimalAccount), AMOUNT)\" */ _52)\n                            /// @src 83:715:5265  \"contract MinimalAccountTest is Test {...\"\n                            { revert(_4, _4) }\n                            /// @src 83:3260:3282  \"minimalAccount.owner()\"\n                            expr_2 := /** @src 83:715:5265  \"contract MinimalAccountTest is Test {...\" */ abi_decode_address_fromMemory(_63)\n                        }\n                        let _66 := 0x7109709ecfa91a80626ff3989d68f67f5b1dd12d\n                        /// @src 17:3533:3557  \"vm.assertEq(left, right)\"\n                        if iszero(extcodesize(/** @src 83:715:5265  \"contract MinimalAccountTest is Test {...\" */ _66))\n                        /// @src 17:3533:3557  \"vm.assertEq(left, right)\"\n                        {\n                            /// @src 83:715:5265  \"contract MinimalAccountTest is Test {...\"\n                            revert(_4, _4)\n                        }\n                        /// @src 17:3533:3557  \"vm.assertEq(left, right)\"\n                        let _67 := /** @src 83:715:5265  \"contract MinimalAccountTest is Test {...\" */ mload(_2)\n                        /// @src 17:3533:3557  \"vm.assertEq(left, right)\"\n                        mstore(_67, /** @src 83:715:5265  \"contract MinimalAccountTest is Test {...\" */ shl(225, 0x28a9b0fb))\n                        mstore(/** @src 17:3533:3557  \"vm.assertEq(left, right)\" */ add(_67, /** @src 83:715:5265  \"contract MinimalAccountTest is Test {...\" */ _3), and(expr_component, _50))\n                        mstore(add(/** @src 17:3533:3557  \"vm.assertEq(left, right)\" */ _67, /** @src 83:2572:2652  \"abi.encodeWithSelector(ERC20Mock.mint.selector, address(minimalAccount), AMOUNT)\" */ 36), /** @src 83:715:5265  \"contract MinimalAccountTest is Test {...\" */ and(expr_2, _50))\n                        /// @src 17:3533:3557  \"vm.assertEq(left, right)\"\n                        let _68 := staticcall(gas(), /** @src 83:715:5265  \"contract MinimalAccountTest is Test {...\" */ _66, /** @src 17:3533:3557  \"vm.assertEq(left, right)\" */ _67, /** @src 83:1097:1101  \"1e18\" */ 68, /** @src 17:3533:3557  \"vm.assertEq(left, right)\" */ _67, /** @src 83:715:5265  \"contract MinimalAccountTest is Test {...\" */ _4)\n                        /// @src 17:3533:3557  \"vm.assertEq(left, right)\"\n                        if iszero(_68)\n                        {\n                            /// @src 83:715:5265  \"contract MinimalAccountTest is Test {...\"\n                            let pos_17 := mload(_2)\n                            returndatacopy(pos_17, _4, returndatasize())\n                            revert(pos_17, returndatasize())\n                        }\n                        /// @src 17:3533:3557  \"vm.assertEq(left, right)\"\n                        if _68\n                        {\n                            finalize_allocation_21042(_67)\n                            /// @src 83:715:5265  \"contract MinimalAccountTest is Test {...\"\n                            if _4 { revert(_4, _4) }\n                        }\n                        return(_4, _4)\n                    }\n                    case 0x1ed7831c {\n                        if callvalue() { revert(_4, _4) }\n                        if slt(add(calldatasize(), not(3)), _4) { revert(_4, _4) }\n                        let pos_18 := mload(_2)\n                        let pos_19 := pos_18\n                        let length_1 := sload(/** @src 21:3018:3034  \"_excludedSenders\" */ 0x16)\n                        /// @src 83:715:5265  \"contract MinimalAccountTest is Test {...\"\n                        mstore(pos_18, length_1)\n                        let _69 := 0x20\n                        pos_18 := add(pos_18, 0x20)\n                        mstore(_4, /** @src 21:3018:3034  \"_excludedSenders\" */ 0x16)\n                        /// @src 83:715:5265  \"contract MinimalAccountTest is Test {...\"\n                        let srcPtr_1 := 97789825912453899259273410636466998099043528421815129078110847000656284369545\n                        let i_2 := _4\n                        for { } lt(i_2, length_1) { i_2 := add(i_2, 1) }\n                        {\n                            mstore(pos_18, and(/** @src 15:1590:1604  \"Vm(VM_ADDRESS)\" */ sload(/** @src 83:715:5265  \"contract MinimalAccountTest is Test {...\" */ srcPtr_1), sub(shl(160, /** @src 83:1194:1213  \"new DeployMinimal()\" */ 1), 1)))\n                            /// @src 83:715:5265  \"contract MinimalAccountTest is Test {...\"\n                            pos_18 := add(pos_18, _69)\n                            srcPtr_1 := add(srcPtr_1, 1)\n                        }\n                        finalize_allocation(pos_19, sub(pos_18, pos_19))\n                        let memPos := mload(_2)\n                        return(memPos, sub(abi_encode_array_address_dyn(memPos, pos_19), memPos))\n                    }\n                    case 0x1fd6142a {\n                        if callvalue() { revert(_4, _4) }\n                        if slt(add(calldatasize(), not(3)), _4) { revert(_4, _4) }\n                        let _70 := sub(shl(160, /** @src 83:1194:1213  \"new DeployMinimal()\" */ 1), 1)\n                        /// @src 83:715:5265  \"contract MinimalAccountTest is Test {...\"\n                        let cleaned_12 := and(sload(/** @src 83:1545:1549  \"usdc\" */ 0x22), /** @src 83:715:5265  \"contract MinimalAccountTest is Test {...\" */ _70)\n                        /// @src 83:1545:1574  \"usdc.balanceOf(address(this))\"\n                        let _71 := /** @src 83:715:5265  \"contract MinimalAccountTest is Test {...\" */ mload(_2)\n                        let _72 := shl(224, 0x70a08231)\n                        /// @src 83:1545:1574  \"usdc.balanceOf(address(this))\"\n                        mstore(_71, /** @src 83:715:5265  \"contract MinimalAccountTest is Test {...\" */ _72)\n                        mstore(/** @src 83:1545:1574  \"usdc.balanceOf(address(this))\" */ add(_71, /** @src 83:715:5265  \"contract MinimalAccountTest is Test {...\" */ _3), /** @src 83:1568:1572  \"this\" */ address())\n                        /// @src 83:1545:1574  \"usdc.balanceOf(address(this))\"\n                        let _73 := 32\n                        let _74 := staticcall(gas(), cleaned_12, _71, /** @src 15:1590:1604  \"Vm(VM_ADDRESS)\" */ 36, /** @src 83:1545:1574  \"usdc.balanceOf(address(this))\" */ _71, _73)\n                        if iszero(_74)\n                        {\n                            /// @src 83:715:5265  \"contract MinimalAccountTest is Test {...\"\n                            let pos_20 := mload(_2)\n                            returndatacopy(pos_20, _4, returndatasize())\n                            revert(pos_20, returndatasize())\n                        }\n                        /// @src 83:1545:1574  \"usdc.balanceOf(address(this))\"\n                        let expr_3 := _4\n                        if _74\n                        {\n                            let _75 := _73\n                            if gt(_73, returndatasize()) { _75 := returndatasize() }\n                            finalize_allocation(_71, _75)\n                            /// @src 15:1590:1604  \"Vm(VM_ADDRESS)\"\n                            if slt(sub(/** @src 83:1545:1574  \"usdc.balanceOf(address(this))\" */ add(_71, _75), /** @src 15:1590:1604  \"Vm(VM_ADDRESS)\" */ _71), /** @src 83:1545:1574  \"usdc.balanceOf(address(this))\" */ _73)\n                            /// @src 15:1590:1604  \"Vm(VM_ADDRESS)\"\n                            {\n                                /// @src 83:715:5265  \"contract MinimalAccountTest is Test {...\"\n                                revert(0, 0)\n                            }\n                            /// @src 83:1545:1574  \"usdc.balanceOf(address(this))\"\n                            expr_3 := /** @src 83:1097:1101  \"1e18\" */ mload(_71)\n                        }\n                        /// @src 83:1536:1578  \"assertEq(usdc.balanceOf(address(this)), 0)\"\n                        fun_assertEq(expr_3)\n                        /// @src 83:715:5265  \"contract MinimalAccountTest is Test {...\"\n                        let value_5 := and(shr(8, sload(/** @src 83:1738:1752  \"minimalAccount\" */ 0x1f)), /** @src 83:715:5265  \"contract MinimalAccountTest is Test {...\" */ _70)\n                        /// @src 83:1682:1762  \"abi.encodeWithSelector(ERC20Mock.mint.selector, address(minimalAccount), AMOUNT)\"\n                        let expr_mpos_9 := /** @src 83:715:5265  \"contract MinimalAccountTest is Test {...\" */ mload(_2)\n                        /// @src 83:1682:1762  \"abi.encodeWithSelector(ERC20Mock.mint.selector, address(minimalAccount), AMOUNT)\"\n                        mstore(add(expr_mpos_9, /** @src 83:1545:1574  \"usdc.balanceOf(address(this))\" */ _73), /** @src 83:4491:4514  \"ERC20Mock.mint.selector\" */ shl(224, 0x40c10f19))\n                        /// @src 83:715:5265  \"contract MinimalAccountTest is Test {...\"\n                        mstore(/** @src 83:1682:1762  \"abi.encodeWithSelector(ERC20Mock.mint.selector, address(minimalAccount), AMOUNT)\" */ add(expr_mpos_9, /** @src 15:1590:1604  \"Vm(VM_ADDRESS)\" */ 36), /** @src 83:715:5265  \"contract MinimalAccountTest is Test {...\" */ value_5)\n                        /// @src 83:1097:1101  \"1e18\"\n                        mstore(add(/** @src 83:1682:1762  \"abi.encodeWithSelector(ERC20Mock.mint.selector, address(minimalAccount), AMOUNT)\" */ expr_mpos_9, /** @src 83:1097:1101  \"1e18\" */ 68), 0x0de0b6b3a7640000)\n                        /// @src 83:1682:1762  \"abi.encodeWithSelector(ERC20Mock.mint.selector, address(minimalAccount), AMOUNT)\"\n                        mstore(expr_mpos_9, /** @src 83:1097:1101  \"1e18\" */ 68)\n                        /// @src 83:1682:1762  \"abi.encodeWithSelector(ERC20Mock.mint.selector, address(minimalAccount), AMOUNT)\"\n                        finalize_allocation_30149(expr_mpos_9)\n                        /// @src 83:1787:1809  \"minimalAccount.owner()\"\n                        let _76 := /** @src 83:715:5265  \"contract MinimalAccountTest is Test {...\" */ mload(_2)\n                        /// @src 83:1787:1809  \"minimalAccount.owner()\"\n                        mstore(_76, /** @src 83:715:5265  \"contract MinimalAccountTest is Test {...\" */ shl(224, 0x8da5cb5b))\n                        /// @src 83:1787:1809  \"minimalAccount.owner()\"\n                        let _77 := staticcall(gas(), value_5, _76, /** @src 83:715:5265  \"contract MinimalAccountTest is Test {...\" */ _3, /** @src 83:1787:1809  \"minimalAccount.owner()\" */ _76, /** @src 83:1545:1574  \"usdc.balanceOf(address(this))\" */ _73)\n                        /// @src 83:1787:1809  \"minimalAccount.owner()\"\n                        if iszero(_77)\n                        {\n                            /// @src 83:715:5265  \"contract MinimalAccountTest is Test {...\"\n                            let pos_21 := mload(_2)\n                            returndatacopy(pos_21, _4, returndatasize())\n                            revert(pos_21, returndatasize())\n                        }\n                        /// @src 83:1787:1809  \"minimalAccount.owner()\"\n                        let expr_4 := _4\n                        if _77\n                        {\n                            let _78 := /** @src 83:1545:1574  \"usdc.balanceOf(address(this))\" */ _73\n                            /// @src 83:1787:1809  \"minimalAccount.owner()\"\n                            if gt(/** @src 83:1545:1574  \"usdc.balanceOf(address(this))\" */ _73, /** @src 83:1787:1809  \"minimalAccount.owner()\" */ returndatasize()) { _78 := returndatasize() }\n                            finalize_allocation(_76, _78)\n                            /// @src 83:715:5265  \"contract MinimalAccountTest is Test {...\"\n                            if slt(sub(/** @src 83:1787:1809  \"minimalAccount.owner()\" */ add(_76, _78), /** @src 83:715:5265  \"contract MinimalAccountTest is Test {...\" */ _76), /** @src 83:1545:1574  \"usdc.balanceOf(address(this))\" */ _73)\n                            /// @src 83:715:5265  \"contract MinimalAccountTest is Test {...\"\n                            { revert(_4, _4) }\n                            /// @src 83:1787:1809  \"minimalAccount.owner()\"\n                            expr_4 := /** @src 83:715:5265  \"contract MinimalAccountTest is Test {...\" */ abi_decode_address_fromMemory(_76)\n                        }\n                        let _79 := 0x7109709ecfa91a80626ff3989d68f67f5b1dd12d\n                        /// @src 83:1773:1810  \"vm.startPrank(minimalAccount.owner())\"\n                        if iszero(extcodesize(/** @src 83:715:5265  \"contract MinimalAccountTest is Test {...\" */ _79))\n                        /// @src 83:1773:1810  \"vm.startPrank(minimalAccount.owner())\"\n                        {\n                            /// @src 83:715:5265  \"contract MinimalAccountTest is Test {...\"\n                            revert(_4, _4)\n                        }\n                        /// @src 83:1773:1810  \"vm.startPrank(minimalAccount.owner())\"\n                        let _80 := /** @src 83:715:5265  \"contract MinimalAccountTest is Test {...\" */ mload(_2)\n                        /// @src 83:1773:1810  \"vm.startPrank(minimalAccount.owner())\"\n                        mstore(_80, /** @src 83:715:5265  \"contract MinimalAccountTest is Test {...\" */ shl(225, 0x03223eab))\n                        mstore(/** @src 83:1773:1810  \"vm.startPrank(minimalAccount.owner())\" */ add(_80, /** @src 83:715:5265  \"contract MinimalAccountTest is Test {...\" */ _3), and(expr_4, _70))\n                        /// @src 83:1773:1810  \"vm.startPrank(minimalAccount.owner())\"\n                        let _81 := call(gas(), /** @src 83:715:5265  \"contract MinimalAccountTest is Test {...\" */ _79, _4, /** @src 83:1773:1810  \"vm.startPrank(minimalAccount.owner())\" */ _80, /** @src 15:1590:1604  \"Vm(VM_ADDRESS)\" */ 36, /** @src 83:1773:1810  \"vm.startPrank(minimalAccount.owner())\" */ _80, /** @src 83:715:5265  \"contract MinimalAccountTest is Test {...\" */ _4)\n                        /// @src 83:1773:1810  \"vm.startPrank(minimalAccount.owner())\"\n                        if iszero(_81)\n                        {\n                            /// @src 83:715:5265  \"contract MinimalAccountTest is Test {...\"\n                            let pos_22 := mload(_2)\n                            returndatacopy(pos_22, _4, returndatasize())\n                            revert(pos_22, returndatasize())\n                        }\n                        /// @src 83:1773:1810  \"vm.startPrank(minimalAccount.owner())\"\n                        if _81\n                        {\n                            finalize_allocation_21042(_80)\n                            /// @src 83:715:5265  \"contract MinimalAccountTest is Test {...\"\n                            if _4 { revert(_4, _4) }\n                        }\n                        let value_6 := and(shr(8, sload(/** @src 83:1738:1752  \"minimalAccount\" */ 0x1f)), /** @src 83:715:5265  \"contract MinimalAccountTest is Test {...\" */ _70)\n                        /// @src 83:1820:1869  \"minimalAccount.execute(dest, value, functionData)\"\n                        if iszero(extcodesize(value_6))\n                        {\n                            /// @src 83:715:5265  \"contract MinimalAccountTest is Test {...\"\n                            revert(_4, _4)\n                        }\n                        /// @src 83:1820:1869  \"minimalAccount.execute(dest, value, functionData)\"\n                        let _82 := /** @src 83:715:5265  \"contract MinimalAccountTest is Test {...\" */ mload(_2)\n                        /// @src 83:1820:1869  \"minimalAccount.execute(dest, value, functionData)\"\n                        mstore(_82, /** @src 83:4691:4722  \"MinimalAccount.execute.selector\" */ shl(225, 0x5b0e93fb))\n                        /// @src 83:715:5265  \"contract MinimalAccountTest is Test {...\"\n                        mstore(/** @src 83:1820:1869  \"minimalAccount.execute(dest, value, functionData)\" */ add(_82, /** @src 83:715:5265  \"contract MinimalAccountTest is Test {...\" */ _3), cleaned_12)\n                        /// @src 83:1097:1101  \"1e18\"\n                        mstore(add(/** @src 83:1820:1869  \"minimalAccount.execute(dest, value, functionData)\" */ _82, /** @src 15:1590:1604  \"Vm(VM_ADDRESS)\" */ 36), /** @src 83:715:5265  \"contract MinimalAccountTest is Test {...\" */ _4)\n                        /// @src 83:1097:1101  \"1e18\"\n                        mstore(add(/** @src 83:1820:1869  \"minimalAccount.execute(dest, value, functionData)\" */ _82, /** @src 83:1097:1101  \"1e18\" */ 68), 96)\n                        /// @src 83:1820:1869  \"minimalAccount.execute(dest, value, functionData)\"\n                        let _83 := call(gas(), value_6, /** @src 83:715:5265  \"contract MinimalAccountTest is Test {...\" */ _4, /** @src 83:1820:1869  \"minimalAccount.execute(dest, value, functionData)\" */ _82, sub(/** @src 83:1097:1101  \"1e18\" */ abi_encode_string(expr_mpos_9, add(/** @src 83:1820:1869  \"minimalAccount.execute(dest, value, functionData)\" */ _82, /** @src 83:1097:1101  \"1e18\" */ 100)), /** @src 83:1820:1869  \"minimalAccount.execute(dest, value, functionData)\" */ _82), _82, /** @src 83:715:5265  \"contract MinimalAccountTest is Test {...\" */ _4)\n                        /// @src 83:1820:1869  \"minimalAccount.execute(dest, value, functionData)\"\n                        if iszero(_83)\n                        {\n                            /// @src 83:715:5265  \"contract MinimalAccountTest is Test {...\"\n                            let pos_23 := mload(_2)\n                            returndatacopy(pos_23, _4, returndatasize())\n                            revert(pos_23, returndatasize())\n                        }\n                        /// @src 83:1820:1869  \"minimalAccount.execute(dest, value, functionData)\"\n                        if _83\n                        {\n                            finalize_allocation_21042(_82)\n                            /// @src 83:715:5265  \"contract MinimalAccountTest is Test {...\"\n                            if _4 { revert(_4, _4) }\n                        }\n                        let cleaned_13 := and(sload(/** @src 83:1545:1549  \"usdc\" */ 0x22), /** @src 83:715:5265  \"contract MinimalAccountTest is Test {...\" */ _70)\n                        let value_7 := and(shr(8, sload(/** @src 83:1738:1752  \"minimalAccount\" */ 0x1f)), /** @src 83:715:5265  \"contract MinimalAccountTest is Test {...\" */ _70)\n                        /// @src 83:1889:1928  \"usdc.balanceOf(address(minimalAccount))\"\n                        let _84 := /** @src 83:715:5265  \"contract MinimalAccountTest is Test {...\" */ mload(_2)\n                        /// @src 83:1889:1928  \"usdc.balanceOf(address(minimalAccount))\"\n                        mstore(_84, /** @src 83:715:5265  \"contract MinimalAccountTest is Test {...\" */ _72)\n                        mstore(/** @src 83:1889:1928  \"usdc.balanceOf(address(minimalAccount))\" */ add(_84, /** @src 83:715:5265  \"contract MinimalAccountTest is Test {...\" */ _3), value_7)\n                        /// @src 83:1889:1928  \"usdc.balanceOf(address(minimalAccount))\"\n                        let _85 := staticcall(gas(), cleaned_13, _84, /** @src 15:1590:1604  \"Vm(VM_ADDRESS)\" */ 36, /** @src 83:1889:1928  \"usdc.balanceOf(address(minimalAccount))\" */ _84, /** @src 83:1545:1574  \"usdc.balanceOf(address(this))\" */ _73)\n                        /// @src 83:1889:1928  \"usdc.balanceOf(address(minimalAccount))\"\n                        if iszero(_85)\n                        {\n                            /// @src 83:715:5265  \"contract MinimalAccountTest is Test {...\"\n                            let pos_24 := mload(_2)\n                            returndatacopy(pos_24, _4, returndatasize())\n                            revert(pos_24, returndatasize())\n                        }\n                        /// @src 83:1889:1928  \"usdc.balanceOf(address(minimalAccount))\"\n                        let expr_5 := _4\n                        if _85\n                        {\n                            let _86 := /** @src 83:1545:1574  \"usdc.balanceOf(address(this))\" */ _73\n                            /// @src 83:1889:1928  \"usdc.balanceOf(address(minimalAccount))\"\n                            if gt(/** @src 83:1545:1574  \"usdc.balanceOf(address(this))\" */ _73, /** @src 83:1889:1928  \"usdc.balanceOf(address(minimalAccount))\" */ returndatasize()) { _86 := returndatasize() }\n                            finalize_allocation(_84, _86)\n                            /// @src 15:1590:1604  \"Vm(VM_ADDRESS)\"\n                            if slt(sub(/** @src 83:1889:1928  \"usdc.balanceOf(address(minimalAccount))\" */ add(_84, _86), /** @src 15:1590:1604  \"Vm(VM_ADDRESS)\" */ _84), /** @src 83:1545:1574  \"usdc.balanceOf(address(this))\" */ _73)\n                            /// @src 15:1590:1604  \"Vm(VM_ADDRESS)\"\n                            {\n                                /// @src 83:715:5265  \"contract MinimalAccountTest is Test {...\"\n                                revert(0, 0)\n                            }\n                            /// @src 83:1889:1928  \"usdc.balanceOf(address(minimalAccount))\"\n                            expr_5 := /** @src 83:1097:1101  \"1e18\" */ mload(_84)\n                        }\n                        /// @src 83:1930:1936  \"AMOUNT\"\n                        fun_assertEq_21051(expr_5)\n                        /// @src 83:1948:1962  \"vm.stopPrank()\"\n                        if iszero(extcodesize(/** @src 83:715:5265  \"contract MinimalAccountTest is Test {...\" */ _79))\n                        /// @src 83:1948:1962  \"vm.stopPrank()\"\n                        {\n                            /// @src 83:715:5265  \"contract MinimalAccountTest is Test {...\"\n                            revert(_4, _4)\n                        }\n                        /// @src 83:1948:1962  \"vm.stopPrank()\"\n                        let _87 := /** @src 83:715:5265  \"contract MinimalAccountTest is Test {...\" */ mload(_2)\n                        /// @src 83:1948:1962  \"vm.stopPrank()\"\n                        mstore(_87, /** @src 83:715:5265  \"contract MinimalAccountTest is Test {...\" */ shl(224, 0x90c5013b))\n                        /// @src 83:1948:1962  \"vm.stopPrank()\"\n                        let _88 := call(gas(), /** @src 83:715:5265  \"contract MinimalAccountTest is Test {...\" */ _79, _4, /** @src 83:1948:1962  \"vm.stopPrank()\" */ _87, /** @src 83:715:5265  \"contract MinimalAccountTest is Test {...\" */ _3, /** @src 83:1948:1962  \"vm.stopPrank()\" */ _87, /** @src 83:715:5265  \"contract MinimalAccountTest is Test {...\" */ _4)\n                        /// @src 83:1948:1962  \"vm.stopPrank()\"\n                        if iszero(_88)\n                        {\n                            /// @src 83:715:5265  \"contract MinimalAccountTest is Test {...\"\n                            let pos_25 := mload(_2)\n                            returndatacopy(pos_25, _4, returndatasize())\n                            revert(pos_25, returndatasize())\n                        }\n                        /// @src 83:1948:1962  \"vm.stopPrank()\"\n                        if _88\n                        {\n                            finalize_allocation_21042(_87)\n                            /// @src 83:715:5265  \"contract MinimalAccountTest is Test {...\"\n                            if _4 { revert(_4, _4) }\n                        }\n                        return(_4, _4)\n                    }\n                    case 0x2ade3880 {\n                        if callvalue() { revert(_4, _4) }\n                        if slt(add(calldatasize(), not(3)), _4) { revert(_4, _4) }\n                        let length_2 := sload(/** @src 21:3948:3967  \"_targetedInterfaces\" */ 0x1e)\n                        /// @src 15:1590:1604  \"Vm(VM_ADDRESS)\"\n                        let _89 := array_allocation_size_array_struct_PackedUserOperation_dyn(length_2)\n                        /// @src 83:715:5265  \"contract MinimalAccountTest is Test {...\"\n                        let memPtr_2 := mload(_2)\n                        finalize_allocation(memPtr_2, _89)\n                        /// @src 15:1590:1604  \"Vm(VM_ADDRESS)\"\n                        mstore(memPtr_2, length_2)\n                        /// @src 83:715:5265  \"contract MinimalAccountTest is Test {...\"\n                        let mpos := memPtr_2\n                        let _90 := 0x20\n                        mpos := add(memPtr_2, _90)\n                        let mpos_1 := mpos\n                        mstore(_4, /** @src 21:3948:3967  \"_targetedInterfaces\" */ 0x1e)\n                        /// @src 83:715:5265  \"contract MinimalAccountTest is Test {...\"\n                        let spos := 36516136433507714556481507284757523525550975291680945358964353894568634540880\n                        let i_3 := _4\n                        for { } lt(i_3, length_2) { i_3 := add(i_3, 1) }\n                        {\n                            let memPtr_3 := mload(_2)\n                            finalize_allocation_21058(memPtr_3)\n                            mstore(memPtr_3, and(/** @src 15:1590:1604  \"Vm(VM_ADDRESS)\" */ sload(/** @src 83:715:5265  \"contract MinimalAccountTest is Test {...\" */ spos), sub(shl(160, /** @src 83:1194:1213  \"new DeployMinimal()\" */ 1), 1)))\n                            /// @src 83:715:5265  \"contract MinimalAccountTest is Test {...\"\n                            let _91 := 1\n                            let _92 := add(spos, _91)\n                            let length_3 := sload(_92)\n                            /// @src 15:1590:1604  \"Vm(VM_ADDRESS)\"\n                            let _93 := array_allocation_size_array_struct_PackedUserOperation_dyn(length_3)\n                            /// @src 83:715:5265  \"contract MinimalAccountTest is Test {...\"\n                            let memPtr_4 := mload(_2)\n                            finalize_allocation(memPtr_4, _93)\n                            /// @src 15:1590:1604  \"Vm(VM_ADDRESS)\"\n                            mstore(memPtr_4, length_3)\n                            /// @src 83:715:5265  \"contract MinimalAccountTest is Test {...\"\n                            let mpos_2 := memPtr_4\n                            mpos_2 := add(memPtr_4, _90)\n                            mstore(0, _92)\n                            let spos_1 := keccak256(0, _90)\n                            let i_4 := 0\n                            for { } lt(i_4, length_3) { i_4 := add(i_4, _91) }\n                            {\n                                mstore(mpos_2, copy_array_from_storage_to_memory_string(spos_1))\n                                mpos_2 := add(mpos_2, _90)\n                                spos_1 := add(spos_1, _91)\n                            }\n                            mstore(add(memPtr_3, _90), memPtr_4)\n                            mstore(mpos, memPtr_3)\n                            mpos := add(mpos, _90)\n                            spos := add(spos, 2)\n                        }\n                        let memPos_1 := mload(_2)\n                        let tail_2 := add(memPos_1, _90)\n                        mstore(memPos_1, _90)\n                        let pos_26 := tail_2\n                        let length_4 := mload(memPtr_2)\n                        mstore(tail_2, length_4)\n                        pos_26 := add(memPos_1, _2)\n                        let _94 := 5\n                        let tail_3 := add(add(memPos_1, shl(5, length_4)), _2)\n                        let srcPtr_2 := mpos_1\n                        let i_5 := _4\n                        for { } lt(i_5, length_4) { i_5 := add(i_5, 1) }\n                        {\n                            mstore(pos_26, add(sub(tail_3, memPos_1), not(63)))\n                            let _95 := mload(srcPtr_2)\n                            let tail_4 := add(tail_3, _2)\n                            mstore(tail_3, and(mload(_95), sub(shl(160, /** @src 83:1194:1213  \"new DeployMinimal()\" */ 1), 1)))\n                            /// @src 83:715:5265  \"contract MinimalAccountTest is Test {...\"\n                            let memberValue0 := mload(add(_95, _90))\n                            mstore(add(tail_3, _90), _2)\n                            let pos_27 := tail_4\n                            let length_5 := mload(memberValue0)\n                            mstore(tail_4, length_5)\n                            let _96 := 96\n                            pos_27 := add(tail_3, _96)\n                            let tail_5 := add(add(tail_3, shl(_94, length_5)), _96)\n                            let srcPtr_3 := add(memberValue0, _90)\n                            let i_6 := _4\n                            for { } lt(i_6, length_5) { i_6 := add(i_6, 1) }\n                            {\n                                mstore(pos_27, add(sub(tail_5, tail_3), not(95)))\n                                tail_5 := abi_encode_string(mload(srcPtr_3), tail_5)\n                                srcPtr_3 := add(srcPtr_3, _90)\n                                pos_27 := add(pos_27, _90)\n                            }\n                            tail_3 := tail_5\n                            srcPtr_2 := add(srcPtr_2, _90)\n                            pos_26 := add(pos_26, _90)\n                        }\n                        return(memPos_1, sub(tail_3, memPos_1))\n                    }\n                    case 0x3526f254 {\n                        if callvalue() { revert(_4, _4) }\n                        if slt(add(calldatasize(), not(3)), _4) { revert(_4, _4) }\n                        let value_8 := and(sload(/** @src 83:880:912  \"HelperConfig public helperConfig\" */ 33), /** @src 83:715:5265  \"contract MinimalAccountTest is Test {...\" */ sub(shl(160, /** @src 83:1194:1213  \"new DeployMinimal()\" */ 1), 1))\n                        /// @src 83:715:5265  \"contract MinimalAccountTest is Test {...\"\n                        let memPos_2 := mload(_2)\n                        mstore(memPos_2, value_8)\n                        return(memPos_2, 32)\n                    }\n                    case 0x3e413bee {\n                        if callvalue() { revert(_4, _4) }\n                        if slt(add(calldatasize(), not(3)), _4) { revert(_4, _4) }\n                        let value_9 := and(sload(/** @src 83:918:939  \"ERC20Mock public usdc\" */ 34), /** @src 83:715:5265  \"contract MinimalAccountTest is Test {...\" */ sub(shl(160, /** @src 83:1194:1213  \"new DeployMinimal()\" */ 1), 1))\n                        /// @src 83:715:5265  \"contract MinimalAccountTest is Test {...\"\n                        let memPos_3 := mload(_2)\n                        mstore(memPos_3, value_9)\n                        return(memPos_3, 32)\n                    }\n                    case 0x3e5e3c23 {\n                        if callvalue() { revert(_4, _4) }\n                        if slt(add(calldatasize(), not(3)), _4) { revert(_4, _4) }\n                        let pos_28 := mload(_2)\n                        let pos_29 := pos_28\n                        let length_6 := sload(/** @src 21:3794:3810  \"_targetedSenders\" */ 0x18)\n                        /// @src 83:715:5265  \"contract MinimalAccountTest is Test {...\"\n                        mstore(pos_28, length_6)\n                        let _97 := 0x20\n                        pos_28 := add(pos_28, 0x20)\n                        mstore(_4, /** @src 21:3794:3810  \"_targetedSenders\" */ 0x18)\n                        /// @src 83:715:5265  \"contract MinimalAccountTest is Test {...\"\n                        let srcPtr_4 := 80167465652159884487584418398737133515478493586045375474096367959472086682926\n                        let i_7 := _4\n                        for { } lt(i_7, length_6) { i_7 := add(i_7, 1) }\n                        {\n                            mstore(pos_28, and(/** @src 15:1590:1604  \"Vm(VM_ADDRESS)\" */ sload(/** @src 83:715:5265  \"contract MinimalAccountTest is Test {...\" */ srcPtr_4), sub(shl(160, /** @src 83:1194:1213  \"new DeployMinimal()\" */ 1), 1)))\n                            /// @src 83:715:5265  \"contract MinimalAccountTest is Test {...\"\n                            pos_28 := add(pos_28, _97)\n                            srcPtr_4 := add(srcPtr_4, 1)\n                        }\n                        finalize_allocation(pos_29, sub(pos_28, pos_29))\n                        let memPos_4 := mload(_2)\n                        return(memPos_4, sub(abi_encode_array_address_dyn(memPos_4, pos_29), memPos_4))\n                    }\n                    case 0x3f7286f4 {\n                        if callvalue() { revert(_4, _4) }\n                        if slt(add(calldatasize(), not(3)), _4) { revert(_4, _4) }\n                        let pos_30 := mload(_2)\n                        let pos_31 := pos_30\n                        let length_7 := sload(/** @src 21:3501:3519  \"_targetedContracts\" */ 0x17)\n                        /// @src 83:715:5265  \"contract MinimalAccountTest is Test {...\"\n                        mstore(pos_30, length_7)\n                        let _98 := 0x20\n                        pos_30 := add(pos_30, 0x20)\n                        mstore(_4, /** @src 21:3501:3519  \"_targetedContracts\" */ 0x17)\n                        /// @src 83:715:5265  \"contract MinimalAccountTest is Test {...\"\n                        let srcPtr_5 := 89622809563556123081897041840816014639138942293158154584485133346364573191189\n                        let i_8 := _4\n                        for { } lt(i_8, length_7) { i_8 := add(i_8, 1) }\n                        {\n                            mstore(pos_30, and(/** @src 15:1590:1604  \"Vm(VM_ADDRESS)\" */ sload(/** @src 83:715:5265  \"contract MinimalAccountTest is Test {...\" */ srcPtr_5), sub(shl(160, /** @src 83:1194:1213  \"new DeployMinimal()\" */ 1), 1)))\n                            /// @src 83:715:5265  \"contract MinimalAccountTest is Test {...\"\n                            pos_30 := add(pos_30, _98)\n                            srcPtr_5 := add(srcPtr_5, 1)\n                        }\n                        finalize_allocation(pos_31, sub(pos_30, pos_31))\n                        let memPos_5 := mload(_2)\n                        return(memPos_5, sub(abi_encode_array_address_dyn(memPos_5, pos_31), memPos_5))\n                    }\n                    case 0x66d9a9a0 {\n                        if callvalue() { revert(_4, _4) }\n                        if slt(add(calldatasize(), not(3)), _4) { revert(_4, _4) }\n                        let length_8 := sload(/** @src 21:3346:3372  \"_targetedArtifactSelectors\" */ 0x1b)\n                        /// @src 15:1590:1604  \"Vm(VM_ADDRESS)\"\n                        let _99 := array_allocation_size_array_struct_PackedUserOperation_dyn(length_8)\n                        /// @src 83:715:5265  \"contract MinimalAccountTest is Test {...\"\n                        let memPtr_5 := mload(_2)\n                        finalize_allocation(memPtr_5, _99)\n                        /// @src 15:1590:1604  \"Vm(VM_ADDRESS)\"\n                        mstore(memPtr_5, length_8)\n                        /// @src 83:715:5265  \"contract MinimalAccountTest is Test {...\"\n                        let mpos_3 := memPtr_5\n                        let _100 := 0x20\n                        mpos_3 := add(memPtr_5, _100)\n                        let mpos_4 := mpos_3\n                        mstore(_4, /** @src 21:3346:3372  \"_targetedArtifactSelectors\" */ 0x1b)\n                        /// @src 83:715:5265  \"contract MinimalAccountTest is Test {...\"\n                        let spos_2 := 26616959624788145501257665028759500958019551560565664426117466910078421933505\n                        let i_9 := _4\n                        for { } lt(i_9, length_8) { i_9 := add(i_9, 1) }\n                        {\n                            let memPtr_6 := mload(_2)\n                            finalize_allocation_21058(memPtr_6)\n                            mstore(memPtr_6, copy_array_from_storage_to_memory_string(spos_2))\n                            mstore(add(memPtr_6, _100), copy_array_from_storage_to_memory_array_bytes4_dyn(add(spos_2, 1)))\n                            mstore(mpos_3, memPtr_6)\n                            mpos_3 := add(mpos_3, _100)\n                            spos_2 := add(spos_2, 2)\n                        }\n                        let memPos_6 := mload(_2)\n                        let tail_6 := add(memPos_6, _100)\n                        mstore(memPos_6, _100)\n                        let pos_32 := tail_6\n                        let length_9 := mload(memPtr_5)\n                        mstore(tail_6, length_9)\n                        pos_32 := add(memPos_6, _2)\n                        let tail_7 := add(add(memPos_6, shl(5, length_9)), _2)\n                        let srcPtr_6 := mpos_4\n                        let i_10 := _4\n                        for { } lt(i_10, length_9) { i_10 := add(i_10, 1) }\n                        {\n                            mstore(pos_32, add(sub(tail_7, memPos_6), not(63)))\n                            let _101 := mload(srcPtr_6)\n                            let memberValue0_1 := mload(_101)\n                            mstore(tail_7, _2)\n                            let tail_8 := abi_encode_string(memberValue0_1, add(tail_7, _2))\n                            let memberValue0_2 := mload(add(_101, _100))\n                            mstore(add(tail_7, _100), sub(tail_8, tail_7))\n                            tail_7 := abi_encode_array_bytes4_dyn(memberValue0_2, tail_8)\n                            srcPtr_6 := add(srcPtr_6, _100)\n                            pos_32 := add(pos_32, _100)\n                        }\n                        return(memPos_6, sub(tail_7, memPos_6))\n                    }\n                    case 0x85226c81 {\n                        if callvalue() { revert(_4, _4) }\n                        if slt(add(calldatasize(), not(3)), _4) { revert(_4, _4) }\n                        let length_10 := sload(/** @src 21:3162:3180  \"_targetedArtifacts\" */ 0x1a)\n                        /// @src 15:1590:1604  \"Vm(VM_ADDRESS)\"\n                        let _102 := array_allocation_size_array_struct_PackedUserOperation_dyn(length_10)\n                        /// @src 83:715:5265  \"contract MinimalAccountTest is Test {...\"\n                        let memPtr_7 := mload(_2)\n                        finalize_allocation(memPtr_7, _102)\n                        /// @src 15:1590:1604  \"Vm(VM_ADDRESS)\"\n                        mstore(memPtr_7, length_10)\n                        /// @src 83:715:5265  \"contract MinimalAccountTest is Test {...\"\n                        let mpos_5 := memPtr_7\n                        let _103 := 0x20\n                        mpos_5 := add(memPtr_7, 0x20)\n                        mstore(0, /** @src 21:3162:3180  \"_targetedArtifacts\" */ 0x1a)\n                        /// @src 83:715:5265  \"contract MinimalAccountTest is Test {...\"\n                        let spos_3 := 2481041784956016742021570618494952475758789857281704946240779902470294861374\n                        let i_11 := 0\n                        for { } lt(i_11, length_10) { i_11 := add(i_11, 1) }\n                        {\n                            mstore(mpos_5, copy_array_from_storage_to_memory_string(spos_3))\n                            mpos_5 := add(mpos_5, _103)\n                            spos_3 := add(spos_3, 1)\n                        }\n                        let memPos_7 := mload(_2)\n                        return(memPos_7, sub(abi_encode_array_string_dyn(memPos_7, memPtr_7), memPos_7))\n                    }\n                    case 0x916a17c6 {\n                        if callvalue() { revert(_4, _4) }\n                        if slt(add(calldatasize(), not(3)), _4) { revert(_4, _4) }\n                        let length_11 := sload(/** @src 21:3653:3671  \"_targetedSelectors\" */ 0x1d)\n                        /// @src 15:1590:1604  \"Vm(VM_ADDRESS)\"\n                        let _104 := array_allocation_size_array_struct_PackedUserOperation_dyn(length_11)\n                        /// @src 83:715:5265  \"contract MinimalAccountTest is Test {...\"\n                        let memPtr_8 := mload(_2)\n                        finalize_allocation(memPtr_8, _104)\n                        /// @src 15:1590:1604  \"Vm(VM_ADDRESS)\"\n                        mstore(memPtr_8, length_11)\n                        /// @src 83:715:5265  \"contract MinimalAccountTest is Test {...\"\n                        let mpos_6 := memPtr_8\n                        let _105 := 0x20\n                        mpos_6 := add(memPtr_8, 0x20)\n                        mstore(_4, /** @src 21:3653:3671  \"_targetedSelectors\" */ 0x1d)\n                        /// @src 83:715:5265  \"contract MinimalAccountTest is Test {...\"\n                        let spos_4 := 49422300655976383518971161772042036479724517635858811238160587340303074464591\n                        let i_12 := _4\n                        for { } lt(i_12, length_11) { i_12 := add(i_12, 1) }\n                        {\n                            let memPtr_9 := mload(_2)\n                            finalize_allocation_21058(memPtr_9)\n                            mstore(memPtr_9, and(/** @src 15:1590:1604  \"Vm(VM_ADDRESS)\" */ sload(/** @src 83:715:5265  \"contract MinimalAccountTest is Test {...\" */ spos_4), sub(shl(160, /** @src 83:1194:1213  \"new DeployMinimal()\" */ 1), 1)))\n                            /// @src 83:715:5265  \"contract MinimalAccountTest is Test {...\"\n                            mstore(add(memPtr_9, _105), copy_array_from_storage_to_memory_array_bytes4_dyn(add(spos_4, 1)))\n                            mstore(mpos_6, memPtr_9)\n                            mpos_6 := add(mpos_6, _105)\n                            spos_4 := add(spos_4, 2)\n                        }\n                        let memPos_8 := mload(_2)\n                        return(memPos_8, sub(abi_encode_array_struct_FuzzSelector_dyn(memPos_8, memPtr_8), memPos_8))\n                    }\n                    case 0x9dfa705f {\n                        if callvalue() { revert(_4, _4) }\n                        if slt(add(calldatasize(), not(3)), _4) { revert(_4, _4) }\n                        let _106 := sub(shl(160, /** @src 83:1194:1213  \"new DeployMinimal()\" */ 1), 1)\n                        /// @src 83:715:5265  \"contract MinimalAccountTest is Test {...\"\n                        let cleaned_14 := and(sload(/** @src 83:2060:2064  \"usdc\" */ 0x22), /** @src 83:715:5265  \"contract MinimalAccountTest is Test {...\" */ _106)\n                        let _107 := sload(/** @src 83:2186:2200  \"minimalAccount\" */ 0x1f)\n                        /// @src 83:2130:2210  \"abi.encodeWithSelector(ERC20Mock.mint.selector, address(minimalAccount), AMOUNT)\"\n                        let expr_mpos_10 := /** @src 83:715:5265  \"contract MinimalAccountTest is Test {...\" */ mload(_2)\n                        /// @src 83:2130:2210  \"abi.encodeWithSelector(ERC20Mock.mint.selector, address(minimalAccount), AMOUNT)\"\n                        mstore(add(expr_mpos_10, 0x20), /** @src 83:4491:4514  \"ERC20Mock.mint.selector\" */ shl(224, 0x40c10f19))\n                        /// @src 83:715:5265  \"contract MinimalAccountTest is Test {...\"\n                        mstore(/** @src 83:2130:2210  \"abi.encodeWithSelector(ERC20Mock.mint.selector, address(minimalAccount), AMOUNT)\" */ add(expr_mpos_10, 36), /** @src 83:715:5265  \"contract MinimalAccountTest is Test {...\" */ and(shr(8, _107), _106))\n                        /// @src 83:1097:1101  \"1e18\"\n                        mstore(add(/** @src 83:2130:2210  \"abi.encodeWithSelector(ERC20Mock.mint.selector, address(minimalAccount), AMOUNT)\" */ expr_mpos_10, /** @src 83:1097:1101  \"1e18\" */ 68), 0x0de0b6b3a7640000)\n                        /// @src 83:2130:2210  \"abi.encodeWithSelector(ERC20Mock.mint.selector, address(minimalAccount), AMOUNT)\"\n                        mstore(expr_mpos_10, /** @src 83:1097:1101  \"1e18\" */ 68)\n                        /// @src 83:2130:2210  \"abi.encodeWithSelector(ERC20Mock.mint.selector, address(minimalAccount), AMOUNT)\"\n                        finalize_allocation_30149(expr_mpos_10)\n                        /// @src 83:715:5265  \"contract MinimalAccountTest is Test {...\"\n                        let cleaned_15 := and(/** @src 15:1590:1604  \"Vm(VM_ADDRESS)\" */ sload(/** @src 83:2235:2245  \"randomUser\" */ 0x25), /** @src 83:715:5265  \"contract MinimalAccountTest is Test {...\" */ _106)\n                        let _108 := 0x7109709ecfa91a80626ff3989d68f67f5b1dd12d\n                        /// @src 83:2221:2246  \"vm.startPrank(randomUser)\"\n                        if iszero(extcodesize(/** @src 83:715:5265  \"contract MinimalAccountTest is Test {...\" */ _108))\n                        /// @src 83:2221:2246  \"vm.startPrank(randomUser)\"\n                        {\n                            /// @src 83:715:5265  \"contract MinimalAccountTest is Test {...\"\n                            revert(_4, _4)\n                        }\n                        /// @src 83:2221:2246  \"vm.startPrank(randomUser)\"\n                        let _109 := /** @src 83:715:5265  \"contract MinimalAccountTest is Test {...\" */ mload(_2)\n                        /// @src 83:2221:2246  \"vm.startPrank(randomUser)\"\n                        mstore(_109, /** @src 83:715:5265  \"contract MinimalAccountTest is Test {...\" */ shl(225, 0x03223eab))\n                        mstore(/** @src 83:2221:2246  \"vm.startPrank(randomUser)\" */ add(_109, /** @src 83:715:5265  \"contract MinimalAccountTest is Test {...\" */ _3), cleaned_15)\n                        /// @src 83:2221:2246  \"vm.startPrank(randomUser)\"\n                        let _110 := call(gas(), /** @src 83:715:5265  \"contract MinimalAccountTest is Test {...\" */ _108, _4, /** @src 83:2221:2246  \"vm.startPrank(randomUser)\" */ _109, /** @src 83:2130:2210  \"abi.encodeWithSelector(ERC20Mock.mint.selector, address(minimalAccount), AMOUNT)\" */ 36, /** @src 83:2221:2246  \"vm.startPrank(randomUser)\" */ _109, /** @src 83:715:5265  \"contract MinimalAccountTest is Test {...\" */ _4)\n                        /// @src 83:2221:2246  \"vm.startPrank(randomUser)\"\n                        if iszero(_110)\n                        {\n                            /// @src 83:715:5265  \"contract MinimalAccountTest is Test {...\"\n                            let pos_33 := mload(_2)\n                            returndatacopy(pos_33, _4, returndatasize())\n                            revert(pos_33, returndatasize())\n                        }\n                        /// @src 83:2221:2246  \"vm.startPrank(randomUser)\"\n                        if _110\n                        {\n                            finalize_allocation_21042(_109)\n                            /// @src 83:715:5265  \"contract MinimalAccountTest is Test {...\"\n                            if _4 { revert(_4, _4) }\n                        }\n                        /// @src 83:2256:2334  \"vm.expectRevert(MinimalAccount.MinimalAccount__OnlyEntryPointOrOwner.selector)\"\n                        if iszero(extcodesize(/** @src 83:715:5265  \"contract MinimalAccountTest is Test {...\" */ _108))\n                        /// @src 83:2256:2334  \"vm.expectRevert(MinimalAccount.MinimalAccount__OnlyEntryPointOrOwner.selector)\"\n                        {\n                            /// @src 83:715:5265  \"contract MinimalAccountTest is Test {...\"\n                            revert(_4, _4)\n                        }\n                        /// @src 83:2256:2334  \"vm.expectRevert(MinimalAccount.MinimalAccount__OnlyEntryPointOrOwner.selector)\"\n                        let _111 := /** @src 83:715:5265  \"contract MinimalAccountTest is Test {...\" */ mload(_2)\n                        /// @src 83:2256:2334  \"vm.expectRevert(MinimalAccount.MinimalAccount__OnlyEntryPointOrOwner.selector)\"\n                        mstore(_111, /** @src 83:715:5265  \"contract MinimalAccountTest is Test {...\" */ shl(229, 0x0618f587))\n                        mstore(/** @src 83:2256:2334  \"vm.expectRevert(MinimalAccount.MinimalAccount__OnlyEntryPointOrOwner.selector)\" */ add(_111, /** @src 83:715:5265  \"contract MinimalAccountTest is Test {...\" */ _3), /** @src 83:2272:2333  \"MinimalAccount.MinimalAccount__OnlyEntryPointOrOwner.selector\" */ shl(225, 0x54b4aab7))\n                        /// @src 83:2256:2334  \"vm.expectRevert(MinimalAccount.MinimalAccount__OnlyEntryPointOrOwner.selector)\"\n                        let _112 := call(gas(), /** @src 83:715:5265  \"contract MinimalAccountTest is Test {...\" */ _108, _4, /** @src 83:2256:2334  \"vm.expectRevert(MinimalAccount.MinimalAccount__OnlyEntryPointOrOwner.selector)\" */ _111, /** @src 83:2130:2210  \"abi.encodeWithSelector(ERC20Mock.mint.selector, address(minimalAccount), AMOUNT)\" */ 36, /** @src 83:2256:2334  \"vm.expectRevert(MinimalAccount.MinimalAccount__OnlyEntryPointOrOwner.selector)\" */ _111, /** @src 83:715:5265  \"contract MinimalAccountTest is Test {...\" */ _4)\n                        /// @src 83:2256:2334  \"vm.expectRevert(MinimalAccount.MinimalAccount__OnlyEntryPointOrOwner.selector)\"\n                        if iszero(_112)\n                        {\n                            /// @src 83:715:5265  \"contract MinimalAccountTest is Test {...\"\n                            let pos_34 := mload(_2)\n                            returndatacopy(pos_34, _4, returndatasize())\n                            revert(pos_34, returndatasize())\n                        }\n                        /// @src 83:2256:2334  \"vm.expectRevert(MinimalAccount.MinimalAccount__OnlyEntryPointOrOwner.selector)\"\n                        if _112\n                        {\n                            finalize_allocation_21042(_111)\n                            /// @src 83:715:5265  \"contract MinimalAccountTest is Test {...\"\n                            if _4 { revert(_4, _4) }\n                        }\n                        let value_10 := and(shr(8, sload(/** @src 83:2186:2200  \"minimalAccount\" */ 0x1f)), /** @src 83:715:5265  \"contract MinimalAccountTest is Test {...\" */ _106)\n                        /// @src 83:2344:2393  \"minimalAccount.execute(dest, value, functionData)\"\n                        if iszero(extcodesize(value_10))\n                        {\n                            /// @src 83:715:5265  \"contract MinimalAccountTest is Test {...\"\n                            revert(_4, _4)\n                        }\n                        /// @src 83:2344:2393  \"minimalAccount.execute(dest, value, functionData)\"\n                        let _113 := /** @src 83:715:5265  \"contract MinimalAccountTest is Test {...\" */ mload(_2)\n                        /// @src 83:2344:2393  \"minimalAccount.execute(dest, value, functionData)\"\n                        mstore(_113, /** @src 83:4691:4722  \"MinimalAccount.execute.selector\" */ shl(225, 0x5b0e93fb))\n                        /// @src 83:715:5265  \"contract MinimalAccountTest is Test {...\"\n                        mstore(/** @src 83:2344:2393  \"minimalAccount.execute(dest, value, functionData)\" */ add(_113, /** @src 83:715:5265  \"contract MinimalAccountTest is Test {...\" */ _3), cleaned_14)\n                        /// @src 83:1097:1101  \"1e18\"\n                        mstore(add(/** @src 83:2344:2393  \"minimalAccount.execute(dest, value, functionData)\" */ _113, /** @src 83:2130:2210  \"abi.encodeWithSelector(ERC20Mock.mint.selector, address(minimalAccount), AMOUNT)\" */ 36), /** @src 83:715:5265  \"contract MinimalAccountTest is Test {...\" */ _4)\n                        /// @src 83:1097:1101  \"1e18\"\n                        mstore(add(/** @src 83:2344:2393  \"minimalAccount.execute(dest, value, functionData)\" */ _113, /** @src 83:1097:1101  \"1e18\" */ 68), 96)\n                        /// @src 83:2344:2393  \"minimalAccount.execute(dest, value, functionData)\"\n                        let _114 := call(gas(), value_10, /** @src 83:715:5265  \"contract MinimalAccountTest is Test {...\" */ _4, /** @src 83:2344:2393  \"minimalAccount.execute(dest, value, functionData)\" */ _113, sub(/** @src 83:1097:1101  \"1e18\" */ abi_encode_string(expr_mpos_10, add(/** @src 83:2344:2393  \"minimalAccount.execute(dest, value, functionData)\" */ _113, /** @src 83:1097:1101  \"1e18\" */ 100)), /** @src 83:2344:2393  \"minimalAccount.execute(dest, value, functionData)\" */ _113), _113, /** @src 83:715:5265  \"contract MinimalAccountTest is Test {...\" */ _4)\n                        /// @src 83:2344:2393  \"minimalAccount.execute(dest, value, functionData)\"\n                        if iszero(_114)\n                        {\n                            /// @src 83:715:5265  \"contract MinimalAccountTest is Test {...\"\n                            let pos_35 := mload(_2)\n                            returndatacopy(pos_35, _4, returndatasize())\n                            revert(pos_35, returndatasize())\n                        }\n                        /// @src 83:2344:2393  \"minimalAccount.execute(dest, value, functionData)\"\n                        if _114\n                        {\n                            finalize_allocation_21042(_113)\n                            /// @src 83:715:5265  \"contract MinimalAccountTest is Test {...\"\n                            if _4 { revert(_4, _4) }\n                        }\n                        /// @src 83:2404:2418  \"vm.stopPrank()\"\n                        if iszero(extcodesize(/** @src 83:715:5265  \"contract MinimalAccountTest is Test {...\" */ _108))\n                        /// @src 83:2404:2418  \"vm.stopPrank()\"\n                        {\n                            /// @src 83:715:5265  \"contract MinimalAccountTest is Test {...\"\n                            revert(_4, _4)\n                        }\n                        /// @src 83:2404:2418  \"vm.stopPrank()\"\n                        let _115 := /** @src 83:715:5265  \"contract MinimalAccountTest is Test {...\" */ mload(_2)\n                        /// @src 83:2404:2418  \"vm.stopPrank()\"\n                        mstore(_115, /** @src 83:715:5265  \"contract MinimalAccountTest is Test {...\" */ shl(224, 0x90c5013b))\n                        /// @src 83:2404:2418  \"vm.stopPrank()\"\n                        let _116 := call(gas(), /** @src 83:715:5265  \"contract MinimalAccountTest is Test {...\" */ _108, _4, /** @src 83:2404:2418  \"vm.stopPrank()\" */ _115, /** @src 83:715:5265  \"contract MinimalAccountTest is Test {...\" */ _3, /** @src 83:2404:2418  \"vm.stopPrank()\" */ _115, /** @src 83:715:5265  \"contract MinimalAccountTest is Test {...\" */ _4)\n                        /// @src 83:2404:2418  \"vm.stopPrank()\"\n                        if iszero(_116)\n                        {\n                            /// @src 83:715:5265  \"contract MinimalAccountTest is Test {...\"\n                            let pos_36 := mload(_2)\n                            returndatacopy(pos_36, _4, returndatasize())\n                            revert(pos_36, returndatasize())\n                        }\n                        /// @src 83:2404:2418  \"vm.stopPrank()\"\n                        if _116\n                        {\n                            finalize_allocation_21042(_115)\n                            /// @src 83:715:5265  \"contract MinimalAccountTest is Test {...\"\n                            if _4 { revert(_4, _4) }\n                        }\n                        return(_4, _4)\n                    }\n                    case 0xb0343c27 {\n                        if callvalue() { revert(_4, _4) }\n                        if slt(add(calldatasize(), not(3)), _4) { revert(_4, _4) }\n                        let value_11 := and(sload(/** @src 83:840:874  \"DeployMinimal public deployMinimal\" */ 32), /** @src 83:715:5265  \"contract MinimalAccountTest is Test {...\" */ sub(shl(160, /** @src 83:1194:1213  \"new DeployMinimal()\" */ 1), 1))\n                        /// @src 83:715:5265  \"contract MinimalAccountTest is Test {...\"\n                        let memPos_9 := mload(_2)\n                        mstore(memPos_9, value_11)\n                        return(memPos_9, /** @src 83:840:874  \"DeployMinimal public deployMinimal\" */ 32)\n                    }\n                    case /** @src 83:715:5265  \"contract MinimalAccountTest is Test {...\" */ 0xb0464fdc {\n                        if callvalue() { revert(_4, _4) }\n                        if slt(add(calldatasize(), not(3)), _4) { revert(_4, _4) }\n                        let length_12 := sload(/** @src 21:2876:2894  \"_excludedSelectors\" */ 0x1c)\n                        /// @src 15:1590:1604  \"Vm(VM_ADDRESS)\"\n                        let _117 := array_allocation_size_array_struct_PackedUserOperation_dyn(length_12)\n                        /// @src 83:715:5265  \"contract MinimalAccountTest is Test {...\"\n                        let memPtr_10 := mload(_2)\n                        finalize_allocation(memPtr_10, _117)\n                        /// @src 15:1590:1604  \"Vm(VM_ADDRESS)\"\n                        mstore(memPtr_10, length_12)\n                        /// @src 83:715:5265  \"contract MinimalAccountTest is Test {...\"\n                        let mpos_7 := memPtr_10\n                        let _118 := 0x20\n                        mpos_7 := add(memPtr_10, 0x20)\n                        mstore(_4, /** @src 21:2876:2894  \"_excludedSelectors\" */ 0x1c)\n                        /// @src 83:715:5265  \"contract MinimalAccountTest is Test {...\"\n                        let spos_5 := 6454973039698199198119942482240540643982028891330163610098731264865829167633\n                        let i_13 := _4\n                        for { } lt(i_13, length_12) { i_13 := add(i_13, 1) }\n                        {\n                            let memPtr_11 := mload(_2)\n                            finalize_allocation_21058(memPtr_11)\n                            mstore(memPtr_11, and(/** @src 15:1590:1604  \"Vm(VM_ADDRESS)\" */ sload(/** @src 83:715:5265  \"contract MinimalAccountTest is Test {...\" */ spos_5), sub(shl(160, /** @src 83:1194:1213  \"new DeployMinimal()\" */ 1), 1)))\n                            /// @src 83:715:5265  \"contract MinimalAccountTest is Test {...\"\n                            mstore(add(memPtr_11, _118), copy_array_from_storage_to_memory_array_bytes4_dyn(add(spos_5, 1)))\n                            mstore(mpos_7, memPtr_11)\n                            mpos_7 := add(mpos_7, _118)\n                            spos_5 := add(spos_5, 2)\n                        }\n                        let memPos_10 := mload(_2)\n                        return(memPos_10, sub(abi_encode_array_struct_FuzzSelector_dyn(memPos_10, memPtr_10), memPos_10))\n                    }\n                    case 0xb5508aa9 {\n                        if callvalue() { revert(_4, _4) }\n                        if slt(add(calldatasize(), not(3)), _4) { revert(_4, _4) }\n                        let length_13 := sload(/** @src 21:2575:2593  \"_excludedArtifacts\" */ 0x19)\n                        /// @src 15:1590:1604  \"Vm(VM_ADDRESS)\"\n                        let _119 := array_allocation_size_array_struct_PackedUserOperation_dyn(length_13)\n                        /// @src 83:715:5265  \"contract MinimalAccountTest is Test {...\"\n                        let memPtr_12 := mload(_2)\n                        finalize_allocation(memPtr_12, _119)\n                        /// @src 15:1590:1604  \"Vm(VM_ADDRESS)\"\n                        mstore(memPtr_12, length_13)\n                        /// @src 83:715:5265  \"contract MinimalAccountTest is Test {...\"\n                        let mpos_8 := memPtr_12\n                        let _120 := 0x20\n                        mpos_8 := add(memPtr_12, 0x20)\n                        mstore(0, /** @src 21:2575:2593  \"_excludedArtifacts\" */ 0x19)\n                        /// @src 83:715:5265  \"contract MinimalAccountTest is Test {...\"\n                        let spos_6 := 67072331549493647622825787457569556318728415786901242217649037894484240406165\n                        let i_14 := 0\n                        for { } lt(i_14, length_13) { i_14 := add(i_14, 1) }\n                        {\n                            mstore(mpos_8, copy_array_from_storage_to_memory_string(spos_6))\n                            mpos_8 := add(mpos_8, _120)\n                            spos_6 := add(spos_6, 1)\n                        }\n                        let memPos_11 := mload(_2)\n                        return(memPos_11, sub(abi_encode_array_string_dyn(memPos_11, memPtr_12), memPos_11))\n                    }\n                    case 0xba414fa6 {\n                        if callvalue() { revert(_4, _4) }\n                        if slt(add(calldatasize(), not(3)), _4) { revert(_4, _4) }\n                        let ret := fun_failed()\n                        let memPos_12 := mload(_2)\n                        mstore(memPos_12, iszero(iszero(ret)))\n                        return(memPos_12, 32)\n                    }\n                    case 0xc476b1f7 {\n                        if callvalue() { revert(_4, _4) }\n                        if slt(add(calldatasize(), not(3)), _4) { revert(_4, _4) }\n                        let value_12 := and(shr(8, sload(/** @src 83:798:834  \"MinimalAccount public minimalAccount\" */ 31)), /** @src 83:715:5265  \"contract MinimalAccountTest is Test {...\" */ sub(shl(160, /** @src 83:1194:1213  \"new DeployMinimal()\" */ 1), 1))\n                        /// @src 83:715:5265  \"contract MinimalAccountTest is Test {...\"\n                        let memPos_13 := mload(_2)\n                        mstore(memPos_13, value_12)\n                        return(memPos_13, 32)\n                    }\n                    case 0xcb60196e {\n                        if callvalue() { revert(_4, _4) }\n                        if slt(add(calldatasize(), not(3)), _4) { revert(_4, _4) }\n                        let _121 := sub(shl(160, /** @src 83:1194:1213  \"new DeployMinimal()\" */ 1), 1)\n                        /// @src 83:715:5265  \"contract MinimalAccountTest is Test {...\"\n                        let cleaned_16 := and(sload(/** @src 83:3422:3426  \"usdc\" */ 0x22), /** @src 83:715:5265  \"contract MinimalAccountTest is Test {...\" */ _121)\n                        let _122 := sload(/** @src 83:3548:3562  \"minimalAccount\" */ 0x1f)\n                        /// @src 83:3492:3572  \"abi.encodeWithSelector(ERC20Mock.mint.selector, address(minimalAccount), AMOUNT)\"\n                        let expr_mpos_11 := /** @src 83:715:5265  \"contract MinimalAccountTest is Test {...\" */ mload(_2)\n                        /// @src 83:3492:3572  \"abi.encodeWithSelector(ERC20Mock.mint.selector, address(minimalAccount), AMOUNT)\"\n                        let _123 := 0x20\n                        mstore(add(expr_mpos_11, _123), /** @src 83:4491:4514  \"ERC20Mock.mint.selector\" */ shl(224, 0x40c10f19))\n                        /// @src 83:3492:3572  \"abi.encodeWithSelector(ERC20Mock.mint.selector, address(minimalAccount), AMOUNT)\"\n                        let _124 := 36\n                        /// @src 83:715:5265  \"contract MinimalAccountTest is Test {...\"\n                        mstore(/** @src 83:3492:3572  \"abi.encodeWithSelector(ERC20Mock.mint.selector, address(minimalAccount), AMOUNT)\" */ add(expr_mpos_11, _124), /** @src 83:715:5265  \"contract MinimalAccountTest is Test {...\" */ and(shr(8, _122), _121))\n                        /// @src 83:1097:1101  \"1e18\"\n                        let _125 := 0x0de0b6b3a7640000\n                        mstore(add(/** @src 83:3492:3572  \"abi.encodeWithSelector(ERC20Mock.mint.selector, address(minimalAccount), AMOUNT)\" */ expr_mpos_11, /** @src 83:1097:1101  \"1e18\" */ 68), _125)\n                        /// @src 83:3492:3572  \"abi.encodeWithSelector(ERC20Mock.mint.selector, address(minimalAccount), AMOUNT)\"\n                        mstore(expr_mpos_11, /** @src 83:1097:1101  \"1e18\" */ 68)\n                        /// @src 83:3492:3572  \"abi.encodeWithSelector(ERC20Mock.mint.selector, address(minimalAccount), AMOUNT)\"\n                        finalize_allocation_30149(expr_mpos_11)\n                        /// @src 83:3692:3774  \"abi.encodeWithSelector(MinimalAccount.execute.selector, dest, value, functionData)\"\n                        let expr_mpos_12 := /** @src 83:715:5265  \"contract MinimalAccountTest is Test {...\" */ mload(_2)\n                        /// @src 83:3692:3774  \"abi.encodeWithSelector(MinimalAccount.execute.selector, dest, value, functionData)\"\n                        mstore(add(expr_mpos_12, /** @src 83:3492:3572  \"abi.encodeWithSelector(ERC20Mock.mint.selector, address(minimalAccount), AMOUNT)\" */ _123), /** @src 83:4691:4722  \"MinimalAccount.execute.selector\" */ shl(225, 0x5b0e93fb))\n                        /// @src 83:715:5265  \"contract MinimalAccountTest is Test {...\"\n                        mstore(/** @src 83:3692:3774  \"abi.encodeWithSelector(MinimalAccount.execute.selector, dest, value, functionData)\" */ add(expr_mpos_12, /** @src 83:3492:3572  \"abi.encodeWithSelector(ERC20Mock.mint.selector, address(minimalAccount), AMOUNT)\" */ _124), /** @src 83:715:5265  \"contract MinimalAccountTest is Test {...\" */ cleaned_16)\n                        /// @src 83:1097:1101  \"1e18\"\n                        mstore(add(/** @src 83:3692:3774  \"abi.encodeWithSelector(MinimalAccount.execute.selector, dest, value, functionData)\" */ expr_mpos_12, /** @src 83:1097:1101  \"1e18\" */ 68), /** @src 83:715:5265  \"contract MinimalAccountTest is Test {...\" */ _4)\n                        /// @src 83:1097:1101  \"1e18\"\n                        mstore(add(/** @src 83:3692:3774  \"abi.encodeWithSelector(MinimalAccount.execute.selector, dest, value, functionData)\" */ expr_mpos_12, /** @src 83:1097:1101  \"1e18\" */ 100), 96)\n                        /// @src 83:3692:3774  \"abi.encodeWithSelector(MinimalAccount.execute.selector, dest, value, functionData)\"\n                        let _126 := sub(/** @src 83:1097:1101  \"1e18\" */ abi_encode_string(expr_mpos_11, add(/** @src 83:3692:3774  \"abi.encodeWithSelector(MinimalAccount.execute.selector, dest, value, functionData)\" */ expr_mpos_12, /** @src 83:1097:1101  \"1e18\" */ 132)), /** @src 83:3692:3774  \"abi.encodeWithSelector(MinimalAccount.execute.selector, dest, value, functionData)\" */ expr_mpos_12)\n                        mstore(expr_mpos_12, add(_126, /** @src 83:4468:4548  \"abi.encodeWithSelector(ERC20Mock.mint.selector, address(minimalAccount), AMOUNT)\" */ not(31)))\n                        /// @src 83:3692:3774  \"abi.encodeWithSelector(MinimalAccount.execute.selector, dest, value, functionData)\"\n                        finalize_allocation(expr_mpos_12, _126)\n                        /// @src 83:715:5265  \"contract MinimalAccountTest is Test {...\"\n                        let cleaned_17 := and(/** @src 83:1097:1101  \"1e18\" */ sload(/** @src 83:3838:3854  \"sendPackedUserOp\" */ 0x23), /** @src 83:715:5265  \"contract MinimalAccountTest is Test {...\" */ _121)\n                        let cleaned_18 := and(sload(/** @src 83:3893:3905  \"helperConfig\" */ 0x21), /** @src 83:715:5265  \"contract MinimalAccountTest is Test {...\" */ _121)\n                        /// @src 83:3893:3917  \"helperConfig.getConfig()\"\n                        let _127 := /** @src 83:715:5265  \"contract MinimalAccountTest is Test {...\" */ mload(_2)\n                        /// @src 83:3893:3917  \"helperConfig.getConfig()\"\n                        mstore(_127, /** @src 83:715:5265  \"contract MinimalAccountTest is Test {...\" */ shl(226, 0x30fe4275))\n                        /// @src 83:3893:3917  \"helperConfig.getConfig()\"\n                        let _128 := call(gas(), cleaned_18, /** @src 83:715:5265  \"contract MinimalAccountTest is Test {...\" */ _4, /** @src 83:3893:3917  \"helperConfig.getConfig()\" */ _127, /** @src 83:715:5265  \"contract MinimalAccountTest is Test {...\" */ _3, /** @src 83:3893:3917  \"helperConfig.getConfig()\" */ _127, /** @src 83:715:5265  \"contract MinimalAccountTest is Test {...\" */ _2)\n                        /// @src 83:3893:3917  \"helperConfig.getConfig()\"\n                        if iszero(_128)\n                        {\n                            /// @src 83:715:5265  \"contract MinimalAccountTest is Test {...\"\n                            let pos_37 := mload(_2)\n                            returndatacopy(pos_37, _4, returndatasize())\n                            revert(pos_37, returndatasize())\n                        }\n                        /// @src 83:3893:3917  \"helperConfig.getConfig()\"\n                        let expr_mpos_13 := _4\n                        if _128\n                        {\n                            let _129 := /** @src 83:715:5265  \"contract MinimalAccountTest is Test {...\" */ _2\n                            /// @src 83:3893:3917  \"helperConfig.getConfig()\"\n                            if gt(/** @src 83:715:5265  \"contract MinimalAccountTest is Test {...\" */ _2, /** @src 83:3893:3917  \"helperConfig.getConfig()\" */ returndatasize()) { _129 := returndatasize() }\n                            finalize_allocation(_127, _129)\n                            expr_mpos_13 := abi_decode_struct_NetworkConfig_fromMemory(_127, add(_127, _129))\n                        }\n                        /// @src 83:715:5265  \"contract MinimalAccountTest is Test {...\"\n                        let value_13 := and(shr(8, sload(/** @src 83:3548:3562  \"minimalAccount\" */ 0x1f)), /** @src 83:715:5265  \"contract MinimalAccountTest is Test {...\" */ _121)\n                        /// @src 83:3838:3943  \"sendPackedUserOp.generatePackedUserOp(executeCallData, helperConfig.getConfig(), address(minimalAccount))\"\n                        let _130 := /** @src 83:715:5265  \"contract MinimalAccountTest is Test {...\" */ mload(_2)\n                        /// @src 83:3838:3943  \"sendPackedUserOp.generatePackedUserOp(executeCallData, helperConfig.getConfig(), address(minimalAccount))\"\n                        mstore(_130, /** @src 83:715:5265  \"contract MinimalAccountTest is Test {...\" */ shl(224, 0xb337f547))\n                        /// @src 83:3838:3943  \"sendPackedUserOp.generatePackedUserOp(executeCallData, helperConfig.getConfig(), address(minimalAccount))\"\n                        let _131 := staticcall(gas(), cleaned_17, _130, sub(abi_encode_bytes_struct_NetworkConfig_address(add(_130, /** @src 83:715:5265  \"contract MinimalAccountTest is Test {...\" */ _3), /** @src 83:3838:3943  \"sendPackedUserOp.generatePackedUserOp(executeCallData, helperConfig.getConfig(), address(minimalAccount))\" */ expr_mpos_12, expr_mpos_13, value_13), _130), _130, /** @src 83:715:5265  \"contract MinimalAccountTest is Test {...\" */ _4)\n                        /// @src 83:3838:3943  \"sendPackedUserOp.generatePackedUserOp(executeCallData, helperConfig.getConfig(), address(minimalAccount))\"\n                        if iszero(_131)\n                        {\n                            /// @src 83:715:5265  \"contract MinimalAccountTest is Test {...\"\n                            let pos_38 := mload(_2)\n                            returndatacopy(pos_38, _4, returndatasize())\n                            revert(pos_38, returndatasize())\n                        }\n                        /// @src 83:3838:3943  \"sendPackedUserOp.generatePackedUserOp(executeCallData, helperConfig.getConfig(), address(minimalAccount))\"\n                        let expr_mpos_14 := _4\n                        if _131\n                        {\n                            let _132 := returndatasize()\n                            returndatacopy(_130, /** @src 83:715:5265  \"contract MinimalAccountTest is Test {...\" */ _4, /** @src 83:3838:3943  \"sendPackedUserOp.generatePackedUserOp(executeCallData, helperConfig.getConfig(), address(minimalAccount))\" */ _132)\n                            finalize_allocation(_130, _132)\n                            expr_mpos_14 := abi_decode_struct_PackedUserOperation_fromMemory(_130, add(_130, _132))\n                        }\n                        /// @src 83:715:5265  \"contract MinimalAccountTest is Test {...\"\n                        let cleaned_19 := and(/** @src 15:1590:1604  \"Vm(VM_ADDRESS)\" */ sload(/** @src 83:3492:3572  \"abi.encodeWithSelector(ERC20Mock.mint.selector, address(minimalAccount), AMOUNT)\" */ _124), /** @src 83:715:5265  \"contract MinimalAccountTest is Test {...\" */ _121)\n                        /// @src 83:3981:4032  \"IEntryPoint(entryPoint).getUserOpHash(packedUserOp)\"\n                        let _133 := /** @src 83:715:5265  \"contract MinimalAccountTest is Test {...\" */ mload(_2)\n                        /// @src 83:3981:4032  \"IEntryPoint(entryPoint).getUserOpHash(packedUserOp)\"\n                        mstore(_133, /** @src 83:715:5265  \"contract MinimalAccountTest is Test {...\" */ shl(226, 0x08b37793))\n                        mstore(/** @src 83:3981:4032  \"IEntryPoint(entryPoint).getUserOpHash(packedUserOp)\" */ add(_133, /** @src 83:715:5265  \"contract MinimalAccountTest is Test {...\" */ _3), /** @src 83:3492:3572  \"abi.encodeWithSelector(ERC20Mock.mint.selector, address(minimalAccount), AMOUNT)\" */ _123)\n                        /// @src 83:3981:4032  \"IEntryPoint(entryPoint).getUserOpHash(packedUserOp)\"\n                        let _134 := staticcall(gas(), cleaned_19, _133, sub(/** @src 83:715:5265  \"contract MinimalAccountTest is Test {...\" */ abi_encode_struct_PackedUserOperation(expr_mpos_14, add(/** @src 83:3981:4032  \"IEntryPoint(entryPoint).getUserOpHash(packedUserOp)\" */ _133, /** @src 83:3492:3572  \"abi.encodeWithSelector(ERC20Mock.mint.selector, address(minimalAccount), AMOUNT)\" */ _124)), /** @src 83:3981:4032  \"IEntryPoint(entryPoint).getUserOpHash(packedUserOp)\" */ _133), _133, /** @src 83:3492:3572  \"abi.encodeWithSelector(ERC20Mock.mint.selector, address(minimalAccount), AMOUNT)\" */ _123)\n                        /// @src 83:3981:4032  \"IEntryPoint(entryPoint).getUserOpHash(packedUserOp)\"\n                        if iszero(_134)\n                        {\n                            /// @src 83:715:5265  \"contract MinimalAccountTest is Test {...\"\n                            let pos_39 := mload(_2)\n                            returndatacopy(pos_39, _4, returndatasize())\n                            revert(pos_39, returndatasize())\n                        }\n                        /// @src 83:3981:4032  \"IEntryPoint(entryPoint).getUserOpHash(packedUserOp)\"\n                        let expr_6 := _4\n                        if _134\n                        {\n                            let _135 := /** @src 83:3492:3572  \"abi.encodeWithSelector(ERC20Mock.mint.selector, address(minimalAccount), AMOUNT)\" */ _123\n                            /// @src 83:3981:4032  \"IEntryPoint(entryPoint).getUserOpHash(packedUserOp)\"\n                            if gt(/** @src 83:3492:3572  \"abi.encodeWithSelector(ERC20Mock.mint.selector, address(minimalAccount), AMOUNT)\" */ _123, /** @src 83:3981:4032  \"IEntryPoint(entryPoint).getUserOpHash(packedUserOp)\" */ returndatasize()) { _135 := returndatasize() }\n                            finalize_allocation(_133, _135)\n                            /// @src 15:1590:1604  \"Vm(VM_ADDRESS)\"\n                            if slt(sub(/** @src 83:3981:4032  \"IEntryPoint(entryPoint).getUserOpHash(packedUserOp)\" */ add(_133, _135), /** @src 15:1590:1604  \"Vm(VM_ADDRESS)\" */ _133), /** @src 83:3492:3572  \"abi.encodeWithSelector(ERC20Mock.mint.selector, address(minimalAccount), AMOUNT)\" */ _123)\n                            /// @src 15:1590:1604  \"Vm(VM_ADDRESS)\"\n                            {\n                                /// @src 83:715:5265  \"contract MinimalAccountTest is Test {...\"\n                                revert(0, 0)\n                            }\n                            /// @src 83:3981:4032  \"IEntryPoint(entryPoint).getUserOpHash(packedUserOp)\"\n                            expr_6 := /** @src 83:1097:1101  \"1e18\" */ mload(_133)\n                        }\n                        /// @src 83:715:5265  \"contract MinimalAccountTest is Test {...\"\n                        let _136 := 0x7109709ecfa91a80626ff3989d68f67f5b1dd12d\n                        /// @src 83:4086:4120  \"vm.startPrank(address(entryPoint))\"\n                        if iszero(extcodesize(/** @src 83:715:5265  \"contract MinimalAccountTest is Test {...\" */ _136))\n                        /// @src 83:4086:4120  \"vm.startPrank(address(entryPoint))\"\n                        {\n                            /// @src 83:715:5265  \"contract MinimalAccountTest is Test {...\"\n                            revert(_4, _4)\n                        }\n                        /// @src 83:4086:4120  \"vm.startPrank(address(entryPoint))\"\n                        let _137 := /** @src 83:715:5265  \"contract MinimalAccountTest is Test {...\" */ mload(_2)\n                        /// @src 83:4086:4120  \"vm.startPrank(address(entryPoint))\"\n                        mstore(_137, /** @src 83:715:5265  \"contract MinimalAccountTest is Test {...\" */ shl(225, 0x03223eab))\n                        mstore(/** @src 83:4086:4120  \"vm.startPrank(address(entryPoint))\" */ add(_137, /** @src 83:715:5265  \"contract MinimalAccountTest is Test {...\" */ _3), cleaned_19)\n                        /// @src 83:4086:4120  \"vm.startPrank(address(entryPoint))\"\n                        let _138 := call(gas(), /** @src 83:715:5265  \"contract MinimalAccountTest is Test {...\" */ _136, _4, /** @src 83:4086:4120  \"vm.startPrank(address(entryPoint))\" */ _137, /** @src 83:3492:3572  \"abi.encodeWithSelector(ERC20Mock.mint.selector, address(minimalAccount), AMOUNT)\" */ _124, /** @src 83:4086:4120  \"vm.startPrank(address(entryPoint))\" */ _137, /** @src 83:715:5265  \"contract MinimalAccountTest is Test {...\" */ _4)\n                        /// @src 83:4086:4120  \"vm.startPrank(address(entryPoint))\"\n                        if iszero(_138)\n                        {\n                            /// @src 83:715:5265  \"contract MinimalAccountTest is Test {...\"\n                            let pos_40 := mload(_2)\n                            returndatacopy(pos_40, _4, returndatasize())\n                            revert(pos_40, returndatasize())\n                        }\n                        /// @src 83:4086:4120  \"vm.startPrank(address(entryPoint))\"\n                        if _138\n                        {\n                            finalize_allocation_21042(_137)\n                            /// @src 83:715:5265  \"contract MinimalAccountTest is Test {...\"\n                            if _4 { revert(_4, _4) }\n                        }\n                        let value_14 := and(shr(8, sload(/** @src 83:3548:3562  \"minimalAccount\" */ 0x1f)), /** @src 83:715:5265  \"contract MinimalAccountTest is Test {...\" */ _121)\n                        /// @src 83:4155:4237  \"minimalAccount.validateUserOp(packedUserOp, userOperationHash, missingAccountFund)\"\n                        let _139 := /** @src 83:715:5265  \"contract MinimalAccountTest is Test {...\" */ mload(_2)\n                        /// @src 83:4155:4237  \"minimalAccount.validateUserOp(packedUserOp, userOperationHash, missingAccountFund)\"\n                        mstore(_139, /** @src 83:715:5265  \"contract MinimalAccountTest is Test {...\" */ shl(226, 0x06608bdf))\n                        mstore(/** @src 83:4155:4237  \"minimalAccount.validateUserOp(packedUserOp, userOperationHash, missingAccountFund)\" */ add(_139, /** @src 83:715:5265  \"contract MinimalAccountTest is Test {...\" */ _3), /** @src 83:1097:1101  \"1e18\" */ 96)\n                        /// @src 83:715:5265  \"contract MinimalAccountTest is Test {...\"\n                        let tail_9 := abi_encode_struct_PackedUserOperation(expr_mpos_14, add(/** @src 83:4155:4237  \"minimalAccount.validateUserOp(packedUserOp, userOperationHash, missingAccountFund)\" */ _139, /** @src 83:1097:1101  \"1e18\" */ 100))\n                        mstore(/** @src 83:715:5265  \"contract MinimalAccountTest is Test {...\" */ add(/** @src 83:4155:4237  \"minimalAccount.validateUserOp(packedUserOp, userOperationHash, missingAccountFund)\" */ _139, /** @src 83:3492:3572  \"abi.encodeWithSelector(ERC20Mock.mint.selector, address(minimalAccount), AMOUNT)\" */ _124), /** @src 83:1097:1101  \"1e18\" */ expr_6)\n                        mstore(/** @src 83:715:5265  \"contract MinimalAccountTest is Test {...\" */ add(/** @src 83:4155:4237  \"minimalAccount.validateUserOp(packedUserOp, userOperationHash, missingAccountFund)\" */ _139, /** @src 83:1097:1101  \"1e18\" */ 68), _125)\n                        /// @src 83:4155:4237  \"minimalAccount.validateUserOp(packedUserOp, userOperationHash, missingAccountFund)\"\n                        let _140 := call(gas(), value_14, /** @src 83:715:5265  \"contract MinimalAccountTest is Test {...\" */ _4, /** @src 83:4155:4237  \"minimalAccount.validateUserOp(packedUserOp, userOperationHash, missingAccountFund)\" */ _139, sub(tail_9, _139), _139, /** @src 83:3492:3572  \"abi.encodeWithSelector(ERC20Mock.mint.selector, address(minimalAccount), AMOUNT)\" */ _123)\n                        /// @src 83:4155:4237  \"minimalAccount.validateUserOp(packedUserOp, userOperationHash, missingAccountFund)\"\n                        if iszero(_140)\n                        {\n                            /// @src 83:715:5265  \"contract MinimalAccountTest is Test {...\"\n                            let pos_41 := mload(_2)\n                            returndatacopy(pos_41, _4, returndatasize())\n                            revert(pos_41, returndatasize())\n                        }\n                        /// @src 83:4155:4237  \"minimalAccount.validateUserOp(packedUserOp, userOperationHash, missingAccountFund)\"\n                        let expr_7 := _4\n                        if _140\n                        {\n                            let _141 := /** @src 83:3492:3572  \"abi.encodeWithSelector(ERC20Mock.mint.selector, address(minimalAccount), AMOUNT)\" */ _123\n                            /// @src 83:4155:4237  \"minimalAccount.validateUserOp(packedUserOp, userOperationHash, missingAccountFund)\"\n                            if gt(/** @src 83:3492:3572  \"abi.encodeWithSelector(ERC20Mock.mint.selector, address(minimalAccount), AMOUNT)\" */ _123, /** @src 83:4155:4237  \"minimalAccount.validateUserOp(packedUserOp, userOperationHash, missingAccountFund)\" */ returndatasize()) { _141 := returndatasize() }\n                            finalize_allocation(_139, _141)\n                            /// @src 15:1590:1604  \"Vm(VM_ADDRESS)\"\n                            if slt(sub(/** @src 83:4155:4237  \"minimalAccount.validateUserOp(packedUserOp, userOperationHash, missingAccountFund)\" */ add(_139, _141), /** @src 15:1590:1604  \"Vm(VM_ADDRESS)\" */ _139), /** @src 83:3492:3572  \"abi.encodeWithSelector(ERC20Mock.mint.selector, address(minimalAccount), AMOUNT)\" */ _123)\n                            /// @src 15:1590:1604  \"Vm(VM_ADDRESS)\"\n                            {\n                                /// @src 83:715:5265  \"contract MinimalAccountTest is Test {...\"\n                                revert(0, 0)\n                            }\n                            /// @src 83:4155:4237  \"minimalAccount.validateUserOp(packedUserOp, userOperationHash, missingAccountFund)\"\n                            expr_7 := /** @src 83:1097:1101  \"1e18\" */ mload(_139)\n                        }\n                        /// @src 83:4247:4274  \"assertEq(validationData, 0)\"\n                        fun_assertEq(expr_7)\n                        /// @src 83:4284:4298  \"vm.stopPrank()\"\n                        if iszero(extcodesize(/** @src 83:715:5265  \"contract MinimalAccountTest is Test {...\" */ _136))\n                        /// @src 83:4284:4298  \"vm.stopPrank()\"\n                        {\n                            /// @src 83:715:5265  \"contract MinimalAccountTest is Test {...\"\n                            revert(_4, _4)\n                        }\n                        /// @src 83:4284:4298  \"vm.stopPrank()\"\n                        let _142 := /** @src 83:715:5265  \"contract MinimalAccountTest is Test {...\" */ mload(_2)\n                        /// @src 83:4284:4298  \"vm.stopPrank()\"\n                        mstore(_142, /** @src 83:715:5265  \"contract MinimalAccountTest is Test {...\" */ shl(224, 0x90c5013b))\n                        /// @src 83:4284:4298  \"vm.stopPrank()\"\n                        let _143 := call(gas(), /** @src 83:715:5265  \"contract MinimalAccountTest is Test {...\" */ _136, _4, /** @src 83:4284:4298  \"vm.stopPrank()\" */ _142, /** @src 83:715:5265  \"contract MinimalAccountTest is Test {...\" */ _3, /** @src 83:4284:4298  \"vm.stopPrank()\" */ _142, /** @src 83:715:5265  \"contract MinimalAccountTest is Test {...\" */ _4)\n                        /// @src 83:4284:4298  \"vm.stopPrank()\"\n                        if iszero(_143)\n                        {\n                            /// @src 83:715:5265  \"contract MinimalAccountTest is Test {...\"\n                            let pos_42 := mload(_2)\n                            returndatacopy(pos_42, _4, returndatasize())\n                            revert(pos_42, returndatasize())\n                        }\n                        /// @src 83:4284:4298  \"vm.stopPrank()\"\n                        if _143\n                        {\n                            finalize_allocation_21042(_142)\n                            /// @src 83:715:5265  \"contract MinimalAccountTest is Test {...\"\n                            if _4 { revert(_4, _4) }\n                        }\n                        return(_4, _4)\n                    }\n                    case 0xccbfef14 {\n                        if callvalue() { revert(_4, _4) }\n                        if slt(add(calldatasize(), not(3)), _4) { revert(_4, _4) }\n                        let value_15 := and(sload(/** @src 83:945:985  \"SendPackedUserOp public sendPackedUserOp\" */ 35), /** @src 83:715:5265  \"contract MinimalAccountTest is Test {...\" */ sub(shl(160, /** @src 83:1194:1213  \"new DeployMinimal()\" */ 1), 1))\n                        /// @src 83:715:5265  \"contract MinimalAccountTest is Test {...\"\n                        let memPos_14 := mload(_2)\n                        mstore(memPos_14, value_15)\n                        return(memPos_14, 32)\n                    }\n                    case 0xe20c9f71 {\n                        if callvalue() { revert(_4, _4) }\n                        if slt(add(calldatasize(), not(3)), _4) { revert(_4, _4) }\n                        let pos_43 := mload(_2)\n                        let pos_44 := pos_43\n                        let length_14 := sload(/** @src 21:2723:2741  \"_excludedContracts\" */ 0x15)\n                        /// @src 83:715:5265  \"contract MinimalAccountTest is Test {...\"\n                        mstore(pos_43, length_14)\n                        let _144 := 0x20\n                        pos_43 := add(pos_43, 0x20)\n                        mstore(_4, /** @src 21:2723:2741  \"_excludedContracts\" */ 0x15)\n                        /// @src 83:715:5265  \"contract MinimalAccountTest is Test {...\"\n                        let srcPtr_7 := 38878206584692966203415385907871375197469080758325516314230789535345649042549\n                        let i_15 := _4\n                        for { } lt(i_15, length_14) { i_15 := add(i_15, 1) }\n                        {\n                            mstore(pos_43, and(/** @src 15:1590:1604  \"Vm(VM_ADDRESS)\" */ sload(/** @src 83:715:5265  \"contract MinimalAccountTest is Test {...\" */ srcPtr_7), sub(shl(160, /** @src 83:1194:1213  \"new DeployMinimal()\" */ 1), 1)))\n                            /// @src 83:715:5265  \"contract MinimalAccountTest is Test {...\"\n                            pos_43 := add(pos_43, _144)\n                            srcPtr_7 := add(srcPtr_7, 1)\n                        }\n                        finalize_allocation(pos_44, sub(pos_43, pos_44))\n                        let memPos_15 := mload(_2)\n                        return(memPos_15, sub(abi_encode_array_address_dyn(memPos_15, pos_44), memPos_15))\n                    }\n                    case 0xfa7626d4 {\n                        if callvalue() { revert(_4, _4) }\n                        if slt(add(calldatasize(), not(3)), _4) { revert(_4, _4) }\n                        let value_16 := and(sload(/** @src 28:1016:1042  \"bool public IS_TEST = true\" */ 31), /** @src 83:715:5265  \"contract MinimalAccountTest is Test {...\" */ 0xff)\n                        let memPos_16 := mload(_2)\n                        mstore(memPos_16, iszero(iszero(value_16)))\n                        return(memPos_16, 32)\n                    }\n                }\n                revert(0, 0)\n            }\n            function abi_encode_array_address_dyn(headStart, value0) -> tail\n            {\n                let _1 := 32\n                let tail_1 := add(headStart, 32)\n                mstore(headStart, 32)\n                let pos := tail_1\n                let length := mload(value0)\n                mstore(tail_1, length)\n                pos := add(headStart, 64)\n                let srcPtr := add(value0, 32)\n                let i := 0\n                for { } lt(i, length) { i := add(i, 1) }\n                {\n                    mstore(pos, and(mload(srcPtr), sub(shl(160, /** @src 83:1194:1213  \"new DeployMinimal()\" */ 1), 1)))\n                    /// @src 83:715:5265  \"contract MinimalAccountTest is Test {...\"\n                    pos := add(pos, _1)\n                    srcPtr := add(srcPtr, _1)\n                }\n                tail := pos\n            }\n            function copy_memory_to_memory_with_cleanup(src, dst, length)\n            {\n                let i := 0\n                for { } lt(i, length) { i := add(i, 32) }\n                {\n                    mstore(add(dst, i), mload(add(src, i)))\n                }\n                mstore(add(dst, length), 0)\n            }\n            function abi_encode_string(value, pos) -> end\n            {\n                let length := mload(value)\n                mstore(pos, length)\n                copy_memory_to_memory_with_cleanup(add(value, 0x20), add(pos, 0x20), length)\n                end := add(add(pos, and(add(length, 31), /** @src 83:4468:4548  \"abi.encodeWithSelector(ERC20Mock.mint.selector, address(minimalAccount), AMOUNT)\" */ not(31))), /** @src 83:715:5265  \"contract MinimalAccountTest is Test {...\" */ 0x20)\n            }\n            function abi_encode_array_bytes4_dyn(value, pos) -> end\n            {\n                let length := mload(value)\n                mstore(pos, length)\n                let _1 := 0x20\n                pos := add(pos, 0x20)\n                let srcPtr := add(value, 0x20)\n                let i := /** @src -1:-1:-1 */ 0\n                /// @src 83:715:5265  \"contract MinimalAccountTest is Test {...\"\n                for { } lt(i, length) { i := add(i, 1) }\n                {\n                    mstore(pos, and(mload(srcPtr), shl(224, 0xffffffff)))\n                    pos := add(pos, _1)\n                    srcPtr := add(srcPtr, _1)\n                }\n                end := pos\n            }\n            function abi_encode_array_string_dyn(headStart, value0) -> tail\n            {\n                let _1 := 32\n                let tail_1 := add(headStart, 32)\n                mstore(headStart, 32)\n                let pos := tail_1\n                let length := mload(value0)\n                mstore(tail_1, length)\n                pos := add(headStart, 64)\n                let tail_2 := add(add(headStart, shl(5, length)), 64)\n                let srcPtr := add(value0, 32)\n                let i := 0\n                for { } lt(i, length) { i := add(i, 1) }\n                {\n                    mstore(pos, add(sub(tail_2, headStart), not(63)))\n                    tail_2 := abi_encode_string(mload(srcPtr), tail_2)\n                    srcPtr := add(srcPtr, _1)\n                    pos := add(pos, _1)\n                }\n                tail := tail_2\n            }\n            function abi_encode_array_struct_FuzzSelector_dyn(headStart, value0) -> tail\n            {\n                let _1 := 32\n                let tail_1 := add(headStart, _1)\n                mstore(headStart, _1)\n                let pos := tail_1\n                let length := mload(value0)\n                mstore(tail_1, length)\n                let _2 := 64\n                pos := add(headStart, 64)\n                let tail_2 := add(add(headStart, shl(5, length)), 64)\n                let srcPtr := add(value0, _1)\n                let i := 0\n                for { } lt(i, length) { i := add(i, 1) }\n                {\n                    mstore(pos, add(sub(tail_2, headStart), not(63)))\n                    let _3 := mload(srcPtr)\n                    mstore(tail_2, and(mload(_3), sub(shl(160, /** @src 83:1194:1213  \"new DeployMinimal()\" */ 1), 1)))\n                    /// @src 83:715:5265  \"contract MinimalAccountTest is Test {...\"\n                    let memberValue0 := mload(add(_3, _1))\n                    mstore(add(tail_2, _1), _2)\n                    tail_2 := abi_encode_array_bytes4_dyn(memberValue0, add(tail_2, _2))\n                    srcPtr := add(srcPtr, _1)\n                    pos := add(pos, _1)\n                }\n                tail := tail_2\n            }\n            function finalize_allocation_21042(memPtr)\n            {\n                if gt(memPtr, 0xffffffffffffffff)\n                {\n                    mstore(0, shl(224, 0x4e487b71))\n                    mstore(4, 0x41)\n                    revert(0, 0x24)\n                }\n                mstore(64, memPtr)\n            }\n            function finalize_allocation_21045(memPtr)\n            {\n                let newFreePtr := add(memPtr, /** @src 15:1590:1604  \"Vm(VM_ADDRESS)\" */ 288)\n                /// @src 83:715:5265  \"contract MinimalAccountTest is Test {...\"\n                if or(gt(newFreePtr, 0xffffffffffffffff), lt(newFreePtr, memPtr))\n                {\n                    mstore(0, shl(224, 0x4e487b71))\n                    mstore(4, 0x41)\n                    revert(0, 0x24)\n                }\n                mstore(64, newFreePtr)\n            }\n            function finalize_allocation_21058(memPtr)\n            {\n                let newFreePtr := add(memPtr, 64)\n                if or(gt(newFreePtr, 0xffffffffffffffff), lt(newFreePtr, memPtr))\n                {\n                    mstore(0, shl(224, 0x4e487b71))\n                    mstore(4, 0x41)\n                    revert(0, 0x24)\n                }\n                mstore(64, newFreePtr)\n            }\n            function finalize_allocation_30149(memPtr)\n            {\n                let newFreePtr := add(memPtr, 128)\n                if or(gt(newFreePtr, 0xffffffffffffffff), lt(newFreePtr, memPtr))\n                {\n                    mstore(0, shl(224, 0x4e487b71))\n                    mstore(4, 0x41)\n                    revert(0, 0x24)\n                }\n                mstore(64, newFreePtr)\n            }\n            function finalize_allocation(memPtr, size)\n            {\n                let newFreePtr := add(memPtr, and(add(size, 31), /** @src 83:4468:4548  \"abi.encodeWithSelector(ERC20Mock.mint.selector, address(minimalAccount), AMOUNT)\" */ not(31)))\n                /// @src 83:715:5265  \"contract MinimalAccountTest is Test {...\"\n                if or(gt(newFreePtr, 0xffffffffffffffff), lt(newFreePtr, memPtr))\n                {\n                    mstore(0, shl(224, 0x4e487b71))\n                    mstore(4, 0x41)\n                    revert(0, 0x24)\n                }\n                mstore(64, newFreePtr)\n            }\n            function abi_decode_address_fromMemory(offset) -> value\n            {\n                value := mload(offset)\n                if iszero(eq(value, and(value, sub(shl(160, /** @src 83:1194:1213  \"new DeployMinimal()\" */ 1), 1))))\n                /// @src 83:715:5265  \"contract MinimalAccountTest is Test {...\"\n                { revert(0, 0) }\n            }\n            function abi_decode_struct_NetworkConfig_fromMemory(headStart, dataEnd) -> value0\n            {\n                if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n                let memPtr := mload(64)\n                finalize_allocation_21058(memPtr)\n                mstore(memPtr, abi_decode_address_fromMemory(headStart))\n                mstore(add(memPtr, 32), abi_decode_address_fromMemory(add(headStart, 32)))\n                value0 := memPtr\n            }\n            /// @src 83:1097:1101  \"1e18\"\n            function abi_decode_bytes_fromMemory(offset, end) -> array\n            {\n                if iszero(slt(add(offset, 0x1f), end))\n                {\n                    /// @src 83:715:5265  \"contract MinimalAccountTest is Test {...\"\n                    revert(0, 0)\n                }\n                /// @src 83:1097:1101  \"1e18\"\n                let _1 := mload(offset)\n                if gt(_1, 0xffffffffffffffff)\n                {\n                    /// @src 83:715:5265  \"contract MinimalAccountTest is Test {...\"\n                    mstore(/** @src -1:-1:-1 */ 0, /** @src 83:715:5265  \"contract MinimalAccountTest is Test {...\" */ shl(224, 0x4e487b71))\n                    mstore(4, 0x41)\n                    revert(/** @src -1:-1:-1 */ 0, /** @src 83:715:5265  \"contract MinimalAccountTest is Test {...\" */ 0x24)\n                }\n                let memPtr := mload(64)\n                finalize_allocation(memPtr, /** @src 83:1097:1101  \"1e18\" */ add(/** @src 83:715:5265  \"contract MinimalAccountTest is Test {...\" */ and(add(/** @src 83:1097:1101  \"1e18\" */ _1, 0x1f), /** @src 83:4468:4548  \"abi.encodeWithSelector(ERC20Mock.mint.selector, address(minimalAccount), AMOUNT)\" */ not(31)), /** @src 83:1097:1101  \"1e18\" */ 0x20))\n                mstore(memPtr, _1)\n                if gt(add(add(offset, _1), 0x20), end)\n                {\n                    /// @src 83:715:5265  \"contract MinimalAccountTest is Test {...\"\n                    revert(/** @src -1:-1:-1 */ 0, 0)\n                }\n                /// @src 83:1097:1101  \"1e18\"\n                copy_memory_to_memory_with_cleanup(add(offset, 0x20), add(memPtr, 0x20), _1)\n                array := memPtr\n            }\n            function abi_decode_struct_PackedUserOperation_fromMemory(headStart, dataEnd) -> value0\n            {\n                if slt(sub(dataEnd, headStart), 32)\n                {\n                    /// @src 83:715:5265  \"contract MinimalAccountTest is Test {...\"\n                    revert(0, 0)\n                }\n                /// @src 83:1097:1101  \"1e18\"\n                let offset := mload(headStart)\n                let _1 := 0xffffffffffffffff\n                if gt(offset, _1)\n                {\n                    /// @src 83:715:5265  \"contract MinimalAccountTest is Test {...\"\n                    revert(0, 0)\n                }\n                /// @src 83:1097:1101  \"1e18\"\n                let _2 := add(headStart, offset)\n                if slt(sub(dataEnd, _2), 0x0120)\n                {\n                    /// @src 83:715:5265  \"contract MinimalAccountTest is Test {...\"\n                    revert(/** @src -1:-1:-1 */ 0, 0)\n                }\n                /// @src 83:715:5265  \"contract MinimalAccountTest is Test {...\"\n                let memPtr := mload(64)\n                finalize_allocation_21045(memPtr)\n                /// @src 83:1097:1101  \"1e18\"\n                mstore(memPtr, /** @src 83:715:5265  \"contract MinimalAccountTest is Test {...\" */ abi_decode_address_fromMemory(/** @src 83:1097:1101  \"1e18\" */ _2))\n                mstore(add(memPtr, 32), mload(add(_2, 32)))\n                let offset_1 := mload(add(_2, /** @src 83:715:5265  \"contract MinimalAccountTest is Test {...\" */ 64))\n                /// @src 83:1097:1101  \"1e18\"\n                if gt(offset_1, _1)\n                {\n                    /// @src 83:715:5265  \"contract MinimalAccountTest is Test {...\"\n                    revert(/** @src -1:-1:-1 */ 0, 0)\n                }\n                /// @src 83:1097:1101  \"1e18\"\n                mstore(add(memPtr, /** @src 83:715:5265  \"contract MinimalAccountTest is Test {...\" */ 64), /** @src 83:1097:1101  \"1e18\" */ abi_decode_bytes_fromMemory(add(_2, offset_1), dataEnd))\n                let offset_2 := mload(add(_2, 96))\n                if gt(offset_2, _1)\n                {\n                    /// @src 83:715:5265  \"contract MinimalAccountTest is Test {...\"\n                    revert(/** @src -1:-1:-1 */ 0, 0)\n                }\n                /// @src 83:1097:1101  \"1e18\"\n                mstore(add(memPtr, 96), abi_decode_bytes_fromMemory(add(_2, offset_2), dataEnd))\n                mstore(add(memPtr, 128), mload(add(_2, 128)))\n                mstore(add(memPtr, 160), mload(add(_2, 160)))\n                mstore(add(memPtr, 192), mload(add(_2, 192)))\n                let offset_3 := mload(add(_2, 224))\n                if gt(offset_3, _1)\n                {\n                    /// @src 83:715:5265  \"contract MinimalAccountTest is Test {...\"\n                    revert(/** @src -1:-1:-1 */ 0, 0)\n                }\n                /// @src 83:1097:1101  \"1e18\"\n                mstore(add(memPtr, 224), abi_decode_bytes_fromMemory(add(_2, offset_3), dataEnd))\n                let _3 := 256\n                let offset_4 := mload(add(_2, _3))\n                if gt(offset_4, _1)\n                {\n                    /// @src 83:715:5265  \"contract MinimalAccountTest is Test {...\"\n                    revert(/** @src -1:-1:-1 */ 0, 0)\n                }\n                /// @src 83:1097:1101  \"1e18\"\n                mstore(add(memPtr, _3), abi_decode_bytes_fromMemory(add(_2, offset_4), dataEnd))\n                value0 := memPtr\n            }\n            function abi_encode_bytes_struct_NetworkConfig_address(headStart, value0, value1, value2) -> tail\n            {\n                mstore(headStart, 128)\n                tail := abi_encode_string(value0, add(headStart, 128))\n                /// @src 83:715:5265  \"contract MinimalAccountTest is Test {...\"\n                let _1 := sub(shl(160, /** @src 83:1194:1213  \"new DeployMinimal()\" */ 1), 1)\n                /// @src 83:715:5265  \"contract MinimalAccountTest is Test {...\"\n                mstore(/** @src 83:1097:1101  \"1e18\" */ add(headStart, 32), /** @src 83:715:5265  \"contract MinimalAccountTest is Test {...\" */ and(/** @src 83:1097:1101  \"1e18\" */ mload(value1), /** @src 83:715:5265  \"contract MinimalAccountTest is Test {...\" */ _1))\n                mstore(/** @src 83:1097:1101  \"1e18\" */ add(headStart, 64), /** @src 83:715:5265  \"contract MinimalAccountTest is Test {...\" */ and(/** @src 83:1097:1101  \"1e18\" */ mload(add(value1, 32)), /** @src 83:715:5265  \"contract MinimalAccountTest is Test {...\" */ _1))\n                mstore(/** @src 83:1097:1101  \"1e18\" */ add(headStart, 96), /** @src 83:715:5265  \"contract MinimalAccountTest is Test {...\" */ and(value2, _1))\n            }\n            /// @src 15:1590:1604  \"Vm(VM_ADDRESS)\"\n            function array_allocation_size_array_struct_PackedUserOperation_dyn(length) -> size\n            {\n                if gt(length, 0xffffffffffffffff)\n                {\n                    /// @src 83:715:5265  \"contract MinimalAccountTest is Test {...\"\n                    mstore(0, shl(224, 0x4e487b71))\n                    mstore(4, 0x41)\n                    revert(0, 0x24)\n                }\n                /// @src 15:1590:1604  \"Vm(VM_ADDRESS)\"\n                size := add(shl(5, length), 0x20)\n            }\n            function memory_array_index_access_struct_PackedUserOperation_dyn(baseRef) -> addr\n            {\n                if iszero(/** @src 83:715:5265  \"contract MinimalAccountTest is Test {...\" */ mload(/** @src 15:1590:1604  \"Vm(VM_ADDRESS)\" */ baseRef))\n                {\n                    mstore(/** @src 83:715:5265  \"contract MinimalAccountTest is Test {...\" */ 0, shl(224, 0x4e487b71))\n                    /// @src 15:1590:1604  \"Vm(VM_ADDRESS)\"\n                    mstore(4, 0x32)\n                    revert(/** @src 83:715:5265  \"contract MinimalAccountTest is Test {...\" */ 0, /** @src 15:1590:1604  \"Vm(VM_ADDRESS)\" */ 0x24)\n                }\n                addr := add(baseRef, 32)\n            }\n            function abi_encode_struct_PackedUserOperation(value, pos) -> end\n            {\n                let _1 := 0x0120\n                /// @src 83:715:5265  \"contract MinimalAccountTest is Test {...\"\n                mstore(pos, and(/** @src 15:1590:1604  \"Vm(VM_ADDRESS)\" */ mload(value), /** @src 83:715:5265  \"contract MinimalAccountTest is Test {...\" */ sub(shl(160, /** @src 83:1194:1213  \"new DeployMinimal()\" */ 1), 1)))\n                /// @src 83:1097:1101  \"1e18\"\n                mstore(/** @src 15:1590:1604  \"Vm(VM_ADDRESS)\" */ add(pos, 0x20), mload(add(value, 0x20)))\n                let memberValue0 := mload(add(value, 0x40))\n                mstore(add(pos, 0x40), _1)\n                let tail := abi_encode_string(memberValue0, add(pos, _1))\n                let memberValue0_1 := mload(add(value, 0x60))\n                mstore(add(pos, 0x60), sub(tail, pos))\n                let tail_1 := abi_encode_string(memberValue0_1, tail)\n                /// @src 83:1097:1101  \"1e18\"\n                mstore(/** @src 15:1590:1604  \"Vm(VM_ADDRESS)\" */ add(pos, 0x80), mload(add(value, 0x80)))\n                /// @src 83:1097:1101  \"1e18\"\n                mstore(/** @src 15:1590:1604  \"Vm(VM_ADDRESS)\" */ add(pos, 0xa0), mload(add(value, 0xa0)))\n                /// @src 83:1097:1101  \"1e18\"\n                mstore(/** @src 15:1590:1604  \"Vm(VM_ADDRESS)\" */ add(pos, 0xc0), mload(add(value, 0xc0)))\n                let memberValue0_2 := mload(add(value, 0xe0))\n                mstore(add(pos, 0xe0), sub(tail_1, pos))\n                let tail_2 := abi_encode_string(memberValue0_2, tail_1)\n                let _2 := 0x0100\n                let memberValue0_3 := mload(add(value, _2))\n                mstore(add(pos, _2), sub(tail_2, pos))\n                end := abi_encode_string(memberValue0_3, tail_2)\n            }\n            /// @src 83:715:5265  \"contract MinimalAccountTest is Test {...\"\n            function copy_array_from_storage_to_memory_string(slot) -> memPtr\n            {\n                memPtr := mload(64)\n                let ret := /** @src -1:-1:-1 */ 0\n                /// @src 83:715:5265  \"contract MinimalAccountTest is Test {...\"\n                let slotValue := sload(slot)\n                let length := /** @src -1:-1:-1 */ ret\n                /// @src 83:715:5265  \"contract MinimalAccountTest is Test {...\"\n                let _1 := 1\n                length := shr(1, slotValue)\n                let outOfPlaceEncoding := and(slotValue, 1)\n                if iszero(outOfPlaceEncoding) { length := and(length, 0x7f) }\n                let _2 := 32\n                if eq(outOfPlaceEncoding, lt(length, _2))\n                {\n                    mstore(/** @src -1:-1:-1 */ ret, /** @src 83:715:5265  \"contract MinimalAccountTest is Test {...\" */ shl(224, 0x4e487b71))\n                    mstore(4, 0x22)\n                    revert(/** @src -1:-1:-1 */ ret, /** @src 83:715:5265  \"contract MinimalAccountTest is Test {...\" */ 0x24)\n                }\n                mstore(memPtr, length)\n                switch outOfPlaceEncoding\n                case 0 {\n                    mstore(add(memPtr, _2), and(slotValue, not(255)))\n                    ret := add(add(memPtr, shl(5, iszero(iszero(length)))), _2)\n                }\n                case 1 {\n                    mstore(/** @src -1:-1:-1 */ 0, /** @src 83:715:5265  \"contract MinimalAccountTest is Test {...\" */ slot)\n                    let dataPos := keccak256(/** @src -1:-1:-1 */ 0, /** @src 83:715:5265  \"contract MinimalAccountTest is Test {...\" */ _2)\n                    let i := /** @src -1:-1:-1 */ 0\n                    /// @src 83:715:5265  \"contract MinimalAccountTest is Test {...\"\n                    for { } lt(i, length) { i := add(i, _2) }\n                    {\n                        mstore(add(add(memPtr, i), _2), sload(dataPos))\n                        dataPos := add(dataPos, _1)\n                    }\n                    ret := add(add(memPtr, i), _2)\n                }\n                finalize_allocation(memPtr, sub(ret, memPtr))\n            }\n            function copy_array_from_storage_to_memory_array_bytes4_dyn(slot) -> memPtr\n            {\n                let _1 := 64\n                memPtr := mload(64)\n                let pos := memPtr\n                let length := sload(slot)\n                mstore(memPtr, length)\n                let _2 := 0x20\n                pos := add(memPtr, _2)\n                mstore(/** @src -1:-1:-1 */ 0, /** @src 83:715:5265  \"contract MinimalAccountTest is Test {...\" */ slot)\n                let srcPtr := keccak256(/** @src -1:-1:-1 */ 0, /** @src 83:715:5265  \"contract MinimalAccountTest is Test {...\" */ _2)\n                let itemCounter := /** @src -1:-1:-1 */ 0\n                /// @src 83:715:5265  \"contract MinimalAccountTest is Test {...\"\n                for { }\n                lt(add(itemCounter, 7), length)\n                {\n                    itemCounter := add(itemCounter, 8)\n                }\n                {\n                    let data := sload(srcPtr)\n                    let _3 := shl(224, 0xffffffff)\n                    let _4 := 224\n                    mstore(pos, and(shl(_4, data), _3))\n                    let _5 := 192\n                    mstore(add(pos, _2), and(shl(_5, data), _3))\n                    let _6 := 160\n                    mstore(add(pos, _1), and(shl(_6, data), _3))\n                    let _7 := 96\n                    let _8 := 128\n                    mstore(add(pos, _7), and(shl(_8, data), _3))\n                    mstore(add(pos, _8), and(shl(_7, data), _3))\n                    mstore(add(pos, _6), and(shl(_1, data), _3))\n                    mstore(add(pos, _5), and(shl(_2, data), _3))\n                    mstore(add(pos, _4), and(data, _3))\n                    pos := add(pos, 256)\n                    srcPtr := add(srcPtr, 1)\n                }\n                let data_1 := sload(srcPtr)\n                if lt(itemCounter, length)\n                {\n                    mstore(pos, and(shl(224, data_1), shl(224, 0xffffffff)))\n                    pos := add(pos, _2)\n                    itemCounter := add(itemCounter, 1)\n                }\n                if lt(itemCounter, length)\n                {\n                    mstore(pos, and(shl(192, data_1), shl(224, 0xffffffff)))\n                    pos := add(pos, _2)\n                    itemCounter := add(itemCounter, 1)\n                }\n                if lt(itemCounter, length)\n                {\n                    mstore(pos, and(shl(160, data_1), shl(224, 0xffffffff)))\n                    pos := add(pos, _2)\n                    itemCounter := add(itemCounter, 1)\n                }\n                if lt(itemCounter, length)\n                {\n                    mstore(pos, and(shl(128, data_1), shl(224, 0xffffffff)))\n                    pos := add(pos, _2)\n                    itemCounter := add(itemCounter, 1)\n                }\n                if lt(itemCounter, length)\n                {\n                    mstore(pos, and(shl(96, data_1), shl(224, 0xffffffff)))\n                    pos := add(pos, _2)\n                    itemCounter := add(itemCounter, 1)\n                }\n                if lt(itemCounter, length)\n                {\n                    mstore(pos, and(shl(64, data_1), shl(224, 0xffffffff)))\n                    pos := add(pos, _2)\n                    itemCounter := add(itemCounter, 1)\n                }\n                if lt(itemCounter, length)\n                {\n                    mstore(pos, and(shl(_2, data_1), shl(224, 0xffffffff)))\n                    pos := add(pos, _2)\n                    itemCounter := add(itemCounter, 1)\n                }\n                if lt(itemCounter, length)\n                {\n                    mstore(pos, and(data_1, shl(224, 0xffffffff)))\n                    pos := add(pos, _2)\n                }\n                finalize_allocation(memPtr, sub(pos, memPtr))\n            }\n            /// @ast-id 3991 @src 17:1243:1447  \"function failed() public view returns (bool) {...\"\n            function fun_failed() -> var\n            {\n                /// @src 83:715:5265  \"contract MinimalAccountTest is Test {...\"\n                let value := and(sload(/** @src 17:1302:1309  \"_failed\" */ 0x08), /** @src 83:715:5265  \"contract MinimalAccountTest is Test {...\" */ 0xff)\n                /// @src 17:1298:1441  \"if (_failed) {...\"\n                switch /** @src 83:715:5265  \"contract MinimalAccountTest is Test {...\" */ value\n                case /** @src 17:1298:1441  \"if (_failed) {...\" */ 0 {\n                    /// @src 17:1377:1416  \"vm.load(address(vm), bytes32(\\\"failed\\\"))\"\n                    let _1 := /** @src 83:715:5265  \"contract MinimalAccountTest is Test {...\" */ mload(64)\n                    /// @src 17:1377:1416  \"vm.load(address(vm), bytes32(\\\"failed\\\"))\"\n                    mstore(_1, /** @src 83:715:5265  \"contract MinimalAccountTest is Test {...\" */ shl(228, 0x0667f9d7))\n                    let _2 := 0x7109709ecfa91a80626ff3989d68f67f5b1dd12d\n                    mstore(/** @src 17:1377:1416  \"vm.load(address(vm), bytes32(\\\"failed\\\"))\" */ add(_1, 4), /** @src 83:715:5265  \"contract MinimalAccountTest is Test {...\" */ _2)\n                    /// @src 83:1097:1101  \"1e18\"\n                    mstore(/** @src 17:192:251  \"Vm(address(uint160(uint256(keccak256(\\\"hevm cheat code\\\")))))\" */ add(/** @src 17:1377:1416  \"vm.load(address(vm), bytes32(\\\"failed\\\"))\" */ _1, /** @src 17:192:251  \"Vm(address(uint160(uint256(keccak256(\\\"hevm cheat code\\\")))))\" */ 36), shl(210, 0x19985a5b1959))\n                    /// @src 17:1377:1416  \"vm.load(address(vm), bytes32(\\\"failed\\\"))\"\n                    let _3 := staticcall(gas(), /** @src 83:715:5265  \"contract MinimalAccountTest is Test {...\" */ _2, /** @src 17:1377:1416  \"vm.load(address(vm), bytes32(\\\"failed\\\"))\" */ _1, /** @src 17:192:251  \"Vm(address(uint160(uint256(keccak256(\\\"hevm cheat code\\\")))))\" */ 68, /** @src 17:1377:1416  \"vm.load(address(vm), bytes32(\\\"failed\\\"))\" */ _1, 32)\n                    if iszero(_3)\n                    {\n                        /// @src 83:715:5265  \"contract MinimalAccountTest is Test {...\"\n                        let pos := mload(64)\n                        returndatacopy(pos, /** @src -1:-1:-1 */ 0, /** @src 83:715:5265  \"contract MinimalAccountTest is Test {...\" */ returndatasize())\n                        revert(pos, returndatasize())\n                    }\n                    /// @src 17:1377:1416  \"vm.load(address(vm), bytes32(\\\"failed\\\"))\"\n                    let expr := /** @src -1:-1:-1 */ 0\n                    /// @src 17:1377:1416  \"vm.load(address(vm), bytes32(\\\"failed\\\"))\"\n                    if _3\n                    {\n                        let _4 := 32\n                        if gt(32, returndatasize()) { _4 := returndatasize() }\n                        finalize_allocation(_1, _4)\n                        /// @src 15:1590:1604  \"Vm(VM_ADDRESS)\"\n                        if slt(sub(/** @src 17:1377:1416  \"vm.load(address(vm), bytes32(\\\"failed\\\"))\" */ add(_1, _4), /** @src 15:1590:1604  \"Vm(VM_ADDRESS)\" */ _1), /** @src 17:1377:1416  \"vm.load(address(vm), bytes32(\\\"failed\\\"))\" */ 32)\n                        /// @src 15:1590:1604  \"Vm(VM_ADDRESS)\"\n                        {\n                            /// @src 83:715:5265  \"contract MinimalAccountTest is Test {...\"\n                            revert(/** @src -1:-1:-1 */ 0, 0)\n                        }\n                        /// @src 17:1377:1416  \"vm.load(address(vm), bytes32(\\\"failed\\\"))\"\n                        expr := /** @src 83:1097:1101  \"1e18\" */ mload(_1)\n                    }\n                    /// @src 17:1370:1430  \"return vm.load(address(vm), bytes32(\\\"failed\\\")) != bytes32(0)\"\n                    var := /** @src 17:1377:1430  \"vm.load(address(vm), bytes32(\\\"failed\\\")) != bytes32(0)\" */ iszero(iszero(expr))\n                    /// @src 17:1370:1430  \"return vm.load(address(vm), bytes32(\\\"failed\\\")) != bytes32(0)\"\n                    leave\n                }\n                default /// @src 17:1298:1441  \"if (_failed) {...\"\n                {\n                    /// @src 17:1325:1339  \"return _failed\"\n                    var := value\n                    leave\n                }\n            }\n            /// @ast-id 4121 @src 17:2270:2380  \"function assertEq(uint256 left, uint256 right) internal pure virtual {...\"\n            function fun_assertEq_21051(var_left)\n            {\n                /// @src 83:715:5265  \"contract MinimalAccountTest is Test {...\"\n                let _1 := 0x7109709ecfa91a80626ff3989d68f67f5b1dd12d\n                /// @src 17:2349:2373  \"vm.assertEq(left, right)\"\n                if iszero(extcodesize(/** @src 83:715:5265  \"contract MinimalAccountTest is Test {...\" */ _1))\n                /// @src 17:2349:2373  \"vm.assertEq(left, right)\"\n                {\n                    /// @src 83:715:5265  \"contract MinimalAccountTest is Test {...\"\n                    revert(0, 0)\n                }\n                /// @src 17:2349:2373  \"vm.assertEq(left, right)\"\n                let _2 := /** @src 83:715:5265  \"contract MinimalAccountTest is Test {...\" */ mload(64)\n                /// @src 17:2349:2373  \"vm.assertEq(left, right)\"\n                mstore(_2, /** @src 83:715:5265  \"contract MinimalAccountTest is Test {...\" */ shl(226, 0x260a5b15))\n                /// @src 83:1097:1101  \"1e18\"\n                mstore(/** @src 17:2349:2373  \"vm.assertEq(left, right)\" */ add(_2, 4), /** @src 83:1097:1101  \"1e18\" */ var_left)\n                mstore(/** @src 83:715:5265  \"contract MinimalAccountTest is Test {...\" */ add(/** @src 17:2349:2373  \"vm.assertEq(left, right)\" */ _2, /** @src 83:715:5265  \"contract MinimalAccountTest is Test {...\" */ 36), /** @src 83:1097:1101  \"1e18\" */ 0x0de0b6b3a7640000)\n                /// @src 17:2349:2373  \"vm.assertEq(left, right)\"\n                let _3 := staticcall(gas(), /** @src 83:715:5265  \"contract MinimalAccountTest is Test {...\" */ _1, /** @src 17:2349:2373  \"vm.assertEq(left, right)\" */ _2, /** @src 83:715:5265  \"contract MinimalAccountTest is Test {...\" */ 68, /** @src 17:2349:2373  \"vm.assertEq(left, right)\" */ _2, 0)\n                if iszero(_3)\n                {\n                    /// @src 83:715:5265  \"contract MinimalAccountTest is Test {...\"\n                    let pos := mload(64)\n                    returndatacopy(pos, /** @src 17:2349:2373  \"vm.assertEq(left, right)\" */ 0, /** @src 83:715:5265  \"contract MinimalAccountTest is Test {...\" */ returndatasize())\n                    revert(pos, returndatasize())\n                }\n                /// @src 17:2349:2373  \"vm.assertEq(left, right)\"\n                if _3 { finalize_allocation_21042(_2) }\n            }\n            /// @ast-id 4121 @src 17:2270:2380  \"function assertEq(uint256 left, uint256 right) internal pure virtual {...\"\n            function fun_assertEq(var_left)\n            {\n                /// @src 83:715:5265  \"contract MinimalAccountTest is Test {...\"\n                let _1 := 0x7109709ecfa91a80626ff3989d68f67f5b1dd12d\n                /// @src 17:2349:2373  \"vm.assertEq(left, right)\"\n                if iszero(extcodesize(/** @src 83:715:5265  \"contract MinimalAccountTest is Test {...\" */ _1))\n                /// @src 17:2349:2373  \"vm.assertEq(left, right)\"\n                {\n                    /// @src 83:715:5265  \"contract MinimalAccountTest is Test {...\"\n                    revert(0, 0)\n                }\n                /// @src 17:2349:2373  \"vm.assertEq(left, right)\"\n                let _2 := /** @src 83:715:5265  \"contract MinimalAccountTest is Test {...\" */ mload(64)\n                /// @src 17:2349:2373  \"vm.assertEq(left, right)\"\n                mstore(_2, /** @src 83:715:5265  \"contract MinimalAccountTest is Test {...\" */ shl(226, 0x260a5b15))\n                /// @src 83:1097:1101  \"1e18\"\n                mstore(/** @src 17:2349:2373  \"vm.assertEq(left, right)\" */ add(_2, 4), /** @src 83:1097:1101  \"1e18\" */ var_left)\n                mstore(/** @src 83:715:5265  \"contract MinimalAccountTest is Test {...\" */ add(/** @src 17:2349:2373  \"vm.assertEq(left, right)\" */ _2, /** @src 83:715:5265  \"contract MinimalAccountTest is Test {...\" */ 36), 0)\n                /// @src 17:2349:2373  \"vm.assertEq(left, right)\"\n                let _3 := staticcall(gas(), /** @src 83:715:5265  \"contract MinimalAccountTest is Test {...\" */ _1, /** @src 17:2349:2373  \"vm.assertEq(left, right)\" */ _2, /** @src 83:715:5265  \"contract MinimalAccountTest is Test {...\" */ 68, /** @src 17:2349:2373  \"vm.assertEq(left, right)\" */ _2, /** @src 83:715:5265  \"contract MinimalAccountTest is Test {...\" */ 0)\n                /// @src 17:2349:2373  \"vm.assertEq(left, right)\"\n                if iszero(_3)\n                {\n                    /// @src 83:715:5265  \"contract MinimalAccountTest is Test {...\"\n                    let pos := mload(64)\n                    returndatacopy(pos, 0, returndatasize())\n                    revert(pos, returndatasize())\n                }\n                /// @src 17:2349:2373  \"vm.assertEq(left, right)\"\n                if _3 { finalize_allocation_21042(_2) }\n            }\n            /// @ast-id 48818 @src 72:2129:2895  \"function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError, bytes32) {...\"\n            function fun_tryRecover_48818(var_hash, var_signature_mpos) -> var, var_1, var_\n            {\n                /// @src 72:2256:2272  \"signature.length\"\n                let expr := /** @src 83:715:5265  \"contract MinimalAccountTest is Test {...\" */ mload(/** @src 72:2256:2272  \"signature.length\" */ var_signature_mpos)\n                /// @src 72:2252:2889  \"if (signature.length == 65) {...\"\n                switch /** @src 72:2256:2278  \"signature.length == 65\" */ eq(expr, /** @src 72:2276:2278  \"65\" */ 0x41)\n                case /** @src 72:2252:2889  \"if (signature.length == 65) {...\" */ 0 {\n                    /// @src 72:2795:2878  \"return (address(0), RecoverError.InvalidSignatureLength, bytes32(signature.length))\"\n                    var := /** @src 72:2811:2812  \"0\" */ 0x00\n                    /// @src 72:2795:2878  \"return (address(0), RecoverError.InvalidSignatureLength, bytes32(signature.length))\"\n                    var_1 := /** @src 72:2815:2850  \"RecoverError.InvalidSignatureLength\" */ 2\n                    /// @src 72:2795:2878  \"return (address(0), RecoverError.InvalidSignatureLength, bytes32(signature.length))\"\n                    var_ := expr\n                    leave\n                }\n                default /// @src 72:2252:2889  \"if (signature.length == 65) {...\"\n                {\n                    /// @src 72:2539:2719  \"assembly {...\"\n                    let var_r := mload(add(var_signature_mpos, 0x20))\n                    /// @src 72:2739:2764  \"tryRecover(hash, v, r, s)\"\n                    let expr_component, expr_component_1, expr_component_2 := fun_tryRecover(var_hash, /** @src 72:2539:2719  \"assembly {...\" */ byte(/** @src -1:-1:-1 */ 0, /** @src 72:2539:2719  \"assembly {...\" */ mload(add(var_signature_mpos, 0x60))), /** @src 72:2739:2764  \"tryRecover(hash, v, r, s)\" */ var_r, /** @src 72:2539:2719  \"assembly {...\" */ mload(add(var_signature_mpos, 0x40)))\n                    /// @src 72:2732:2764  \"return tryRecover(hash, v, r, s)\"\n                    var := expr_component\n                    var_1 := expr_component_1\n                    var_ := expr_component_2\n                    leave\n                }\n            }\n            /// @ast-id 49091 @src 72:7196:7728  \"function _throwError(RecoverError error, bytes32 errorArg) private pure {...\"\n            function fun_throwError(var_error, var_errorArg)\n            {\n                /// @src 83:715:5265  \"contract MinimalAccountTest is Test {...\"\n                if iszero(lt(var_error, 4))\n                {\n                    mstore(/** @src 72:7291:7311  \"RecoverError.NoError\" */ 0, /** @src 83:715:5265  \"contract MinimalAccountTest is Test {...\" */ shl(224, 0x4e487b71))\n                    mstore(4, 0x21)\n                    revert(/** @src 72:7291:7311  \"RecoverError.NoError\" */ 0, /** @src 83:715:5265  \"contract MinimalAccountTest is Test {...\" */ 0x24)\n                }\n                /// @src 72:7278:7722  \"if (error == RecoverError.NoError) {...\"\n                switch /** @src 72:7282:7311  \"error == RecoverError.NoError\" */ iszero(var_error)\n                case /** @src 72:7278:7722  \"if (error == RecoverError.NoError) {...\" */ 0 {\n                    /// @src 72:7374:7722  \"if (error == RecoverError.InvalidSignature) {...\"\n                    switch /** @src 72:7378:7416  \"error == RecoverError.InvalidSignature\" */ eq(var_error, /** @src 83:715:5265  \"contract MinimalAccountTest is Test {...\" */ 1)\n                    case /** @src 72:7374:7722  \"if (error == RecoverError.InvalidSignature) {...\" */ 0 {\n                        /// @src 72:7479:7722  \"if (error == RecoverError.InvalidSignatureLength) {...\"\n                        switch /** @src 72:7483:7527  \"error == RecoverError.InvalidSignatureLength\" */ eq(var_error, /** @src 72:7492:7527  \"RecoverError.InvalidSignatureLength\" */ 2)\n                        case /** @src 72:7479:7722  \"if (error == RecoverError.InvalidSignatureLength) {...\" */ 0 {\n                            /// @src 72:7613:7722  \"if (error == RecoverError.InvalidSignatureS) {...\"\n                            if /** @src 72:7617:7656  \"error == RecoverError.InvalidSignatureS\" */ eq(var_error, /** @src 72:7626:7656  \"RecoverError.InvalidSignatureS\" */ 3)\n                            /// @src 72:7613:7722  \"if (error == RecoverError.InvalidSignatureS) {...\"\n                            {\n                                /// @src 72:7679:7711  \"ECDSAInvalidSignatureS(errorArg)\"\n                                let _1 := /** @src 83:715:5265  \"contract MinimalAccountTest is Test {...\" */ mload(64)\n                                /// @src 72:7679:7711  \"ECDSAInvalidSignatureS(errorArg)\"\n                                mstore(_1, shl(226, 0x35e2f383))\n                                /// @src 83:1097:1101  \"1e18\"\n                                mstore(/** @src 72:7679:7711  \"ECDSAInvalidSignatureS(errorArg)\" */ add(_1, /** @src 83:715:5265  \"contract MinimalAccountTest is Test {...\" */ 4), /** @src 83:1097:1101  \"1e18\" */ var_errorArg)\n                                /// @src 72:7679:7711  \"ECDSAInvalidSignatureS(errorArg)\"\n                                revert(_1, /** @src 83:715:5265  \"contract MinimalAccountTest is Test {...\" */ 36)\n                            }\n                        }\n                        default /// @src 72:7479:7722  \"if (error == RecoverError.InvalidSignatureLength) {...\"\n                        {\n                            /// @src 72:7550:7596  \"ECDSAInvalidSignatureLength(uint256(errorArg))\"\n                            let _2 := /** @src 83:715:5265  \"contract MinimalAccountTest is Test {...\" */ mload(64)\n                            /// @src 72:7550:7596  \"ECDSAInvalidSignatureLength(uint256(errorArg))\"\n                            mstore(_2, shl(224, 0xfce698f7))\n                            /// @src 83:1097:1101  \"1e18\"\n                            mstore(/** @src 72:7550:7596  \"ECDSAInvalidSignatureLength(uint256(errorArg))\" */ add(_2, /** @src 83:715:5265  \"contract MinimalAccountTest is Test {...\" */ 4), /** @src 83:1097:1101  \"1e18\" */ var_errorArg)\n                            /// @src 72:7550:7596  \"ECDSAInvalidSignatureLength(uint256(errorArg))\"\n                            revert(_2, /** @src 83:715:5265  \"contract MinimalAccountTest is Test {...\" */ 36)\n                        }\n                    }\n                    default /// @src 72:7374:7722  \"if (error == RecoverError.InvalidSignature) {...\"\n                    {\n                        /// @src 72:7439:7462  \"ECDSAInvalidSignature()\"\n                        let _3 := /** @src 83:715:5265  \"contract MinimalAccountTest is Test {...\" */ mload(64)\n                        /// @src 72:7439:7462  \"ECDSAInvalidSignature()\"\n                        mstore(_3, shl(224, 0xf645eedf))\n                        revert(_3, /** @src 83:715:5265  \"contract MinimalAccountTest is Test {...\" */ 4)\n                    }\n                }\n                default /// @src 72:7278:7722  \"if (error == RecoverError.NoError) {...\"\n                {\n                    /// @src 72:7327:7334  \"return;\"\n                    leave\n                }\n            }\n            /// @ast-id 49006 @src 72:5140:6670  \"function tryRecover(...\"\n            function fun_tryRecover(var_hash, var_v, var_r, var_s) -> var, var_1, var_2\n            {\n                /// @src 72:6182:6346  \"if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {...\"\n                if /** @src 72:6186:6265  \"uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0\" */ gt(var_s, /** @src 72:6199:6265  \"0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0\" */ 0x7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0)\n                /// @src 72:6182:6346  \"if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {...\"\n                {\n                    /// @src 72:6281:6335  \"return (address(0), RecoverError.InvalidSignatureS, s)\"\n                    var := /** @src 72:6297:6298  \"0\" */ 0x00\n                    /// @src 72:6281:6335  \"return (address(0), RecoverError.InvalidSignatureS, s)\"\n                    var_1 := /** @src 72:6301:6331  \"RecoverError.InvalidSignatureS\" */ 3\n                    /// @src 72:6281:6335  \"return (address(0), RecoverError.InvalidSignatureS, s)\"\n                    var_2 := var_s\n                    leave\n                }\n                /// @src 72:6457:6481  \"ecrecover(hash, v, r, s)\"\n                let _1 := /** @src 83:715:5265  \"contract MinimalAccountTest is Test {...\" */ mload(64)\n                /// @src 83:1097:1101  \"1e18\"\n                mstore(_1, var_hash)\n                /// @src 83:715:5265  \"contract MinimalAccountTest is Test {...\"\n                mstore(add(_1, 32), and(var_v, 0xff))\n                /// @src 83:1097:1101  \"1e18\"\n                mstore(/** @src 83:715:5265  \"contract MinimalAccountTest is Test {...\" */ add(_1, 64), /** @src 83:1097:1101  \"1e18\" */ var_r)\n                mstore(/** @src 83:715:5265  \"contract MinimalAccountTest is Test {...\" */ add(_1, 96), /** @src 83:1097:1101  \"1e18\" */ var_s)\n                /// @src -1:-1:-1\n                let _2 := 0\n                /// @src 72:6457:6481  \"ecrecover(hash, v, r, s)\"\n                mstore(/** @src -1:-1:-1 */ _2, _2)\n                /// @src 72:6457:6481  \"ecrecover(hash, v, r, s)\"\n                if iszero(staticcall(gas(), 1, _1, /** @src 83:715:5265  \"contract MinimalAccountTest is Test {...\" */ 128, /** @src -1:-1:-1 */ _2, /** @src 83:715:5265  \"contract MinimalAccountTest is Test {...\" */ 32))\n                /// @src 72:6457:6481  \"ecrecover(hash, v, r, s)\"\n                {\n                    /// @src 83:715:5265  \"contract MinimalAccountTest is Test {...\"\n                    let pos := mload(64)\n                    returndatacopy(pos, /** @src -1:-1:-1 */ _2, /** @src 83:715:5265  \"contract MinimalAccountTest is Test {...\" */ returndatasize())\n                    revert(pos, returndatasize())\n                }\n                /// @src 72:6457:6481  \"ecrecover(hash, v, r, s)\"\n                let _3 := mload(/** @src -1:-1:-1 */ _2)\n                /// @src 72:6491:6604  \"if (signer == address(0)) {...\"\n                if /** @src 72:6495:6515  \"signer == address(0)\" */ iszero(/** @src 83:715:5265  \"contract MinimalAccountTest is Test {...\" */ and(/** @src 72:6495:6515  \"signer == address(0)\" */ _3, /** @src 83:715:5265  \"contract MinimalAccountTest is Test {...\" */ sub(shl(160, /** @src 83:1194:1213  \"new DeployMinimal()\" */ 1), 1)))\n                /// @src 72:6491:6604  \"if (signer == address(0)) {...\"\n                {\n                    /// @src 72:6531:6593  \"return (address(0), RecoverError.InvalidSignature, bytes32(0))\"\n                    var := /** @src -1:-1:-1 */ _2\n                    /// @src 72:6531:6593  \"return (address(0), RecoverError.InvalidSignature, bytes32(0))\"\n                    var_1 := /** @src 72:6457:6481  \"ecrecover(hash, v, r, s)\" */ 1\n                    /// @src 72:6531:6593  \"return (address(0), RecoverError.InvalidSignature, bytes32(0))\"\n                    var_2 := /** @src -1:-1:-1 */ _2\n                    /// @src 72:6531:6593  \"return (address(0), RecoverError.InvalidSignature, bytes32(0))\"\n                    leave\n                }\n                /// @src 72:6614:6663  \"return (signer, RecoverError.NoError, bytes32(0))\"\n                var := _3\n                var_1 := /** @src -1:-1:-1 */ _2\n                /// @src 72:6614:6663  \"return (signer, RecoverError.NoError, bytes32(0))\"\n                var_2 := /** @src -1:-1:-1 */ _2\n            }\n        }\n        /// @use-src 61:\"lib/openzeppelin-contracts/contracts/interfaces/draft-IERC6093.sol\", 62:\"lib/openzeppelin-contracts/contracts/mocks/token/ERC20Mock.sol\", 63:\"lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\", 64:\"lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\", 65:\"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Metadata.sol\", 69:\"lib/openzeppelin-contracts/contracts/utils/Context.sol\"\n        object \"ERC20Mock_47192\" {\n            code {\n                {\n                    /// @src 62:110:391  \"contract ERC20Mock is ERC20 {...\"\n                    let _1 := memoryguard(0x80)\n                    if callvalue() { revert(0, 0) }\n                    let _2 := 64\n                    let newFreePtr := add(_1, _2)\n                    let _3 := sub(shl(64, 1), 1)\n                    if or(gt(newFreePtr, _3), lt(newFreePtr, _1))\n                    {\n                        mstore(/** @src -1:-1:-1 */ 0, /** @src 62:110:391  \"contract ERC20Mock is ERC20 {...\" */ shl(224, 0x4e487b71))\n                        mstore(4, 0x41)\n                        revert(/** @src -1:-1:-1 */ 0, /** @src 62:110:391  \"contract ERC20Mock is ERC20 {...\" */ 0x24)\n                    }\n                    mstore(_2, newFreePtr)\n                    mstore(_1, 9)\n                    let _4 := 32\n                    mstore(add(_1, _4), \"ERC20Mock\")\n                    let memPtr := mload(_2)\n                    let newFreePtr_1 := add(memPtr, _2)\n                    if or(gt(newFreePtr_1, _3), lt(newFreePtr_1, memPtr))\n                    {\n                        mstore(/** @src -1:-1:-1 */ 0, /** @src 62:110:391  \"contract ERC20Mock is ERC20 {...\" */ shl(224, 0x4e487b71))\n                        mstore(4, 0x41)\n                        revert(/** @src -1:-1:-1 */ 0, /** @src 62:110:391  \"contract ERC20Mock is ERC20 {...\" */ 0x24)\n                    }\n                    mstore(_2, newFreePtr_1)\n                    let _5 := 4\n                    mstore(memPtr, _5)\n                    mstore(add(memPtr, _4), \"E20M\")\n                    let newLen := mload(_1)\n                    if gt(newLen, _3)\n                    {\n                        mstore(/** @src -1:-1:-1 */ 0, /** @src 62:110:391  \"contract ERC20Mock is ERC20 {...\" */ shl(224, 0x4e487b71))\n                        mstore(_5, 0x41)\n                        revert(/** @src -1:-1:-1 */ 0, /** @src 62:110:391  \"contract ERC20Mock is ERC20 {...\" */ 0x24)\n                    }\n                    /// @src 63:1962:1975  \"_name = name_\"\n                    let _6 := 0x03\n                    /// @src 62:110:391  \"contract ERC20Mock is ERC20 {...\"\n                    let _7 := sload(/** @src 63:1962:1975  \"_name = name_\" */ _6)\n                    /// @src 62:110:391  \"contract ERC20Mock is ERC20 {...\"\n                    let length := /** @src -1:-1:-1 */ 0\n                    /// @src 62:110:391  \"contract ERC20Mock is ERC20 {...\"\n                    let _8 := 1\n                    length := shr(_8, _7)\n                    let outOfPlaceEncoding := and(_7, _8)\n                    if iszero(outOfPlaceEncoding) { length := and(length, 0x7f) }\n                    if eq(outOfPlaceEncoding, lt(length, _4))\n                    {\n                        mstore(/** @src -1:-1:-1 */ 0, /** @src 62:110:391  \"contract ERC20Mock is ERC20 {...\" */ shl(224, 0x4e487b71))\n                        mstore(_5, 0x22)\n                        revert(/** @src -1:-1:-1 */ 0, /** @src 62:110:391  \"contract ERC20Mock is ERC20 {...\" */ 0x24)\n                    }\n                    let _9 := 31\n                    if gt(length, _9)\n                    {\n                        mstore(/** @src -1:-1:-1 */ 0, /** @src 63:1962:1975  \"_name = name_\" */ _6)\n                        /// @src 62:110:391  \"contract ERC20Mock is ERC20 {...\"\n                        let data := keccak256(/** @src -1:-1:-1 */ 0, /** @src 62:110:391  \"contract ERC20Mock is ERC20 {...\" */ _4)\n                        let deleteStart := add(data, shr(5, add(newLen, _9)))\n                        if lt(newLen, _4) { deleteStart := data }\n                        let _10 := add(data, shr(5, add(length, _9)))\n                        let start := deleteStart\n                        for { } lt(start, _10) { start := add(start, _8) }\n                        {\n                            sstore(start, /** @src -1:-1:-1 */ 0)\n                        }\n                    }\n                    /// @src 62:110:391  \"contract ERC20Mock is ERC20 {...\"\n                    let srcOffset := /** @src -1:-1:-1 */ 0\n                    /// @src 62:110:391  \"contract ERC20Mock is ERC20 {...\"\n                    srcOffset := _4\n                    switch gt(newLen, _9)\n                    case 1 {\n                        let loopEnd := and(newLen, not(31))\n                        mstore(/** @src -1:-1:-1 */ 0, /** @src 63:1962:1975  \"_name = name_\" */ _6)\n                        /// @src 62:110:391  \"contract ERC20Mock is ERC20 {...\"\n                        let dstPtr := keccak256(/** @src -1:-1:-1 */ 0, /** @src 62:110:391  \"contract ERC20Mock is ERC20 {...\" */ _4)\n                        let i := /** @src -1:-1:-1 */ 0\n                        /// @src 62:110:391  \"contract ERC20Mock is ERC20 {...\"\n                        for { } lt(i, loopEnd) { i := add(i, _4) }\n                        {\n                            sstore(dstPtr, mload(add(_1, srcOffset)))\n                            dstPtr := add(dstPtr, _8)\n                            srcOffset := add(srcOffset, _4)\n                        }\n                        if lt(loopEnd, newLen)\n                        {\n                            let lastValue := mload(add(_1, srcOffset))\n                            sstore(dstPtr, and(lastValue, not(shr(and(shl(/** @src 63:1962:1975  \"_name = name_\" */ _6, /** @src 62:110:391  \"contract ERC20Mock is ERC20 {...\" */ newLen), 248), not(0)))))\n                        }\n                        sstore(/** @src 63:1962:1975  \"_name = name_\" */ _6, /** @src 62:110:391  \"contract ERC20Mock is ERC20 {...\" */ add(shl(_8, newLen), _8))\n                    }\n                    default {\n                        let value := /** @src -1:-1:-1 */ 0\n                        /// @src 62:110:391  \"contract ERC20Mock is ERC20 {...\"\n                        if newLen\n                        {\n                            value := mload(add(_1, srcOffset))\n                        }\n                        sstore(/** @src 63:1962:1975  \"_name = name_\" */ _6, /** @src 62:110:391  \"contract ERC20Mock is ERC20 {...\" */ or(and(value, not(shr(shl(/** @src 63:1962:1975  \"_name = name_\" */ _6, /** @src 62:110:391  \"contract ERC20Mock is ERC20 {...\" */ newLen), not(0)))), shl(_8, newLen)))\n                    }\n                    let newLen_1 := mload(memPtr)\n                    if gt(newLen_1, _3)\n                    {\n                        mstore(/** @src -1:-1:-1 */ 0, /** @src 62:110:391  \"contract ERC20Mock is ERC20 {...\" */ shl(224, 0x4e487b71))\n                        mstore(_5, 0x41)\n                        revert(/** @src -1:-1:-1 */ 0, /** @src 62:110:391  \"contract ERC20Mock is ERC20 {...\" */ 0x24)\n                    }\n                    let _11 := sload(_5)\n                    let length_1 := /** @src -1:-1:-1 */ 0\n                    /// @src 62:110:391  \"contract ERC20Mock is ERC20 {...\"\n                    length_1 := shr(_8, _11)\n                    let outOfPlaceEncoding_1 := and(_11, _8)\n                    if iszero(outOfPlaceEncoding_1)\n                    {\n                        length_1 := and(length_1, 0x7f)\n                    }\n                    if eq(outOfPlaceEncoding_1, lt(length_1, _4))\n                    {\n                        mstore(/** @src -1:-1:-1 */ 0, /** @src 62:110:391  \"contract ERC20Mock is ERC20 {...\" */ shl(224, 0x4e487b71))\n                        mstore(_5, 0x22)\n                        revert(/** @src -1:-1:-1 */ 0, /** @src 62:110:391  \"contract ERC20Mock is ERC20 {...\" */ 0x24)\n                    }\n                    if gt(length_1, _9)\n                    {\n                        mstore(/** @src -1:-1:-1 */ 0, /** @src 62:110:391  \"contract ERC20Mock is ERC20 {...\" */ _5)\n                        let data_1 := keccak256(/** @src -1:-1:-1 */ 0, /** @src 62:110:391  \"contract ERC20Mock is ERC20 {...\" */ _4)\n                        let deleteStart_1 := add(data_1, shr(5, add(newLen_1, _9)))\n                        if lt(newLen_1, _4) { deleteStart_1 := data_1 }\n                        let _12 := add(data_1, shr(5, add(length_1, _9)))\n                        let start_1 := deleteStart_1\n                        for { } lt(start_1, _12) { start_1 := add(start_1, _8) }\n                        {\n                            sstore(start_1, /** @src -1:-1:-1 */ 0)\n                        }\n                    }\n                    /// @src 62:110:391  \"contract ERC20Mock is ERC20 {...\"\n                    let srcOffset_1 := /** @src -1:-1:-1 */ 0\n                    /// @src 62:110:391  \"contract ERC20Mock is ERC20 {...\"\n                    srcOffset_1 := _4\n                    switch gt(newLen_1, _9)\n                    case 1 {\n                        let loopEnd_1 := and(newLen_1, not(31))\n                        mstore(/** @src -1:-1:-1 */ 0, /** @src 62:110:391  \"contract ERC20Mock is ERC20 {...\" */ _5)\n                        let dstPtr_1 := keccak256(/** @src -1:-1:-1 */ 0, /** @src 62:110:391  \"contract ERC20Mock is ERC20 {...\" */ _4)\n                        let i_1 := /** @src -1:-1:-1 */ 0\n                        /// @src 62:110:391  \"contract ERC20Mock is ERC20 {...\"\n                        for { } lt(i_1, loopEnd_1) { i_1 := add(i_1, _4) }\n                        {\n                            sstore(dstPtr_1, mload(add(memPtr, srcOffset_1)))\n                            dstPtr_1 := add(dstPtr_1, _8)\n                            srcOffset_1 := add(srcOffset_1, _4)\n                        }\n                        if lt(loopEnd_1, newLen_1)\n                        {\n                            let lastValue_1 := mload(add(memPtr, srcOffset_1))\n                            sstore(dstPtr_1, and(lastValue_1, not(shr(and(shl(/** @src 63:1962:1975  \"_name = name_\" */ _6, /** @src 62:110:391  \"contract ERC20Mock is ERC20 {...\" */ newLen_1), 248), not(0)))))\n                        }\n                        sstore(_5, add(shl(_8, newLen_1), _8))\n                    }\n                    default {\n                        let value_1 := /** @src -1:-1:-1 */ 0\n                        /// @src 62:110:391  \"contract ERC20Mock is ERC20 {...\"\n                        if newLen_1\n                        {\n                            value_1 := mload(add(memPtr, srcOffset_1))\n                        }\n                        sstore(_5, or(and(value_1, not(shr(shl(/** @src 63:1962:1975  \"_name = name_\" */ _6, /** @src 62:110:391  \"contract ERC20Mock is ERC20 {...\" */ newLen_1), not(0)))), shl(_8, newLen_1)))\n                    }\n                    let _13 := mload(_2)\n                    let _14 := datasize(\"ERC20Mock_47192_deployed\")\n                    codecopy(_13, dataoffset(\"ERC20Mock_47192_deployed\"), _14)\n                    return(_13, _14)\n                }\n            }\n            /// @use-src 62:\"lib/openzeppelin-contracts/contracts/mocks/token/ERC20Mock.sol\", 63:\"lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\", 69:\"lib/openzeppelin-contracts/contracts/utils/Context.sol\"\n            object \"ERC20Mock_47192_deployed\" {\n                code {\n                    {\n                        /// @src 62:110:391  \"contract ERC20Mock is ERC20 {...\"\n                        let _1 := memoryguard(0x80)\n                        let _2 := 64\n                        mstore(_2, _1)\n                        let _3 := 4\n                        if iszero(lt(calldatasize(), _3))\n                        {\n                            let _4 := 0\n                            switch shr(224, calldataload(_4))\n                            case 0x06fdde03 {\n                                if callvalue() { revert(_4, _4) }\n                                if slt(add(calldatasize(), not(3)), _4) { revert(_4, _4) }\n                                let ret := _4\n                                let slotValue := sload(/** @src 63:2151:2156  \"_name\" */ 0x03)\n                                /// @src 62:110:391  \"contract ERC20Mock is ERC20 {...\"\n                                let length := _4\n                                let _5 := 1\n                                length := shr(1, slotValue)\n                                let outOfPlaceEncoding := and(slotValue, 1)\n                                if iszero(outOfPlaceEncoding) { length := and(length, 0x7f) }\n                                let _6 := 32\n                                if eq(outOfPlaceEncoding, lt(length, _6))\n                                {\n                                    mstore(_4, shl(224, 0x4e487b71))\n                                    mstore(_3, 0x22)\n                                    revert(_4, 0x24)\n                                }\n                                mstore(_1, length)\n                                switch outOfPlaceEncoding\n                                case 0 {\n                                    mstore(add(_1, _6), and(slotValue, not(255)))\n                                    ret := add(add(_1, shl(5, iszero(iszero(length)))), _6)\n                                }\n                                case 1 {\n                                    mstore(_4, /** @src 63:2151:2156  \"_name\" */ 0x03)\n                                    /// @src 62:110:391  \"contract ERC20Mock is ERC20 {...\"\n                                    let dataPos := 87903029871075914254377627908054574944891091886930582284385770809450030037083\n                                    let i := _4\n                                    for { } lt(i, length) { i := add(i, _6) }\n                                    {\n                                        mstore(add(add(_1, i), _6), sload(dataPos))\n                                        dataPos := add(dataPos, _5)\n                                    }\n                                    ret := add(add(_1, i), _6)\n                                }\n                                let newFreePtr := add(_1, and(add(sub(ret, _1), 31), not(31)))\n                                if or(gt(newFreePtr, 0xffffffffffffffff), lt(newFreePtr, _1))\n                                {\n                                    mstore(_4, shl(224, 0x4e487b71))\n                                    mstore(_3, 0x41)\n                                    revert(_4, 0x24)\n                                }\n                                mstore(_2, newFreePtr)\n                                return(newFreePtr, sub(abi_encode_string(newFreePtr, _1), newFreePtr))\n                            }\n                            case 0x095ea7b3 {\n                                if callvalue() { revert(_4, _4) }\n                                if slt(add(calldatasize(), not(3)), _2) { revert(_4, _4) }\n                                let value0 := abi_decode_address_3706()\n                                let _7 := calldataload(36)\n                                /// @src 63:10057:10146  \"if (owner == address(0)) {...\"\n                                if /** @src 63:10061:10080  \"owner == address(0)\" */ iszero(/** @src 69:735:745  \"msg.sender\" */ caller())\n                                /// @src 63:10057:10146  \"if (owner == address(0)) {...\"\n                                {\n                                    /// @src 63:10103:10135  \"ERC20InvalidApprover(address(0))\"\n                                    let _8 := /** @src 62:110:391  \"contract ERC20Mock is ERC20 {...\" */ mload(_2)\n                                    /// @src 63:10103:10135  \"ERC20InvalidApprover(address(0))\"\n                                    mstore(_8, shl(224, 0xe602df05))\n                                    /// @src 62:110:391  \"contract ERC20Mock is ERC20 {...\"\n                                    mstore(/** @src 63:10103:10135  \"ERC20InvalidApprover(address(0))\" */ add(_8, /** @src 62:110:391  \"contract ERC20Mock is ERC20 {...\" */ _3), _4)\n                                    /// @src 63:10103:10135  \"ERC20InvalidApprover(address(0))\"\n                                    revert(_8, /** @src 62:110:391  \"contract ERC20Mock is ERC20 {...\" */ 36)\n                                }\n                                let _9 := and(/** @src 63:10159:10180  \"spender == address(0)\" */ value0, /** @src 62:110:391  \"contract ERC20Mock is ERC20 {...\" */ sub(shl(160, 1), 1))\n                                /// @src 63:10155:10245  \"if (spender == address(0)) {...\"\n                                if /** @src 63:10159:10180  \"spender == address(0)\" */ iszero(/** @src 62:110:391  \"contract ERC20Mock is ERC20 {...\" */ _9)\n                                /// @src 63:10155:10245  \"if (spender == address(0)) {...\"\n                                {\n                                    /// @src 63:10203:10234  \"ERC20InvalidSpender(address(0))\"\n                                    let _10 := /** @src 62:110:391  \"contract ERC20Mock is ERC20 {...\" */ mload(_2)\n                                    /// @src 63:10203:10234  \"ERC20InvalidSpender(address(0))\"\n                                    mstore(_10, shl(225, 0x4a1406b1))\n                                    /// @src 62:110:391  \"contract ERC20Mock is ERC20 {...\"\n                                    mstore(/** @src 63:10203:10234  \"ERC20InvalidSpender(address(0))\" */ add(_10, /** @src 62:110:391  \"contract ERC20Mock is ERC20 {...\" */ _3), _4)\n                                    /// @src 63:10203:10234  \"ERC20InvalidSpender(address(0))\"\n                                    revert(_10, /** @src 62:110:391  \"contract ERC20Mock is ERC20 {...\" */ 36)\n                                }\n                                mstore(_4, /** @src 69:735:745  \"msg.sender\" */ caller())\n                                /// @src 62:110:391  \"contract ERC20Mock is ERC20 {...\"\n                                mstore(0x20, /** @src 63:9105:9109  \"true\" */ 0x01)\n                                /// @src 62:110:391  \"contract ERC20Mock is ERC20 {...\"\n                                let _11 := keccak256(_4, _2)\n                                mstore(_4, _9)\n                                mstore(0x20, _11)\n                                sstore(keccak256(_4, _2), _7)\n                                /// @src 63:10333:10364  \"Approval(owner, spender, value)\"\n                                let _12 := /** @src 62:110:391  \"contract ERC20Mock is ERC20 {...\" */ mload(_2)\n                                mstore(_12, _7)\n                                /// @src 63:10333:10364  \"Approval(owner, spender, value)\"\n                                log3(_12, /** @src 62:110:391  \"contract ERC20Mock is ERC20 {...\" */ 0x20, /** @src 63:10333:10364  \"Approval(owner, spender, value)\" */ 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925, /** @src 69:735:745  \"msg.sender\" */ caller(), /** @src 63:10333:10364  \"Approval(owner, spender, value)\" */ _9)\n                                /// @src 62:110:391  \"contract ERC20Mock is ERC20 {...\"\n                                let memPos := mload(_2)\n                                mstore(memPos, /** @src 63:9105:9109  \"true\" */ 0x01)\n                                /// @src 62:110:391  \"contract ERC20Mock is ERC20 {...\"\n                                return(memPos, 0x20)\n                            }\n                            case 0x18160ddd {\n                                if callvalue() { revert(_4, _4) }\n                                if slt(add(calldatasize(), not(3)), _4) { revert(_4, _4) }\n                                let _13 := sload(/** @src 63:3222:3234  \"_totalSupply\" */ 0x02)\n                                /// @src 62:110:391  \"contract ERC20Mock is ERC20 {...\"\n                                let memPos_1 := mload(_2)\n                                mstore(memPos_1, _13)\n                                return(memPos_1, 32)\n                            }\n                            case 0x23b872dd {\n                                if callvalue() { revert(_4, _4) }\n                                if slt(add(calldatasize(), not(3)), 96) { revert(_4, _4) }\n                                let value0_1 := abi_decode_address_3706()\n                                let value1 := abi_decode_address()\n                                let value := calldataload(68)\n                                let _14 := and(value0_1, sub(shl(160, 1), 1))\n                                mstore(_4, _14)\n                                mstore(32, 1)\n                                let _15 := keccak256(_4, _2)\n                                mstore(_4, /** @src 69:735:745  \"msg.sender\" */ caller())\n                                /// @src 62:110:391  \"contract ERC20Mock is ERC20 {...\"\n                                mstore(32, _15)\n                                let _16 := sload(keccak256(_4, _2))\n                                /// @src 63:10824:11134  \"if (currentAllowance != type(uint256).max) {...\"\n                                if /** @src 63:10828:10865  \"currentAllowance != type(uint256).max\" */ iszero(eq(_16, /** @src 63:10848:10865  \"type(uint256).max\" */ not(0)))\n                                /// @src 63:10824:11134  \"if (currentAllowance != type(uint256).max) {...\"\n                                {\n                                    /// @src 63:10881:11011  \"if (currentAllowance < value) {...\"\n                                    if /** @src 63:10885:10909  \"currentAllowance < value\" */ lt(_16, value)\n                                    /// @src 63:10881:11011  \"if (currentAllowance < value) {...\"\n                                    {\n                                        /// @src 63:10936:10996  \"ERC20InsufficientAllowance(spender, currentAllowance, value)\"\n                                        let _17 := /** @src 62:110:391  \"contract ERC20Mock is ERC20 {...\" */ mload(_2)\n                                        /// @src 63:10936:10996  \"ERC20InsufficientAllowance(spender, currentAllowance, value)\"\n                                        mstore(_17, shl(225, 0x7dc7a0d9))\n                                        revert(_17, sub(abi_encode_address_uint256_uint256(add(_17, /** @src 62:110:391  \"contract ERC20Mock is ERC20 {...\" */ _3), /** @src 69:735:745  \"msg.sender\" */ caller(), /** @src 63:10936:10996  \"ERC20InsufficientAllowance(spender, currentAllowance, value)\" */ _16, value), _17))\n                                    }\n                                    /// @src 63:10057:10146  \"if (owner == address(0)) {...\"\n                                    if /** @src 63:10061:10080  \"owner == address(0)\" */ iszero(/** @src 62:110:391  \"contract ERC20Mock is ERC20 {...\" */ _14)\n                                    /// @src 63:10057:10146  \"if (owner == address(0)) {...\"\n                                    {\n                                        /// @src 63:10103:10135  \"ERC20InvalidApprover(address(0))\"\n                                        let _18 := /** @src 62:110:391  \"contract ERC20Mock is ERC20 {...\" */ mload(_2)\n                                        /// @src 63:10103:10135  \"ERC20InvalidApprover(address(0))\"\n                                        mstore(_18, shl(224, 0xe602df05))\n                                        /// @src 62:110:391  \"contract ERC20Mock is ERC20 {...\"\n                                        mstore(/** @src 63:10103:10135  \"ERC20InvalidApprover(address(0))\" */ add(_18, /** @src 62:110:391  \"contract ERC20Mock is ERC20 {...\" */ _3), _4)\n                                        /// @src 63:10103:10135  \"ERC20InvalidApprover(address(0))\"\n                                        revert(_18, /** @src 62:110:391  \"contract ERC20Mock is ERC20 {...\" */ 36)\n                                    }\n                                    /// @src 63:10155:10245  \"if (spender == address(0)) {...\"\n                                    if /** @src 63:10159:10180  \"spender == address(0)\" */ iszero(/** @src 69:735:745  \"msg.sender\" */ caller())\n                                    /// @src 63:10155:10245  \"if (spender == address(0)) {...\"\n                                    {\n                                        /// @src 63:10203:10234  \"ERC20InvalidSpender(address(0))\"\n                                        let _19 := /** @src 62:110:391  \"contract ERC20Mock is ERC20 {...\" */ mload(_2)\n                                        /// @src 63:10203:10234  \"ERC20InvalidSpender(address(0))\"\n                                        mstore(_19, shl(225, 0x4a1406b1))\n                                        /// @src 62:110:391  \"contract ERC20Mock is ERC20 {...\"\n                                        mstore(/** @src 63:10203:10234  \"ERC20InvalidSpender(address(0))\" */ add(_19, /** @src 62:110:391  \"contract ERC20Mock is ERC20 {...\" */ _3), _4)\n                                        /// @src 63:10203:10234  \"ERC20InvalidSpender(address(0))\"\n                                        revert(_19, /** @src 62:110:391  \"contract ERC20Mock is ERC20 {...\" */ 36)\n                                    }\n                                    mstore(_4, _14)\n                                    mstore(32, 1)\n                                    let _20 := keccak256(_4, _2)\n                                    mstore(_4, /** @src 69:735:745  \"msg.sender\" */ caller())\n                                    /// @src 62:110:391  \"contract ERC20Mock is ERC20 {...\"\n                                    mstore(32, _20)\n                                    sstore(keccak256(_4, _2), sub(/** @src 63:11077:11101  \"currentAllowance - value\" */ _16, value))\n                                }\n                                /// @src 63:5249:5254  \"value\"\n                                fun_transfer(value0_1, value1, value)\n                                /// @src 62:110:391  \"contract ERC20Mock is ERC20 {...\"\n                                let memPos_2 := mload(_2)\n                                mstore(memPos_2, 1)\n                                return(memPos_2, 32)\n                            }\n                            case 0x313ce567 {\n                                if callvalue() { revert(_4, _4) }\n                                if slt(add(calldatasize(), not(3)), _4) { revert(_4, _4) }\n                                let memPos_3 := mload(_2)\n                                mstore(memPos_3, /** @src 63:3075:3077  \"18\" */ 0x12)\n                                /// @src 62:110:391  \"contract ERC20Mock is ERC20 {...\"\n                                return(memPos_3, 32)\n                            }\n                            case 0x40c10f19 {\n                                if callvalue() { revert(_4, _4) }\n                                if slt(add(calldatasize(), not(3)), _2) { revert(_4, _4) }\n                                let value0_2 := abi_decode_address_3706()\n                                let value_1 := calldataload(36)\n                                let _21 := and(/** @src 63:7791:7812  \"account == address(0)\" */ value0_2, /** @src 62:110:391  \"contract ERC20Mock is ERC20 {...\" */ sub(shl(160, 1), 1))\n                                /// @src 63:7787:7878  \"if (account == address(0)) {...\"\n                                if /** @src 63:7791:7812  \"account == address(0)\" */ iszero(/** @src 62:110:391  \"contract ERC20Mock is ERC20 {...\" */ _21)\n                                /// @src 63:7787:7878  \"if (account == address(0)) {...\"\n                                {\n                                    /// @src 63:7835:7867  \"ERC20InvalidReceiver(address(0))\"\n                                    let _22 := /** @src 62:110:391  \"contract ERC20Mock is ERC20 {...\" */ mload(_2)\n                                    /// @src 63:7835:7867  \"ERC20InvalidReceiver(address(0))\"\n                                    mstore(_22, shl(224, 0xec442f05))\n                                    /// @src 62:110:391  \"contract ERC20Mock is ERC20 {...\"\n                                    mstore(/** @src 63:7835:7867  \"ERC20InvalidReceiver(address(0))\" */ add(_22, /** @src 62:110:391  \"contract ERC20Mock is ERC20 {...\" */ _3), _4)\n                                    /// @src 63:7835:7867  \"ERC20InvalidReceiver(address(0))\"\n                                    revert(_22, /** @src 62:110:391  \"contract ERC20Mock is ERC20 {...\" */ 36)\n                                }\n                                let _23 := sload(/** @src 63:6496:6517  \"_totalSupply += value\" */ 0x02)\n                                /// @src 62:110:391  \"contract ERC20Mock is ERC20 {...\"\n                                let sum := add(_23, value_1)\n                                if gt(_23, sum)\n                                {\n                                    mstore(_4, shl(224, 0x4e487b71))\n                                    mstore(_3, 0x11)\n                                    revert(_4, 36)\n                                }\n                                sstore(/** @src 63:6496:6517  \"_totalSupply += value\" */ 0x02, /** @src 62:110:391  \"contract ERC20Mock is ERC20 {...\" */ sum)\n                                mstore(_4, _21)\n                                mstore(0x20, _4)\n                                let dataSlot := keccak256(_4, _2)\n                                sstore(dataSlot, add(sload(/** @src 63:7284:7306  \"_balances[to] += value\" */ dataSlot), /** @src 62:110:391  \"contract ERC20Mock is ERC20 {...\" */ value_1))\n                                /// @src 63:7346:7371  \"Transfer(from, to, value)\"\n                                let _24 := /** @src 62:110:391  \"contract ERC20Mock is ERC20 {...\" */ mload(_2)\n                                mstore(_24, value_1)\n                                /// @src 63:7346:7371  \"Transfer(from, to, value)\"\n                                log3(_24, /** @src 62:110:391  \"contract ERC20Mock is ERC20 {...\" */ 0x20, /** @src 63:7346:7371  \"Transfer(from, to, value)\" */ 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef, /** @src 62:110:391  \"contract ERC20Mock is ERC20 {...\" */ _4, /** @src 63:7346:7371  \"Transfer(from, to, value)\" */ _21)\n                                /// @src 62:110:391  \"contract ERC20Mock is ERC20 {...\"\n                                return(_4, _4)\n                            }\n                            case 0x70a08231 {\n                                if callvalue() { revert(_4, _4) }\n                                if slt(add(calldatasize(), not(3)), 32) { revert(_4, _4) }\n                                mstore(_4, and(abi_decode_address_3706(), sub(shl(160, 1), 1)))\n                                mstore(32, _4)\n                                let _25 := sload(keccak256(_4, _2))\n                                let memPos_4 := mload(_2)\n                                mstore(memPos_4, _25)\n                                return(memPos_4, 32)\n                            }\n                            case 0x95d89b41 {\n                                if callvalue() { revert(_4, _4) }\n                                if slt(add(calldatasize(), not(3)), _4) { revert(_4, _4) }\n                                let memPtr := mload(_2)\n                                let ret_1 := _4\n                                let slotValue_1 := sload(_3)\n                                let length_1 := _4\n                                let _26 := 1\n                                length_1 := shr(1, slotValue_1)\n                                let outOfPlaceEncoding_1 := and(slotValue_1, 1)\n                                if iszero(outOfPlaceEncoding_1)\n                                {\n                                    length_1 := and(length_1, 0x7f)\n                                }\n                                let _27 := 32\n                                if eq(outOfPlaceEncoding_1, lt(length_1, _27))\n                                {\n                                    mstore(_4, shl(224, 0x4e487b71))\n                                    mstore(_3, 0x22)\n                                    revert(_4, 0x24)\n                                }\n                                mstore(memPtr, length_1)\n                                switch outOfPlaceEncoding_1\n                                case 0 {\n                                    mstore(add(memPtr, _27), and(slotValue_1, not(255)))\n                                    ret_1 := add(add(memPtr, shl(5, iszero(iszero(length_1)))), _27)\n                                }\n                                case 1 {\n                                    mstore(_4, _3)\n                                    let dataPos_1 := 62514009886607029107290561805838585334079798074568712924583230797734656856475\n                                    let i_1 := _4\n                                    for { } lt(i_1, length_1) { i_1 := add(i_1, _27) }\n                                    {\n                                        mstore(add(add(memPtr, i_1), _27), sload(dataPos_1))\n                                        dataPos_1 := add(dataPos_1, _26)\n                                    }\n                                    ret_1 := add(add(memPtr, i_1), _27)\n                                }\n                                let newFreePtr_1 := add(memPtr, and(add(sub(ret_1, memPtr), 31), not(31)))\n                                if or(gt(newFreePtr_1, 0xffffffffffffffff), lt(newFreePtr_1, memPtr))\n                                {\n                                    mstore(_4, shl(224, 0x4e487b71))\n                                    mstore(_3, 0x41)\n                                    revert(_4, 0x24)\n                                }\n                                mstore(_2, newFreePtr_1)\n                                return(newFreePtr_1, sub(abi_encode_string(newFreePtr_1, memPtr), newFreePtr_1))\n                            }\n                            case 0x9dc29fac {\n                                if callvalue() { revert(_4, _4) }\n                                if slt(add(calldatasize(), not(3)), _2) { revert(_4, _4) }\n                                let value0_3 := abi_decode_address_3706()\n                                let value_2 := calldataload(36)\n                                let _28 := and(/** @src 63:8317:8338  \"account == address(0)\" */ value0_3, /** @src 62:110:391  \"contract ERC20Mock is ERC20 {...\" */ sub(shl(160, 1), 1))\n                                /// @src 63:8313:8402  \"if (account == address(0)) {...\"\n                                if /** @src 63:8317:8338  \"account == address(0)\" */ iszero(/** @src 62:110:391  \"contract ERC20Mock is ERC20 {...\" */ _28)\n                                /// @src 63:8313:8402  \"if (account == address(0)) {...\"\n                                {\n                                    /// @src 63:8361:8391  \"ERC20InvalidSender(address(0))\"\n                                    let _29 := /** @src 62:110:391  \"contract ERC20Mock is ERC20 {...\" */ mload(_2)\n                                    /// @src 63:8361:8391  \"ERC20InvalidSender(address(0))\"\n                                    mstore(_29, shl(225, 0x4b637e8f))\n                                    /// @src 62:110:391  \"contract ERC20Mock is ERC20 {...\"\n                                    mstore(/** @src 63:8361:8391  \"ERC20InvalidSender(address(0))\" */ add(_29, /** @src 62:110:391  \"contract ERC20Mock is ERC20 {...\" */ _3), _4)\n                                    /// @src 63:8361:8391  \"ERC20InvalidSender(address(0))\"\n                                    revert(_29, /** @src 62:110:391  \"contract ERC20Mock is ERC20 {...\" */ 36)\n                                }\n                                mstore(_4, _28)\n                                mstore(0x20, _4)\n                                let _30 := sload(keccak256(_4, _2))\n                                /// @src 63:6599:6714  \"if (fromBalance < value) {...\"\n                                if /** @src 63:6603:6622  \"fromBalance < value\" */ lt(_30, value_2)\n                                /// @src 63:6599:6714  \"if (fromBalance < value) {...\"\n                                {\n                                    /// @src 63:6649:6699  \"ERC20InsufficientBalance(from, fromBalance, value)\"\n                                    let _31 := /** @src 62:110:391  \"contract ERC20Mock is ERC20 {...\" */ mload(_2)\n                                    /// @src 63:6649:6699  \"ERC20InsufficientBalance(from, fromBalance, value)\"\n                                    mstore(_31, shl(226, 0x391434e3))\n                                    revert(_31, sub(abi_encode_address_uint256_uint256(add(_31, /** @src 62:110:391  \"contract ERC20Mock is ERC20 {...\" */ _3), /** @src 63:6649:6699  \"ERC20InsufficientBalance(from, fromBalance, value)\" */ value0_3, _30, value_2), _31))\n                                }\n                                /// @src 62:110:391  \"contract ERC20Mock is ERC20 {...\"\n                                mstore(_4, _28)\n                                mstore(0x20, _4)\n                                sstore(keccak256(_4, _2), sub(/** @src 63:6852:6871  \"fromBalance - value\" */ _30, value_2))\n                                /// @src 62:110:391  \"contract ERC20Mock is ERC20 {...\"\n                                sstore(/** @src 63:7073:7094  \"_totalSupply -= value\" */ 0x02, /** @src 62:110:391  \"contract ERC20Mock is ERC20 {...\" */ sub(sload(/** @src 63:7073:7094  \"_totalSupply -= value\" */ 0x02), /** @src 62:110:391  \"contract ERC20Mock is ERC20 {...\" */ value_2))\n                                /// @src 63:7346:7371  \"Transfer(from, to, value)\"\n                                let _32 := /** @src 62:110:391  \"contract ERC20Mock is ERC20 {...\" */ mload(_2)\n                                mstore(_32, value_2)\n                                /// @src 63:7346:7371  \"Transfer(from, to, value)\"\n                                log3(_32, /** @src 62:110:391  \"contract ERC20Mock is ERC20 {...\" */ 0x20, /** @src 63:7346:7371  \"Transfer(from, to, value)\" */ 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef, _28, /** @src 62:110:391  \"contract ERC20Mock is ERC20 {...\" */ _4)\n                                return(_4, _4)\n                            }\n                            case 0xa9059cbb {\n                                if callvalue() { revert(_4, _4) }\n                                if slt(add(calldatasize(), not(3)), _2) { revert(_4, _4) }\n                                let value0_4 := abi_decode_address_3706()\n                                /// @src 63:3754:3759  \"value\"\n                                fun_transfer(/** @src 69:735:745  \"msg.sender\" */ caller(), /** @src 63:3754:3759  \"value\" */ value0_4, /** @src 62:110:391  \"contract ERC20Mock is ERC20 {...\" */ calldataload(36))\n                                let memPos_5 := mload(_2)\n                                mstore(memPos_5, 1)\n                                return(memPos_5, 32)\n                            }\n                            case 0xdd62ed3e {\n                                if callvalue() { revert(_4, _4) }\n                                if slt(add(calldatasize(), not(3)), _2) { revert(_4, _4) }\n                                let value0_5 := abi_decode_address_3706()\n                                let value1_1 := abi_decode_address()\n                                let _33 := sub(shl(160, 1), 1)\n                                mstore(_4, and(value0_5, _33))\n                                mstore(32, /** @src 63:3952:3963  \"_allowances\" */ 0x01)\n                                /// @src 62:110:391  \"contract ERC20Mock is ERC20 {...\"\n                                let _34 := keccak256(_4, _2)\n                                mstore(_4, and(value1_1, _33))\n                                mstore(32, _34)\n                                let _35 := sload(keccak256(_4, _2))\n                                let memPos_6 := mload(_2)\n                                mstore(memPos_6, _35)\n                                return(memPos_6, 32)\n                            }\n                        }\n                        revert(0, 0)\n                    }\n                    function abi_encode_string(headStart, value0) -> tail\n                    {\n                        let _1 := 32\n                        mstore(headStart, 32)\n                        let length := mload(value0)\n                        mstore(add(headStart, 32), length)\n                        let i := 0\n                        for { } lt(i, length) { i := add(i, _1) }\n                        {\n                            mstore(add(add(headStart, i), 64), mload(add(add(value0, i), _1)))\n                        }\n                        mstore(add(add(headStart, length), 64), 0)\n                        tail := add(add(headStart, and(add(length, 31), not(31))), 64)\n                    }\n                    function abi_decode_address_3706() -> value\n                    {\n                        value := calldataload(4)\n                        if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(0, 0) }\n                    }\n                    function abi_decode_address() -> value\n                    {\n                        value := calldataload(36)\n                        if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(0, 0) }\n                    }\n                    function abi_encode_address_uint256_uint256(headStart, value0, value1, value2) -> tail\n                    {\n                        tail := add(headStart, 96)\n                        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n                        mstore(add(headStart, 32), value1)\n                        mstore(add(headStart, 64), value2)\n                    }\n                    /// @ast-id 47437 @src 63:5656:5956  \"function _transfer(address from, address to, uint256 value) internal {...\"\n                    function fun_transfer(var_from, var_to, var_value)\n                    {\n                        /// @src 62:110:391  \"contract ERC20Mock is ERC20 {...\"\n                        let _1 := sub(shl(160, 1), 1)\n                        let _2 := and(/** @src 63:5739:5757  \"from == address(0)\" */ var_from, /** @src 62:110:391  \"contract ERC20Mock is ERC20 {...\" */ _1)\n                        /// @src 63:5735:5821  \"if (from == address(0)) {...\"\n                        if /** @src 63:5739:5757  \"from == address(0)\" */ iszero(/** @src 62:110:391  \"contract ERC20Mock is ERC20 {...\" */ _2)\n                        /// @src 63:5735:5821  \"if (from == address(0)) {...\"\n                        {\n                            /// @src 63:5780:5810  \"ERC20InvalidSender(address(0))\"\n                            let _3 := /** @src 62:110:391  \"contract ERC20Mock is ERC20 {...\" */ mload(64)\n                            /// @src 63:5780:5810  \"ERC20InvalidSender(address(0))\"\n                            mstore(_3, /** @src 63:8361:8391  \"ERC20InvalidSender(address(0))\" */ shl(225, 0x4b637e8f))\n                            /// @src 62:110:391  \"contract ERC20Mock is ERC20 {...\"\n                            mstore(/** @src 63:5780:5810  \"ERC20InvalidSender(address(0))\" */ add(_3, 4), /** @src 63:5755:5756  \"0\" */ 0x00)\n                            /// @src 63:5780:5810  \"ERC20InvalidSender(address(0))\"\n                            revert(_3, /** @src 62:110:391  \"contract ERC20Mock is ERC20 {...\" */ 36)\n                        }\n                        let _4 := and(/** @src 63:5834:5850  \"to == address(0)\" */ var_to, /** @src 62:110:391  \"contract ERC20Mock is ERC20 {...\" */ _1)\n                        /// @src 63:5830:5916  \"if (to == address(0)) {...\"\n                        if /** @src 63:5834:5850  \"to == address(0)\" */ iszero(/** @src 62:110:391  \"contract ERC20Mock is ERC20 {...\" */ _4)\n                        /// @src 63:5830:5916  \"if (to == address(0)) {...\"\n                        {\n                            /// @src 63:5873:5905  \"ERC20InvalidReceiver(address(0))\"\n                            let _5 := /** @src 62:110:391  \"contract ERC20Mock is ERC20 {...\" */ mload(64)\n                            /// @src 63:5873:5905  \"ERC20InvalidReceiver(address(0))\"\n                            mstore(_5, /** @src 63:7835:7867  \"ERC20InvalidReceiver(address(0))\" */ shl(224, 0xec442f05))\n                            /// @src 62:110:391  \"contract ERC20Mock is ERC20 {...\"\n                            mstore(/** @src 63:5873:5905  \"ERC20InvalidReceiver(address(0))\" */ add(_5, 4), /** @src 63:5755:5756  \"0\" */ 0x00)\n                            /// @src 63:5873:5905  \"ERC20InvalidReceiver(address(0))\"\n                            revert(_5, /** @src 62:110:391  \"contract ERC20Mock is ERC20 {...\" */ 36)\n                        }\n                        /// @src 63:6356:6896  \"if (from == address(0)) {...\"\n                        let _6 := 0\n                        /// @src 62:110:391  \"contract ERC20Mock is ERC20 {...\"\n                        mstore(/** @src 63:6356:6896  \"if (from == address(0)) {...\" */ _6, /** @src 62:110:391  \"contract ERC20Mock is ERC20 {...\" */ _2)\n                        mstore(0x20, /** @src 63:6356:6896  \"if (from == address(0)) {...\" */ _6)\n                        /// @src 62:110:391  \"contract ERC20Mock is ERC20 {...\"\n                        let _7 := sload(keccak256(/** @src 63:6356:6896  \"if (from == address(0)) {...\" */ _6, /** @src 62:110:391  \"contract ERC20Mock is ERC20 {...\" */ 0x40))\n                        /// @src 63:6599:6714  \"if (fromBalance < value) {...\"\n                        if /** @src 63:6603:6622  \"fromBalance < value\" */ lt(_7, var_value)\n                        /// @src 63:6599:6714  \"if (fromBalance < value) {...\"\n                        {\n                            /// @src 63:6649:6699  \"ERC20InsufficientBalance(from, fromBalance, value)\"\n                            let _8 := /** @src 62:110:391  \"contract ERC20Mock is ERC20 {...\" */ mload(0x40)\n                            /// @src 63:6649:6699  \"ERC20InsufficientBalance(from, fromBalance, value)\"\n                            mstore(_8, shl(226, 0x391434e3))\n                            revert(_8, sub(abi_encode_address_uint256_uint256(add(_8, 4), var_from, _7, var_value), _8))\n                        }\n                        /// @src 62:110:391  \"contract ERC20Mock is ERC20 {...\"\n                        mstore(/** @src 63:6356:6896  \"if (from == address(0)) {...\" */ _6, /** @src 62:110:391  \"contract ERC20Mock is ERC20 {...\" */ _2)\n                        mstore(0x20, /** @src 63:6356:6896  \"if (from == address(0)) {...\" */ _6)\n                        /// @src 62:110:391  \"contract ERC20Mock is ERC20 {...\"\n                        sstore(keccak256(/** @src 63:6356:6896  \"if (from == address(0)) {...\" */ _6, /** @src 62:110:391  \"contract ERC20Mock is ERC20 {...\" */ 0x40), sub(/** @src 63:6852:6871  \"fromBalance - value\" */ _7, var_value))\n                        /// @src 62:110:391  \"contract ERC20Mock is ERC20 {...\"\n                        mstore(/** @src 63:6356:6896  \"if (from == address(0)) {...\" */ _6, /** @src 62:110:391  \"contract ERC20Mock is ERC20 {...\" */ _4)\n                        let dataSlot := keccak256(/** @src 63:6356:6896  \"if (from == address(0)) {...\" */ _6, /** @src 62:110:391  \"contract ERC20Mock is ERC20 {...\" */ 0x40)\n                        sstore(dataSlot, add(sload(/** @src 63:7284:7306  \"_balances[to] += value\" */ dataSlot), /** @src 62:110:391  \"contract ERC20Mock is ERC20 {...\" */ var_value))\n                        /// @src 63:7346:7371  \"Transfer(from, to, value)\"\n                        let _9 := /** @src 62:110:391  \"contract ERC20Mock is ERC20 {...\" */ mload(0x40)\n                        mstore(_9, var_value)\n                        /// @src 63:7346:7371  \"Transfer(from, to, value)\"\n                        log3(_9, /** @src 62:110:391  \"contract ERC20Mock is ERC20 {...\" */ 0x20, /** @src 63:7346:7371  \"Transfer(from, to, value)\" */ 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef, _2, _4)\n                    }\n                }\n                data \".metadata\" hex\"a164736f6c6343000818000a\"\n            }\n        }\n        /// @use-src 15:\"lib/forge-std/src/Base.sol\", 16:\"lib/forge-std/src/Script.sol\", 18:\"lib/forge-std/src/StdChains.sol\", 19:\"lib/forge-std/src/StdCheats.sol\", 27:\"lib/forge-std/src/StdUtils.sol\", 78:\"script/DeployMinimalAccount.s.sol\"\n        object \"DeployMinimal_50440\" {\n            code {\n                {\n                    /// @src 78:221:825  \"contract DeployMinimal is Script {...\"\n                    let _1 := memoryguard(0x80)\n                    mstore(64, _1)\n                    if callvalue() { revert(0, 0) }\n                    sstore(/** @src 18:3166:3170  \"true\" */ 0x0c, /** @src 78:221:825  \"contract DeployMinimal is Script {...\" */ or(and(sload(/** @src 18:3166:3170  \"true\" */ 0x0c), /** @src 78:221:825  \"contract DeployMinimal is Script {...\" */ not(16711935)), 65537))\n                    let _2 := datasize(\"DeployMinimal_50440_deployed\")\n                    codecopy(_1, dataoffset(\"DeployMinimal_50440_deployed\"), _2)\n                    return(_1, _2)\n                }\n            }\n            /// @use-src 15:\"lib/forge-std/src/Base.sol\", 16:\"lib/forge-std/src/Script.sol\", 78:\"script/DeployMinimalAccount.s.sol\"\n            object \"DeployMinimal_50440_deployed\" {\n                code {\n                    {\n                        /// @src 78:221:825  \"contract DeployMinimal is Script {...\"\n                        let _1 := memoryguard(0x80)\n                        let _2 := 64\n                        mstore(_2, _1)\n                        let _3 := 4\n                        if iszero(lt(calldatasize(), _3))\n                        {\n                            let _4 := 0\n                            switch shr(224, calldataload(_4))\n                            case 0x79502c55 {\n                                if callvalue() { revert(_4, _4) }\n                                if slt(add(calldatasize(), not(3)), _4) { revert(_4, _4) }\n                                let _5 := sub(shl(160, 1), 1)\n                                let value := and(sload(/** @src 78:302:342  \"HelperConfig.NetworkConfig public config\" */ 13), /** @src 78:221:825  \"contract DeployMinimal is Script {...\" */ _5)\n                                let value_1 := and(sload(/** @src 78:302:342  \"HelperConfig.NetworkConfig public config\" */ 14), /** @src 78:221:825  \"contract DeployMinimal is Script {...\" */ _5)\n                                mstore(_1, value)\n                                mstore(add(_1, 32), value_1)\n                                return(_1, _2)\n                            }\n                            case 0x7d7a1c8b {\n                                if callvalue() { revert(_4, _4) }\n                                if slt(add(calldatasize(), not(3)), _4) { revert(_4, _4) }\n                                /// @src 78:513:531  \"new HelperConfig()\"\n                                let _6 := /** @src 78:221:825  \"contract DeployMinimal is Script {...\" */ mload(_2)\n                                /// @src 78:513:531  \"new HelperConfig()\"\n                                let _7 := datasize(\"HelperConfig_50629\")\n                                let _8 := add(_6, _7)\n                                let _9 := 0xffffffffffffffff\n                                if or(gt(_8, _9), lt(_8, _6))\n                                {\n                                    /// @src 78:221:825  \"contract DeployMinimal is Script {...\"\n                                    mstore(_4, shl(224, 0x4e487b71))\n                                    mstore(_3, 0x41)\n                                    revert(_4, 0x24)\n                                }\n                                /// @src 78:513:531  \"new HelperConfig()\"\n                                datacopy(_6, dataoffset(\"HelperConfig_50629\"), _7)\n                                let expr_address := create(/** @src 78:221:825  \"contract DeployMinimal is Script {...\" */ _4, /** @src 78:513:531  \"new HelperConfig()\" */ _6, sub(_8, _6))\n                                if iszero(expr_address)\n                                {\n                                    /// @src 78:221:825  \"contract DeployMinimal is Script {...\"\n                                    let pos := mload(_2)\n                                    returndatacopy(pos, _4, returndatasize())\n                                    revert(pos, returndatasize())\n                                }\n                                let _10 := sub(shl(160, 1), 1)\n                                let _11 := and(expr_address, _10)\n                                let _12 := shl(160, 0xffffffffffffffffffffffff)\n                                sstore(/** @src 78:498:531  \"helperConfig = new HelperConfig()\" */ 0x0f, /** @src 78:221:825  \"contract DeployMinimal is Script {...\" */ or(and(sload(/** @src 78:498:531  \"helperConfig = new HelperConfig()\" */ 0x0f), /** @src 78:221:825  \"contract DeployMinimal is Script {...\" */ _12), _11))\n                                /// @src 78:550:574  \"helperConfig.getConfig()\"\n                                let _13 := /** @src 78:221:825  \"contract DeployMinimal is Script {...\" */ mload(_2)\n                                /// @src 78:550:574  \"helperConfig.getConfig()\"\n                                mstore(_13, /** @src 78:221:825  \"contract DeployMinimal is Script {...\" */ shl(226, 0x30fe4275))\n                                /// @src 78:550:574  \"helperConfig.getConfig()\"\n                                let _14 := call(gas(), _11, /** @src 78:221:825  \"contract DeployMinimal is Script {...\" */ _4, /** @src 78:550:574  \"helperConfig.getConfig()\" */ _13, /** @src 78:221:825  \"contract DeployMinimal is Script {...\" */ _3, /** @src 78:550:574  \"helperConfig.getConfig()\" */ _13, /** @src 78:221:825  \"contract DeployMinimal is Script {...\" */ _2)\n                                /// @src 78:550:574  \"helperConfig.getConfig()\"\n                                if iszero(_14)\n                                {\n                                    /// @src 78:221:825  \"contract DeployMinimal is Script {...\"\n                                    let pos_1 := mload(_2)\n                                    returndatacopy(pos_1, _4, returndatasize())\n                                    revert(pos_1, returndatasize())\n                                }\n                                /// @src 78:550:574  \"helperConfig.getConfig()\"\n                                let expr_mpos := /** @src 78:221:825  \"contract DeployMinimal is Script {...\" */ _4\n                                /// @src 78:550:574  \"helperConfig.getConfig()\"\n                                if _14\n                                {\n                                    let _15 := /** @src 78:221:825  \"contract DeployMinimal is Script {...\" */ _2\n                                    /// @src 78:550:574  \"helperConfig.getConfig()\"\n                                    if gt(/** @src 78:221:825  \"contract DeployMinimal is Script {...\" */ _2, /** @src 78:550:574  \"helperConfig.getConfig()\" */ returndatasize()) { _15 := returndatasize() }\n                                    /// @src 78:221:825  \"contract DeployMinimal is Script {...\"\n                                    let newFreePtr := add(_13, and(add(_15, 31), not(31)))\n                                    if or(gt(newFreePtr, /** @src 78:513:531  \"new HelperConfig()\" */ _9), /** @src 78:221:825  \"contract DeployMinimal is Script {...\" */ lt(newFreePtr, _13))\n                                    {\n                                        mstore(_4, shl(224, 0x4e487b71))\n                                        mstore(_3, 0x41)\n                                        revert(_4, 0x24)\n                                    }\n                                    if slt(sub(/** @src 78:550:574  \"helperConfig.getConfig()\" */ add(_13, _15), /** @src 78:221:825  \"contract DeployMinimal is Script {...\" */ _13), _2) { revert(_4, _4) }\n                                    let newFreePtr_1 := add(newFreePtr, _2)\n                                    if or(gt(newFreePtr_1, /** @src 78:513:531  \"new HelperConfig()\" */ _9), /** @src 78:221:825  \"contract DeployMinimal is Script {...\" */ lt(newFreePtr_1, newFreePtr))\n                                    {\n                                        mstore(_4, shl(224, 0x4e487b71))\n                                        mstore(_3, 0x41)\n                                        revert(_4, 0x24)\n                                    }\n                                    mstore(_2, newFreePtr_1)\n                                    mstore(newFreePtr, abi_decode_address_fromMemory(_13))\n                                    mstore(add(newFreePtr, 32), abi_decode_address_fromMemory(add(_13, 32)))\n                                    /// @src 78:550:574  \"helperConfig.getConfig()\"\n                                    expr_mpos := newFreePtr\n                                }\n                                /// @src 78:221:825  \"contract DeployMinimal is Script {...\"\n                                sstore(/** @src 78:541:574  \"config = helperConfig.getConfig()\" */ 0x0d, /** @src 78:221:825  \"contract DeployMinimal is Script {...\" */ or(and(sload(/** @src 78:541:574  \"config = helperConfig.getConfig()\" */ 0x0d), /** @src 78:221:825  \"contract DeployMinimal is Script {...\" */ _12), and(mload(expr_mpos), _10)))\n                                let _16 := and(mload(add(expr_mpos, 32)), _10)\n                                sstore(14, or(and(sload(14), _12), _16))\n                                let _17 := 0x7109709ecfa91a80626ff3989d68f67f5b1dd12d\n                                /// @src 78:585:618  \"vm.startBroadcast(config.account)\"\n                                if iszero(extcodesize(/** @src 78:221:825  \"contract DeployMinimal is Script {...\" */ _17))\n                                /// @src 78:585:618  \"vm.startBroadcast(config.account)\"\n                                {\n                                    /// @src 78:221:825  \"contract DeployMinimal is Script {...\"\n                                    revert(_4, _4)\n                                }\n                                /// @src 78:585:618  \"vm.startBroadcast(config.account)\"\n                                let _18 := /** @src 78:221:825  \"contract DeployMinimal is Script {...\" */ mload(_2)\n                                /// @src 78:585:618  \"vm.startBroadcast(config.account)\"\n                                mstore(_18, /** @src 78:221:825  \"contract DeployMinimal is Script {...\" */ shl(224, 0x7fec2a8d))\n                                mstore(/** @src 78:585:618  \"vm.startBroadcast(config.account)\" */ add(_18, /** @src 78:221:825  \"contract DeployMinimal is Script {...\" */ _3), _16)\n                                /// @src 78:585:618  \"vm.startBroadcast(config.account)\"\n                                let _19 := call(gas(), /** @src 78:221:825  \"contract DeployMinimal is Script {...\" */ _17, _4, /** @src 78:585:618  \"vm.startBroadcast(config.account)\" */ _18, /** @src 15:1590:1604  \"Vm(VM_ADDRESS)\" */ 36, /** @src 78:585:618  \"vm.startBroadcast(config.account)\" */ _18, /** @src 78:221:825  \"contract DeployMinimal is Script {...\" */ _4)\n                                /// @src 78:585:618  \"vm.startBroadcast(config.account)\"\n                                if iszero(_19)\n                                {\n                                    /// @src 78:221:825  \"contract DeployMinimal is Script {...\"\n                                    let pos_2 := mload(_2)\n                                    returndatacopy(pos_2, _4, returndatasize())\n                                    revert(pos_2, returndatasize())\n                                }\n                                /// @src 78:585:618  \"vm.startBroadcast(config.account)\"\n                                if _19\n                                {\n                                    finalize_allocation(_18)\n                                    /// @src 78:221:825  \"contract DeployMinimal is Script {...\"\n                                    _4 := _4\n                                }\n                                let value_2 := and(sload(/** @src 78:541:574  \"config = helperConfig.getConfig()\" */ 0x0d), /** @src 78:221:825  \"contract DeployMinimal is Script {...\" */ _10)\n                                /// @src 78:645:682  \"new MinimalAccount(config.entryPoint)\"\n                                let _20 := /** @src 78:221:825  \"contract DeployMinimal is Script {...\" */ mload(_2)\n                                /// @src 78:645:682  \"new MinimalAccount(config.entryPoint)\"\n                                let _21 := datasize(\"MinimalAccount_51163\")\n                                let _22 := add(_20, _21)\n                                if or(gt(_22, /** @src 78:513:531  \"new HelperConfig()\" */ _9), /** @src 78:645:682  \"new MinimalAccount(config.entryPoint)\" */ lt(_22, _20))\n                                {\n                                    /// @src 78:221:825  \"contract DeployMinimal is Script {...\"\n                                    mstore(_4, shl(224, 0x4e487b71))\n                                    mstore(_3, 0x41)\n                                    revert(_4, /** @src 15:1590:1604  \"Vm(VM_ADDRESS)\" */ 36)\n                                }\n                                /// @src 78:645:682  \"new MinimalAccount(config.entryPoint)\"\n                                datacopy(_20, dataoffset(\"MinimalAccount_51163\"), _21)\n                                /// @src 78:221:825  \"contract DeployMinimal is Script {...\"\n                                mstore(_22, value_2)\n                                /// @src 78:645:682  \"new MinimalAccount(config.entryPoint)\"\n                                let expr_address_1 := create(/** @src 78:221:825  \"contract DeployMinimal is Script {...\" */ _4, /** @src 78:645:682  \"new MinimalAccount(config.entryPoint)\" */ _20, add(sub(/** @src 15:1590:1604  \"Vm(VM_ADDRESS)\" */ _22, /** @src 78:645:682  \"new MinimalAccount(config.entryPoint)\" */ _20), /** @src 78:221:825  \"contract DeployMinimal is Script {...\" */ 32))\n                                /// @src 78:645:682  \"new MinimalAccount(config.entryPoint)\"\n                                if iszero(expr_address_1)\n                                {\n                                    /// @src 78:221:825  \"contract DeployMinimal is Script {...\"\n                                    let pos_3 := mload(_2)\n                                    returndatacopy(pos_3, _4, returndatasize())\n                                    revert(pos_3, returndatasize())\n                                }\n                                /// @src 15:1590:1604  \"Vm(VM_ADDRESS)\"\n                                let _23 := sload(/** @src 78:628:682  \"minimalAccount = new MinimalAccount(config.entryPoint)\" */ 0x0c)\n                                /// @src 15:1590:1604  \"Vm(VM_ADDRESS)\"\n                                let result := or(and(_23, not(sub(shl(184, /** @src 78:221:825  \"contract DeployMinimal is Script {...\" */ 1), /** @src 15:1590:1604  \"Vm(VM_ADDRESS)\" */ 16777216))), and(shl(24, expr_address_1), sub(shl(184, /** @src 78:221:825  \"contract DeployMinimal is Script {...\" */ 1), /** @src 15:1590:1604  \"Vm(VM_ADDRESS)\" */ 16777216)))\n                                sstore(/** @src 78:628:682  \"minimalAccount = new MinimalAccount(config.entryPoint)\" */ 0x0c, /** @src 15:1590:1604  \"Vm(VM_ADDRESS)\" */ result)\n                                let value_3 := /** @src 78:221:825  \"contract DeployMinimal is Script {...\" */ and(/** @src 15:1590:1604  \"Vm(VM_ADDRESS)\" */ shr(24, result), /** @src 78:221:825  \"contract DeployMinimal is Script {...\" */ _10)\n                                let value_4 := and(sload(14), _10)\n                                /// @src 78:692:740  \"minimalAccount.transferOwnership(config.account)\"\n                                if iszero(extcodesize(value_3))\n                                {\n                                    /// @src 78:221:825  \"contract DeployMinimal is Script {...\"\n                                    revert(_4, _4)\n                                }\n                                /// @src 78:692:740  \"minimalAccount.transferOwnership(config.account)\"\n                                let _24 := /** @src 78:221:825  \"contract DeployMinimal is Script {...\" */ mload(_2)\n                                /// @src 78:692:740  \"minimalAccount.transferOwnership(config.account)\"\n                                mstore(_24, /** @src 78:221:825  \"contract DeployMinimal is Script {...\" */ shl(224, 0xf2fde38b))\n                                mstore(/** @src 78:692:740  \"minimalAccount.transferOwnership(config.account)\" */ add(_24, /** @src 78:221:825  \"contract DeployMinimal is Script {...\" */ _3), value_4)\n                                /// @src 78:692:740  \"minimalAccount.transferOwnership(config.account)\"\n                                let _25 := call(gas(), value_3, /** @src 78:221:825  \"contract DeployMinimal is Script {...\" */ _4, /** @src 78:692:740  \"minimalAccount.transferOwnership(config.account)\" */ _24, /** @src 15:1590:1604  \"Vm(VM_ADDRESS)\" */ 36, /** @src 78:692:740  \"minimalAccount.transferOwnership(config.account)\" */ _24, /** @src 78:221:825  \"contract DeployMinimal is Script {...\" */ _4)\n                                /// @src 78:692:740  \"minimalAccount.transferOwnership(config.account)\"\n                                if iszero(_25)\n                                {\n                                    /// @src 78:221:825  \"contract DeployMinimal is Script {...\"\n                                    let pos_4 := mload(_2)\n                                    returndatacopy(pos_4, _4, returndatasize())\n                                    revert(pos_4, returndatasize())\n                                }\n                                /// @src 78:692:740  \"minimalAccount.transferOwnership(config.account)\"\n                                if _25\n                                {\n                                    finalize_allocation(_24)\n                                    /// @src 78:221:825  \"contract DeployMinimal is Script {...\"\n                                    if _4 { revert(_4, _4) }\n                                }\n                                /// @src 78:750:768  \"vm.stopBroadcast()\"\n                                if iszero(extcodesize(/** @src 78:221:825  \"contract DeployMinimal is Script {...\" */ _17))\n                                /// @src 78:750:768  \"vm.stopBroadcast()\"\n                                {\n                                    /// @src 78:221:825  \"contract DeployMinimal is Script {...\"\n                                    revert(_4, _4)\n                                }\n                                /// @src 78:750:768  \"vm.stopBroadcast()\"\n                                let _26 := /** @src 78:221:825  \"contract DeployMinimal is Script {...\" */ mload(_2)\n                                /// @src 78:750:768  \"vm.stopBroadcast()\"\n                                mstore(_26, /** @src 78:221:825  \"contract DeployMinimal is Script {...\" */ shl(225, 0x3b756e9b))\n                                /// @src 78:750:768  \"vm.stopBroadcast()\"\n                                let _27 := call(gas(), /** @src 78:221:825  \"contract DeployMinimal is Script {...\" */ _17, _4, /** @src 78:750:768  \"vm.stopBroadcast()\" */ _26, /** @src 78:221:825  \"contract DeployMinimal is Script {...\" */ _3, /** @src 78:750:768  \"vm.stopBroadcast()\" */ _26, /** @src 78:221:825  \"contract DeployMinimal is Script {...\" */ _4)\n                                /// @src 78:750:768  \"vm.stopBroadcast()\"\n                                if iszero(_27)\n                                {\n                                    /// @src 78:221:825  \"contract DeployMinimal is Script {...\"\n                                    let pos_5 := mload(_2)\n                                    returndatacopy(pos_5, _4, returndatasize())\n                                    revert(pos_5, returndatasize())\n                                }\n                                /// @src 78:750:768  \"vm.stopBroadcast()\"\n                                if _27\n                                {\n                                    finalize_allocation(_26)\n                                    /// @src 78:221:825  \"contract DeployMinimal is Script {...\"\n                                    if _4 { revert(_4, _4) }\n                                }\n                                let value_5 := and(sload(/** @src 78:498:531  \"helperConfig = new HelperConfig()\" */ 0x0f), /** @src 78:221:825  \"contract DeployMinimal is Script {...\" */ _10)\n                                /// @src 15:1590:1604  \"Vm(VM_ADDRESS)\"\n                                let value_6 := /** @src 78:221:825  \"contract DeployMinimal is Script {...\" */ and(/** @src 15:1590:1604  \"Vm(VM_ADDRESS)\" */ shr(24, sload(/** @src 78:628:682  \"minimalAccount = new MinimalAccount(config.entryPoint)\" */ 0x0c)), /** @src 78:221:825  \"contract DeployMinimal is Script {...\" */ _10)\n                                let memPos := mload(_2)\n                                mstore(memPos, value_5)\n                                mstore(add(memPos, 32), value_6)\n                                return(memPos, _2)\n                            }\n                            case 0xc0406226 {\n                                if callvalue() { revert(_4, _4) }\n                                if slt(add(calldatasize(), not(3)), _4) { revert(_4, _4) }\n                                return(_4, _4)\n                            }\n                            case 0xc476b1f7 {\n                                if callvalue() { revert(_4, _4) }\n                                if slt(add(calldatasize(), not(3)), _4) { revert(_4, _4) }\n                                let value_7 := and(shr(24, sload(/** @src 78:260:296  \"MinimalAccount public minimalAccount\" */ 12)), /** @src 78:221:825  \"contract DeployMinimal is Script {...\" */ sub(shl(160, 1), 1))\n                                let memPos_1 := mload(_2)\n                                mstore(memPos_1, value_7)\n                                return(memPos_1, 32)\n                            }\n                            case 0xf8ccbf47 {\n                                if callvalue() { revert(_4, _4) }\n                                if slt(add(calldatasize(), not(3)), _4) { revert(_4, _4) }\n                                let value_8 := and(shr(16, sload(/** @src 16:800:828  \"bool public IS_SCRIPT = true\" */ 12)), /** @src 78:221:825  \"contract DeployMinimal is Script {...\" */ 0xff)\n                                let memPos_2 := mload(_2)\n                                mstore(memPos_2, iszero(iszero(value_8)))\n                                return(memPos_2, 32)\n                            }\n                        }\n                        revert(0, 0)\n                    }\n                    function finalize_allocation(memPtr)\n                    {\n                        if gt(memPtr, 0xffffffffffffffff)\n                        {\n                            mstore(0, shl(224, 0x4e487b71))\n                            mstore(4, 0x41)\n                            revert(0, 0x24)\n                        }\n                        mstore(64, memPtr)\n                    }\n                    function abi_decode_address_fromMemory(offset) -> value\n                    {\n                        value := mload(offset)\n                        if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(0, 0) }\n                    }\n                }\n                /// @use-src 15:\"lib/forge-std/src/Base.sol\", 16:\"lib/forge-std/src/Script.sol\", 18:\"lib/forge-std/src/StdChains.sol\", 19:\"lib/forge-std/src/StdCheats.sol\", 27:\"lib/forge-std/src/StdUtils.sol\", 79:\"script/HelperConfig.s.sol\"\n                object \"HelperConfig_50629\" {\n                    code {\n                        {\n                            /// @src 79:191:2411  \"contract HelperConfig is Script {...\"\n                            mstore(64, memoryguard(0x80))\n                            if callvalue() { revert(0, 0) }\n                            sstore(/** @src 18:3166:3170  \"true\" */ 0x0c, /** @src 79:191:2411  \"contract HelperConfig is Script {...\" */ or(and(sload(/** @src 18:3166:3170  \"true\" */ 0x0c), /** @src 79:191:2411  \"contract HelperConfig is Script {...\" */ not(16711935)), 65537))\n                            let memPtr := allocate_memory()\n                            mstore(memPtr, 0)\n                            mstore(add(memPtr, 32), 0)\n                            /// @src 79:1530:1625  \"NetworkConfig({entryPoint: 0x5FF137D4b0FDCD49DcA30c7CF57E578a026d2789, account: BURNER_WALLET})\"\n                            let expr_mpos := /** @src 79:191:2411  \"contract HelperConfig is Script {...\" */ allocate_memory()\n                            /// @src 79:539:581  \"0x86E26DC295d7c11FF54a39aA3420E3F163581D0c\"\n                            mstore(expr_mpos, /** @src 79:1557:1599  \"0x5FF137D4b0FDCD49DcA30c7CF57E578a026d2789\" */ 0x5ff137d4b0fdcd49dca30c7cf57e578a026d2789)\n                            /// @src 79:1530:1625  \"NetworkConfig({entryPoint: 0x5FF137D4b0FDCD49DcA30c7CF57E578a026d2789, account: BURNER_WALLET})\"\n                            let _1 := add(expr_mpos, /** @src 79:191:2411  \"contract HelperConfig is Script {...\" */ 32)\n                            /// @src 79:539:581  \"0x86E26DC295d7c11FF54a39aA3420E3F163581D0c\"\n                            mstore(_1, 0x86e26dc295d7c11ff54a39aa3420e3f163581d0c)\n                            /// @src 79:399:407  \"11155111\"\n                            mstore(/** @src 79:191:2411  \"contract HelperConfig is Script {...\" */ 0, /** @src 79:399:407  \"11155111\" */ 0xaa36a7)\n                            mstore(/** @src 79:191:2411  \"contract HelperConfig is Script {...\" */ 32, /** @src 79:884:898  \"networkConfigs\" */ 0x0f)\n                            /// @src 79:399:407  \"11155111\"\n                            let dataSlot := keccak256(/** @src 79:191:2411  \"contract HelperConfig is Script {...\" */ 0, 64)\n                            /// @src 79:399:407  \"11155111\"\n                            let _2 := sub(shl(160, /** @src 79:191:2411  \"contract HelperConfig is Script {...\" */ 1), 1)\n                            /// @src 79:399:407  \"11155111\"\n                            let _3 := and(mload(expr_mpos), _2)\n                            let _4 := not(sub(shl(160, /** @src 79:191:2411  \"contract HelperConfig is Script {...\" */ 1), 1))\n                            /// @src 79:399:407  \"11155111\"\n                            sstore(dataSlot, or(and(sload(dataSlot), _4), _3))\n                            let memberSlot := add(dataSlot, /** @src 18:3166:3170  \"true\" */ 0x01)\n                            /// @src 79:399:407  \"11155111\"\n                            sstore(memberSlot, or(and(sload(memberSlot), _4), and(mload(_1), _2)))\n                            /// @src 79:191:2411  \"contract HelperConfig is Script {...\"\n                            let _5 := mload(64)\n                            let _6 := datasize(\"HelperConfig_50629_deployed\")\n                            codecopy(_5, dataoffset(\"HelperConfig_50629_deployed\"), _6)\n                            return(_5, _6)\n                        }\n                        function allocate_memory() -> memPtr\n                        {\n                            memPtr := mload(64)\n                            let newFreePtr := add(memPtr, 64)\n                            if or(gt(newFreePtr, sub(shl(64, 1), 1)), lt(newFreePtr, memPtr))\n                            {\n                                mstore(0, shl(224, 0x4e487b71))\n                                mstore(4, 0x41)\n                                revert(0, 0x24)\n                            }\n                            mstore(64, newFreePtr)\n                        }\n                    }\n                    /// @use-src 15:\"lib/forge-std/src/Base.sol\", 16:\"lib/forge-std/src/Script.sol\", 30:\"lib/forge-std/src/console.sol\", 79:\"script/HelperConfig.s.sol\"\n                    object \"HelperConfig_50629_deployed\" {\n                        code {\n                            {\n                                /// @src 79:191:2411  \"contract HelperConfig is Script {...\"\n                                let _1 := 64\n                                mstore(_1, memoryguard(0x80))\n                                if iszero(lt(calldatasize(), 4))\n                                {\n                                    let _2 := 0\n                                    switch shr(224, calldataload(_2))\n                                    case 0x12900da8 {\n                                        if callvalue() { revert(_2, _2) }\n                                        if slt(add(calldatasize(), not(3)), _2) { revert(_2, _2) }\n                                        let ret := fun_getOrCreateAnvilEthConfig()\n                                        let memPos := mload(_1)\n                                        return(memPos, sub(abi_encode_struct_NetworkConfig(memPos, ret), memPos))\n                                    }\n                                    case 0x3408e470 {\n                                        if callvalue() { revert(_2, _2) }\n                                        if slt(add(calldatasize(), not(3)), _2) { revert(_2, _2) }\n                                        let memPos_1 := mload(_1)\n                                        mstore(memPos_1, /** @src 79:2389:2402  \"block.chainid\" */ chainid())\n                                        /// @src 79:191:2411  \"contract HelperConfig is Script {...\"\n                                        return(memPos_1, 32)\n                                    }\n                                    case 0x7b99b603 {\n                                        if callvalue() { revert(_2, _2) }\n                                        if slt(add(calldatasize(), not(3)), 32) { revert(_2, _2) }\n                                        mstore(_2, calldataload(4))\n                                        mstore(32, /** @src 79:790:853  \"mapping(uint256 chainId => NetworkConfig) public networkConfigs\" */ 15)\n                                        /// @src 79:191:2411  \"contract HelperConfig is Script {...\"\n                                        let dataSlot := keccak256(_2, _1)\n                                        let _3 := sub(shl(160, 1), 1)\n                                        let cleaned := and(sload(/** @src 79:790:853  \"mapping(uint256 chainId => NetworkConfig) public networkConfigs\" */ dataSlot), /** @src 79:191:2411  \"contract HelperConfig is Script {...\" */ _3)\n                                        let cleaned_1 := and(sload(/** @src 79:790:853  \"mapping(uint256 chainId => NetworkConfig) public networkConfigs\" */ add(dataSlot, /** @src 79:191:2411  \"contract HelperConfig is Script {...\" */ 1)), _3)\n                                        let memPos_2 := mload(_1)\n                                        return(memPos_2, sub(abi_encode_address_address(memPos_2, cleaned, cleaned_1), memPos_2))\n                                    }\n                                    case 0xa60f7516 {\n                                        if callvalue() { revert(_2, _2) }\n                                        if slt(add(calldatasize(), not(3)), _2) { revert(_2, _2) }\n                                        let _4 := sub(shl(160, 1), 1)\n                                        let cleaned_2 := and(sload(/** @src 79:745:784  \"NetworkConfig public localNetworkConfig\" */ 13), /** @src 79:191:2411  \"contract HelperConfig is Script {...\" */ _4)\n                                        let cleaned_3 := and(sload(/** @src 79:745:784  \"NetworkConfig public localNetworkConfig\" */ 14), /** @src 79:191:2411  \"contract HelperConfig is Script {...\" */ _4)\n                                        let memPos_3 := mload(_1)\n                                        return(memPos_3, sub(abi_encode_address_address(memPos_3, cleaned_2, cleaned_3), memPos_3))\n                                    }\n                                    case 0xc3f909d4 {\n                                        if callvalue() { revert(_2, _2) }\n                                        if slt(add(calldatasize(), not(3)), _2) { revert(_2, _2) }\n                                        let memPtr := mload(_1)\n                                        finalize_allocation_2007(memPtr)\n                                        mstore(memPtr, _2)\n                                        mstore(add(memPtr, 32), _2)\n                                        /// @src 79:1026:1067  \"return _getConfigByChainId(block.chainid)\"\n                                        let var_mpos := /** @src 79:1033:1067  \"_getConfigByChainId(block.chainid)\" */ fun_getConfigByChainId(/** @src 79:1053:1066  \"block.chainid\" */ chainid())\n                                        /// @src 79:191:2411  \"contract HelperConfig is Script {...\"\n                                        let memPos_4 := mload(_1)\n                                        return(memPos_4, sub(abi_encode_struct_NetworkConfig(memPos_4, var_mpos), memPos_4))\n                                    }\n                                    case 0xf8ccbf47 {\n                                        if callvalue() { revert(_2, _2) }\n                                        if slt(add(calldatasize(), not(3)), _2) { revert(_2, _2) }\n                                        let value := and(shr(16, sload(/** @src 16:800:828  \"bool public IS_SCRIPT = true\" */ 12)), /** @src 79:191:2411  \"contract HelperConfig is Script {...\" */ 0xff)\n                                        let memPos_5 := mload(_1)\n                                        mstore(memPos_5, iszero(iszero(value)))\n                                        return(memPos_5, 32)\n                                    }\n                                }\n                                revert(0, 0)\n                            }\n                            function abi_encode_struct_NetworkConfig(headStart, value0) -> tail\n                            {\n                                tail := add(headStart, 64)\n                                let _1 := sub(shl(160, 1), 1)\n                                mstore(headStart, and(mload(value0), _1))\n                                mstore(add(headStart, 0x20), and(mload(add(value0, 0x20)), _1))\n                            }\n                            function abi_encode_address_address(headStart, value0, value1) -> tail\n                            {\n                                tail := add(headStart, 64)\n                                let _1 := sub(shl(160, 1), 1)\n                                mstore(headStart, and(value0, _1))\n                                mstore(add(headStart, 32), and(value1, _1))\n                            }\n                            function finalize_allocation_2007(memPtr)\n                            {\n                                let newFreePtr := add(memPtr, 64)\n                                if or(gt(newFreePtr, 0xffffffffffffffff), lt(newFreePtr, memPtr))\n                                {\n                                    mstore(0, shl(224, 0x4e487b71))\n                                    mstore(4, 0x41)\n                                    revert(0, 0x24)\n                                }\n                                mstore(64, newFreePtr)\n                            }\n                            function finalize_allocation(memPtr)\n                            {\n                                if gt(memPtr, 0xffffffffffffffff)\n                                {\n                                    mstore(0, shl(224, 0x4e487b71))\n                                    mstore(4, 0x41)\n                                    revert(0, 0x24)\n                                }\n                                mstore(64, memPtr)\n                            }\n                            function read_from_storage_reference_type_struct_NetworkConfig() -> value\n                            {\n                                let memPtr := mload(64)\n                                finalize_allocation_2007(memPtr)\n                                value := memPtr\n                                let _1 := sub(shl(160, 1), 1)\n                                mstore(memPtr, and(sload(/** @src 79:1899:1917  \"localNetworkConfig\" */ 0x0d), /** @src 79:191:2411  \"contract HelperConfig is Script {...\" */ _1))\n                                mstore(add(memPtr, 32), and(sload(14), _1))\n                            }\n                            /// @ast-id 50619 @src 79:1810:2314  \"function getOrCreateAnvilEthConfig() public returns (NetworkConfig memory) {...\"\n                            function fun_getOrCreateAnvilEthConfig() -> var_50568_mpos\n                            {\n                                /// @src 79:191:2411  \"contract HelperConfig is Script {...\"\n                                let _1 := 64\n                                let memPtr := mload(_1)\n                                finalize_allocation_2007(memPtr)\n                                /// @src -1:-1:-1\n                                let _2 := 0\n                                /// @src 79:191:2411  \"contract HelperConfig is Script {...\"\n                                mstore(memPtr, /** @src -1:-1:-1 */ _2)\n                                /// @src 79:191:2411  \"contract HelperConfig is Script {...\"\n                                let _3 := 32\n                                mstore(add(memPtr, _3), /** @src -1:-1:-1 */ _2)\n                                /// @src 79:191:2411  \"contract HelperConfig is Script {...\"\n                                let _4 := sload(/** @src 79:1899:1925  \"localNetworkConfig.account\" */ 14)\n                                /// @src 79:191:2411  \"contract HelperConfig is Script {...\"\n                                let cleaned := /** @src -1:-1:-1 */ _2\n                                /// @src 79:191:2411  \"contract HelperConfig is Script {...\"\n                                let _5 := sub(shl(160, 1), 1)\n                                /// @src 79:1895:1991  \"if (localNetworkConfig.account != address(0)) {...\"\n                                if /** @src 79:1899:1939  \"localNetworkConfig.account != address(0)\" */ iszero(iszero(/** @src 79:191:2411  \"contract HelperConfig is Script {...\" */ and(_4, _5)))\n                                /// @src 79:1895:1991  \"if (localNetworkConfig.account != address(0)) {...\"\n                                {\n                                    /// @src 79:1955:1980  \"return localNetworkConfig\"\n                                    var_50568_mpos := /** @src 79:191:2411  \"contract HelperConfig is Script {...\" */ read_from_storage_reference_type_struct_NetworkConfig()\n                                    /// @src 79:1955:1980  \"return localNetworkConfig\"\n                                    leave\n                                }\n                                /// @src 79:191:2411  \"contract HelperConfig is Script {...\"\n                                let memPtr_1 := mload(_1)\n                                finalize_allocation_2007(memPtr_1)\n                                mstore(memPtr_1, 15)\n                                mstore(add(memPtr_1, _3), \"Deploying mocks\")\n                                /// @src 30:6071:6113  \"abi.encodeWithSignature(\\\"log(string)\\\", p0)\"\n                                let expr_mpos := /** @src 79:191:2411  \"contract HelperConfig is Script {...\" */ mload(_1)\n                                /// @src 30:6071:6113  \"abi.encodeWithSignature(\\\"log(string)\\\", p0)\"\n                                let _6 := add(expr_mpos, /** @src 79:191:2411  \"contract HelperConfig is Script {...\" */ _3)\n                                /// @src 30:6071:6113  \"abi.encodeWithSignature(\\\"log(string)\\\", p0)\"\n                                mstore(_6, shl(226, 0x104c13eb))\n                                /// @src 79:191:2411  \"contract HelperConfig is Script {...\"\n                                mstore(/** @src 30:6071:6113  \"abi.encodeWithSignature(\\\"log(string)\\\", p0)\" */ add(expr_mpos, 36), /** @src 79:191:2411  \"contract HelperConfig is Script {...\" */ _3)\n                                let length := mload(memPtr_1)\n                                mstore(add(/** @src 30:6071:6113  \"abi.encodeWithSignature(\\\"log(string)\\\", p0)\" */ expr_mpos, /** @src 79:191:2411  \"contract HelperConfig is Script {...\" */ 68), length)\n                                let i := /** @src -1:-1:-1 */ _2\n                                /// @src 79:191:2411  \"contract HelperConfig is Script {...\"\n                                for { } lt(i, length) { i := add(i, _3) }\n                                {\n                                    mstore(add(add(/** @src 30:6071:6113  \"abi.encodeWithSignature(\\\"log(string)\\\", p0)\" */ expr_mpos, /** @src 79:191:2411  \"contract HelperConfig is Script {...\" */ i), 100), mload(add(add(memPtr_1, i), _3)))\n                                }\n                                mstore(add(add(/** @src 30:6071:6113  \"abi.encodeWithSignature(\\\"log(string)\\\", p0)\" */ expr_mpos, /** @src 79:191:2411  \"contract HelperConfig is Script {...\" */ length), 100), /** @src -1:-1:-1 */ _2)\n                                /// @src 79:191:2411  \"contract HelperConfig is Script {...\"\n                                let _7 := not(31)\n                                /// @src 30:6071:6113  \"abi.encodeWithSignature(\\\"log(string)\\\", p0)\"\n                                let _8 := sub(/** @src 79:191:2411  \"contract HelperConfig is Script {...\" */ add(/** @src 30:6071:6113  \"abi.encodeWithSignature(\\\"log(string)\\\", p0)\" */ expr_mpos, /** @src 79:191:2411  \"contract HelperConfig is Script {...\" */ and(add(length, 31), _7)), /** @src 30:6071:6113  \"abi.encodeWithSignature(\\\"log(string)\\\", p0)\" */ expr_mpos)\n                                mstore(expr_mpos, add(_8, /** @src 79:191:2411  \"contract HelperConfig is Script {...\" */ 68))\n                                let newFreePtr := add(expr_mpos, and(add(/** @src 30:6071:6113  \"abi.encodeWithSignature(\\\"log(string)\\\", p0)\" */ _8, /** @src 79:191:2411  \"contract HelperConfig is Script {...\" */ 131), _7))\n                                let _9 := 0xffffffffffffffff\n                                if or(gt(newFreePtr, _9), lt(newFreePtr, expr_mpos))\n                                {\n                                    mstore(/** @src -1:-1:-1 */ _2, /** @src 79:191:2411  \"contract HelperConfig is Script {...\" */ shl(224, 0x4e487b71))\n                                    mstore(4, 0x41)\n                                    revert(/** @src -1:-1:-1 */ _2, /** @src 30:6071:6113  \"abi.encodeWithSignature(\\\"log(string)\\\", p0)\" */ 36)\n                                }\n                                /// @src 79:191:2411  \"contract HelperConfig is Script {...\"\n                                mstore(_1, newFreePtr)\n                                /// @src 30:762:921  \"assembly {...\"\n                                pop(staticcall(gas(), /** @src 30:131:173  \"0x000000000000000000636F6e736F6c652e6c6f67\" */ 0x636f6e736f6c652e6c6f67, /** @src 30:762:921  \"assembly {...\" */ _6, /** @src 79:191:2411  \"contract HelperConfig is Script {...\" */ mload(/** @src 30:645:659  \"payload.length\" */ expr_mpos), /** @src -1:-1:-1 */ _2, _2))\n                                /// @src 79:191:2411  \"contract HelperConfig is Script {...\"\n                                let _10 := 0x7109709ecfa91a80626ff3989d68f67f5b1dd12d\n                                /// @src 79:2041:2081  \"vm.startBroadcast(ANVIL_DEFAULT_ADDRESS)\"\n                                if iszero(extcodesize(/** @src 79:191:2411  \"contract HelperConfig is Script {...\" */ _10))\n                                /// @src 79:2041:2081  \"vm.startBroadcast(ANVIL_DEFAULT_ADDRESS)\"\n                                {\n                                    /// @src 79:191:2411  \"contract HelperConfig is Script {...\"\n                                    revert(/** @src -1:-1:-1 */ _2, _2)\n                                }\n                                /// @src 79:2041:2081  \"vm.startBroadcast(ANVIL_DEFAULT_ADDRESS)\"\n                                let _11 := /** @src 79:191:2411  \"contract HelperConfig is Script {...\" */ mload(_1)\n                                /// @src 79:2041:2081  \"vm.startBroadcast(ANVIL_DEFAULT_ADDRESS)\"\n                                mstore(_11, /** @src 79:628:670  \"0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266\" */ shl(224, 0x7fec2a8d))\n                                let _12 := 0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266\n                                /// @src 79:191:2411  \"contract HelperConfig is Script {...\"\n                                mstore(/** @src 79:2041:2081  \"vm.startBroadcast(ANVIL_DEFAULT_ADDRESS)\" */ add(_11, 4), /** @src 79:628:670  \"0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266\" */ _12)\n                                /// @src 79:2041:2081  \"vm.startBroadcast(ANVIL_DEFAULT_ADDRESS)\"\n                                let _13 := call(gas(), /** @src 79:191:2411  \"contract HelperConfig is Script {...\" */ _10, /** @src -1:-1:-1 */ _2, /** @src 79:2041:2081  \"vm.startBroadcast(ANVIL_DEFAULT_ADDRESS)\" */ _11, /** @src 30:6071:6113  \"abi.encodeWithSignature(\\\"log(string)\\\", p0)\" */ 36, /** @src 79:2041:2081  \"vm.startBroadcast(ANVIL_DEFAULT_ADDRESS)\" */ _11, /** @src -1:-1:-1 */ _2)\n                                /// @src 79:2041:2081  \"vm.startBroadcast(ANVIL_DEFAULT_ADDRESS)\"\n                                if iszero(_13)\n                                {\n                                    /// @src 79:628:670  \"0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266\"\n                                    let pos := /** @src 79:191:2411  \"contract HelperConfig is Script {...\" */ mload(_1)\n                                    /// @src 79:628:670  \"0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266\"\n                                    returndatacopy(pos, /** @src -1:-1:-1 */ _2, /** @src 79:628:670  \"0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266\" */ returndatasize())\n                                    revert(pos, returndatasize())\n                                }\n                                /// @src 79:2041:2081  \"vm.startBroadcast(ANVIL_DEFAULT_ADDRESS)\"\n                                if _13\n                                {\n                                    finalize_allocation(_11)\n                                    /// @src 79:191:2411  \"contract HelperConfig is Script {...\"\n                                    cleaned := /** @src -1:-1:-1 */ _2\n                                }\n                                /// @src 79:2115:2131  \"new EntryPoint()\"\n                                let _14 := /** @src 79:191:2411  \"contract HelperConfig is Script {...\" */ mload(_1)\n                                /// @src 79:2115:2131  \"new EntryPoint()\"\n                                let _15 := datasize(\"EntryPoint_2101\")\n                                let _16 := add(_14, _15)\n                                if or(gt(_16, /** @src 79:191:2411  \"contract HelperConfig is Script {...\" */ _9), /** @src 79:2115:2131  \"new EntryPoint()\" */ lt(_16, _14))\n                                {\n                                    /// @src 79:191:2411  \"contract HelperConfig is Script {...\"\n                                    mstore(/** @src 79:1937:1938  \"0\" */ cleaned, /** @src 79:191:2411  \"contract HelperConfig is Script {...\" */ shl(224, 0x4e487b71))\n                                    mstore(/** @src 79:2041:2081  \"vm.startBroadcast(ANVIL_DEFAULT_ADDRESS)\" */ 4, /** @src 79:191:2411  \"contract HelperConfig is Script {...\" */ 0x41)\n                                    revert(/** @src 79:1937:1938  \"0\" */ cleaned, /** @src 30:6071:6113  \"abi.encodeWithSignature(\\\"log(string)\\\", p0)\" */ 36)\n                                }\n                                /// @src 79:2115:2131  \"new EntryPoint()\"\n                                datacopy(_14, dataoffset(\"EntryPoint_2101\"), _15)\n                                let expr_address := create(/** @src 79:1937:1938  \"0\" */ cleaned, /** @src 79:2115:2131  \"new EntryPoint()\" */ _14, sub(_16, _14))\n                                if iszero(expr_address)\n                                {\n                                    /// @src 79:628:670  \"0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266\"\n                                    let pos_1 := /** @src 79:191:2411  \"contract HelperConfig is Script {...\" */ mload(_1)\n                                    /// @src 79:628:670  \"0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266\"\n                                    returndatacopy(pos_1, /** @src 79:1937:1938  \"0\" */ cleaned, /** @src 79:628:670  \"0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266\" */ returndatasize())\n                                    revert(pos_1, returndatasize())\n                                }\n                                /// @src 79:2141:2159  \"vm.stopBroadcast()\"\n                                if iszero(extcodesize(/** @src 79:191:2411  \"contract HelperConfig is Script {...\" */ _10))\n                                /// @src 79:2141:2159  \"vm.stopBroadcast()\"\n                                {\n                                    /// @src 79:191:2411  \"contract HelperConfig is Script {...\"\n                                    revert(/** @src 79:1937:1938  \"0\" */ cleaned, cleaned)\n                                }\n                                /// @src 79:2141:2159  \"vm.stopBroadcast()\"\n                                let _17 := /** @src 79:191:2411  \"contract HelperConfig is Script {...\" */ mload(_1)\n                                /// @src 79:2141:2159  \"vm.stopBroadcast()\"\n                                mstore(_17, /** @src 79:628:670  \"0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266\" */ shl(225, 0x3b756e9b))\n                                /// @src 79:2141:2159  \"vm.stopBroadcast()\"\n                                let _18 := call(gas(), /** @src 79:191:2411  \"contract HelperConfig is Script {...\" */ _10, /** @src 79:1937:1938  \"0\" */ cleaned, /** @src 79:2141:2159  \"vm.stopBroadcast()\" */ _17, /** @src 79:2041:2081  \"vm.startBroadcast(ANVIL_DEFAULT_ADDRESS)\" */ 4, /** @src 79:2141:2159  \"vm.stopBroadcast()\" */ _17, /** @src 79:1937:1938  \"0\" */ cleaned)\n                                /// @src 79:2141:2159  \"vm.stopBroadcast()\"\n                                if iszero(_18)\n                                {\n                                    /// @src 79:628:670  \"0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266\"\n                                    let pos_2 := /** @src 79:191:2411  \"contract HelperConfig is Script {...\" */ mload(_1)\n                                    /// @src 79:628:670  \"0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266\"\n                                    returndatacopy(pos_2, /** @src 79:1937:1938  \"0\" */ cleaned, /** @src 79:628:670  \"0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266\" */ returndatasize())\n                                    revert(pos_2, returndatasize())\n                                }\n                                /// @src 79:2141:2159  \"vm.stopBroadcast()\"\n                                if _18\n                                {\n                                    finalize_allocation(_17)\n                                    /// @src 79:191:2411  \"contract HelperConfig is Script {...\"\n                                    if cleaned\n                                    {\n                                        revert(/** @src 79:1937:1938  \"0\" */ cleaned, cleaned)\n                                    }\n                                }\n                                /// @src 79:191:2411  \"contract HelperConfig is Script {...\"\n                                let _19 := and(/** @src 79:2218:2237  \"address(entryPoint)\" */ expr_address, /** @src 79:191:2411  \"contract HelperConfig is Script {...\" */ _5)\n                                let memPtr_2 := mload(_1)\n                                finalize_allocation_2007(memPtr_2)\n                                mstore(memPtr_2, _19)\n                                mstore(/** @src 79:2191:2271  \"NetworkConfig({entryPoint: address(entryPoint), account: ANVIL_DEFAULT_ADDRESS})\" */ add(memPtr_2, /** @src 79:191:2411  \"contract HelperConfig is Script {...\" */ _3), /** @src 79:628:670  \"0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266\" */ _12)\n                                let _20 := shl(160, 0xffffffffffffffffffffffff)\n                                sstore(/** @src 79:1899:1917  \"localNetworkConfig\" */ 0x0d, /** @src 79:628:670  \"0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266\" */ or(and(sload(/** @src 79:1899:1917  \"localNetworkConfig\" */ 0x0d), /** @src 79:628:670  \"0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266\" */ _20), /** @src 79:191:2411  \"contract HelperConfig is Script {...\" */ _19))\n                                /// @src 79:628:670  \"0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266\"\n                                sstore(/** @src 79:1899:1925  \"localNetworkConfig.account\" */ 14, /** @src 79:628:670  \"0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266\" */ or(and(sload(/** @src 79:1899:1925  \"localNetworkConfig.account\" */ 14), /** @src 79:628:670  \"0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266\" */ _20), _12))\n                                /// @src 79:2282:2307  \"return localNetworkConfig\"\n                                var_50568_mpos := /** @src 79:191:2411  \"contract HelperConfig is Script {...\" */ read_from_storage_reference_type_struct_NetworkConfig()\n                            }\n                            /// @ast-id 50537 @src 79:1080:1431  \"function _getConfigByChainId(uint256 chainId) internal returns (NetworkConfig memory) {...\"\n                            function fun_getConfigByChainId(var_chainId) -> var_mpos\n                            {\n                                /// @src 79:191:2411  \"contract HelperConfig is Script {...\"\n                                let memPtr := mload(64)\n                                finalize_allocation_2007(memPtr)\n                                mstore(memPtr, /** @src -1:-1:-1 */ 0)\n                                /// @src 79:191:2411  \"contract HelperConfig is Script {...\"\n                                mstore(add(memPtr, 32), /** @src -1:-1:-1 */ 0)\n                                /// @src 79:1176:1378  \"if (chainId == LOCAL_CHAIN_ID) {...\"\n                                switch /** @src 79:1180:1205  \"chainId == LOCAL_CHAIN_ID\" */ eq(var_chainId, /** @src 79:495:500  \"31337\" */ 0x7a69)\n                                case /** @src 79:1176:1378  \"if (chainId == LOCAL_CHAIN_ID) {...\" */ 0 {\n                                    /// @src 79:191:2411  \"contract HelperConfig is Script {...\"\n                                    mstore(/** @src -1:-1:-1 */ 0, /** @src 79:191:2411  \"contract HelperConfig is Script {...\" */ var_chainId)\n                                    mstore(32, /** @src 79:1276:1290  \"networkConfigs\" */ 0x0f)\n                                    /// @src 79:191:2411  \"contract HelperConfig is Script {...\"\n                                    let dataSlot := keccak256(/** @src -1:-1:-1 */ 0, /** @src 79:191:2411  \"contract HelperConfig is Script {...\" */ 64)\n                                    let _1 := sub(shl(160, 1), 1)\n                                    let _2 := and(sload(/** @src 79:1276:1307  \"networkConfigs[chainId].account\" */ add(/** @src 79:1276:1299  \"networkConfigs[chainId]\" */ dataSlot, /** @src 79:1276:1307  \"networkConfigs[chainId].account\" */ 1)), /** @src 79:191:2411  \"contract HelperConfig is Script {...\" */ _1)\n                                    /// @src 79:1272:1378  \"if (networkConfigs[chainId].account != address(0)) {...\"\n                                    if /** @src 79:1276:1321  \"networkConfigs[chainId].account != address(0)\" */ iszero(iszero(/** @src 79:191:2411  \"contract HelperConfig is Script {...\" */ _2))\n                                    /// @src 79:1272:1378  \"if (networkConfigs[chainId].account != address(0)) {...\"\n                                    {\n                                        /// @src 79:191:2411  \"contract HelperConfig is Script {...\"\n                                        let memPtr_1 := mload(64)\n                                        finalize_allocation_2007(memPtr_1)\n                                        mstore(memPtr_1, and(sload(dataSlot), _1))\n                                        mstore(add(memPtr_1, 32), _2)\n                                        /// @src 79:1337:1367  \"return networkConfigs[chainId]\"\n                                        var_mpos := memPtr_1\n                                        leave\n                                    }\n                                }\n                                default /// @src 79:1176:1378  \"if (chainId == LOCAL_CHAIN_ID) {...\"\n                                {\n                                    /// @src 79:1221:1255  \"return getOrCreateAnvilEthConfig()\"\n                                    var_mpos := /** @src 79:1228:1255  \"getOrCreateAnvilEthConfig()\" */ fun_getOrCreateAnvilEthConfig()\n                                    /// @src 79:1221:1255  \"return getOrCreateAnvilEthConfig()\"\n                                    leave\n                                }\n                                /// @src 79:1394:1424  \"HelperConfig__InvalidChainId()\"\n                                let _3 := /** @src 79:191:2411  \"contract HelperConfig is Script {...\" */ mload(64)\n                                /// @src 79:1394:1424  \"HelperConfig__InvalidChainId()\"\n                                mstore(_3, shl(225, 0x64780a77))\n                                revert(_3, 4)\n                            }\n                        }\n                        /// @use-src 0:\"lib/account-abstraction/contracts/core/EntryPoint.sol\", 2:\"lib/account-abstraction/contracts/core/NonceManager.sol\", 4:\"lib/account-abstraction/contracts/core/StakeManager.sol\", 9:\"lib/account-abstraction/contracts/interfaces/IEntryPoint.sol\", 10:\"lib/account-abstraction/contracts/interfaces/INonceManager.sol\", 12:\"lib/account-abstraction/contracts/interfaces/IStakeManager.sol\", 70:\"lib/openzeppelin-contracts/contracts/utils/ReentrancyGuard.sol\", 74:\"lib/openzeppelin-contracts/contracts/utils/introspection/ERC165.sol\", 75:\"lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol\"\n                        object \"EntryPoint_2101\" {\n                            code {\n                                {\n                                    /// @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                    let _1 := memoryguard(0xa0)\n                                    mstore(64, _1)\n                                    if callvalue() { revert(0, 0) }\n                                    /// @src 70:1713:1714  \"1\"\n                                    sstore(/** @src 70:1917:1938  \"_status = NOT_ENTERED\" */ 0x02, /** @src 70:1713:1714  \"1\" */ 0x01)\n                                    /// @src 0:985:1004  \"new SenderCreator()\"\n                                    let _2 := datasize(\"SenderCreator_2418\")\n                                    let _3 := add(_1, _2)\n                                    if or(gt(_3, sub(shl(64, 1), 1)), lt(_3, _1))\n                                    {\n                                        /// @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                        mstore(/** @src -1:-1:-1 */ 0, /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ shl(224, 0x4e487b71))\n                                        mstore(4, 0x41)\n                                        revert(/** @src -1:-1:-1 */ 0, /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 0x24)\n                                    }\n                                    /// @src 0:985:1004  \"new SenderCreator()\"\n                                    datacopy(_1, dataoffset(\"SenderCreator_2418\"), _2)\n                                    let expr_address := create(/** @src -1:-1:-1 */ 0, /** @src 0:985:1004  \"new SenderCreator()\" */ _1, sub(_3, _1))\n                                    if iszero(expr_address)\n                                    {\n                                        /// @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                        let pos := mload(64)\n                                        returndatacopy(pos, /** @src -1:-1:-1 */ 0, /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ returndatasize())\n                                        revert(pos, returndatasize())\n                                    }\n                                    /// @src 0:985:1004  \"new SenderCreator()\"\n                                    mstore(128, expr_address)\n                                    /// @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                    let _4 := mload(64)\n                                    let _5 := datasize(\"EntryPoint_2101_deployed\")\n                                    codecopy(_4, dataoffset(\"EntryPoint_2101_deployed\"), _5)\n                                    setimmutable(_4, \"35\", mload(/** @src 0:985:1004  \"new SenderCreator()\" */ 128))\n                                    /// @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                    return(_4, _5)\n                                }\n                            }\n                            /// @use-src 0:\"lib/account-abstraction/contracts/core/EntryPoint.sol\", 1:\"lib/account-abstraction/contracts/core/Helpers.sol\", 2:\"lib/account-abstraction/contracts/core/NonceManager.sol\", 4:\"lib/account-abstraction/contracts/core/StakeManager.sol\", 5:\"lib/account-abstraction/contracts/core/UserOperationLib.sol\", 14:\"lib/account-abstraction/contracts/utils/Exec.sol\", 70:\"lib/openzeppelin-contracts/contracts/utils/ReentrancyGuard.sol\", 74:\"lib/openzeppelin-contracts/contracts/utils/introspection/ERC165.sol\"\n                            object \"EntryPoint_2101_deployed\" {\n                                code {\n                                    {\n                                        /// @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                        mstore(64, memoryguard(0x80))\n                                        if iszero(lt(calldatasize(), 4))\n                                        {\n                                            switch shr(224, calldataload(0))\n                                            case 0x0042dc53 {\n                                                if callvalue() { revert(0, 0) }\n                                                if slt(add(calldatasize(), not(3)), 512) { revert(0, 0) }\n                                                let offset := calldataload(4)\n                                                let _1 := 0xffffffffffffffff\n                                                if gt(offset, _1) { revert(0, 0) }\n                                                if iszero(slt(add(offset, 35), calldatasize())) { revert(0, 0) }\n                                                let array := abi_decode_available_length_bytes(add(offset, 36), calldataload(add(4, offset)), calldatasize())\n                                                let _2 := add(calldatasize(), not(35))\n                                                if slt(_2, 0x01c0) { revert(0, 0) }\n                                                let memPtr := mload(64)\n                                                finalize_allocation_26259(memPtr)\n                                                if slt(_2, 0x0140) { revert(0, 0) }\n                                                let memPtr_1 := mload(64)\n                                                finalize_allocation_26260(memPtr_1)\n                                                let value := calldataload(36)\n                                                if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(0, 0) }\n                                                mstore(memPtr_1, value)\n                                                let _3 := 0x20\n                                                mstore(add(memPtr_1, _3), calldataload(68))\n                                                mstore(add(memPtr_1, 64), calldataload(100))\n                                                mstore(add(memPtr_1, 96), calldataload(132))\n                                                mstore(add(memPtr_1, 128), calldataload(164))\n                                                mstore(add(memPtr_1, 0xa0), calldataload(196))\n                                                mstore(add(memPtr_1, 192), calldataload(228))\n                                                let value_1 := calldataload(260)\n                                                if iszero(eq(value_1, and(value_1, sub(shl(160, 1), 1)))) { revert(0, 0) }\n                                                mstore(add(memPtr_1, 224), value_1)\n                                                mstore(add(memPtr_1, 256), calldataload(292))\n                                                mstore(add(memPtr_1, 288), calldataload(324))\n                                                mstore(memPtr, memPtr_1)\n                                                mstore(add(memPtr, _3), calldataload(356))\n                                                mstore(add(memPtr, 64), calldataload(388))\n                                                mstore(add(memPtr, 96), calldataload(420))\n                                                mstore(add(memPtr, 128), calldataload(452))\n                                                let offset_1 := calldataload(484)\n                                                if gt(offset_1, _1) { revert(0, 0) }\n                                                let value2, value3 := abi_decode_bytes_calldata(add(4, offset_1), calldatasize())\n                                                /// @src 0:11186:11195  \"gasleft()\"\n                                                let expr := gas()\n                                                /// @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                                if iszero(/** @src 0:11213:11240  \"msg.sender == address(this)\" */ eq(/** @src 0:11213:11223  \"msg.sender\" */ caller(), /** @src 0:11235:11239  \"this\" */ address()))\n                                                /// @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                                {\n                                                    let memPtr_2 := mload(64)\n                                                    mstore(memPtr_2, shl(229, 4594637))\n                                                    mstore(add(memPtr_2, 4), _3)\n                                                    mstore(add(memPtr_2, 36), 23)\n                                                    mstore(add(memPtr_2, 68), \"AA92 internal call only\")\n                                                    revert(memPtr_2, 100)\n                                                }\n                                                /// @src 0:11308:11322  \"opInfo.mUserOp\"\n                                                let _mpos := mload(memPtr)\n                                                /// @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                                let _4 := mload(/** @src 0:11356:11376  \"mUserOp.callGasLimit\" */ add(_mpos, /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 96))\n                                                let r := shr(6, mul(/** @src 0:11495:11504  \"gasleft()\" */ gas(), /** @src 0:11507:11509  \"63\" */ 0x3f))\n                                                /// @src 0:11491:11744  \"if (gasleft() * 63 / 64 < callGasLimit + mUserOp.paymasterPostOpGasLimit + INNER_GAS_OVERHEAD) {...\"\n                                                if /** @src 0:11495:11584  \"gasleft() * 63 / 64 < callGasLimit + mUserOp.paymasterPostOpGasLimit + INNER_GAS_OVERHEAD\" */ lt(r, /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ add(add(_4, mload(/** @src 0:11532:11563  \"mUserOp.paymasterPostOpGasLimit\" */ add(_mpos, /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 0xa0))), /** @src 0:1296:1301  \"10000\" */ 0x2710))\n                                                /// @src 0:11491:11744  \"if (gasleft() * 63 / 64 < callGasLimit + mUserOp.paymasterPostOpGasLimit + INNER_GAS_OVERHEAD) {...\"\n                                                {\n                                                    /// @src 0:11604:11730  \"assembly (\\\"memory-safe\\\") {...\"\n                                                    mstore(/** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 0, /** @src 0:11604:11730  \"assembly (\\\"memory-safe\\\") {...\" */ shl(224, 0xdeaddead))\n                                                    revert(/** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 0, _3)\n                                                }\n                                                /// @src 0:11764:11826  \"IPaymaster.PostOpMode mode = IPaymaster.PostOpMode.opSucceeded\"\n                                                let var_mode := /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 0\n                                                /// @src 0:11840:11855  \"callData.length\"\n                                                let expr_1 := /** @src 0:1296:1301  \"10000\" */ mload(/** @src 0:11840:11855  \"callData.length\" */ array)\n                                                /// @src 0:11836:12302  \"if (callData.length > 0) {...\"\n                                                if /** @src 0:11840:11859  \"callData.length > 0\" */ iszero(iszero(expr_1))\n                                                /// @src 0:11836:12302  \"if (callData.length > 0) {...\"\n                                                {\n                                                    /// @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                                    let cleaned := and(/** @src 0:1296:1301  \"10000\" */ mload(/** @src 0:11900:11914  \"mUserOp.sender\" */ _mpos), /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ sub(shl(160, 1), 1))\n                                                    /// @src 0:11956:12292  \"if (!success) {...\"\n                                                    if /** @src 0:11960:11968  \"!success\" */ iszero(/** @src 14:378:496  \"assembly (\\\"memory-safe\\\") {...\" */ call(_4, cleaned, /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 0, /** @src 14:378:496  \"assembly (\\\"memory-safe\\\") {...\" */ add(array, /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ _3), /** @src 14:378:496  \"assembly (\\\"memory-safe\\\") {...\" */ expr_1, /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 0, 0))\n                                                    /// @src 0:11956:12292  \"if (!success) {...\"\n                                                    {\n                                                        /// @src 14:1204:1553  \"assembly (\\\"memory-safe\\\") {...\"\n                                                        let usr$len := returndatasize()\n                                                        /// @src 0:1542:1546  \"2048\"\n                                                        let _5 := 0x0800\n                                                        /// @src 14:1204:1553  \"assembly (\\\"memory-safe\\\") {...\"\n                                                        if gt(usr$len, /** @src 0:1542:1546  \"2048\" */ _5)\n                                                        /// @src 14:1204:1553  \"assembly (\\\"memory-safe\\\") {...\"\n                                                        {\n                                                            usr$len := /** @src 0:1542:1546  \"2048\" */ _5\n                                                        }\n                                                        /// @src 14:1204:1553  \"assembly (\\\"memory-safe\\\") {...\"\n                                                        let usr$ptr := mload(/** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 64)\n                                                        /// @src 14:1204:1553  \"assembly (\\\"memory-safe\\\") {...\"\n                                                        mstore(/** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 64, /** @src 14:1204:1553  \"assembly (\\\"memory-safe\\\") {...\" */ add(add(usr$ptr, usr$len), /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ _3))\n                                                        /// @src 14:1204:1553  \"assembly (\\\"memory-safe\\\") {...\"\n                                                        mstore(usr$ptr, usr$len)\n                                                        returndatacopy(add(usr$ptr, /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ _3), 0, /** @src 14:1204:1553  \"assembly (\\\"memory-safe\\\") {...\" */ usr$len)\n                                                        /// @src 0:12069:12221  \"if (result.length > 0) {...\"\n                                                        if /** @src 0:12073:12090  \"result.length > 0\" */ iszero(iszero(/** @src 0:1296:1301  \"10000\" */ mload(/** @src 0:12073:12086  \"result.length\" */ usr$ptr)))\n                                                        /// @src 0:12069:12221  \"if (result.length > 0) {...\"\n                                                        {\n                                                            /// @src 0:1542:1546  \"2048\"\n                                                            let _6 := mload(/** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ add(memPtr, _3))\n                                                            let cleaned_1 := and(/** @src 0:1296:1301  \"10000\" */ mload(/** @src 0:12164:12178  \"mUserOp.sender\" */ _mpos), /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ sub(shl(160, 1), 1))\n                                                            let _7 := mload(/** @src 0:12180:12193  \"mUserOp.nonce\" */ add(_mpos, /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ _3))\n                                                            /// @src 0:12119:12202  \"UserOperationRevertReason(opInfo.userOpHash, mUserOp.sender, mUserOp.nonce, result)\"\n                                                            let _8 := /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ mload(64)\n                                                            mstore(_8, _7)\n                                                            /// @src 0:1542:1546  \"2048\"\n                                                            mstore(add(_8, /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ _3), 64)\n                                                            /// @src 0:12119:12202  \"UserOperationRevertReason(opInfo.userOpHash, mUserOp.sender, mUserOp.nonce, result)\"\n                                                            log3(_8, sub(/** @src 0:1542:1546  \"2048\" */ abi_encode_bytes(usr$ptr, add(_8, /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 64)), /** @src 0:12119:12202  \"UserOperationRevertReason(opInfo.userOpHash, mUserOp.sender, mUserOp.nonce, result)\" */ _8), 0x1c4fada7374c0a9ee8841fc38afe82932dc0f8e69012e927f061a8bae611a201, _6, cleaned_1)\n                                                        }\n                                                        /// @src 0:12238:12277  \"mode = IPaymaster.PostOpMode.opReverted\"\n                                                        var_mode := /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 1\n                                                    }\n                                                }\n                                                /// @src 0:1542:1546  \"2048\"\n                                                let diff := sub(expr, /** @src 0:12365:12374  \"gasleft()\" */ gas())\n                                                /// @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                                let _9 := add(diff, mload(add(memPtr, 128)))\n                                                /// @src 0:1542:1546  \"2048\"\n                                                let _10 := abi_decode_available_length_bytes(/** @src 0:12413:12461  \"_postExecution(mode, opInfo, context, actualGas)\" */ value2, value3, /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ calldatasize())\n                                                /// @src 0:12413:12461  \"_postExecution(mode, opInfo, context, actualGas)\"\n                                                let var_actualGas := _9\n                                                let var_actualGasCost := /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 0\n                                                /// @src 0:25391:25400  \"gasleft()\"\n                                                let expr_2 := gas()\n                                                /// @src 0:25434:25455  \"address refundAddress\"\n                                                let var_refundAddress := /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 0\n                                                /// @src 0:25434:25455  \"address refundAddress\"\n                                                let var_refundAddress_1 := /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 0\n                                                /// @src 0:25499:25513  \"opInfo.mUserOp\"\n                                                let _mpos_1 := mload(memPtr)\n                                                /// @src 0:25546:25572  \"getUserOpGasPrice(mUserOp)\"\n                                                let expr_3 := fun_getUserOpGasPrice(_mpos_1)\n                                                /// @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                                let cleaned_2 := and(/** @src 0:1296:1301  \"10000\" */ mload(/** @src 0:25607:25624  \"mUserOp.paymaster\" */ add(_mpos_1, /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 224)), sub(shl(160, 1), 1))\n                                                /// @src 0:25638:26482  \"if (paymaster == address(0)) {...\"\n                                                switch /** @src 0:25642:25665  \"paymaster == address(0)\" */ iszero(/** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ cleaned_2)\n                                                case /** @src 0:25638:26482  \"if (paymaster == address(0)) {...\" */ 0 {\n                                                    /// @src 0:25754:25779  \"refundAddress = paymaster\"\n                                                    var_refundAddress := cleaned_2\n                                                    /// @src 0:25797:26468  \"if (context.length > 0) {...\"\n                                                    if /** @src 0:25801:25819  \"context.length > 0\" */ iszero(iszero(/** @src 0:1296:1301  \"10000\" */ mload(/** @src 0:25801:25815  \"context.length\" */ _10)))\n                                                    /// @src 0:25797:26468  \"if (context.length > 0) {...\"\n                                                    {\n                                                        /// @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                                        if iszero(lt(var_mode, 3))\n                                                        {\n                                                            mstore(0, shl(224, 0x4e487b71))\n                                                            mstore(4, 0x21)\n                                                            revert(0, 36)\n                                                        }\n                                                        /// @src 0:25901:26450  \"if (mode != IPaymaster.PostOpMode.postOpReverted) {...\"\n                                                        if /** @src 0:25905:25949  \"mode != IPaymaster.PostOpMode.postOpReverted\" */ iszero(eq(var_mode, /** @src 0:25913:25949  \"IPaymaster.PostOpMode.postOpReverted\" */ 2))\n                                                        /// @src 0:25901:26450  \"if (mode != IPaymaster.PostOpMode.postOpReverted) {...\"\n                                                        {\n                                                            /// @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                                            let _11 := mload(/** @src 0:26015:26046  \"mUserOp.paymasterPostOpGasLimit\" */ add(_mpos_1, /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 0xa0))\n                                                            /// @src 0:25981:26141  \"IPaymaster(paymaster).postOp{gas: mUserOp.paymasterPostOpGasLimit}(...\"\n                                                            if iszero(extcodesize(cleaned_2))\n                                                            {\n                                                                /// @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                                                revert(0, 0)\n                                                            }\n                                                            /// @src 0:25981:26141  \"IPaymaster(paymaster).postOp{gas: mUserOp.paymasterPostOpGasLimit}(...\"\n                                                            let _12 := /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ mload(64)\n                                                            /// @src 0:25981:26141  \"IPaymaster(paymaster).postOp{gas: mUserOp.paymasterPostOpGasLimit}(...\"\n                                                            mstore(_12, /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ shl(224, 0x7c627b21))\n                                                            mstore(/** @src 0:25981:26141  \"IPaymaster(paymaster).postOp{gas: mUserOp.paymasterPostOpGasLimit}(...\" */ add(_12, /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 4), var_mode)\n                                                            mstore(add(/** @src 0:25981:26141  \"IPaymaster(paymaster).postOp{gas: mUserOp.paymasterPostOpGasLimit}(...\" */ _12, /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 36), 128)\n                                                            let tail := abi_encode_bytes(_10, add(/** @src 0:25981:26141  \"IPaymaster(paymaster).postOp{gas: mUserOp.paymasterPostOpGasLimit}(...\" */ _12, /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 132))\n                                                            mstore(add(/** @src 0:25981:26141  \"IPaymaster(paymaster).postOp{gas: mUserOp.paymasterPostOpGasLimit}(...\" */ _12, /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 68), mul(/** @src 0:25859:25879  \"actualGas * gasPrice\" */ _9, expr_3))\n                                                            /// @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                                            mstore(add(/** @src 0:25981:26141  \"IPaymaster(paymaster).postOp{gas: mUserOp.paymasterPostOpGasLimit}(...\" */ _12, /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 100), expr_3)\n                                                            /// @src 0:25981:26141  \"IPaymaster(paymaster).postOp{gas: mUserOp.paymasterPostOpGasLimit}(...\"\n                                                            let trySuccessCondition := call(_11, cleaned_2, /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 0, /** @src 0:25981:26141  \"IPaymaster(paymaster).postOp{gas: mUserOp.paymasterPostOpGasLimit}(...\" */ _12, sub(tail, _12), _12, /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 0)\n                                                            /// @src 0:25981:26141  \"IPaymaster(paymaster).postOp{gas: mUserOp.paymasterPostOpGasLimit}(...\"\n                                                            if trySuccessCondition\n                                                            {\n                                                                finalize_allocation_26283(_12)\n                                                                /// @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                                                var_refundAddress_1 := 0\n                                                            }\n                                                            /// @src 0:25977:26428  \"try IPaymaster(paymaster).postOp{gas: mUserOp.paymasterPostOpGasLimit}(...\"\n                                                            switch iszero(trySuccessCondition)\n                                                            case 0 { }\n                                                            default {\n                                                                /// @src 14:1204:1553  \"assembly (\\\"memory-safe\\\") {...\"\n                                                                let usr$len_1 := returndatasize()\n                                                                /// @src 0:1542:1546  \"2048\"\n                                                                let _13 := 0x0800\n                                                                /// @src 14:1204:1553  \"assembly (\\\"memory-safe\\\") {...\"\n                                                                if gt(usr$len_1, /** @src 0:1542:1546  \"2048\" */ _13)\n                                                                /// @src 14:1204:1553  \"assembly (\\\"memory-safe\\\") {...\"\n                                                                {\n                                                                    usr$len_1 := /** @src 0:1542:1546  \"2048\" */ _13\n                                                                }\n                                                                /// @src 14:1204:1553  \"assembly (\\\"memory-safe\\\") {...\"\n                                                                let usr$ptr_1 := mload(/** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 64)\n                                                                /// @src 14:1204:1553  \"assembly (\\\"memory-safe\\\") {...\"\n                                                                mstore(/** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 64, /** @src 14:1204:1553  \"assembly (\\\"memory-safe\\\") {...\" */ add(add(usr$ptr_1, usr$len_1), /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ _3))\n                                                                /// @src 14:1204:1553  \"assembly (\\\"memory-safe\\\") {...\"\n                                                                mstore(usr$ptr_1, usr$len_1)\n                                                                returndatacopy(add(usr$ptr_1, /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ _3), /** @src -1:-1:-1 */ var_refundAddress_1, /** @src 14:1204:1553  \"assembly (\\\"memory-safe\\\") {...\" */ usr$len_1)\n                                                                /// @src 0:26379:26401  \"PostOpReverted(reason)\"\n                                                                let _14 := /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ mload(64)\n                                                                /// @src 0:26379:26401  \"PostOpReverted(reason)\"\n                                                                mstore(_14, shl(226, 0x2b5e552f))\n                                                                /// @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                                                mstore(/** @src 0:26379:26401  \"PostOpReverted(reason)\" */ add(_14, /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 4), _3)\n                                                                /// @src 0:26379:26401  \"PostOpReverted(reason)\"\n                                                                revert(_14, sub(/** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ abi_encode_bytes(usr$ptr_1, add(/** @src 0:26379:26401  \"PostOpReverted(reason)\" */ _14, /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 36)), /** @src 0:26379:26401  \"PostOpReverted(reason)\" */ _14))\n                                                            }\n                                                        }\n                                                    }\n                                                }\n                                                default /// @src 0:25638:26482  \"if (paymaster == address(0)) {...\"\n                                                {\n                                                    /// @src 0:25685:25715  \"refundAddress = mUserOp.sender\"\n                                                    var_refundAddress := /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ and(/** @src 0:1296:1301  \"10000\" */ mload(/** @src 0:25701:25715  \"mUserOp.sender\" */ _mpos_1), /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ sub(shl(160, 1), 1))\n                                                }\n                                                /// @src 0:26495:26526  \"actualGas += preGas - gasleft()\"\n                                                var_actualGas := /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ add(_9, /** @src 0:1542:1546  \"2048\" */ sub(expr_2, /** @src 0:26517:26526  \"gasleft()\" */ gas()))\n                                                /// @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                                let _15 := mload(/** @src 0:26649:26669  \"mUserOp.callGasLimit\" */ add(_mpos_1, /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 96))\n                                                let sum := add(_15, mload(/** @src 0:26672:26703  \"mUserOp.paymasterPostOpGasLimit\" */ add(_mpos_1, /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 0xa0)))\n                                                /// @src 0:1542:1546  \"2048\"\n                                                let diff_1 := sub(var_actualGas, /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ mload(add(memPtr, 128)))\n                                                /// @src 0:26909:27183  \"if (executionGasLimit > executionGasUsed) {...\"\n                                                if /** @src 0:26913:26949  \"executionGasLimit > executionGasUsed\" */ gt(sum, diff_1)\n                                                /// @src 0:26909:27183  \"if (executionGasLimit > executionGasUsed) {...\"\n                                                {\n                                                    /// @src 0:27135:27164  \"actualGas += unusedGasPenalty\"\n                                                    var_actualGas := /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ add(var_actualGas, div(mul(/** @src 0:1542:1546  \"2048\" */ sub(/** @src 0:26993:27029  \"executionGasLimit - executionGasUsed\" */ sum, diff_1), /** @src 0:1595:1597  \"10\" */ 0x0a), /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 100))\n                                                }\n                                                /// @src 0:27211:27247  \"actualGasCost = actualGas * gasPrice\"\n                                                var_actualGasCost := /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ mul(/** @src 0:27227:27247  \"actualGas * gasPrice\" */ var_actualGas, expr_3)\n                                                /// @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                                let _16 := mload(add(memPtr, 64))\n                                                /// @src 0:27307:28100  \"if (prefund < actualGasCost) {...\"\n                                                switch /** @src 0:27311:27334  \"prefund < actualGasCost\" */ lt(_16, var_actualGasCost)\n                                                case /** @src 0:27307:28100  \"if (prefund < actualGasCost) {...\" */ 0 {\n                                                    /// @src 0:27888:27928  \"_incrementDeposit(refundAddress, refund)\"\n                                                    pop(fun_incrementDeposit(var_refundAddress, /** @src 0:1542:1546  \"2048\" */ sub(/** @src 0:27847:27870  \"prefund - actualGasCost\" */ _16, var_actualGasCost)))\n                                                    /// @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                                    if iszero(lt(var_mode, 3))\n                                                    {\n                                                        mstore(/** @src -1:-1:-1 */ var_refundAddress_1, /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ shl(224, 0x4e487b71))\n                                                        mstore(4, 0x21)\n                                                        revert(/** @src -1:-1:-1 */ var_refundAddress_1, /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 36)\n                                                    }\n                                                    /// @src 0:1542:1546  \"2048\"\n                                                    let _17 := mload(/** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ add(memPtr, _3))\n                                                    /// @src 0:6163:6177  \"opInfo.mUserOp\"\n                                                    let _mpos_2 := mload(memPtr)\n                                                    /// @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                                    let cleaned_3 := and(/** @src 0:1296:1301  \"10000\" */ mload(/** @src 0:6163:6184  \"opInfo.mUserOp.sender\" */ _mpos_2), /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ sub(shl(160, 1), 1))\n                                                    let cleaned_4 := and(/** @src 0:1296:1301  \"10000\" */ mload(/** @src 0:6198:6222  \"opInfo.mUserOp.paymaster\" */ add(_mpos_2, /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 224)), sub(shl(160, 1), 1))\n                                                    let _18 := mload(/** @src 0:6236:6256  \"opInfo.mUserOp.nonce\" */ add(_mpos_2, /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ _3))\n                                                    /// @src 0:6100:6337  \"UserOperationEvent(...\"\n                                                    let _19 := /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ mload(64)\n                                                    mstore(_19, _18)\n                                                    mstore(add(_19, _3), /** @src 0:27961:28002  \"mode == IPaymaster.PostOpMode.opSucceeded\" */ iszero(var_mode))\n                                                    /// @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                                    mstore(add(_19, 64), var_actualGasCost)\n                                                    mstore(add(_19, 96), var_actualGas)\n                                                    /// @src 0:6100:6337  \"UserOperationEvent(...\"\n                                                    log4(_19, /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 128, /** @src 0:6100:6337  \"UserOperationEvent(...\" */ 0x49628fd1471006c1482da88028e9ce4dbb080b815c9b0344d39e5a8e6ec1419f, _17, cleaned_3, cleaned_4)\n                                                }\n                                                default /// @src 0:27307:28100  \"if (prefund < actualGasCost) {...\"\n                                                {\n                                                    /// @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                                    if iszero(lt(var_mode, 3))\n                                                    {\n                                                        mstore(/** @src -1:-1:-1 */ var_refundAddress_1, /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ shl(224, 0x4e487b71))\n                                                        mstore(4, 0x21)\n                                                        revert(/** @src -1:-1:-1 */ var_refundAddress_1, /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 36)\n                                                    }\n                                                    /// @src 0:27354:27792  \"if (mode == IPaymaster.PostOpMode.postOpReverted) {...\"\n                                                    switch /** @src 0:27358:27402  \"mode == IPaymaster.PostOpMode.postOpReverted\" */ eq(var_mode, /** @src 0:27366:27402  \"IPaymaster.PostOpMode.postOpReverted\" */ 2)\n                                                    case /** @src 0:27354:27792  \"if (mode == IPaymaster.PostOpMode.postOpReverted) {...\" */ 0 {\n                                                        /// @src 0:27628:27774  \"assembly (\\\"memory-safe\\\") {...\"\n                                                        mstore(/** @src -1:-1:-1 */ var_refundAddress_1, /** @src 0:27628:27774  \"assembly (\\\"memory-safe\\\") {...\" */ shl(224, 0xdeadaa51))\n                                                        revert(/** @src -1:-1:-1 */ var_refundAddress_1, /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ _3)\n                                                    }\n                                                    default /// @src 0:27354:27792  \"if (mode == IPaymaster.PostOpMode.postOpReverted) {...\"\n                                                    {\n                                                        /// @src 0:27426:27449  \"actualGasCost = prefund\"\n                                                        var_actualGasCost := _16\n                                                        /// @src 0:27489:27495  \"opInfo\"\n                                                        fun_emitPrefundTooLow(memPtr)\n                                                        /// @src 0:27571:27580  \"actualGas\"\n                                                        fun_emitUserOperationEvent(memPtr, _16, var_actualGas)\n                                                    }\n                                                }\n                                                /// @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                                let memPos := mload(64)\n                                                mstore(memPos, var_actualGasCost)\n                                                return(memPos, _3)\n                                            }\n                                            case 0x01ffc9a7 {\n                                                if callvalue() { revert(0, 0) }\n                                                if slt(add(calldatasize(), not(3)), 32) { revert(0, 0) }\n                                                let value_2 := calldataload(4)\n                                                let _20 := and(value_2, shl(224, 0xffffffff))\n                                                if iszero(eq(value_2, _20)) { revert(0, 0) }\n                                                /// @src 0:1859:2045  \"interfaceId...\"\n                                                let expr_4 := /** @src 0:1859:1985  \"interfaceId...\" */ eq(_20, /** @src 0:1887:1984  \"type(IEntryPoint).interfaceId ^ type(IStakeManager).interfaceId ^ type(INonceManager).interfaceId\" */ shl(225, 0x307e35b7))\n                                                /// @src 0:1859:2045  \"interfaceId...\"\n                                                if iszero(expr_4)\n                                                {\n                                                    expr_4 := /** @src 0:2001:2045  \"interfaceId == type(IEntryPoint).interfaceId\" */ eq(_20, /** @src 0:1887:1916  \"type(IEntryPoint).interfaceId\" */ shl(227, 0x122a0e9b))\n                                                }\n                                                /// @src 0:1859:2095  \"interfaceId...\"\n                                                let expr_5 := expr_4\n                                                if iszero(expr_4)\n                                                {\n                                                    expr_5 := /** @src 0:2049:2095  \"interfaceId == type(IStakeManager).interfaceId\" */ eq(_20, /** @src 0:1919:1950  \"type(IStakeManager).interfaceId\" */ shl(224, 0xcf28ef97))\n                                                }\n                                                /// @src 0:1859:2157  \"interfaceId...\"\n                                                let expr_6 := expr_5\n                                                if iszero(expr_5)\n                                                {\n                                                    expr_6 := /** @src 0:2111:2157  \"interfaceId == type(INonceManager).interfaceId\" */ eq(_20, /** @src 0:1953:1984  \"type(INonceManager).interfaceId\" */ shl(224, 0x3e84f021))\n                                                }\n                                                /// @src 0:1859:2197  \"interfaceId...\"\n                                                let expr_7 := expr_6\n                                                if iszero(expr_6)\n                                                {\n                                                    expr_7 := /** @src 74:861:901  \"interfaceId == type(IERC165).interfaceId\" */ eq(_20, /** @src 74:876:901  \"type(IERC165).interfaceId\" */ shl(224, 0x01ffc9a7))\n                                                }\n                                                /// @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                                let memPos_1 := mload(64)\n                                                mstore(memPos_1, iszero(iszero(expr_7)))\n                                                return(memPos_1, 32)\n                                            }\n                                            case 0x0396cb60 {\n                                                let _21 := 32\n                                                if slt(add(calldatasize(), not(3)), _21) { revert(0, 0) }\n                                                let value_3 := calldataload(4)\n                                                let _22 := 0xffffffff\n                                                let _23 := and(value_3, _22)\n                                                if iszero(eq(value_3, _23)) { revert(0, 0) }\n                                                mstore(0, /** @src 4:2428:2438  \"msg.sender\" */ caller())\n                                                /// @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                                mstore(_21, 0)\n                                                let dataSlot := keccak256(0, 64)\n                                                if /** @src 4:2457:2476  \"unstakeDelaySec > 0\" */ iszero(_23)\n                                                /// @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                                {\n                                                    let memPtr_3 := mload(64)\n                                                    mstore(memPtr_3, shl(229, 4594637))\n                                                    mstore(add(memPtr_3, 4), _21)\n                                                    mstore(add(memPtr_3, 36), 26)\n                                                    mstore(add(memPtr_3, 68), \"must specify unstake delay\")\n                                                    revert(memPtr_3, 100)\n                                                }\n                                                let _24 := sload(/** @src 4:2557:2577  \"info.unstakeDelaySec\" */ add(dataSlot, 1))\n                                                /// @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                                if /** @src 4:2538:2577  \"unstakeDelaySec >= info.unstakeDelaySec\" */ lt(_23, /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ and(shr(120, _24), _22))\n                                                {\n                                                    let memPtr_4 := mload(64)\n                                                    mstore(memPtr_4, shl(229, 4594637))\n                                                    mstore(add(memPtr_4, 4), _21)\n                                                    mstore(add(memPtr_4, 36), 28)\n                                                    mstore(add(memPtr_4, 68), \"cannot decrease unstake time\")\n                                                    revert(memPtr_4, 100)\n                                                }\n                                                let _25 := 0xffffffffffffffffffffffffffff\n                                                /// @src 4:2657:2679  \"info.stake + msg.value\"\n                                                let expr_8 := checked_add_uint256(/** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ and(shr(8, _24), _25), /** @src 4:2670:2679  \"msg.value\" */ callvalue())\n                                                /// @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                                if /** @src 4:2697:2706  \"stake > 0\" */ iszero(expr_8)\n                                                /// @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                                {\n                                                    let memPtr_5 := mload(64)\n                                                    mstore(memPtr_5, shl(229, 4594637))\n                                                    mstore(add(memPtr_5, 4), _21)\n                                                    mstore(add(memPtr_5, 36), 18)\n                                                    mstore(add(memPtr_5, 68), \"no stake specified\")\n                                                    revert(memPtr_5, 100)\n                                                }\n                                                if /** @src 4:2747:2773  \"stake <= type(uint112).max\" */ gt(expr_8, /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ _25)\n                                                {\n                                                    let memPtr_6 := mload(64)\n                                                    mstore(memPtr_6, shl(229, 4594637))\n                                                    mstore(add(memPtr_6, 4), _21)\n                                                    mstore(add(memPtr_6, 36), 14)\n                                                    mstore(add(memPtr_6, 68), \"stake overflow\")\n                                                    revert(memPtr_6, 100)\n                                                }\n                                                let _26 := sload(/** @src 4:2850:2862  \"info.deposit\" */ dataSlot)\n                                                /// @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                                let memPtr_7 := mload(64)\n                                                finalize_allocation_26259(memPtr_7)\n                                                mstore(memPtr_7, _26)\n                                                /// @src 4:2825:2962  \"DepositInfo(...\"\n                                                let _27 := add(memPtr_7, /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ _21)\n                                                mstore(_27, /** @src 4:2557:2577  \"info.unstakeDelaySec\" */ 1)\n                                                /// @src 4:2825:2962  \"DepositInfo(...\"\n                                                let _28 := add(memPtr_7, /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 64)\n                                                mstore(_28, and(/** @src 4:2894:2908  \"uint112(stake)\" */ expr_8, /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ _25))\n                                                /// @src 4:2825:2962  \"DepositInfo(...\"\n                                                let _29 := add(memPtr_7, 96)\n                                                /// @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                                mstore(_29, _23)\n                                                /// @src 4:2825:2962  \"DepositInfo(...\"\n                                                let _30 := add(memPtr_7, 128)\n                                                /// @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                                mstore(_30, 0)\n                                                mstore(0, /** @src 4:2428:2438  \"msg.sender\" */ caller())\n                                                /// @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                                mstore(_21, 0)\n                                                let dataSlot_1 := keccak256(0, 64)\n                                                sstore(dataSlot_1, mload(memPtr_7))\n                                                let memberSlot := add(dataSlot_1, /** @src 4:2557:2577  \"info.unstakeDelaySec\" */ 1)\n                                                /// @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                                let _31 := iszero(iszero(mload(_27)))\n                                                let _32 := sload(memberSlot)\n                                                let _33 := and(shl(8, mload(_28)), 0xffffffffffffffffffffffffffff00)\n                                                sstore(memberSlot, or(or(_33, or(and(_32, shl(152, 0xffffffffffffffffffffffffff)), and(_31, 255))), and(shl(120, mload(_29)), shl(120, 0xffffffff))))\n                                                update_storage_value_offsett_uint48_to_uint48(memberSlot, and(mload(_30), 0xffffffffffff))\n                                                /// @src 4:2977:3024  \"StakeLocked(msg.sender, stake, unstakeDelaySec)\"\n                                                let _34 := /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ mload(64)\n                                                mstore(_34, expr_8)\n                                                mstore(add(_34, _21), _23)\n                                                /// @src 4:2977:3024  \"StakeLocked(msg.sender, stake, unstakeDelaySec)\"\n                                                log2(_34, /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 64, /** @src 4:2977:3024  \"StakeLocked(msg.sender, stake, unstakeDelaySec)\" */ 0xa5ae833d0bb1dcd632d98a8b70973e8516812898e19bf27b70071ebc8dc52c01, /** @src 4:2428:2438  \"msg.sender\" */ caller())\n                                                /// @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                                return(0, 0)\n                                            }\n                                            case 0x0bd28e3b {\n                                                if callvalue() { revert(0, 0) }\n                                                if slt(add(calldatasize(), not(3)), 32) { revert(0, 0) }\n                                                let value_4 := calldataload(4)\n                                                let _35 := and(value_4, sub(shl(192, 1), 1))\n                                                if iszero(eq(value_4, _35)) { revert(0, 0) }\n                                                mstore(0, /** @src 2:913:923  \"msg.sender\" */ caller())\n                                                /// @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                                mstore(32, /** @src 2:893:912  \"nonceSequenceNumber\" */ 0x01)\n                                                /// @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                                let _36 := keccak256(0, 64)\n                                                mstore(0, _35)\n                                                mstore(32, _36)\n                                                let dataSlot_2 := keccak256(0, 64)\n                                                sstore(dataSlot_2, /** @src 2:893:931  \"nonceSequenceNumber[msg.sender][key]++\" */ increment_uint256(/** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ sload(/** @src 2:893:931  \"nonceSequenceNumber[msg.sender][key]++\" */ dataSlot_2)))\n                                                /// @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                                return(0, 0)\n                                            }\n                                            case 0x1b2e01b8 {\n                                                if callvalue() { revert(0, 0) }\n                                                if slt(add(calldatasize(), not(3)), 64) { revert(0, 0) }\n                                                let value0 := abi_decode_address()\n                                                let value1 := abi_decode_uint192()\n                                                mstore(0, and(value0, sub(shl(160, 1), 1)))\n                                                mstore(32, /** @src 2:279:353  \"mapping(address => mapping(uint192 => uint256)) public nonceSequenceNumber\" */ 1)\n                                                /// @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                                let _37 := keccak256(0, 64)\n                                                mstore(0, and(value1, sub(shl(192, 1), 1)))\n                                                mstore(32, _37)\n                                                let _38 := sload(keccak256(0, 64))\n                                                let memPos_2 := mload(64)\n                                                mstore(memPos_2, _38)\n                                                return(memPos_2, 32)\n                                            }\n                                            case 0x205c2878 {\n                                                if callvalue() { revert(0, 0) }\n                                                if slt(add(calldatasize(), not(3)), 64) { revert(0, 0) }\n                                                let value0_1 := abi_decode_address()\n                                                let value_5 := calldataload(36)\n                                                mstore(0, /** @src 4:4805:4815  \"msg.sender\" */ caller())\n                                                /// @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                                mstore(32, 0)\n                                                let dataSlot_3 := keccak256(0, 64)\n                                                let _39 := sload(/** @src 4:4852:4864  \"info.deposit\" */ dataSlot_3)\n                                                /// @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                                if /** @src 4:4834:4864  \"withdrawAmount <= info.deposit\" */ gt(value_5, _39)\n                                                /// @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                                {\n                                                    let memPtr_8 := mload(64)\n                                                    mstore(memPtr_8, shl(229, 4594637))\n                                                    mstore(add(memPtr_8, 4), 32)\n                                                    mstore(add(memPtr_8, 36), 25)\n                                                    mstore(add(memPtr_8, 68), \"Withdraw amount too large\")\n                                                    revert(memPtr_8, 100)\n                                                }\n                                                sstore(dataSlot_3, /** @src 4:4919:4948  \"info.deposit - withdrawAmount\" */ checked_sub_uint256(/** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ _39, /** @src 4:4919:4948  \"info.deposit - withdrawAmount\" */ value_5))\n                                                /// @src 4:4963:5017  \"Withdrawn(msg.sender, withdrawAddress, withdrawAmount)\"\n                                                let _40 := /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ mload(64)\n                                                /// @src 4:4963:5017  \"Withdrawn(msg.sender, withdrawAddress, withdrawAmount)\"\n                                                log2(_40, sub(abi_encode_address_payable_uint256(_40, value0_1, value_5), _40), 0xd1c19fbcd4551a5edfb66d43d2e337c04837afda3482b42bdf569a8fccdae5fb, /** @src 4:4805:4815  \"msg.sender\" */ caller())\n                                                /// @src 4:5045:5092  \"withdrawAddress.call{value: withdrawAmount}(\\\"\\\")\"\n                                                let expr_component := call(gas(), /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ and(/** @src 4:5045:5065  \"withdrawAddress.call\" */ value0_1, /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ sub(shl(160, 1), 1)), /** @src 4:5045:5092  \"withdrawAddress.call{value: withdrawAmount}(\\\"\\\")\" */ value_5, /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 0, 0, 0, 0)\n                                                /// @src 4:5045:5092  \"withdrawAddress.call{value: withdrawAmount}(\\\"\\\")\"\n                                                pop(extract_returndata())\n                                                /// @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                                if iszero(expr_component)\n                                                {\n                                                    let memPtr_9 := mload(64)\n                                                    mstore(memPtr_9, shl(229, 4594637))\n                                                    mstore(add(memPtr_9, 4), 32)\n                                                    mstore(add(memPtr_9, 36), 18)\n                                                    mstore(add(memPtr_9, 68), \"failed to withdraw\")\n                                                    revert(memPtr_9, 100)\n                                                }\n                                                return(0, 0)\n                                            }\n                                            case 0x22cdde4c {\n                                                if callvalue() { revert(0, 0) }\n                                                let _41 := not(3)\n                                                if slt(add(calldatasize(), _41), 32) { revert(0, 0) }\n                                                let offset_2 := calldataload(4)\n                                                if gt(offset_2, 0xffffffffffffffff) { revert(0, 0) }\n                                                if slt(add(sub(calldatasize(), offset_2), _41), 288) { revert(0, 0) }\n                                                let ret := fun_getUserOpHash(add(4, offset_2))\n                                                let memPos_3 := mload(64)\n                                                mstore(memPos_3, ret)\n                                                return(memPos_3, 32)\n                                            }\n                                            case 0x35567e1a {\n                                                if callvalue() { revert(0, 0) }\n                                                if slt(add(calldatasize(), not(3)), 64) { revert(0, 0) }\n                                                let value0_2 := abi_decode_address()\n                                                let value1_1 := abi_decode_uint192()\n                                                mstore(0, and(value0_2, sub(shl(160, 1), 1)))\n                                                mstore(32, /** @src 2:507:526  \"nonceSequenceNumber\" */ 0x01)\n                                                /// @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                                let _42 := keccak256(0, 64)\n                                                mstore(0, and(value1_1, sub(shl(192, 1), 1)))\n                                                mstore(32, _42)\n                                                let _43 := sload(keccak256(0, 64))\n                                                let memPos_4 := mload(64)\n                                                mstore(memPos_4, /** @src 2:507:562  \"nonceSequenceNumber[sender][key] | (uint256(key) << 64)\" */ or(_43, /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ and(shl(64, /** @src 2:543:555  \"uint256(key)\" */ value1_1), /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ not(0xffffffffffffffff))))\n                                                return(memPos_4, 32)\n                                            }\n                                            case 0x5287ce12 {\n                                                if callvalue() { revert(0, 0) }\n                                                if slt(add(calldatasize(), not(3)), 32) { revert(0, 0) }\n                                                let value0_3 := abi_decode_address()\n                                                let memPtr_10 := mload(64)\n                                                finalize_allocation_26259(memPtr_10)\n                                                mstore(memPtr_10, 0)\n                                                mstore(add(memPtr_10, 32), 0)\n                                                mstore(add(memPtr_10, 64), 0)\n                                                mstore(add(memPtr_10, 96), 0)\n                                                mstore(add(memPtr_10, 128), 0)\n                                                mstore(0, and(value0_3, sub(shl(160, 1), 1)))\n                                                mstore(32, 0)\n                                                let dataSlot_4 := keccak256(0, 64)\n                                                let memPtr_11 := mload(64)\n                                                finalize_allocation_26259(memPtr_11)\n                                                let _44 := sload(dataSlot_4)\n                                                mstore(memPtr_11, _44)\n                                                let _45 := sload(add(dataSlot_4, 1))\n                                                let _46 := add(memPtr_11, 32)\n                                                mstore(_46, iszero(iszero(and(_45, 0xff))))\n                                                let _47 := 0xffffffffffffffffffffffffffff\n                                                let _48 := add(memPtr_11, 64)\n                                                mstore(_48, and(shr(8, _45), _47))\n                                                let _49 := 0xffffffff\n                                                let _50 := add(memPtr_11, 96)\n                                                mstore(_50, and(shr(120, _45), _49))\n                                                let _51 := 0xffffffffffff\n                                                let _52 := add(memPtr_11, 128)\n                                                mstore(_52, and(shr(152, _45), _51))\n                                                let memPos_5 := mload(64)\n                                                mstore(memPos_5, _44)\n                                                mstore(add(memPos_5, 32), iszero(iszero(mload(_46))))\n                                                mstore(add(memPos_5, 64), and(mload(_48), _47))\n                                                mstore(add(memPos_5, 96), and(mload(_50), _49))\n                                                mstore(add(memPos_5, 128), and(mload(_52), _51))\n                                                return(memPos_5, 160)\n                                            }\n                                            case 0x70a08231 {\n                                                if callvalue() { revert(0, 0) }\n                                                if slt(add(calldatasize(), not(3)), 32) { revert(0, 0) }\n                                                mstore(0, and(abi_decode_address(), sub(shl(160, 1), 1)))\n                                                mstore(32, 0)\n                                                let _53 := sload(keccak256(0, 64))\n                                                let memPos_6 := mload(64)\n                                                mstore(memPos_6, _53)\n                                                return(memPos_6, 32)\n                                            }\n                                            case 0x765e827f {\n                                                if callvalue() { revert(0, 0) }\n                                                let param, param_1, param_2 := abi_decode_array_struct_PackedUserOperation_calldata_dyn_calldatat_address_payable(calldatasize())\n                                                /// @src 70:2322:2425  \"modifier nonReentrant() {...\"\n                                                fun_nonReentrantBefore()\n                                                /// @src 0:6751:6775  \"new UserOpInfo[](opslen)\"\n                                                let expr_mpos := allocate_and_zero_memory_array_array_struct_UserOpInfo_dyn(param_1)\n                                                /// @src 0:6815:6828  \"uint256 i = 0\"\n                                                let var_i := /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 0\n                                                /// @src 0:6810:7135  \"for (uint256 i = 0; i < opslen; i++) {...\"\n                                                for { }\n                                                /** @src 0:6830:6840  \"i < opslen\" */ lt(var_i, param_1)\n                                                /// @src 0:6815:6828  \"uint256 i = 0\"\n                                                {\n                                                    /// @src 0:6842:6845  \"i++\"\n                                                    var_i := /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ add(/** @src 0:6842:6845  \"i++\" */ var_i, /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 1)\n                                                }\n                                                /// @src 0:6842:6845  \"i++\"\n                                                {\n                                                    /// @src 0:6973:7011  \"_validatePrepayment(i, ops[i], opInfo)\"\n                                                    let expr_component_1, expr_component_2 := fun_validatePrepayment(var_i, /** @src 0:6996:7002  \"ops[i]\" */ calldata_array_index_access_struct_PackedUserOperation_calldata_dyn_calldata(param, param_1, var_i), /** @src 0:6892:6902  \"opInfos[i]\" */ mload(memory_array_index_access_struct_UserOpInfo_dyn(expr_mpos, var_i)))\n                                                    /// @src 0:20568:20602  \"_getValidationData(validationData)\"\n                                                    let expr_component_3, expr_component_4 := fun_getValidationData(expr_component_1)\n                                                    /// @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                                    let _54 := sub(shl(160, 1), 1)\n                                                    /// @src 0:20612:20723  \"if (expectedAggregator != aggregator) {...\"\n                                                    if /** @src 0:20616:20648  \"expectedAggregator != aggregator\" */ iszero(iszero(/** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ and(/** @src 0:20616:20648  \"expectedAggregator != aggregator\" */ expr_component_3, /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ _54)))\n                                                    /// @src 0:20612:20723  \"if (expectedAggregator != aggregator) {...\"\n                                                    {\n                                                        /// @src 0:20671:20712  \"FailedOp(opIndex, \\\"AA24 signature error\\\")\"\n                                                        let _55 := /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ mload(64)\n                                                        /// @src 0:20671:20712  \"FailedOp(opIndex, \\\"AA24 signature error\\\")\"\n                                                        mstore(_55, shl(225, 0x1101335b))\n                                                        /// @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                                        mstore(/** @src 0:20671:20712  \"FailedOp(opIndex, \\\"AA24 signature error\\\")\" */ add(_55, /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 4), var_i)\n                                                        mstore(add(/** @src 0:20671:20712  \"FailedOp(opIndex, \\\"AA24 signature error\\\")\" */ _55, /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 36), 64)\n                                                        mstore(add(/** @src 0:20671:20712  \"FailedOp(opIndex, \\\"AA24 signature error\\\")\" */ _55, /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 68), 20)\n                                                        mstore(add(/** @src 0:20671:20712  \"FailedOp(opIndex, \\\"AA24 signature error\\\")\" */ _55, /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 100), \"AA24 signature error\")\n                                                        /// @src 0:20671:20712  \"FailedOp(opIndex, \\\"AA24 signature error\\\")\"\n                                                        revert(_55, /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 132)\n                                                    }\n                                                    /// @src 0:20732:20828  \"if (outOfTimeRange) {...\"\n                                                    if expr_component_4\n                                                    {\n                                                        /// @src 0:20773:20817  \"FailedOp(opIndex, \\\"AA22 expired or not due\\\")\"\n                                                        let _56 := /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ mload(64)\n                                                        /// @src 0:20773:20817  \"FailedOp(opIndex, \\\"AA22 expired or not due\\\")\"\n                                                        mstore(_56, /** @src 0:20671:20712  \"FailedOp(opIndex, \\\"AA24 signature error\\\")\" */ shl(225, 0x1101335b))\n                                                        /// @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                                        mstore(/** @src 0:20773:20817  \"FailedOp(opIndex, \\\"AA22 expired or not due\\\")\" */ add(_56, /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 4), var_i)\n                                                        mstore(add(/** @src 0:20773:20817  \"FailedOp(opIndex, \\\"AA22 expired or not due\\\")\" */ _56, /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 36), 64)\n                                                        mstore(add(/** @src 0:20773:20817  \"FailedOp(opIndex, \\\"AA22 expired or not due\\\")\" */ _56, /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 68), 23)\n                                                        mstore(add(/** @src 0:20773:20817  \"FailedOp(opIndex, \\\"AA22 expired or not due\\\")\" */ _56, /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 100), \"AA22 expired or not due\")\n                                                        /// @src 0:20773:20817  \"FailedOp(opIndex, \\\"AA22 expired or not due\\\")\"\n                                                        revert(_56, /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 132)\n                                                    }\n                                                    /// @src 0:21130:21173  \"_getValidationData(paymasterValidationData)\"\n                                                    let expr_component_5, expr_component_6 := fun_getValidationData(expr_component_2)\n                                                    /// @src 0:21183:21288  \"if (pmAggregator != address(0)) {...\"\n                                                    if /** @src 0:21187:21213  \"pmAggregator != address(0)\" */ iszero(iszero(/** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ and(/** @src 0:21187:21213  \"pmAggregator != address(0)\" */ expr_component_5, /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ _54)))\n                                                    /// @src 0:21183:21288  \"if (pmAggregator != address(0)) {...\"\n                                                    {\n                                                        /// @src 0:21236:21277  \"FailedOp(opIndex, \\\"AA34 signature error\\\")\"\n                                                        let _57 := /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ mload(64)\n                                                        /// @src 0:21236:21277  \"FailedOp(opIndex, \\\"AA34 signature error\\\")\"\n                                                        mstore(_57, /** @src 0:20671:20712  \"FailedOp(opIndex, \\\"AA24 signature error\\\")\" */ shl(225, 0x1101335b))\n                                                        /// @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                                        mstore(/** @src 0:21236:21277  \"FailedOp(opIndex, \\\"AA34 signature error\\\")\" */ add(_57, /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 4), var_i)\n                                                        mstore(add(/** @src 0:21236:21277  \"FailedOp(opIndex, \\\"AA34 signature error\\\")\" */ _57, /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 36), 64)\n                                                        mstore(add(/** @src 0:21236:21277  \"FailedOp(opIndex, \\\"AA34 signature error\\\")\" */ _57, /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 68), 20)\n                                                        mstore(add(/** @src 0:21236:21277  \"FailedOp(opIndex, \\\"AA34 signature error\\\")\" */ _57, /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 100), \"AA34 signature error\")\n                                                        /// @src 0:21236:21277  \"FailedOp(opIndex, \\\"AA34 signature error\\\")\"\n                                                        revert(_57, /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 132)\n                                                    }\n                                                    /// @src 0:21297:21403  \"if (outOfTimeRange) {...\"\n                                                    if expr_component_6\n                                                    {\n                                                        /// @src 0:21338:21392  \"FailedOp(opIndex, \\\"AA32 paymaster expired or not due\\\")\"\n                                                        let _58 := /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ mload(64)\n                                                        /// @src 0:21338:21392  \"FailedOp(opIndex, \\\"AA32 paymaster expired or not due\\\")\"\n                                                        mstore(_58, /** @src 0:20671:20712  \"FailedOp(opIndex, \\\"AA24 signature error\\\")\" */ shl(225, 0x1101335b))\n                                                        /// @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                                        mstore(/** @src 0:21338:21392  \"FailedOp(opIndex, \\\"AA32 paymaster expired or not due\\\")\" */ add(_58, /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 4), var_i)\n                                                        mstore(add(/** @src 0:21338:21392  \"FailedOp(opIndex, \\\"AA32 paymaster expired or not due\\\")\" */ _58, /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 36), 64)\n                                                        mstore(add(/** @src 0:21338:21392  \"FailedOp(opIndex, \\\"AA32 paymaster expired or not due\\\")\" */ _58, /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 68), 33)\n                                                        mstore(add(/** @src 0:21338:21392  \"FailedOp(opIndex, \\\"AA32 paymaster expired or not due\\\")\" */ _58, /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 100), \"AA32 paymaster expired or not du\")\n                                                        mstore(add(/** @src 0:21338:21392  \"FailedOp(opIndex, \\\"AA32 paymaster expired or not due\\\")\" */ _58, /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 132), \"e\")\n                                                        /// @src 0:21338:21392  \"FailedOp(opIndex, \\\"AA32 paymaster expired or not due\\\")\"\n                                                        revert(_58, /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 164)\n                                                    }\n                                                }\n                                                /// @src 0:7149:7170  \"uint256 collected = 0\"\n                                                let var_collected := /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 0\n                                                /// @src 0:7189:7206  \"BeforeExecution()\"\n                                                log1(/** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 0, 0, /** @src 0:7189:7206  \"BeforeExecution()\" */ 0xbb47ee3e183a558b1a2ff0874b079f3fc5478b7454eacf2bfc5af2ff5878f972)\n                                                /// @src 0:7226:7239  \"uint256 i = 0\"\n                                                let var_i_1 := /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 0\n                                                /// @src 0:7221:7341  \"for (uint256 i = 0; i < opslen; i++) {...\"\n                                                for { }\n                                                /** @src 0:7241:7251  \"i < opslen\" */ lt(var_i_1, param_1)\n                                                /// @src 0:7226:7239  \"uint256 i = 0\"\n                                                {\n                                                    /// @src 0:7253:7256  \"i++\"\n                                                    var_i_1 := /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ add(/** @src 0:7253:7256  \"i++\" */ var_i_1, /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 1)\n                                                }\n                                                /// @src 0:7253:7256  \"i++\"\n                                                {\n                                                    /// @src 0:7307:7313  \"ops[i]\"\n                                                    let expr_offset := calldata_array_index_access_struct_PackedUserOperation_calldata_dyn_calldata(param, param_1, var_i_1)\n                                                    /// @src 0:7276:7326  \"collected += _executeUserOp(i, ops[i], opInfos[i])\"\n                                                    var_collected := /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ add(var_collected, /** @src 0:7289:7326  \"_executeUserOp(i, ops[i], opInfos[i])\" */ fun_executeUserOp(var_i_1, expr_offset, /** @src 0:7315:7325  \"opInfos[i]\" */ mload(memory_array_index_access_struct_UserOpInfo_dyn(expr_mpos, var_i_1))))\n                                                }\n                                                /// @src 0:7380:7389  \"collected\"\n                                                fun_compensate(param_2, var_collected)\n                                                /// @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                                sstore(/** @src 70:2924:2945  \"_status = NOT_ENTERED\" */ 0x02, /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 1)\n                                                return(0, 0)\n                                            }\n                                            case 0x850aaf62 {\n                                                if callvalue() { revert(0, 0) }\n                                                if slt(add(calldatasize(), not(3)), 64) { revert(0, 0) }\n                                                let value0_4 := abi_decode_address()\n                                                let offset_3 := calldataload(36)\n                                                if gt(offset_3, 0xffffffffffffffff) { revert(0, 0) }\n                                                let value1_2, value2_1 := abi_decode_bytes_calldata(add(4, offset_3), calldatasize())\n                                                /// @src 0:29607:29632  \"target.delegatecall(data)\"\n                                                let _59 := /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ mload(64)\n                                                calldatacopy(_59, value1_2, value2_1)\n                                                let _60 := add(_59, value2_1)\n                                                mstore(_60, 0)\n                                                /// @src 0:29607:29632  \"target.delegatecall(data)\"\n                                                let expr_component_7 := delegatecall(gas(), value0_4, _59, sub(/** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ _60, /** @src 0:29607:29632  \"target.delegatecall(data)\" */ _59), /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 0, 0)\n                                                /// @src 0:29607:29632  \"target.delegatecall(data)\"\n                                                let expr_component_mpos := extract_returndata()\n                                                /// @src 0:29649:29680  \"DelegateAndRevert(success, ret)\"\n                                                let _61 := /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ mload(64)\n                                                /// @src 0:29649:29680  \"DelegateAndRevert(success, ret)\"\n                                                mstore(_61, shl(226, 0x26504155))\n                                                /// @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                                mstore(/** @src 0:29649:29680  \"DelegateAndRevert(success, ret)\" */ add(_61, /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 4), iszero(iszero(expr_component_7)))\n                                                mstore(add(/** @src 0:29649:29680  \"DelegateAndRevert(success, ret)\" */ _61, /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 36), 64)\n                                                /// @src 0:29649:29680  \"DelegateAndRevert(success, ret)\"\n                                                revert(_61, sub(/** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ abi_encode_bytes(expr_component_mpos, add(/** @src 0:29649:29680  \"DelegateAndRevert(success, ret)\" */ _61, /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 68)), /** @src 0:29649:29680  \"DelegateAndRevert(success, ret)\" */ _61))\n                                            }\n                                            case /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 0x9b249f69 {\n                                                if callvalue() { revert(0, 0) }\n                                                if slt(add(calldatasize(), not(3)), 32) { revert(0, 0) }\n                                                let offset_4 := calldataload(4)\n                                                if gt(offset_4, 0xffffffffffffffff) { revert(0, 0) }\n                                                let value0_5, value1_3 := abi_decode_bytes_calldata(add(4, offset_4), calldatasize())\n                                                let _62 := sub(shl(160, 1), 1)\n                                                /// @src 0:15911:15949  \"senderCreator().createSender(initCode)\"\n                                                let _63 := /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ mload(64)\n                                                /// @src 0:15911:15949  \"senderCreator().createSender(initCode)\"\n                                                mstore(_63, /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ shl(225, 0x2b870d1b))\n                                                mstore(/** @src 0:15911:15949  \"senderCreator().createSender(initCode)\" */ add(_63, /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 4), 32)\n                                                /// @src 0:15911:15949  \"senderCreator().createSender(initCode)\"\n                                                let _64 := call(gas(), /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ and(/** @src 0:1099:1113  \"_senderCreator\" */ loadimmutable(\"35\"), /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ _62), 0, /** @src 0:15911:15949  \"senderCreator().createSender(initCode)\" */ _63, sub(/** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ abi_encode_bytes_calldata(value0_5, value1_3, add(/** @src 0:15911:15949  \"senderCreator().createSender(initCode)\" */ _63, /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 36)), /** @src 0:15911:15949  \"senderCreator().createSender(initCode)\" */ _63), _63, /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 32)\n                                                /// @src 0:15911:15949  \"senderCreator().createSender(initCode)\"\n                                                if iszero(_64)\n                                                {\n                                                    /// @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                                    let pos := mload(64)\n                                                    returndatacopy(pos, 0, returndatasize())\n                                                    revert(pos, returndatasize())\n                                                }\n                                                /// @src 0:15911:15949  \"senderCreator().createSender(initCode)\"\n                                                let expr_9 := /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 0\n                                                /// @src 0:15911:15949  \"senderCreator().createSender(initCode)\"\n                                                if _64\n                                                {\n                                                    let _65 := /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 32\n                                                    /// @src 0:15911:15949  \"senderCreator().createSender(initCode)\"\n                                                    if gt(/** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 32, /** @src 0:15911:15949  \"senderCreator().createSender(initCode)\" */ returndatasize()) { _65 := returndatasize() }\n                                                    finalize_allocation(_63, _65)\n                                                    expr_9 := abi_decode_address_fromMemory(_63, add(_63, _65))\n                                                }\n                                                /// @src 0:15966:15993  \"SenderAddressResult(sender)\"\n                                                let _66 := /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ mload(64)\n                                                /// @src 0:15966:15993  \"SenderAddressResult(sender)\"\n                                                mstore(_66, shl(225, 0x3653dc03))\n                                                /// @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                                mstore(/** @src 0:15966:15993  \"SenderAddressResult(sender)\" */ add(_66, /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 4), and(expr_9, _62))\n                                                /// @src 0:15966:15993  \"SenderAddressResult(sender)\"\n                                                revert(_66, /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 36)\n                                            }\n                                            case 0xb760faf9 {\n                                                if slt(add(calldatasize(), not(3)), 32) { revert(0, 0) }\n                                                fun_depositTo(abi_decode_address())\n                                                return(0, 0)\n                                            }\n                                            case 0xbb9fe6bf {\n                                                if callvalue() { revert(0, 0) }\n                                                if slt(add(calldatasize(), not(3)), 0) { revert(0, 0) }\n                                                mstore(0, /** @src 4:3248:3258  \"msg.sender\" */ caller())\n                                                /// @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                                mstore(0x20, 0)\n                                                /// @src 4:3277:3297  \"info.unstakeDelaySec\"\n                                                let _67 := add(/** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ keccak256(0, 64), /** @src 4:3277:3297  \"info.unstakeDelaySec\" */ 1)\n                                                /// @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                                let _68 := sload(/** @src 4:3277:3297  \"info.unstakeDelaySec\" */ _67)\n                                                /// @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                                let value_6 := and(shr(120, _68), 0xffffffff)\n                                                if /** @src 4:3277:3302  \"info.unstakeDelaySec != 0\" */ iszero(/** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ value_6)\n                                                {\n                                                    let memPtr_12 := mload(64)\n                                                    mstore(memPtr_12, shl(229, 4594637))\n                                                    mstore(add(memPtr_12, 4), 0x20)\n                                                    mstore(add(memPtr_12, 36), 10)\n                                                    mstore(add(memPtr_12, 68), \"not staked\")\n                                                    revert(memPtr_12, 100)\n                                                }\n                                                if iszero(and(_68, 0xff))\n                                                {\n                                                    let memPtr_13 := mload(64)\n                                                    mstore(memPtr_13, shl(229, 4594637))\n                                                    mstore(add(memPtr_13, 4), 0x20)\n                                                    mstore(add(memPtr_13, 36), 17)\n                                                    mstore(add(memPtr_13, 68), \"already unstaking\")\n                                                    revert(memPtr_13, 100)\n                                                }\n                                                let _69 := 0xffffffffffff\n                                                let sum_1 := add(and(/** @src 4:3407:3422  \"block.timestamp\" */ timestamp(), /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ _69), value_6)\n                                                if gt(sum_1, _69)\n                                                {\n                                                    mstore(0, shl(224, 0x4e487b71))\n                                                    mstore(4, 0x11)\n                                                    revert(0, 0x24)\n                                                }\n                                                /// @src 4:3456:3488  \"info.withdrawTime = withdrawTime\"\n                                                update_storage_value_offsett_uint48_to_uint48(_67, sum_1)\n                                                /// @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                                sstore(_67, and(sload(_67), not(255)))\n                                                /// @src 4:3532:3571  \"StakeUnlocked(msg.sender, withdrawTime)\"\n                                                let _70 := /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ mload(64)\n                                                mstore(_70, and(sum_1, _69))\n                                                /// @src 4:3532:3571  \"StakeUnlocked(msg.sender, withdrawTime)\"\n                                                log2(_70, /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 0x20, /** @src 4:3532:3571  \"StakeUnlocked(msg.sender, withdrawTime)\" */ 0xfa9b3c14cc825c412c9ed81b3ba365a5b459439403f18829e572ed53a4180f0a, /** @src 4:3248:3258  \"msg.sender\" */ caller())\n                                                /// @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                                return(0, 0)\n                                            }\n                                            case 0xc23a5cea {\n                                                if callvalue() { revert(0, 0) }\n                                                let _71 := 32\n                                                if slt(add(calldatasize(), not(3)), _71) { revert(0, 0) }\n                                                let value0_6 := abi_decode_address()\n                                                mstore(0, /** @src 4:3897:3907  \"msg.sender\" */ caller())\n                                                /// @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                                mstore(_71, 0)\n                                                /// @src 4:3934:3944  \"info.stake\"\n                                                let _72 := add(/** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ keccak256(0, 64), /** @src 4:3934:3944  \"info.stake\" */ 1)\n                                                /// @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                                let _73 := sload(/** @src 4:3934:3944  \"info.stake\" */ _72)\n                                                /// @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                                let value_7 := and(shr(8, _73), 0xffffffffffffffffffffffffffff)\n                                                if /** @src 4:3962:3971  \"stake > 0\" */ iszero(value_7)\n                                                /// @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                                {\n                                                    let memPtr_14 := mload(64)\n                                                    mstore(memPtr_14, shl(229, 4594637))\n                                                    mstore(add(memPtr_14, 4), _71)\n                                                    mstore(add(memPtr_14, 36), 20)\n                                                    mstore(add(memPtr_14, 68), \"No stake to withdraw\")\n                                                    revert(memPtr_14, 100)\n                                                }\n                                                let value_8 := and(shr(152, _73), 0xffffffffffff)\n                                                if /** @src 4:4014:4035  \"info.withdrawTime > 0\" */ iszero(/** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ value_8)\n                                                {\n                                                    let memPtr_15 := mload(64)\n                                                    mstore(memPtr_15, shl(229, 4594637))\n                                                    mstore(add(memPtr_15, 4), _71)\n                                                    mstore(add(memPtr_15, 36), 29)\n                                                    mstore(add(memPtr_15, 68), \"must call unlockStake() first\")\n                                                    revert(memPtr_15, 100)\n                                                }\n                                                if /** @src 4:4100:4136  \"info.withdrawTime <= block.timestamp\" */ gt(/** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ value_8, /** @src 4:4121:4136  \"block.timestamp\" */ timestamp())\n                                                /// @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                                {\n                                                    let memPtr_16 := mload(64)\n                                                    mstore(memPtr_16, shl(229, 4594637))\n                                                    mstore(add(memPtr_16, 4), _71)\n                                                    mstore(add(memPtr_16, 36), 27)\n                                                    mstore(add(memPtr_16, 68), \"Stake withdrawal is not due\")\n                                                    revert(memPtr_16, 100)\n                                                }\n                                                sstore(_72, and(_73, not(sub(shl(200, 1), 256))))\n                                                /// @src 4:4293:4343  \"StakeWithdrawn(msg.sender, withdrawAddress, stake)\"\n                                                let _74 := /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ mload(64)\n                                                /// @src 4:4293:4343  \"StakeWithdrawn(msg.sender, withdrawAddress, stake)\"\n                                                log2(_74, sub(abi_encode_address_payable_uint256(_74, value0_6, value_7), _74), 0xb7c918e0e249f999e965cafeb6c664271b3f4317d296461500e71da39f0cbda3, /** @src 4:3897:3907  \"msg.sender\" */ caller())\n                                                /// @src 4:4371:4409  \"withdrawAddress.call{value: stake}(\\\"\\\")\"\n                                                let expr_component_8 := call(gas(), /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ and(/** @src 4:4371:4391  \"withdrawAddress.call\" */ value0_6, /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ sub(shl(160, 1), 1)), /** @src 4:4371:4409  \"withdrawAddress.call{value: stake}(\\\"\\\")\" */ value_7, /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 0, 0, 0, 0)\n                                                /// @src 4:4371:4409  \"withdrawAddress.call{value: stake}(\\\"\\\")\"\n                                                pop(extract_returndata())\n                                                /// @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                                if iszero(expr_component_8)\n                                                {\n                                                    let memPtr_17 := mload(64)\n                                                    mstore(memPtr_17, shl(229, 4594637))\n                                                    mstore(add(memPtr_17, 4), _71)\n                                                    mstore(add(memPtr_17, 36), 24)\n                                                    mstore(add(memPtr_17, 68), \"failed to withdraw stake\")\n                                                    revert(memPtr_17, 100)\n                                                }\n                                                return(0, 0)\n                                            }\n                                            case 0xdbed18e0 {\n                                                if callvalue() { revert(0, 0) }\n                                                let param_3, param_4, param_5 := abi_decode_array_struct_PackedUserOperation_calldata_dyn_calldatat_address_payable(calldatasize())\n                                                /// @src 70:2322:2425  \"modifier nonReentrant() {...\"\n                                                fun_nonReentrantBefore()\n                                                /// @src 0:7654:7674  \"uint256 totalOps = 0\"\n                                                let var_totalOps := /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 0\n                                                /// @src 0:7689:7702  \"uint256 i = 0\"\n                                                let var_i_2 := /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 0\n                                                /// @src 0:7684:8421  \"for (uint256 i = 0; i < opasLen; i++) {...\"\n                                                for { }\n                                                /** @src 0:7704:7715  \"i < opasLen\" */ lt(var_i_2, param_4)\n                                                /// @src 0:7689:7702  \"uint256 i = 0\"\n                                                {\n                                                    /// @src 0:7717:7720  \"i++\"\n                                                    var_i_2 := /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ add(/** @src 0:7717:7720  \"i++\" */ var_i_2, /** @src 0:8024:8025  \"1\" */ 0x01)\n                                                }\n                                                /// @src 0:7717:7720  \"i++\"\n                                                {\n                                                    /// @src 0:7772:7791  \"opsPerAggregator[i]\"\n                                                    let expr_offset_1 := calldata_array_index_access_struct_UserOpsPerAggregator_calldata_dyn_calldata(param_3, param_4, var_i_2)\n                                                    /// @src 0:7842:7853  \"opa.userOps\"\n                                                    let expr_offset_2, expr_length := access_calldata_tail_array_struct_PackedUserOperation_calldata_dyn_calldata(expr_offset_1, expr_offset_1)\n                                                    /// @src 0:7892:7906  \"opa.aggregator\"\n                                                    let _75 := 32\n                                                    /// @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                                    let _76 := and(/** @src 0:7892:7906  \"opa.aggregator\" */ read_from_calldatat_contract_IAggregator(add(expr_offset_1, _75)), /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ sub(shl(160, 1), 1))\n                                                    /// @src 0:8024:8025  \"1\"\n                                                    let _77 := 0x01\n                                                    /// @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                                    if /** @src 0:7993:8026  \"address(aggregator) != address(1)\" */ eq(_76, /** @src 0:8024:8025  \"1\" */ _77)\n                                                    /// @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                                    {\n                                                        let memPtr_18 := mload(64)\n                                                        mstore(memPtr_18, shl(229, 4594637))\n                                                        mstore(add(memPtr_18, 4), /** @src 0:7892:7906  \"opa.aggregator\" */ _75)\n                                                        /// @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                                        mstore(add(memPtr_18, 36), 23)\n                                                        mstore(add(memPtr_18, 68), \"AA96 invalid aggregator\")\n                                                        revert(memPtr_18, 100)\n                                                    }\n                                                    /// @src 0:8069:8374  \"if (address(aggregator) != address(0)) {...\"\n                                                    if /** @src 0:8073:8106  \"address(aggregator) != address(0)\" */ iszero(iszero(_76))\n                                                    /// @src 0:8069:8374  \"if (address(aggregator) != address(0)) {...\"\n                                                    {\n                                                        /// @src 0:8226:8239  \"opa.signature\"\n                                                        let expr_offset_3, expr_length_1 := access_calldata_tail_bytes_calldata(expr_offset_1, add(expr_offset_1, /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 64))\n                                                        /// @src 0:8191:8240  \"aggregator.validateSignatures(ops, opa.signature)\"\n                                                        if iszero(extcodesize(_76))\n                                                        {\n                                                            /// @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                                            revert(0, 0)\n                                                        }\n                                                        /// @src 0:8191:8240  \"aggregator.validateSignatures(ops, opa.signature)\"\n                                                        let _78 := /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ mload(64)\n                                                        /// @src 0:8191:8240  \"aggregator.validateSignatures(ops, opa.signature)\"\n                                                        mstore(_78, /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ shl(224, 0x2dd81133))\n                                                        let tail_1 := add(/** @src 0:8191:8240  \"aggregator.validateSignatures(ops, opa.signature)\" */ _78, /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 68)\n                                                        mstore(/** @src 0:8191:8240  \"aggregator.validateSignatures(ops, opa.signature)\" */ add(_78, /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 4), 64)\n                                                        let pos_1 := tail_1\n                                                        mstore(tail_1, expr_length)\n                                                        let _79 := 100\n                                                        pos_1 := add(/** @src 0:8191:8240  \"aggregator.validateSignatures(ops, opa.signature)\" */ _78, /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ _79)\n                                                        let tail_2 := add(add(/** @src 0:8191:8240  \"aggregator.validateSignatures(ops, opa.signature)\" */ _78, /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ shl(5, expr_length)), _79)\n                                                        let srcPtr := expr_offset_2\n                                                        let i := 0\n                                                        for { }\n                                                        lt(i, expr_length)\n                                                        {\n                                                            i := add(i, /** @src 0:8024:8025  \"1\" */ _77)\n                                                        }\n                                                        /// @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                                        {\n                                                            mstore(pos_1, add(sub(tail_2, /** @src 0:8191:8240  \"aggregator.validateSignatures(ops, opa.signature)\" */ _78), /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ not(99)))\n                                                            let rel_offset_of_tail := calldataload(srcPtr)\n                                                            if iszero(slt(rel_offset_of_tail, add(sub(calldatasize(), expr_offset_2), not(286)))) { revert(0, 0) }\n                                                            tail_2 := abi_encode_struct_PackedUserOperation_calldata(add(rel_offset_of_tail, expr_offset_2), tail_2)\n                                                            srcPtr := add(srcPtr, /** @src 0:7892:7906  \"opa.aggregator\" */ _75)\n                                                            /// @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                                            pos_1 := add(pos_1, /** @src 0:7892:7906  \"opa.aggregator\" */ _75)\n                                                        }\n                                                        /// @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                                        mstore(add(/** @src 0:8191:8240  \"aggregator.validateSignatures(ops, opa.signature)\" */ _78, /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 36), add(sub(tail_2, /** @src 0:8191:8240  \"aggregator.validateSignatures(ops, opa.signature)\" */ _78), /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ not(3)))\n                                                        /// @src 0:8191:8240  \"aggregator.validateSignatures(ops, opa.signature)\"\n                                                        let trySuccessCondition_1 := staticcall(gas(), _76, _78, sub(/** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ abi_encode_bytes_calldata(expr_offset_3, expr_length_1, tail_2), /** @src 0:8191:8240  \"aggregator.validateSignatures(ops, opa.signature)\" */ _78), _78, /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 0)\n                                                        /// @src 0:8191:8240  \"aggregator.validateSignatures(ops, opa.signature)\"\n                                                        if trySuccessCondition_1\n                                                        {\n                                                            finalize_allocation_26283(_78)\n                                                        }\n                                                        /// @src 0:8187:8360  \"try aggregator.validateSignatures(ops, opa.signature) {}...\"\n                                                        switch iszero(trySuccessCondition_1)\n                                                        case 0 { }\n                                                        default {\n                                                            /// @src 0:8295:8341  \"SignatureValidationFailed(address(aggregator))\"\n                                                            let _80 := /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ mload(64)\n                                                            /// @src 0:8295:8341  \"SignatureValidationFailed(address(aggregator))\"\n                                                            mstore(_80, shl(228, 0x086a9f75))\n                                                            /// @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                                            mstore(/** @src 0:8295:8341  \"SignatureValidationFailed(address(aggregator))\" */ add(_80, /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 4), _76)\n                                                            /// @src 0:8295:8341  \"SignatureValidationFailed(address(aggregator))\"\n                                                            revert(_80, /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 36)\n                                                        }\n                                                    }\n                                                    /// @src 0:8388:8410  \"totalOps += ops.length\"\n                                                    var_totalOps := checked_add_uint256(var_totalOps, /** @src 0:8400:8410  \"ops.length\" */ expr_length)\n                                                }\n                                                /// @src 0:8461:8487  \"new UserOpInfo[](totalOps)\"\n                                                let expr_mpos_1 := allocate_and_zero_memory_array_array_struct_UserOpInfo_dyn(var_totalOps)\n                                                /// @src 0:8498:8517  \"uint256 opIndex = 0\"\n                                                let var_opIndex := /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 0\n                                                /// @src 0:8532:8545  \"uint256 a = 0\"\n                                                let var_a := /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 0\n                                                /// @src 0:8527:9240  \"for (uint256 a = 0; a < opasLen; a++) {...\"\n                                                for { }\n                                                /** @src 0:8547:8558  \"a < opasLen\" */ lt(var_a, param_4)\n                                                /// @src 0:8532:8545  \"uint256 a = 0\"\n                                                {\n                                                    /// @src 0:8560:8563  \"a++\"\n                                                    var_a := /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ add(/** @src 0:8560:8563  \"a++\" */ var_a, /** @src 0:8024:8025  \"1\" */ 0x01)\n                                                }\n                                                /// @src 0:8560:8563  \"a++\"\n                                                {\n                                                    /// @src 0:8615:8634  \"opsPerAggregator[a]\"\n                                                    let expr_offset_4 := calldata_array_index_access_struct_UserOpsPerAggregator_calldata_dyn_calldata(param_3, param_4, var_a)\n                                                    /// @src 0:8685:8696  \"opa.userOps\"\n                                                    let expr_offset_5, expr_length_2 := access_calldata_tail_array_struct_PackedUserOperation_calldata_dyn_calldata(expr_offset_4, expr_offset_4)\n                                                    /// @src 0:8735:8749  \"opa.aggregator\"\n                                                    let expr_address := read_from_calldatat_contract_IAggregator(add(expr_offset_4, /** @src 0:7892:7906  \"opa.aggregator\" */ 32))\n                                                    /// @src 0:8810:8823  \"uint256 i = 0\"\n                                                    let var_i_3 := /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 0\n                                                    let _81 := sub(shl(160, 1), 1)\n                                                    let _82 := and(/** @src 0:9151:9170  \"address(aggregator)\" */ expr_address, /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ _81)\n                                                    /// @src 0:8805:9230  \"for (uint256 i = 0; i < opslen; i++) {...\"\n                                                    for { }\n                                                    /** @src 0:8825:8835  \"i < opslen\" */ lt(var_i_3, expr_length_2)\n                                                    /// @src 0:8810:8823  \"uint256 i = 0\"\n                                                    {\n                                                        /// @src 0:8837:8840  \"i++\"\n                                                        var_i_3 := /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ add(/** @src 0:8837:8840  \"i++\" */ var_i_3, /** @src 0:8024:8025  \"1\" */ 0x01)\n                                                    }\n                                                    /// @src 0:8837:8840  \"i++\"\n                                                    {\n                                                        /// @src 0:8981:9025  \"_validatePrepayment(opIndex, ops[i], opInfo)\"\n                                                        let expr_component_9, expr_component_10 := fun_validatePrepayment(var_opIndex, /** @src 0:9010:9016  \"ops[i]\" */ calldata_array_index_access_struct_PackedUserOperation_calldata_dyn_calldata(expr_offset_5, expr_length_2, var_i_3), /** @src 0:8887:8903  \"opInfos[opIndex]\" */ mload(memory_array_index_access_struct_UserOpInfo_dyn(expr_mpos_1, var_opIndex)))\n                                                        /// @src 0:20568:20602  \"_getValidationData(validationData)\"\n                                                        let expr_component_11, expr_component_12 := fun_getValidationData(expr_component_9)\n                                                        /// @src 0:20612:20723  \"if (expectedAggregator != aggregator) {...\"\n                                                        if /** @src 0:20616:20648  \"expectedAggregator != aggregator\" */ iszero(eq(/** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ _82, and(/** @src 0:20616:20648  \"expectedAggregator != aggregator\" */ expr_component_11, /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ _81)))\n                                                        /// @src 0:20612:20723  \"if (expectedAggregator != aggregator) {...\"\n                                                        {\n                                                            /// @src 0:20671:20712  \"FailedOp(opIndex, \\\"AA24 signature error\\\")\"\n                                                            let _83 := /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ mload(64)\n                                                            /// @src 0:20671:20712  \"FailedOp(opIndex, \\\"AA24 signature error\\\")\"\n                                                            mstore(_83, shl(225, 0x1101335b))\n                                                            /// @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                                            mstore(/** @src 0:20671:20712  \"FailedOp(opIndex, \\\"AA24 signature error\\\")\" */ add(_83, /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 4), var_i_3)\n                                                            mstore(add(/** @src 0:20671:20712  \"FailedOp(opIndex, \\\"AA24 signature error\\\")\" */ _83, /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 36), 64)\n                                                            mstore(add(/** @src 0:20671:20712  \"FailedOp(opIndex, \\\"AA24 signature error\\\")\" */ _83, /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 68), 20)\n                                                            mstore(add(/** @src 0:20671:20712  \"FailedOp(opIndex, \\\"AA24 signature error\\\")\" */ _83, /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 100), \"AA24 signature error\")\n                                                            /// @src 0:20671:20712  \"FailedOp(opIndex, \\\"AA24 signature error\\\")\"\n                                                            revert(_83, /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 132)\n                                                        }\n                                                        /// @src 0:20732:20828  \"if (outOfTimeRange) {...\"\n                                                        if expr_component_12\n                                                        {\n                                                            /// @src 0:20773:20817  \"FailedOp(opIndex, \\\"AA22 expired or not due\\\")\"\n                                                            let _84 := /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ mload(64)\n                                                            /// @src 0:20773:20817  \"FailedOp(opIndex, \\\"AA22 expired or not due\\\")\"\n                                                            mstore(_84, /** @src 0:20671:20712  \"FailedOp(opIndex, \\\"AA24 signature error\\\")\" */ shl(225, 0x1101335b))\n                                                            /// @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                                            mstore(/** @src 0:20773:20817  \"FailedOp(opIndex, \\\"AA22 expired or not due\\\")\" */ add(_84, /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 4), var_i_3)\n                                                            mstore(add(/** @src 0:20773:20817  \"FailedOp(opIndex, \\\"AA22 expired or not due\\\")\" */ _84, /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 36), 64)\n                                                            mstore(add(/** @src 0:20773:20817  \"FailedOp(opIndex, \\\"AA22 expired or not due\\\")\" */ _84, /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 68), 23)\n                                                            mstore(add(/** @src 0:20773:20817  \"FailedOp(opIndex, \\\"AA22 expired or not due\\\")\" */ _84, /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 100), \"AA22 expired or not due\")\n                                                            /// @src 0:20773:20817  \"FailedOp(opIndex, \\\"AA22 expired or not due\\\")\"\n                                                            revert(_84, /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 132)\n                                                        }\n                                                        /// @src 0:21130:21173  \"_getValidationData(paymasterValidationData)\"\n                                                        let expr_component_13, expr_component_14 := fun_getValidationData(expr_component_10)\n                                                        /// @src 0:21183:21288  \"if (pmAggregator != address(0)) {...\"\n                                                        if /** @src 0:21187:21213  \"pmAggregator != address(0)\" */ iszero(iszero(/** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ and(/** @src 0:21187:21213  \"pmAggregator != address(0)\" */ expr_component_13, /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ _81)))\n                                                        /// @src 0:21183:21288  \"if (pmAggregator != address(0)) {...\"\n                                                        {\n                                                            /// @src 0:21236:21277  \"FailedOp(opIndex, \\\"AA34 signature error\\\")\"\n                                                            let _85 := /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ mload(64)\n                                                            /// @src 0:21236:21277  \"FailedOp(opIndex, \\\"AA34 signature error\\\")\"\n                                                            mstore(_85, /** @src 0:20671:20712  \"FailedOp(opIndex, \\\"AA24 signature error\\\")\" */ shl(225, 0x1101335b))\n                                                            /// @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                                            mstore(/** @src 0:21236:21277  \"FailedOp(opIndex, \\\"AA34 signature error\\\")\" */ add(_85, /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 4), var_i_3)\n                                                            mstore(add(/** @src 0:21236:21277  \"FailedOp(opIndex, \\\"AA34 signature error\\\")\" */ _85, /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 36), 64)\n                                                            mstore(add(/** @src 0:21236:21277  \"FailedOp(opIndex, \\\"AA34 signature error\\\")\" */ _85, /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 68), 20)\n                                                            mstore(add(/** @src 0:21236:21277  \"FailedOp(opIndex, \\\"AA34 signature error\\\")\" */ _85, /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 100), \"AA34 signature error\")\n                                                            /// @src 0:21236:21277  \"FailedOp(opIndex, \\\"AA34 signature error\\\")\"\n                                                            revert(_85, /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 132)\n                                                        }\n                                                        /// @src 0:21297:21403  \"if (outOfTimeRange) {...\"\n                                                        if expr_component_14\n                                                        {\n                                                            /// @src 0:21338:21392  \"FailedOp(opIndex, \\\"AA32 paymaster expired or not due\\\")\"\n                                                            let _86 := /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ mload(64)\n                                                            /// @src 0:21338:21392  \"FailedOp(opIndex, \\\"AA32 paymaster expired or not due\\\")\"\n                                                            mstore(_86, /** @src 0:20671:20712  \"FailedOp(opIndex, \\\"AA24 signature error\\\")\" */ shl(225, 0x1101335b))\n                                                            /// @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                                            mstore(/** @src 0:21338:21392  \"FailedOp(opIndex, \\\"AA32 paymaster expired or not due\\\")\" */ add(_86, /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 4), var_i_3)\n                                                            mstore(add(/** @src 0:21338:21392  \"FailedOp(opIndex, \\\"AA32 paymaster expired or not due\\\")\" */ _86, /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 36), 64)\n                                                            mstore(add(/** @src 0:21338:21392  \"FailedOp(opIndex, \\\"AA32 paymaster expired or not due\\\")\" */ _86, /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 68), 33)\n                                                            mstore(add(/** @src 0:21338:21392  \"FailedOp(opIndex, \\\"AA32 paymaster expired or not due\\\")\" */ _86, /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 100), \"AA32 paymaster expired or not du\")\n                                                            mstore(add(/** @src 0:21338:21392  \"FailedOp(opIndex, \\\"AA32 paymaster expired or not due\\\")\" */ _86, /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 132), \"e\")\n                                                            /// @src 0:21338:21392  \"FailedOp(opIndex, \\\"AA32 paymaster expired or not due\\\")\"\n                                                            revert(_86, /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 164)\n                                                        }\n                                                        /// @src 0:9206:9215  \"opIndex++\"\n                                                        var_opIndex := increment_uint256(var_opIndex)\n                                                    }\n                                                }\n                                                /// @src 0:9255:9272  \"BeforeExecution()\"\n                                                log1(/** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 0, 0, /** @src 0:9255:9272  \"BeforeExecution()\" */ 0xbb47ee3e183a558b1a2ff0874b079f3fc5478b7454eacf2bfc5af2ff5878f972)\n                                                /// @src 0:9314:9325  \"opIndex = 0\"\n                                                var_opIndex := /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 0\n                                                /// @src 0:9283:9304  \"uint256 collected = 0\"\n                                                let var_collected_1 := /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 0\n                                                /// @src 0:9340:9353  \"uint256 a = 0\"\n                                                let var_a_1 := /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 0\n                                                /// @src 0:9335:9799  \"for (uint256 a = 0; a < opasLen; a++) {...\"\n                                                for { }\n                                                /** @src 0:9355:9366  \"a < opasLen\" */ lt(var_a_1, param_4)\n                                                /// @src 0:9340:9353  \"uint256 a = 0\"\n                                                {\n                                                    /// @src 0:9368:9371  \"a++\"\n                                                    var_a_1 := /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ add(/** @src 0:9368:9371  \"a++\" */ var_a_1, /** @src 0:8024:8025  \"1\" */ 0x01)\n                                                }\n                                                /// @src 0:9368:9371  \"a++\"\n                                                {\n                                                    /// @src 0:9423:9442  \"opsPerAggregator[a]\"\n                                                    let expr_offset_6 := calldata_array_index_access_struct_UserOpsPerAggregator_calldata_dyn_calldata(param_3, param_4, var_a_1)\n                                                    /// @src 0:9461:9512  \"SignatureAggregatorChanged(address(opa.aggregator))\"\n                                                    log2(/** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 0, 0, /** @src 0:9461:9512  \"SignatureAggregatorChanged(address(opa.aggregator))\" */ 0x575ff3acadd5ab348fe1855e217e0f3678f8d767d7494c9f9fefbee2e17cca4d, /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ and(/** @src 0:9496:9510  \"opa.aggregator\" */ read_from_calldatat_contract_IAggregator(add(expr_offset_6, /** @src 0:7892:7906  \"opa.aggregator\" */ 32)), /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ sub(shl(160, 1), 1)))\n                                                    /// @src 0:9563:9574  \"opa.userOps\"\n                                                    let expr_offset_7, expr_length_3 := access_calldata_tail_array_struct_PackedUserOperation_calldata_dyn_calldata(expr_offset_6, expr_offset_6)\n                                                    /// @src 0:9635:9648  \"uint256 i = 0\"\n                                                    let var_i_4 := /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 0\n                                                    /// @src 0:9630:9789  \"for (uint256 i = 0; i < opslen; i++) {...\"\n                                                    for { }\n                                                    /** @src 0:9650:9660  \"i < opslen\" */ lt(var_i_4, expr_length_3)\n                                                    /// @src 0:9635:9648  \"uint256 i = 0\"\n                                                    {\n                                                        /// @src 0:9662:9665  \"i++\"\n                                                        var_i_4 := /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ add(/** @src 0:9662:9665  \"i++\" */ var_i_4, /** @src 0:8024:8025  \"1\" */ 0x01)\n                                                    }\n                                                    /// @src 0:9662:9665  \"i++\"\n                                                    {\n                                                        /// @src 0:9722:9728  \"ops[i]\"\n                                                        let expr_offset_8 := calldata_array_index_access_struct_PackedUserOperation_calldata_dyn_calldata(expr_offset_7, expr_length_3, var_i_4)\n                                                        /// @src 0:9685:9747  \"collected += _executeUserOp(opIndex, ops[i], opInfos[opIndex])\"\n                                                        var_collected_1 := checked_add_uint256(var_collected_1, /** @src 0:9698:9747  \"_executeUserOp(opIndex, ops[i], opInfos[opIndex])\" */ fun_executeUserOp(var_opIndex, expr_offset_8, /** @src 0:9730:9746  \"opInfos[opIndex]\" */ mload(memory_array_index_access_struct_UserOpInfo_dyn(expr_mpos_1, var_opIndex))))\n                                                        /// @src 0:9765:9774  \"opIndex++\"\n                                                        var_opIndex := increment_uint256(var_opIndex)\n                                                    }\n                                                }\n                                                /// @src 0:9813:9851  \"SignatureAggregatorChanged(address(0))\"\n                                                log2(/** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 0, 0, /** @src 0:9461:9512  \"SignatureAggregatorChanged(address(opa.aggregator))\" */ 0x575ff3acadd5ab348fe1855e217e0f3678f8d767d7494c9f9fefbee2e17cca4d, /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 0)\n                                                /// @src 0:9887:9896  \"collected\"\n                                                fun_compensate(param_5, var_collected_1)\n                                                /// @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                                sstore(/** @src 70:2924:2945  \"_status = NOT_ENTERED\" */ 0x02, /** @src 0:8024:8025  \"1\" */ 0x01)\n                                                /// @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                                return(0, 0)\n                                            }\n                                            case 0xfc7e286d {\n                                                if callvalue() { revert(0, 0) }\n                                                if slt(add(calldatasize(), not(3)), 32) { revert(0, 0) }\n                                                mstore(0, and(abi_decode_address(), sub(shl(160, 1), 1)))\n                                                mstore(32, 0)\n                                                let dataSlot_5 := keccak256(0, 64)\n                                                let _87 := sload(/** @src 4:507:554  \"mapping(address => DepositInfo) public deposits\" */ dataSlot_5)\n                                                /// @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                                let _88 := sload(/** @src 4:507:554  \"mapping(address => DepositInfo) public deposits\" */ add(dataSlot_5, 1))\n                                                /// @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                                let memPos_7 := mload(64)\n                                                mstore(memPos_7, _87)\n                                                mstore(add(memPos_7, 32), iszero(iszero(and(_88, 0xff))))\n                                                mstore(add(memPos_7, 64), and(shr(8, _88), 0xffffffffffffffffffffffffffff))\n                                                mstore(add(memPos_7, 96), and(shr(120, _88), 0xffffffff))\n                                                mstore(add(memPos_7, 128), and(shr(152, _88), 0xffffffffffff))\n                                                return(memPos_7, 160)\n                                            }\n                                        }\n                                        if iszero(calldatasize())\n                                        {\n                                            /// @src 4:1326:1336  \"msg.sender\"\n                                            fun_depositTo(caller())\n                                            /// @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                            stop()\n                                        }\n                                        revert(0, 0)\n                                    }\n                                    function finalize_allocation_26259(memPtr)\n                                    {\n                                        let newFreePtr := add(memPtr, 0xa0)\n                                        if or(gt(newFreePtr, 0xffffffffffffffff), lt(newFreePtr, memPtr))\n                                        {\n                                            mstore(0, shl(224, 0x4e487b71))\n                                            mstore(4, 0x41)\n                                            revert(0, 0x24)\n                                        }\n                                        mstore(64, newFreePtr)\n                                    }\n                                    function finalize_allocation_26260(memPtr)\n                                    {\n                                        let newFreePtr := add(memPtr, 0x0140)\n                                        if or(gt(newFreePtr, 0xffffffffffffffff), lt(newFreePtr, memPtr))\n                                        {\n                                            mstore(0, shl(224, 0x4e487b71))\n                                            mstore(4, 0x41)\n                                            revert(0, 0x24)\n                                        }\n                                        mstore(64, newFreePtr)\n                                    }\n                                    function finalize_allocation_26283(memPtr)\n                                    {\n                                        if gt(memPtr, 0xffffffffffffffff)\n                                        {\n                                            mstore(0, shl(224, 0x4e487b71))\n                                            mstore(4, 0x41)\n                                            revert(0, 0x24)\n                                        }\n                                        mstore(64, memPtr)\n                                    }\n                                    function finalize_allocation_26350(memPtr)\n                                    {\n                                        let newFreePtr := add(memPtr, 96)\n                                        if or(gt(newFreePtr, 0xffffffffffffffff), lt(newFreePtr, memPtr))\n                                        {\n                                            mstore(0, shl(224, 0x4e487b71))\n                                            mstore(4, 0x41)\n                                            revert(0, 0x24)\n                                        }\n                                        mstore(64, newFreePtr)\n                                    }\n                                    function finalize_allocation(memPtr, size)\n                                    {\n                                        let newFreePtr := add(memPtr, and(add(size, 31), not(31)))\n                                        if or(gt(newFreePtr, 0xffffffffffffffff), lt(newFreePtr, memPtr))\n                                        {\n                                            mstore(0, shl(224, 0x4e487b71))\n                                            mstore(4, 0x41)\n                                            revert(0, 0x24)\n                                        }\n                                        mstore(64, newFreePtr)\n                                    }\n                                    function array_allocation_size_bytes(length) -> size\n                                    {\n                                        if gt(length, 0xffffffffffffffff)\n                                        {\n                                            mstore(0, shl(224, 0x4e487b71))\n                                            mstore(4, 0x41)\n                                            revert(0, 0x24)\n                                        }\n                                        size := add(and(add(length, 31), not(31)), 0x20)\n                                    }\n                                    function abi_decode_available_length_bytes(src, length, end) -> array\n                                    {\n                                        let _1 := array_allocation_size_bytes(length)\n                                        let memPtr := mload(64)\n                                        finalize_allocation(memPtr, _1)\n                                        array := memPtr\n                                        mstore(memPtr, length)\n                                        if gt(add(src, length), end)\n                                        {\n                                            revert(/** @src -1:-1:-1 */ 0, 0)\n                                        }\n                                        /// @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                        calldatacopy(add(memPtr, 0x20), src, length)\n                                        mstore(add(add(memPtr, length), 0x20), /** @src -1:-1:-1 */ 0)\n                                    }\n                                    /// @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                    function abi_decode_address() -> value\n                                    {\n                                        value := calldataload(4)\n                                        if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(0, 0) }\n                                    }\n                                    function abi_decode_bytes_calldata(offset, end) -> arrayPos, length\n                                    {\n                                        if iszero(slt(add(offset, 0x1f), end)) { revert(0, 0) }\n                                        length := calldataload(offset)\n                                        if gt(length, 0xffffffffffffffff) { revert(0, 0) }\n                                        arrayPos := add(offset, 0x20)\n                                        if gt(add(add(offset, length), 0x20), end) { revert(0, 0) }\n                                    }\n                                    function abi_decode_uint192() -> value\n                                    {\n                                        value := calldataload(36)\n                                        if iszero(eq(value, and(value, sub(shl(192, 1), 1)))) { revert(0, 0) }\n                                    }\n                                    function abi_decode_array_struct_PackedUserOperation_calldata_dyn_calldatat_address_payable(dataEnd) -> value0, value1, value2\n                                    {\n                                        if slt(add(dataEnd, not(3)), 64) { revert(0, 0) }\n                                        let offset := calldataload(4)\n                                        let _1 := 0xffffffffffffffff\n                                        if gt(offset, _1) { revert(0, 0) }\n                                        if iszero(slt(add(offset, 35), dataEnd))\n                                        {\n                                            revert(/** @src -1:-1:-1 */ 0, 0)\n                                        }\n                                        /// @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                        let length := calldataload(add(4, offset))\n                                        if gt(length, _1)\n                                        {\n                                            revert(/** @src -1:-1:-1 */ 0, 0)\n                                        }\n                                        /// @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                        if gt(add(add(offset, shl(5, length)), 36), dataEnd)\n                                        {\n                                            revert(/** @src -1:-1:-1 */ 0, 0)\n                                        }\n                                        /// @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                        value0 := add(offset, 36)\n                                        value1 := length\n                                        let value := calldataload(36)\n                                        if iszero(eq(value, and(value, sub(shl(160, 1), 1))))\n                                        {\n                                            revert(/** @src -1:-1:-1 */ 0, 0)\n                                        }\n                                        /// @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                        value2 := value\n                                    }\n                                    /// @src 0:1542:1546  \"2048\"\n                                    function copy_memory_to_memory_with_cleanup(src, dst, length)\n                                    {\n                                        let i := 0\n                                        for { } lt(i, length) { i := add(i, 32) }\n                                        {\n                                            mstore(add(dst, i), mload(add(src, i)))\n                                        }\n                                        mstore(add(dst, length), 0)\n                                    }\n                                    function abi_encode_bytes(value, pos) -> end\n                                    {\n                                        let length := /** @src 0:1296:1301  \"10000\" */ mload(/** @src 0:1542:1546  \"2048\" */ value)\n                                        /// @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                        mstore(pos, length)\n                                        /// @src 0:1542:1546  \"2048\"\n                                        copy_memory_to_memory_with_cleanup(add(value, /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 0x20), add(pos, 0x20), /** @src 0:1542:1546  \"2048\" */ length)\n                                        end := add(add(/** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ pos, and(add(/** @src 0:1542:1546  \"2048\" */ length, /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 31), not(31))), 0x20)\n                                    }\n                                    function checked_add_uint256(x, y) -> sum\n                                    {\n                                        sum := add(x, y)\n                                        if gt(x, sum)\n                                        {\n                                            mstore(0, shl(224, 0x4e487b71))\n                                            mstore(4, 0x11)\n                                            revert(0, 0x24)\n                                        }\n                                    }\n                                    function update_storage_value_offsett_uint48_to_uint48(slot, value)\n                                    {\n                                        let _1 := sload(slot)\n                                        sstore(slot, or(and(_1, not(shl(152, 0xffffffffffff))), and(shl(152, value), shl(152, 0xffffffffffff))))\n                                    }\n                                    function increment_uint256(value) -> ret\n                                    {\n                                        if eq(value, not(0))\n                                        {\n                                            mstore(0, shl(224, 0x4e487b71))\n                                            mstore(4, 0x11)\n                                            revert(0, 0x24)\n                                        }\n                                        ret := add(value, 1)\n                                    }\n                                    function checked_sub_uint256(x, y) -> diff\n                                    {\n                                        diff := sub(x, y)\n                                        if gt(diff, x)\n                                        {\n                                            mstore(0, shl(224, 0x4e487b71))\n                                            mstore(4, 0x11)\n                                            revert(0, 0x24)\n                                        }\n                                    }\n                                    function abi_encode_address_payable_uint256(headStart, value0, value1) -> tail\n                                    {\n                                        tail := add(headStart, 64)\n                                        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n                                        mstore(add(headStart, 32), value1)\n                                    }\n                                    function extract_returndata() -> data\n                                    {\n                                        switch returndatasize()\n                                        case 0 { data := 96 }\n                                        default {\n                                            let _1 := returndatasize()\n                                            let _2 := array_allocation_size_bytes(_1)\n                                            let memPtr := mload(64)\n                                            finalize_allocation(memPtr, _2)\n                                            mstore(memPtr, _1)\n                                            data := memPtr\n                                            returndatacopy(add(memPtr, 0x20), /** @src -1:-1:-1 */ 0, /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ returndatasize())\n                                        }\n                                    }\n                                    /// @ast-id 968 @src 0:12516:12696  \"function getUserOpHash(PackedUserOperation calldata userOp) public view returns (bytes32) {...\"\n                                    function fun_getUserOpHash(var_userOp_947_offset) -> var\n                                    {\n                                        /// @src 5:1998:2013  \"userOp.initCode\"\n                                        let _1 := 64\n                                        let expr_offset, expr_length := access_calldata_tail_bytes_calldata(var_userOp_947_offset, add(var_userOp_947_offset, _1))\n                                        /// @src 1:2961:3154  \"assembly (\\\"memory-safe\\\") {...\"\n                                        let usr$mem := mload(/** @src 5:1998:2013  \"userOp.initCode\" */ _1)\n                                        /// @src 1:2961:3154  \"assembly (\\\"memory-safe\\\") {...\"\n                                        calldatacopy(usr$mem, expr_offset, expr_length)\n                                        let var_ret := keccak256(usr$mem, expr_length)\n                                        /// @src 5:2062:2077  \"userOp.callData\"\n                                        let expr_offset_1, expr_length_1 := access_calldata_tail_bytes_calldata(var_userOp_947_offset, add(var_userOp_947_offset, 96))\n                                        /// @src 1:2961:3154  \"assembly (\\\"memory-safe\\\") {...\"\n                                        let usr$mem_1 := mload(/** @src 5:1998:2013  \"userOp.initCode\" */ _1)\n                                        /// @src 1:2961:3154  \"assembly (\\\"memory-safe\\\") {...\"\n                                        calldatacopy(usr$mem_1, expr_offset_1, expr_length_1)\n                                        let var_ret_1 := keccak256(usr$mem_1, expr_length_1)\n                                        /// @src 5:2300:2323  \"userOp.paymasterAndData\"\n                                        let expr_offset_2, expr_length_2 := access_calldata_tail_bytes_calldata(var_userOp_947_offset, add(var_userOp_947_offset, 224))\n                                        /// @src 1:2961:3154  \"assembly (\\\"memory-safe\\\") {...\"\n                                        let usr$mem_2 := mload(/** @src 5:1998:2013  \"userOp.initCode\" */ _1)\n                                        /// @src 1:2961:3154  \"assembly (\\\"memory-safe\\\") {...\"\n                                        calldatacopy(usr$mem_2, expr_offset_2, expr_length_2)\n                                        let var_ret_2 := keccak256(usr$mem_2, expr_length_2)\n                                        /// @src 5:2342:2522  \"abi.encode(...\"\n                                        let expr_mpos := /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ mload(/** @src 5:1998:2013  \"userOp.initCode\" */ _1)\n                                        /// @src 5:2342:2522  \"abi.encode(...\"\n                                        let _2 := add(expr_mpos, /** @src 5:1938:1950  \"userOp.nonce\" */ 32)\n                                        /// @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                        mstore(_2, and(/** @src 5:823:884  \"assembly {...\" */ calldataload(/** @src 5:1895:1912  \"getSender(userOp)\" */ var_userOp_947_offset), /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ sub(shl(160, 1), 1)))\n                                        mstore(add(/** @src 5:2342:2522  \"abi.encode(...\" */ expr_mpos, /** @src 5:1998:2013  \"userOp.initCode\" */ _1), /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ calldataload(/** @src 5:1938:1950  \"userOp.nonce\" */ add(var_userOp_947_offset, 32)))\n                                        /// @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                        mstore(add(/** @src 5:2342:2522  \"abi.encode(...\" */ expr_mpos, /** @src 5:2062:2077  \"userOp.callData\" */ 96), /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ var_ret)\n                                        mstore(add(/** @src 5:2342:2522  \"abi.encode(...\" */ expr_mpos, /** @src 5:2115:2138  \"userOp.accountGasLimits\" */ 128), /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ var_ret_1)\n                                        mstore(add(/** @src 5:2342:2522  \"abi.encode(...\" */ expr_mpos, /** @src 5:2177:2202  \"userOp.preVerificationGas\" */ 160), /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ calldataload(/** @src 5:2115:2138  \"userOp.accountGasLimits\" */ add(var_userOp_947_offset, 128)))\n                                        /// @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                        mstore(add(/** @src 5:2342:2522  \"abi.encode(...\" */ expr_mpos, /** @src 5:2230:2244  \"userOp.gasFees\" */ 192), /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ calldataload(/** @src 5:2177:2202  \"userOp.preVerificationGas\" */ add(var_userOp_947_offset, 160)))\n                                        /// @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                        mstore(add(/** @src 5:2342:2522  \"abi.encode(...\" */ expr_mpos, /** @src 5:2300:2323  \"userOp.paymasterAndData\" */ 224), /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ calldataload(/** @src 5:2230:2244  \"userOp.gasFees\" */ add(var_userOp_947_offset, 192)))\n                                        /// @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                        let _3 := 256\n                                        mstore(add(/** @src 5:2342:2522  \"abi.encode(...\" */ expr_mpos, /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ _3), var_ret_2)\n                                        /// @src 5:2342:2522  \"abi.encode(...\"\n                                        mstore(expr_mpos, /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ _3)\n                                        let newFreePtr := add(expr_mpos, 288)\n                                        let _4 := 0xffffffffffffffff\n                                        if or(gt(newFreePtr, _4), lt(newFreePtr, expr_mpos))\n                                        {\n                                            mstore(0, shl(224, 0x4e487b71))\n                                            mstore(4, 0x41)\n                                            revert(0, 0x24)\n                                        }\n                                        mstore(/** @src 5:1998:2013  \"userOp.initCode\" */ _1, /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ newFreePtr)\n                                        /// @src 5:4955:4987  \"return keccak256(encode(userOp))\"\n                                        let var_1 := /** @src 5:4962:4987  \"keccak256(encode(userOp))\" */ keccak256(/** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ _2, /** @src 0:1296:1301  \"10000\" */ mload(/** @src 5:4962:4987  \"keccak256(encode(userOp))\" */ expr_mpos))\n                                        /// @src 0:12633:12688  \"abi.encode(userOp.hash(), address(this), block.chainid)\"\n                                        let _5 := add(/** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ expr_mpos, /** @src 0:12633:12688  \"abi.encode(userOp.hash(), address(this), block.chainid)\" */ 320)\n                                        /// @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                        mstore(_5, var_1)\n                                        mstore(add(expr_mpos, 352), /** @src 0:12667:12671  \"this\" */ address())\n                                        /// @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                        mstore(add(expr_mpos, 384), /** @src 0:12674:12687  \"block.chainid\" */ chainid())\n                                        /// @src 0:12633:12688  \"abi.encode(userOp.hash(), address(this), block.chainid)\"\n                                        mstore(newFreePtr, /** @src 5:2062:2077  \"userOp.callData\" */ 96)\n                                        /// @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                        let newFreePtr_1 := add(expr_mpos, 416)\n                                        if or(gt(newFreePtr_1, _4), lt(newFreePtr_1, newFreePtr))\n                                        {\n                                            mstore(0, shl(224, 0x4e487b71))\n                                            mstore(4, 0x41)\n                                            revert(0, 0x24)\n                                        }\n                                        mstore(/** @src 5:1998:2013  \"userOp.initCode\" */ _1, /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ newFreePtr_1)\n                                        /// @src 0:12616:12689  \"return keccak256(abi.encode(userOp.hash(), address(this), block.chainid))\"\n                                        var := /** @src 0:12623:12689  \"keccak256(abi.encode(userOp.hash(), address(this), block.chainid))\" */ keccak256(/** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ _5, /** @src 0:1296:1301  \"10000\" */ mload(/** @src 0:12623:12689  \"keccak256(abi.encode(userOp.hash(), address(this), block.chainid))\" */ newFreePtr))\n                                    }\n                                    /// @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                    function array_allocation_size_array_struct_UserOpInfo_dyn(length) -> size\n                                    {\n                                        if gt(length, 0xffffffffffffffff)\n                                        {\n                                            mstore(0, shl(224, 0x4e487b71))\n                                            mstore(4, 0x41)\n                                            revert(0, 0x24)\n                                        }\n                                        size := add(shl(5, length), 0x20)\n                                    }\n                                    function allocate_and_zero_memory_array_array_struct_UserOpInfo_dyn(length) -> memPtr\n                                    {\n                                        let _1 := array_allocation_size_array_struct_UserOpInfo_dyn(length)\n                                        let _2 := 64\n                                        let memPtr_1 := mload(64)\n                                        finalize_allocation(memPtr_1, _1)\n                                        mstore(memPtr_1, length)\n                                        memPtr := memPtr_1\n                                        let _3 := add(array_allocation_size_array_struct_UserOpInfo_dyn(length), not(31))\n                                        let i := /** @src -1:-1:-1 */ 0\n                                        /// @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                        for { } lt(i, _3) { i := add(i, 32) }\n                                        {\n                                            let memPtr_2 := mload(_2)\n                                            finalize_allocation_26259(memPtr_2)\n                                            let memPtr_3 := mload(_2)\n                                            finalize_allocation_26260(memPtr_3)\n                                            mstore(memPtr_3, /** @src -1:-1:-1 */ 0)\n                                            /// @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                            let _4 := 32\n                                            mstore(add(memPtr_3, _4), /** @src -1:-1:-1 */ 0)\n                                            /// @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                            mstore(add(memPtr_3, _2), /** @src -1:-1:-1 */ 0)\n                                            /// @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                            let _5 := 96\n                                            mstore(add(memPtr_3, _5), /** @src -1:-1:-1 */ 0)\n                                            /// @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                            let _6 := 128\n                                            mstore(add(memPtr_3, _6), /** @src -1:-1:-1 */ 0)\n                                            /// @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                            mstore(add(memPtr_3, 160), /** @src -1:-1:-1 */ 0)\n                                            /// @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                            mstore(add(memPtr_3, 192), /** @src -1:-1:-1 */ 0)\n                                            /// @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                            mstore(add(memPtr_3, 224), /** @src -1:-1:-1 */ 0)\n                                            /// @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                            mstore(add(memPtr_3, 256), /** @src -1:-1:-1 */ 0)\n                                            /// @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                            mstore(add(memPtr_3, 288), /** @src -1:-1:-1 */ 0)\n                                            /// @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                            mstore(memPtr_2, memPtr_3)\n                                            mstore(add(memPtr_2, _4), /** @src -1:-1:-1 */ 0)\n                                            /// @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                            mstore(add(memPtr_2, _2), /** @src -1:-1:-1 */ 0)\n                                            /// @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                            mstore(add(memPtr_2, _5), /** @src -1:-1:-1 */ 0)\n                                            /// @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                            mstore(add(memPtr_2, _6), /** @src -1:-1:-1 */ 0)\n                                            /// @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                            mstore(add(add(memPtr_1, i), _4), memPtr_2)\n                                        }\n                                    }\n                                    function memory_array_index_access_struct_UserOpInfo_dyn(baseRef, index) -> addr\n                                    {\n                                        if iszero(lt(index, /** @src 0:1296:1301  \"10000\" */ mload(/** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ baseRef)))\n                                        {\n                                            mstore(0, shl(224, 0x4e487b71))\n                                            mstore(4, 0x32)\n                                            revert(0, 0x24)\n                                        }\n                                        addr := add(add(baseRef, shl(5, index)), 32)\n                                    }\n                                    function calldata_array_index_access_struct_PackedUserOperation_calldata_dyn_calldata(base_ref, length, index) -> addr\n                                    {\n                                        if iszero(lt(index, length))\n                                        {\n                                            mstore(0, shl(224, 0x4e487b71))\n                                            mstore(4, 0x32)\n                                            revert(0, 0x24)\n                                        }\n                                        let rel_offset_of_tail := calldataload(add(base_ref, shl(5, index)))\n                                        if iszero(slt(rel_offset_of_tail, add(sub(calldatasize(), base_ref), not(286))))\n                                        {\n                                            revert(/** @src -1:-1:-1 */ 0, 0)\n                                        }\n                                        /// @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                        addr := add(base_ref, rel_offset_of_tail)\n                                    }\n                                    function abi_decode_address_fromMemory(headStart, dataEnd) -> value0\n                                    {\n                                        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n                                        let value := mload(headStart)\n                                        if iszero(eq(value, and(value, sub(shl(160, 1), 1))))\n                                        {\n                                            revert(/** @src -1:-1:-1 */ 0, 0)\n                                        }\n                                        /// @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                        value0 := value\n                                    }\n                                    function abi_encode_bytes_calldata(start, length, pos) -> end\n                                    {\n                                        mstore(pos, length)\n                                        calldatacopy(add(pos, 0x20), start, length)\n                                        mstore(add(add(pos, length), 0x20), /** @src -1:-1:-1 */ 0)\n                                        /// @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                        end := add(add(pos, and(add(length, 31), not(31))), 0x20)\n                                    }\n                                    /// @ast-id 2551 @src 4:1935:2114  \"function depositTo(address account) public virtual payable {...\"\n                                    function fun_depositTo(var_account)\n                                    {\n                                        /// @src 4:2025:2062  \"_incrementDeposit(account, msg.value)\"\n                                        let expr := fun_incrementDeposit(var_account, /** @src 4:2052:2061  \"msg.value\" */ callvalue())\n                                        /// @src 4:2077:2107  \"Deposited(account, newDeposit)\"\n                                        let _1 := /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ mload(64)\n                                        mstore(_1, expr)\n                                        /// @src 4:2077:2107  \"Deposited(account, newDeposit)\"\n                                        log2(_1, /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 32, /** @src 4:2077:2107  \"Deposited(account, newDeposit)\" */ 0x2da466a7b24304f47e87fa2e1e5a81b9831ce54fec19055ce277ca2f39ba42c4, /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ and(/** @src 4:2077:2107  \"Deposited(account, newDeposit)\" */ var_account, /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ sub(shl(160, 1), 1)))\n                                    }\n                                    function calldata_array_index_access_struct_UserOpsPerAggregator_calldata_dyn_calldata(base_ref, length, index) -> addr\n                                    {\n                                        if iszero(lt(index, length))\n                                        {\n                                            mstore(0, shl(224, 0x4e487b71))\n                                            mstore(4, 0x32)\n                                            revert(0, 0x24)\n                                        }\n                                        let rel_offset_of_tail := calldataload(add(base_ref, shl(5, index)))\n                                        if iszero(slt(rel_offset_of_tail, add(sub(calldatasize(), base_ref), not(94))))\n                                        {\n                                            revert(/** @src -1:-1:-1 */ 0, 0)\n                                        }\n                                        /// @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                        addr := add(base_ref, rel_offset_of_tail)\n                                    }\n                                    function access_calldata_tail_array_struct_PackedUserOperation_calldata_dyn_calldata(base_ref, ptr_to_tail) -> addr, length\n                                    {\n                                        let rel_offset_of_tail := calldataload(ptr_to_tail)\n                                        if iszero(slt(rel_offset_of_tail, add(sub(calldatasize(), base_ref), not(30)))) { revert(0, 0) }\n                                        let addr_1 := add(base_ref, rel_offset_of_tail)\n                                        length := calldataload(addr_1)\n                                        if gt(length, 0xffffffffffffffff) { revert(0, 0) }\n                                        addr := add(addr_1, 0x20)\n                                        if sgt(addr, sub(calldatasize(), shl(5, length))) { revert(0, 0) }\n                                    }\n                                    function read_from_calldatat_contract_IAggregator(ptr) -> returnValue\n                                    {\n                                        let value := calldataload(ptr)\n                                        if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(0, 0) }\n                                        returnValue := value\n                                    }\n                                    function access_calldata_tail_bytes_calldata(base_ref, ptr_to_tail) -> addr, length\n                                    {\n                                        let rel_offset_of_tail := calldataload(ptr_to_tail)\n                                        if iszero(slt(rel_offset_of_tail, add(sub(calldatasize(), base_ref), not(30)))) { revert(0, 0) }\n                                        let addr_1 := add(base_ref, rel_offset_of_tail)\n                                        length := calldataload(addr_1)\n                                        if gt(length, 0xffffffffffffffff) { revert(0, 0) }\n                                        addr := add(addr_1, 0x20)\n                                        if sgt(addr, sub(calldatasize(), length)) { revert(0, 0) }\n                                    }\n                                    function calldata_access_bytes_calldata(base_ref, ptr) -> value, length\n                                    {\n                                        let rel_offset_of_tail := calldataload(ptr)\n                                        if iszero(slt(rel_offset_of_tail, add(sub(calldatasize(), base_ref), not(30)))) { revert(0, 0) }\n                                        let value_1 := add(rel_offset_of_tail, base_ref)\n                                        length := calldataload(value_1)\n                                        value := add(value_1, 0x20)\n                                        if gt(length, 0xffffffffffffffff) { revert(0, 0) }\n                                        if sgt(value, sub(calldatasize(), length)) { revert(0, 0) }\n                                    }\n                                    function abi_encode_struct_PackedUserOperation_calldata(value, pos) -> end\n                                    {\n                                        let _1 := 0x0120\n                                        let value_1 := calldataload(value)\n                                        let _2 := and(value_1, sub(shl(160, 1), 1))\n                                        if iszero(eq(value_1, _2))\n                                        {\n                                            revert(/** @src -1:-1:-1 */ 0, 0)\n                                        }\n                                        /// @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                        mstore(pos, _2)\n                                        mstore(add(pos, 0x20), calldataload(add(value, 0x20)))\n                                        let memberValue0, memberValue1 := calldata_access_bytes_calldata(value, add(value, 0x40))\n                                        mstore(add(pos, 0x40), _1)\n                                        let tail := abi_encode_bytes_calldata(memberValue0, memberValue1, add(pos, _1))\n                                        let memberValue0_1, memberValue1_1 := calldata_access_bytes_calldata(value, add(value, 0x60))\n                                        mstore(add(pos, 0x60), sub(tail, pos))\n                                        let tail_1 := abi_encode_bytes_calldata(memberValue0_1, memberValue1_1, tail)\n                                        mstore(add(pos, 0x80), calldataload(add(value, 0x80)))\n                                        mstore(add(pos, 0xa0), calldataload(add(value, 0xa0)))\n                                        mstore(add(pos, 0xc0), calldataload(add(value, 0xc0)))\n                                        let memberValue0_2, memberValue1_2 := calldata_access_bytes_calldata(value, add(value, 0xe0))\n                                        mstore(add(pos, 0xe0), sub(tail_1, pos))\n                                        let tail_2 := abi_encode_bytes_calldata(memberValue0_2, memberValue1_2, tail_1)\n                                        let _3 := 0x0100\n                                        let memberValue0_3, memberValue1_3 := calldata_access_bytes_calldata(value, add(value, _3))\n                                        mstore(add(pos, _3), sub(tail_2, pos))\n                                        end := abi_encode_bytes_calldata(memberValue0_3, memberValue1_3, tail_2)\n                                    }\n                                    /// @ast-id 48469 @src 70:2431:2738  \"function _nonReentrantBefore() private {...\"\n                                    function fun_nonReentrantBefore()\n                                    {\n                                        /// @src 70:2554:2640  \"if (_status == ENTERED) {...\"\n                                        if /** @src 70:2558:2576  \"_status == ENTERED\" */ eq(/** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ sload(/** @src 70:2558:2565  \"_status\" */ 0x02), 0x02)\n                                        /// @src 70:2554:2640  \"if (_status == ENTERED) {...\"\n                                        {\n                                            /// @src 70:2599:2629  \"ReentrancyGuardReentrantCall()\"\n                                            let _1 := /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ mload(64)\n                                            /// @src 70:2599:2629  \"ReentrancyGuardReentrantCall()\"\n                                            mstore(_1, shl(224, 0x3ee5aeb5))\n                                            revert(_1, 4)\n                                        }\n                                        /// @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                        sstore(/** @src 70:2558:2565  \"_status\" */ 0x02, 0x02)\n                                    }\n                                    /// @ast-id 1799 @src 0:22607:24550  \"function _validatePrepayment(uint256 opIndex, PackedUserOperation calldata userOp, UserOpInfo memory outOpInfo)...\"\n                                    function fun_validatePrepayment(var_opIndex, var_userOp_1632_offset, var_outOpInfo_mpos) -> var_validationData, var_paymasterValidationData\n                                    {\n                                        /// @src 0:22777:22808  \"uint256 paymasterValidationData\"\n                                        var_paymasterValidationData := /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 0\n                                        /// @src 0:22841:22850  \"gasleft()\"\n                                        let expr := gas()\n                                        /// @src 0:22890:22907  \"outOpInfo.mUserOp\"\n                                        let _431_mpos := mload(var_outOpInfo_mpos)\n                                        /// @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                        let value := calldataload(var_userOp_1632_offset)\n                                        let _1 := and(value, sub(shl(160, 1), 1))\n                                        if iszero(eq(value, _1)) { revert(0, 0) }\n                                        mstore(_431_mpos, _1)\n                                        mstore(/** @src 0:13045:13058  \"mUserOp.nonce\" */ add(_431_mpos, /** @src 0:13061:13073  \"userOp.nonce\" */ 32), /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ calldataload(/** @src 0:13061:13073  \"userOp.nonce\" */ add(var_userOp_1632_offset, 32)))\n                                        /// @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                        let _2 := calldataload(/** @src 0:13167:13190  \"userOp.accountGasLimits\" */ add(var_userOp_1632_offset, 128))\n                                        /// @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                        let _3 := 0xffffffffffffffffffffffffffffffff\n                                        mstore(/** @src 0:13114:13134  \"mUserOp.callGasLimit\" */ add(_431_mpos, 96), /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ and(/** @src 5:2694:2709  \"uint256(packed)\" */ _2, /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ _3))\n                                        mstore(/** @src 0:13084:13112  \"mUserOp.verificationGasLimit\" */ add(_431_mpos, 64), /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ shr(/** @src 0:13167:13190  \"userOp.accountGasLimits\" */ 128, /** @src 5:2668:2683  \"bytes16(packed)\" */ _2))\n                                        /// @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                        mstore(/** @src 0:13201:13227  \"mUserOp.preVerificationGas\" */ add(_431_mpos, 192), /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ calldataload(/** @src 0:13230:13255  \"userOp.preVerificationGas\" */ add(var_userOp_1632_offset, 160)))\n                                        /// @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                        let _4 := calldataload(/** @src 0:13349:13363  \"userOp.gasFees\" */ add(var_userOp_1632_offset, /** @src 0:13201:13227  \"mUserOp.preVerificationGas\" */ 192))\n                                        /// @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                        mstore(/** @src 0:13296:13316  \"mUserOp.maxFeePerGas\" */ add(_431_mpos, 256), /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ and(/** @src 5:2694:2709  \"uint256(packed)\" */ _4, /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ _3))\n                                        mstore(/** @src 0:13266:13294  \"mUserOp.maxPriorityFeePerGas\" */ add(_431_mpos, 288), /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ shr(/** @src 0:13167:13190  \"userOp.accountGasLimits\" */ 128, /** @src 5:2668:2683  \"bytes16(packed)\" */ _4))\n                                        /// @src 0:13408:13431  \"userOp.paymasterAndData\"\n                                        let expr_offset, expr_length := access_calldata_tail_bytes_calldata(var_userOp_1632_offset, add(var_userOp_1632_offset, 224))\n                                        /// @src 0:13441:13957  \"if (paymasterAndData.length > 0) {...\"\n                                        switch /** @src 0:13445:13472  \"paymasterAndData.length > 0\" */ iszero(iszero(expr_length))\n                                        case /** @src 0:13441:13957  \"if (paymasterAndData.length > 0) {...\" */ 0 {\n                                            /// @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                            mstore(/** @src 0:13812:13829  \"mUserOp.paymaster\" */ add(_431_mpos, /** @src 0:13408:13431  \"userOp.paymasterAndData\" */ 224), /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 0)\n                                            mstore(/** @src 0:13856:13893  \"mUserOp.paymasterVerificationGasLimit\" */ add(_431_mpos, /** @src 0:13167:13190  \"userOp.accountGasLimits\" */ 128), /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 0)\n                                            mstore(/** @src 0:13911:13942  \"mUserOp.paymasterPostOpGasLimit\" */ add(_431_mpos, /** @src 0:13230:13255  \"userOp.preVerificationGas\" */ 160), /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 0)\n                                        }\n                                        default /// @src 0:13441:13957  \"if (paymasterAndData.length > 0) {...\"\n                                        {\n                                            /// @src 5:490:492  \"52\"\n                                            if /** @src 0:13496:13561  \"paymasterAndData.length >= UserOperationLib.PAYMASTER_DATA_OFFSET\" */ lt(expr_length, /** @src 5:490:492  \"52\" */ 0x34)\n                                            {\n                                                let memPtr := /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ mload(/** @src 0:13084:13112  \"mUserOp.verificationGasLimit\" */ 64)\n                                                /// @src 5:490:492  \"52\"\n                                                mstore(memPtr, /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ shl(229, 4594637))\n                                                /// @src 5:490:492  \"52\"\n                                                mstore(add(memPtr, 4), /** @src 0:13061:13073  \"userOp.nonce\" */ 32)\n                                                /// @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                                mstore(/** @src 5:490:492  \"52\" */ add(memPtr, 36), 29)\n                                                mstore(/** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ add(/** @src 5:490:492  \"52\" */ memPtr, /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 68), /** @src 5:490:492  \"52\" */ \"AA93 invalid paymasterAndData\")\n                                                revert(memPtr, 100)\n                                            }\n                                            /// @src 5:372:374  \"20\"\n                                            if gt(0x14, expr_length)\n                                            {\n                                                /// @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                                revert(0, 0)\n                                            }\n                                            /// @src 5:372:374  \"20\"\n                                            if gt(/** @src 5:434:436  \"36\" */ 0x24, /** @src 5:372:374  \"20\" */ expr_length)\n                                            {\n                                                /// @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                                revert(0, 0)\n                                            }\n                                            /// @src 5:372:374  \"20\"\n                                            if gt(/** @src 5:490:492  \"52\" */ 0x34, /** @src 5:372:374  \"20\" */ expr_length)\n                                            {\n                                                /// @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                                revert(0, 0)\n                                            }\n                                            mstore(/** @src 0:13668:13699  \"mUserOp.paymasterPostOpGasLimit\" */ add(_431_mpos, /** @src 0:13230:13255  \"userOp.preVerificationGas\" */ 160), /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ shr(/** @src 0:13167:13190  \"userOp.accountGasLimits\" */ 128, /** @src 5:434:436  \"36\" */ calldataload(/** @src 5:372:374  \"20\" */ add(expr_offset, /** @src 5:434:436  \"36\" */ 0x24))))\n                                            /// @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                            mstore(/** @src 0:13629:13666  \"mUserOp.paymasterVerificationGasLimit\" */ add(_431_mpos, /** @src 0:13167:13190  \"userOp.accountGasLimits\" */ 128), /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ shr(/** @src 0:13167:13190  \"userOp.accountGasLimits\" */ 128, /** @src 5:434:436  \"36\" */ calldataload(/** @src 5:372:374  \"20\" */ add(expr_offset, 0x14))))\n                                            /// @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                            mstore(/** @src 0:13610:13627  \"mUserOp.paymaster\" */ add(_431_mpos, /** @src 0:13408:13431  \"userOp.paymasterAndData\" */ 224), /** @src 5:372:374  \"20\" */ shr(/** @src 0:13114:13134  \"mUserOp.callGasLimit\" */ 96, /** @src 5:372:374  \"20\" */ calldataload(/** @src 5:4451:4511  \"bytes20(paymasterAndData[: PAYMASTER_VALIDATION_GAS_OFFSET])\" */ expr_offset)))\n                                        }\n                                        /// @src 0:22986:23007  \"getUserOpHash(userOp)\"\n                                        let _5 := fun_getUserOpHash(var_userOp_1632_offset)\n                                        /// @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                        mstore(/** @src 0:22963:22983  \"outOpInfo.userOpHash\" */ add(var_outOpInfo_mpos, /** @src 0:13061:13073  \"userOp.nonce\" */ 32), /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ _5)\n                                        let _6 := mload(/** @src 0:13084:13112  \"mUserOp.verificationGasLimit\" */ add(_431_mpos, 64))\n                                        /// @src 0:23263:23312  \"mUserOp.preVerificationGas | verificationGasLimit\"\n                                        let expr_1 := or(/** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ mload(/** @src 0:13201:13227  \"mUserOp.preVerificationGas\" */ add(_431_mpos, 192)), /** @src 0:23263:23312  \"mUserOp.preVerificationGas | verificationGasLimit\" */ _6)\n                                        /// @src 0:23263:23335  \"mUserOp.preVerificationGas | verificationGasLimit | mUserOp.callGasLimit\"\n                                        let expr_2 := or(expr_1, /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ mload(/** @src 0:13114:13134  \"mUserOp.callGasLimit\" */ add(_431_mpos, 96)))\n                                        /// @src 0:23263:23387  \"mUserOp.preVerificationGas | verificationGasLimit | mUserOp.callGasLimit...\"\n                                        let expr_3 := or(expr_2, /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ mload(/** @src 0:23350:23387  \"mUserOp.paymasterVerificationGasLimit\" */ add(_431_mpos, /** @src 0:13167:13190  \"userOp.accountGasLimits\" */ 128)))\n                                        /// @src 0:23263:23421  \"mUserOp.preVerificationGas | verificationGasLimit | mUserOp.callGasLimit...\"\n                                        let expr_4 := or(expr_3, /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ mload(/** @src 0:23390:23421  \"mUserOp.paymasterPostOpGasLimit\" */ add(_431_mpos, /** @src 0:13230:13255  \"userOp.preVerificationGas\" */ 160)))\n                                        /// @src 0:23263:23444  \"mUserOp.preVerificationGas | verificationGasLimit | mUserOp.callGasLimit...\"\n                                        let expr_5 := or(expr_4, /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ mload(/** @src 0:13296:13316  \"mUserOp.maxFeePerGas\" */ add(_431_mpos, 256)))\n                                        /// @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                        if /** @src 0:23505:23538  \"maxGasValues <= type(uint120).max\" */ gt(/** @src 0:23263:23487  \"mUserOp.preVerificationGas | verificationGasLimit | mUserOp.callGasLimit...\" */ or(expr_5, /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ mload(/** @src 0:13266:13294  \"mUserOp.maxPriorityFeePerGas\" */ add(_431_mpos, 288))), /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 0xffffffffffffffffffffffffffffff)\n                                        {\n                                            let memPtr_1 := mload(/** @src 0:13084:13112  \"mUserOp.verificationGasLimit\" */ 64)\n                                            /// @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                            mstore(memPtr_1, shl(229, 4594637))\n                                            mstore(add(memPtr_1, 4), /** @src 0:13061:13073  \"userOp.nonce\" */ 32)\n                                            /// @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                            mstore(add(memPtr_1, 36), 24)\n                                            mstore(add(memPtr_1, 68), \"AA94 gas values overflow\")\n                                            revert(memPtr_1, 100)\n                                        }\n                                        let _7 := mload(/** @src 0:13084:13112  \"mUserOp.verificationGasLimit\" */ add(_431_mpos, 64))\n                                        /// @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                        let sum := add(_7, mload(/** @src 0:13114:13134  \"mUserOp.callGasLimit\" */ add(_431_mpos, 96)))\n                                        /// @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                        let sum_1 := add(sum, mload(/** @src 0:23350:23387  \"mUserOp.paymasterVerificationGasLimit\" */ add(_431_mpos, /** @src 0:13167:13190  \"userOp.accountGasLimits\" */ 128)))\n                                        /// @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                        let sum_2 := add(sum_1, mload(/** @src 0:23390:23421  \"mUserOp.paymasterPostOpGasLimit\" */ add(_431_mpos, /** @src 0:13230:13255  \"userOp.preVerificationGas\" */ 160)))\n                                        /// @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                        let sum_3 := add(sum_2, mload(/** @src 0:13201:13227  \"mUserOp.preVerificationGas\" */ add(_431_mpos, 192)))\n                                        /// @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                        let product := mul(sum_3, mload(/** @src 0:13296:13316  \"mUserOp.maxFeePerGas\" */ add(_431_mpos, 256)))\n                                        /// @src 0:23659:23752  \"_validateAccountPrepayment(opIndex, userOp, outOpInfo, requiredPreFund, verificationGasLimit)\"\n                                        let var_validationData_1 := /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 0\n                                        /// @src 0:16744:16758  \"opInfo.mUserOp\"\n                                        let _mpos := mload(var_outOpInfo_mpos)\n                                        /// @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                        let cleaned := and(/** @src 0:1296:1301  \"10000\" */ mload(/** @src 0:16789:16803  \"mUserOp.sender\" */ _mpos), /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ sub(shl(160, 1), 1))\n                                        /// @src 0:16856:16867  \"op.initCode\"\n                                        let expr_offset_1, expr_length_1 := access_calldata_tail_bytes_calldata(var_userOp_1632_offset, add(var_userOp_1632_offset, /** @src 0:13084:13112  \"mUserOp.verificationGasLimit\" */ 64))\n                                        /// @src 0:14894:15782  \"if (initCode.length != 0) {...\"\n                                        if /** @src 0:14898:14918  \"initCode.length != 0\" */ iszero(iszero(expr_length_1))\n                                        /// @src 0:14894:15782  \"if (initCode.length != 0) {...\"\n                                        {\n                                            /// @src 0:14986:15107  \"if (sender.code.length != 0) {...\"\n                                            if /** @src 0:14990:15013  \"sender.code.length != 0\" */ iszero(iszero(/** @src 0:14990:15008  \"sender.code.length\" */ extcodesize(cleaned)))\n                                            /// @src 0:14986:15107  \"if (sender.code.length != 0) {...\"\n                                            {\n                                                /// @src 0:15040:15092  \"FailedOp(opIndex, \\\"AA10 sender already constructed\\\")\"\n                                                let _8 := /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ mload(/** @src 0:13084:13112  \"mUserOp.verificationGasLimit\" */ 64)\n                                                /// @src 0:15040:15092  \"FailedOp(opIndex, \\\"AA10 sender already constructed\\\")\"\n                                                mstore(_8, /** @src 0:20671:20712  \"FailedOp(opIndex, \\\"AA24 signature error\\\")\" */ shl(225, 0x1101335b))\n                                                /// @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                                mstore(/** @src 0:15040:15092  \"FailedOp(opIndex, \\\"AA10 sender already constructed\\\")\" */ add(_8, 4), /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ var_opIndex)\n                                                mstore(add(/** @src 0:15040:15092  \"FailedOp(opIndex, \\\"AA10 sender already constructed\\\")\" */ _8, /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 36), /** @src 0:13084:13112  \"mUserOp.verificationGasLimit\" */ 64)\n                                                /// @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                                mstore(add(/** @src 0:15040:15092  \"FailedOp(opIndex, \\\"AA10 sender already constructed\\\")\" */ _8, /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 68), 31)\n                                                mstore(add(/** @src 0:15040:15092  \"FailedOp(opIndex, \\\"AA10 sender already constructed\\\")\" */ _8, /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 100), \"AA10 sender already constructed\")\n                                                /// @src 0:15040:15092  \"FailedOp(opIndex, \\\"AA10 sender already constructed\\\")\"\n                                                revert(_8, /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 132)\n                                            }\n                                            let _9 := mload(/** @src 0:15172:15207  \"opInfo.mUserOp.verificationGasLimit\" */ add(/** @src 0:15172:15186  \"opInfo.mUserOp\" */ mload(var_outOpInfo_mpos), /** @src 0:13084:13112  \"mUserOp.verificationGasLimit\" */ 64))\n                                            /// @src 0:15138:15218  \"senderCreator().createSender{gas: opInfo.mUserOp.verificationGasLimit}(initCode)\"\n                                            let _10 := /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ mload(/** @src 0:13084:13112  \"mUserOp.verificationGasLimit\" */ 64)\n                                            /// @src 0:15138:15218  \"senderCreator().createSender{gas: opInfo.mUserOp.verificationGasLimit}(initCode)\"\n                                            mstore(_10, /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ shl(225, 0x2b870d1b))\n                                            mstore(/** @src 0:15138:15218  \"senderCreator().createSender{gas: opInfo.mUserOp.verificationGasLimit}(initCode)\" */ add(_10, 4), /** @src 0:13061:13073  \"userOp.nonce\" */ 32)\n                                            /// @src 0:15138:15218  \"senderCreator().createSender{gas: opInfo.mUserOp.verificationGasLimit}(initCode)\"\n                                            let _11 := call(_9, /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ and(/** @src 0:1099:1113  \"_senderCreator\" */ loadimmutable(\"35\"), /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ sub(shl(160, 1), 1)), 0, /** @src 0:15138:15218  \"senderCreator().createSender{gas: opInfo.mUserOp.verificationGasLimit}(initCode)\" */ _10, sub(/** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ abi_encode_bytes_calldata(expr_offset_1, expr_length_1, add(/** @src 0:15138:15218  \"senderCreator().createSender{gas: opInfo.mUserOp.verificationGasLimit}(initCode)\" */ _10, /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 36)), /** @src 0:15138:15218  \"senderCreator().createSender{gas: opInfo.mUserOp.verificationGasLimit}(initCode)\" */ _10), _10, /** @src 0:13061:13073  \"userOp.nonce\" */ 32)\n                                            /// @src 0:15138:15218  \"senderCreator().createSender{gas: opInfo.mUserOp.verificationGasLimit}(initCode)\"\n                                            if iszero(_11)\n                                            {\n                                                /// @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                                let pos := mload(/** @src 0:13084:13112  \"mUserOp.verificationGasLimit\" */ 64)\n                                                /// @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                                returndatacopy(pos, 0, returndatasize())\n                                                revert(pos, returndatasize())\n                                            }\n                                            /// @src 0:15138:15218  \"senderCreator().createSender{gas: opInfo.mUserOp.verificationGasLimit}(initCode)\"\n                                            let expr_6 := /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 0\n                                            /// @src 0:15138:15218  \"senderCreator().createSender{gas: opInfo.mUserOp.verificationGasLimit}(initCode)\"\n                                            if _11\n                                            {\n                                                let _12 := /** @src 0:13061:13073  \"userOp.nonce\" */ 32\n                                                /// @src 0:15138:15218  \"senderCreator().createSender{gas: opInfo.mUserOp.verificationGasLimit}(initCode)\"\n                                                if gt(/** @src 0:13061:13073  \"userOp.nonce\" */ 32, /** @src 0:15138:15218  \"senderCreator().createSender{gas: opInfo.mUserOp.verificationGasLimit}(initCode)\" */ returndatasize()) { _12 := returndatasize() }\n                                                finalize_allocation(_10, _12)\n                                                expr_6 := abi_decode_address_fromMemory(_10, add(_10, _12))\n                                            }\n                                            /// @src 0:15236:15257  \"sender1 == address(0)\"\n                                            let _13 := /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ and(/** @src 0:15236:15257  \"sender1 == address(0)\" */ expr_6, /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ sub(shl(160, 1), 1))\n                                            /// @src 0:15232:15347  \"if (sender1 == address(0)) {...\"\n                                            if /** @src 0:15236:15257  \"sender1 == address(0)\" */ iszero(_13)\n                                            /// @src 0:15232:15347  \"if (sender1 == address(0)) {...\"\n                                            {\n                                                /// @src 0:15284:15332  \"FailedOp(opIndex, \\\"AA13 initCode failed or OOG\\\")\"\n                                                let _14 := /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ mload(/** @src 0:13084:13112  \"mUserOp.verificationGasLimit\" */ 64)\n                                                /// @src 0:15284:15332  \"FailedOp(opIndex, \\\"AA13 initCode failed or OOG\\\")\"\n                                                mstore(_14, /** @src 0:20671:20712  \"FailedOp(opIndex, \\\"AA24 signature error\\\")\" */ shl(225, 0x1101335b))\n                                                /// @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                                mstore(/** @src 0:15284:15332  \"FailedOp(opIndex, \\\"AA13 initCode failed or OOG\\\")\" */ add(_14, /** @src 0:15138:15218  \"senderCreator().createSender{gas: opInfo.mUserOp.verificationGasLimit}(initCode)\" */ 4), /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ var_opIndex)\n                                                mstore(add(/** @src 0:15284:15332  \"FailedOp(opIndex, \\\"AA13 initCode failed or OOG\\\")\" */ _14, /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 36), /** @src 0:13084:13112  \"mUserOp.verificationGasLimit\" */ 64)\n                                                /// @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                                mstore(add(/** @src 0:15284:15332  \"FailedOp(opIndex, \\\"AA13 initCode failed or OOG\\\")\" */ _14, /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 68), 27)\n                                                mstore(add(/** @src 0:15284:15332  \"FailedOp(opIndex, \\\"AA13 initCode failed or OOG\\\")\" */ _14, /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 100), \"AA13 initCode failed or OOG\")\n                                                /// @src 0:15284:15332  \"FailedOp(opIndex, \\\"AA13 initCode failed or OOG\\\")\"\n                                                revert(_14, /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 132)\n                                            }\n                                            /// @src 0:15360:15476  \"if (sender1 != sender) {...\"\n                                            if /** @src 0:15364:15381  \"sender1 != sender\" */ iszero(eq(_13, /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ cleaned))\n                                            /// @src 0:15360:15476  \"if (sender1 != sender) {...\"\n                                            {\n                                                /// @src 0:15408:15461  \"FailedOp(opIndex, \\\"AA14 initCode must return sender\\\")\"\n                                                let _15 := /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ mload(/** @src 0:13084:13112  \"mUserOp.verificationGasLimit\" */ 64)\n                                                /// @src 0:15408:15461  \"FailedOp(opIndex, \\\"AA14 initCode must return sender\\\")\"\n                                                mstore(_15, /** @src 0:20671:20712  \"FailedOp(opIndex, \\\"AA24 signature error\\\")\" */ shl(225, 0x1101335b))\n                                                /// @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                                mstore(/** @src 0:15408:15461  \"FailedOp(opIndex, \\\"AA14 initCode must return sender\\\")\" */ add(_15, /** @src 0:15138:15218  \"senderCreator().createSender{gas: opInfo.mUserOp.verificationGasLimit}(initCode)\" */ 4), /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ var_opIndex)\n                                                mstore(add(/** @src 0:15408:15461  \"FailedOp(opIndex, \\\"AA14 initCode must return sender\\\")\" */ _15, /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 36), /** @src 0:13084:13112  \"mUserOp.verificationGasLimit\" */ 64)\n                                                /// @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                                mstore(add(/** @src 0:15408:15461  \"FailedOp(opIndex, \\\"AA14 initCode must return sender\\\")\" */ _15, /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 68), /** @src 0:13061:13073  \"userOp.nonce\" */ 32)\n                                                /// @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                                mstore(add(/** @src 0:15408:15461  \"FailedOp(opIndex, \\\"AA14 initCode must return sender\\\")\" */ _15, /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 100), \"AA14 initCode must return sender\")\n                                                /// @src 0:15408:15461  \"FailedOp(opIndex, \\\"AA14 initCode must return sender\\\")\"\n                                                revert(_15, /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 132)\n                                            }\n                                            /// @src 0:15489:15612  \"if (sender1.code.length == 0) {...\"\n                                            if /** @src 0:15493:15517  \"sender1.code.length == 0\" */ iszero(/** @src 0:15493:15512  \"sender1.code.length\" */ extcodesize(expr_6))\n                                            /// @src 0:15489:15612  \"if (sender1.code.length == 0) {...\"\n                                            {\n                                                /// @src 0:15544:15597  \"FailedOp(opIndex, \\\"AA15 initCode must create sender\\\")\"\n                                                let _16 := /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ mload(/** @src 0:13084:13112  \"mUserOp.verificationGasLimit\" */ 64)\n                                                /// @src 0:15544:15597  \"FailedOp(opIndex, \\\"AA15 initCode must create sender\\\")\"\n                                                mstore(_16, /** @src 0:20671:20712  \"FailedOp(opIndex, \\\"AA24 signature error\\\")\" */ shl(225, 0x1101335b))\n                                                /// @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                                mstore(/** @src 0:15544:15597  \"FailedOp(opIndex, \\\"AA15 initCode must create sender\\\")\" */ add(_16, /** @src 0:15138:15218  \"senderCreator().createSender{gas: opInfo.mUserOp.verificationGasLimit}(initCode)\" */ 4), /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ var_opIndex)\n                                                mstore(add(/** @src 0:15544:15597  \"FailedOp(opIndex, \\\"AA15 initCode must create sender\\\")\" */ _16, /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 36), /** @src 0:13084:13112  \"mUserOp.verificationGasLimit\" */ 64)\n                                                /// @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                                mstore(add(/** @src 0:15544:15597  \"FailedOp(opIndex, \\\"AA15 initCode must create sender\\\")\" */ _16, /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 68), /** @src 0:13061:13073  \"userOp.nonce\" */ 32)\n                                                /// @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                                mstore(add(/** @src 0:15544:15597  \"FailedOp(opIndex, \\\"AA15 initCode must create sender\\\")\" */ _16, /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 100), \"AA15 initCode must create sender\")\n                                                /// @src 0:15544:15597  \"FailedOp(opIndex, \\\"AA15 initCode must create sender\\\")\"\n                                                revert(_16, /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 132)\n                                            }\n                                            /// @src 5:372:374  \"20\"\n                                            if gt(/** @src 0:15670:15672  \"20\" */ 0x14, /** @src 5:372:374  \"20\" */ expr_length_1)\n                                            {\n                                                /// @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                                revert(0, 0)\n                                            }\n                                            /// @src 0:1542:1546  \"2048\"\n                                            let _17 := mload(/** @src 0:22963:22983  \"outOpInfo.userOpHash\" */ add(var_outOpInfo_mpos, /** @src 0:13061:13073  \"userOp.nonce\" */ 32))\n                                            /// @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                            let cleaned_1 := and(/** @src 0:1296:1301  \"10000\" */ mload(/** @src 0:15746:15770  \"opInfo.mUserOp.paymaster\" */ add(/** @src 0:15746:15760  \"opInfo.mUserOp\" */ mload(var_outOpInfo_mpos), /** @src 0:13408:13431  \"userOp.paymasterAndData\" */ 224)), /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ sub(shl(160, 1), 1))\n                                            /// @src 0:15694:15771  \"AccountDeployed(opInfo.userOpHash, sender, factory, opInfo.mUserOp.paymaster)\"\n                                            let _18 := /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ mload(/** @src 0:13084:13112  \"mUserOp.verificationGasLimit\" */ 64)\n                                            /// @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                            mstore(_18, /** @src 5:372:374  \"20\" */ shr(/** @src 0:13114:13134  \"mUserOp.callGasLimit\" */ 96, /** @src 5:372:374  \"20\" */ calldataload(/** @src 0:15651:15674  \"bytes20(initCode[0:20])\" */ expr_offset_1)))\n                                            /// @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                            mstore(add(_18, /** @src 0:13061:13073  \"userOp.nonce\" */ 32), /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ cleaned_1)\n                                            /// @src 0:15694:15771  \"AccountDeployed(opInfo.userOpHash, sender, factory, opInfo.mUserOp.paymaster)\"\n                                            log3(_18, /** @src 0:13084:13112  \"mUserOp.verificationGasLimit\" */ 64, /** @src 0:15694:15771  \"AccountDeployed(opInfo.userOpHash, sender, factory, opInfo.mUserOp.paymaster)\" */ 0xd51a9c61267aa6196961883ecf5ff2da6619c37dac0fa92122513fb32c032d2d, _17, cleaned)\n                                        }\n                                        /// @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                        let cleaned_2 := and(/** @src 0:1296:1301  \"10000\" */ mload(/** @src 0:16902:16919  \"mUserOp.paymaster\" */ add(_mpos, /** @src 0:13408:13431  \"userOp.paymasterAndData\" */ 224)), /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ sub(shl(160, 1), 1))\n                                        /// @src 0:16933:16964  \"uint256 missingAccountFunds = 0\"\n                                        let var_missingAccountFunds := /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 0\n                                        /// @src 0:16978:17160  \"if (paymaster == address(0)) {...\"\n                                        if /** @src 0:16982:17005  \"paymaster == address(0)\" */ iszero(/** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ cleaned_2)\n                                        /// @src 0:16978:17160  \"if (paymaster == address(0)) {...\"\n                                        {\n                                            /// @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                            mstore(0, cleaned)\n                                            mstore(/** @src 0:13061:13073  \"userOp.nonce\" */ 32, /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 0)\n                                            let _19 := sload(keccak256(0, /** @src 0:13084:13112  \"mUserOp.verificationGasLimit\" */ 64))\n                                            /// @src 0:17096:17145  \"bal > requiredPrefund ? 0 : requiredPrefund - bal\"\n                                            let expr_7 := /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 0\n                                            /// @src 0:17096:17145  \"bal > requiredPrefund ? 0 : requiredPrefund - bal\"\n                                            switch /** @src 0:17096:17117  \"bal > requiredPrefund\" */ gt(_19, product)\n                                            case /** @src 0:17096:17145  \"bal > requiredPrefund ? 0 : requiredPrefund - bal\" */ 0 {\n                                                expr_7 := /** @src 0:1542:1546  \"2048\" */ sub(/** @src 0:17124:17145  \"requiredPrefund - bal\" */ product, _19)\n                                            }\n                                            default /// @src 0:17096:17145  \"bal > requiredPrefund ? 0 : requiredPrefund - bal\"\n                                            {\n                                                expr_7 := /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 0\n                                            }\n                                            /// @src 0:17074:17145  \"missingAccountFunds = bal > requiredPrefund ? 0 : requiredPrefund - bal\"\n                                            var_missingAccountFunds := expr_7\n                                        }\n                                        /// @src 0:1542:1546  \"2048\"\n                                        let _20 := mload(/** @src 0:22963:22983  \"outOpInfo.userOpHash\" */ add(var_outOpInfo_mpos, /** @src 0:13061:13073  \"userOp.nonce\" */ 32))\n                                        /// @src 0:17177:17279  \"IAccount(sender).validateUserOp{gas: verificationGasLimit}(op, opInfo.userOpHash, missingAccountFunds)\"\n                                        let _21 := /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ mload(/** @src 0:13084:13112  \"mUserOp.verificationGasLimit\" */ 64)\n                                        /// @src 0:17177:17279  \"IAccount(sender).validateUserOp{gas: verificationGasLimit}(op, opInfo.userOpHash, missingAccountFunds)\"\n                                        mstore(_21, /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ shl(226, 0x06608bdf))\n                                        /// @src 0:17177:17279  \"IAccount(sender).validateUserOp{gas: verificationGasLimit}(op, opInfo.userOpHash, missingAccountFunds)\"\n                                        let trySuccessCondition := call(_6, cleaned, /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 0, /** @src 0:17177:17279  \"IAccount(sender).validateUserOp{gas: verificationGasLimit}(op, opInfo.userOpHash, missingAccountFunds)\" */ _21, sub(abi_encode_struct_PackedUserOperation_calldata_bytes32_uint256(add(_21, 4), var_userOp_1632_offset, _20, var_missingAccountFunds), _21), _21, /** @src 0:13061:13073  \"userOp.nonce\" */ 32)\n                                        /// @src 0:17177:17279  \"IAccount(sender).validateUserOp{gas: verificationGasLimit}(op, opInfo.userOpHash, missingAccountFunds)\"\n                                        let expr_8 := /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 0\n                                        /// @src 0:17177:17279  \"IAccount(sender).validateUserOp{gas: verificationGasLimit}(op, opInfo.userOpHash, missingAccountFunds)\"\n                                        if trySuccessCondition\n                                        {\n                                            let _22 := /** @src 0:13061:13073  \"userOp.nonce\" */ 32\n                                            /// @src 0:17177:17279  \"IAccount(sender).validateUserOp{gas: verificationGasLimit}(op, opInfo.userOpHash, missingAccountFunds)\"\n                                            if gt(/** @src 0:13061:13073  \"userOp.nonce\" */ 32, /** @src 0:17177:17279  \"IAccount(sender).validateUserOp{gas: verificationGasLimit}(op, opInfo.userOpHash, missingAccountFunds)\" */ returndatasize()) { _22 := returndatasize() }\n                                            finalize_allocation(_21, _22)\n                                            /// @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                            if slt(sub(/** @src 0:17177:17279  \"IAccount(sender).validateUserOp{gas: verificationGasLimit}(op, opInfo.userOpHash, missingAccountFunds)\" */ add(_21, _22), /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ _21), /** @src 0:13061:13073  \"userOp.nonce\" */ 32)\n                                            /// @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                            { revert(0, 0) }\n                                            /// @src 0:17177:17279  \"IAccount(sender).validateUserOp{gas: verificationGasLimit}(op, opInfo.userOpHash, missingAccountFunds)\"\n                                            expr_8 := /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ mload(_21)\n                                        }\n                                        /// @src 0:17173:17525  \"try IAccount(sender).validateUserOp{gas: verificationGasLimit}(op, opInfo.userOpHash, missingAccountFunds)...\"\n                                        switch iszero(trySuccessCondition)\n                                        case 0 {\n                                            /// @src 0:17344:17376  \"validationData = _validationData\"\n                                            var_validationData_1 := expr_8\n                                        }\n                                        default /// @src 0:17173:17525  \"try IAccount(sender).validateUserOp{gas: verificationGasLimit}(op, opInfo.userOpHash, missingAccountFunds)...\"\n                                        {\n                                            /// @src 14:1204:1553  \"assembly (\\\"memory-safe\\\") {...\"\n                                            let usr$len := returndatasize()\n                                            /// @src 0:1542:1546  \"2048\"\n                                            let _23 := 0x0800\n                                            /// @src 14:1204:1553  \"assembly (\\\"memory-safe\\\") {...\"\n                                            if gt(usr$len, /** @src 0:1542:1546  \"2048\" */ _23)\n                                            /// @src 14:1204:1553  \"assembly (\\\"memory-safe\\\") {...\"\n                                            {\n                                                usr$len := /** @src 0:1542:1546  \"2048\" */ _23\n                                            }\n                                            /// @src 14:1204:1553  \"assembly (\\\"memory-safe\\\") {...\"\n                                            let usr$ptr := mload(/** @src 0:13084:13112  \"mUserOp.verificationGasLimit\" */ 64)\n                                            /// @src 14:1204:1553  \"assembly (\\\"memory-safe\\\") {...\"\n                                            mstore(/** @src 0:13084:13112  \"mUserOp.verificationGasLimit\" */ 64, /** @src 14:1204:1553  \"assembly (\\\"memory-safe\\\") {...\" */ add(add(usr$ptr, usr$len), /** @src 0:13061:13073  \"userOp.nonce\" */ 32))\n                                            /// @src 14:1204:1553  \"assembly (\\\"memory-safe\\\") {...\"\n                                            mstore(usr$ptr, usr$len)\n                                            returndatacopy(add(usr$ptr, /** @src 0:13061:13073  \"userOp.nonce\" */ 32), /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 0, /** @src 14:1204:1553  \"assembly (\\\"memory-safe\\\") {...\" */ usr$len)\n                                            /// @src 0:17423:17510  \"FailedOpWithRevert(opIndex, \\\"AA23 reverted\\\", Exec.getReturnData(REVERT_REASON_MAX_LEN))\"\n                                            let _24 := /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ mload(/** @src 0:13084:13112  \"mUserOp.verificationGasLimit\" */ 64)\n                                            /// @src 0:17423:17510  \"FailedOpWithRevert(opIndex, \\\"AA23 reverted\\\", Exec.getReturnData(REVERT_REASON_MAX_LEN))\"\n                                            mstore(_24, shl(224, 0x65c8fd4d))\n                                            /// @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                            mstore(/** @src 0:17423:17510  \"FailedOpWithRevert(opIndex, \\\"AA23 reverted\\\", Exec.getReturnData(REVERT_REASON_MAX_LEN))\" */ add(_24, /** @src 0:17177:17279  \"IAccount(sender).validateUserOp{gas: verificationGasLimit}(op, opInfo.userOpHash, missingAccountFunds)\" */ 4), /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ var_opIndex)\n                                            mstore(add(/** @src 0:17423:17510  \"FailedOpWithRevert(opIndex, \\\"AA23 reverted\\\", Exec.getReturnData(REVERT_REASON_MAX_LEN))\" */ _24, /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 36), /** @src 0:13114:13134  \"mUserOp.callGasLimit\" */ 96)\n                                            /// @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                            mstore(add(/** @src 0:17423:17510  \"FailedOpWithRevert(opIndex, \\\"AA23 reverted\\\", Exec.getReturnData(REVERT_REASON_MAX_LEN))\" */ _24, /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 100), 13)\n                                            mstore(add(/** @src 0:17423:17510  \"FailedOpWithRevert(opIndex, \\\"AA23 reverted\\\", Exec.getReturnData(REVERT_REASON_MAX_LEN))\" */ _24, /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 132), \"AA23 reverted\")\n                                            mstore(add(/** @src 0:17423:17510  \"FailedOpWithRevert(opIndex, \\\"AA23 reverted\\\", Exec.getReturnData(REVERT_REASON_MAX_LEN))\" */ _24, /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 68), /** @src 0:13230:13255  \"userOp.preVerificationGas\" */ 160)\n                                            /// @src 0:17423:17510  \"FailedOpWithRevert(opIndex, \\\"AA23 reverted\\\", Exec.getReturnData(REVERT_REASON_MAX_LEN))\"\n                                            revert(_24, sub(/** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ abi_encode_bytes(usr$ptr, add(/** @src 0:17423:17510  \"FailedOpWithRevert(opIndex, \\\"AA23 reverted\\\", Exec.getReturnData(REVERT_REASON_MAX_LEN))\" */ _24, /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 164)), /** @src 0:17423:17510  \"FailedOpWithRevert(opIndex, \\\"AA23 reverted\\\", Exec.getReturnData(REVERT_REASON_MAX_LEN))\" */ _24))\n                                        }\n                                        /// @src 0:17538:17907  \"if (paymaster == address(0)) {...\"\n                                        if /** @src 0:16982:17005  \"paymaster == address(0)\" */ iszero(/** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ cleaned_2)\n                                        /// @src 0:17538:17907  \"if (paymaster == address(0)) {...\"\n                                        {\n                                            /// @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                            mstore(0, cleaned)\n                                            mstore(/** @src 0:13061:13073  \"userOp.nonce\" */ 32, /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 0)\n                                            let dataSlot := keccak256(0, /** @src 0:13084:13112  \"mUserOp.verificationGasLimit\" */ 64)\n                                            /// @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                            let _25 := sload(/** @src 0:17670:17688  \"senderInfo.deposit\" */ dataSlot)\n                                            /// @src 0:17706:17829  \"if (requiredPrefund > deposit) {...\"\n                                            if /** @src 0:17710:17735  \"requiredPrefund > deposit\" */ gt(product, _25)\n                                            /// @src 0:17706:17829  \"if (requiredPrefund > deposit) {...\"\n                                            {\n                                                /// @src 0:17766:17810  \"FailedOp(opIndex, \\\"AA21 didn't pay prefund\\\")\"\n                                                let _26 := /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ mload(/** @src 0:13084:13112  \"mUserOp.verificationGasLimit\" */ 64)\n                                                /// @src 0:17766:17810  \"FailedOp(opIndex, \\\"AA21 didn't pay prefund\\\")\"\n                                                mstore(_26, /** @src 0:20671:20712  \"FailedOp(opIndex, \\\"AA24 signature error\\\")\" */ shl(225, 0x1101335b))\n                                                /// @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                                mstore(/** @src 0:17766:17810  \"FailedOp(opIndex, \\\"AA21 didn't pay prefund\\\")\" */ add(_26, /** @src 0:17177:17279  \"IAccount(sender).validateUserOp{gas: verificationGasLimit}(op, opInfo.userOpHash, missingAccountFunds)\" */ 4), /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ var_opIndex)\n                                                mstore(add(/** @src 0:17766:17810  \"FailedOp(opIndex, \\\"AA21 didn't pay prefund\\\")\" */ _26, /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 36), /** @src 0:13084:13112  \"mUserOp.verificationGasLimit\" */ 64)\n                                                /// @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                                mstore(add(/** @src 0:17766:17810  \"FailedOp(opIndex, \\\"AA21 didn't pay prefund\\\")\" */ _26, /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 68), 23)\n                                                mstore(add(/** @src 0:17766:17810  \"FailedOp(opIndex, \\\"AA21 didn't pay prefund\\\")\" */ _26, /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 100), \"AA21 didn't pay prefund\")\n                                                /// @src 0:17766:17810  \"FailedOp(opIndex, \\\"AA21 didn't pay prefund\\\")\"\n                                                revert(_26, /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 132)\n                                            }\n                                            sstore(dataSlot, /** @src 0:1542:1546  \"2048\" */ sub(/** @src 0:17867:17892  \"deposit - requiredPrefund\" */ _25, product))\n                                        }\n                                        /// @src 0:23642:23752  \"validationData = _validateAccountPrepayment(opIndex, userOp, outOpInfo, requiredPreFund, verificationGasLimit)\"\n                                        var_validationData := var_validationData_1\n                                        /// @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                        let cleaned_3 := and(/** @src 0:1296:1301  \"10000\" */ mload(/** @src 0:23792:23806  \"mUserOp.sender\" */ _431_mpos), /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ sub(shl(160, 1), 1))\n                                        let _27 := mload(/** @src 0:13045:13058  \"mUserOp.nonce\" */ add(_431_mpos, /** @src 0:13061:13073  \"userOp.nonce\" */ 32))\n                                        /// @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                        mstore(0, cleaned_3)\n                                        mstore(/** @src 0:13061:13073  \"userOp.nonce\" */ 32, /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 1)\n                                        let _28 := keccak256(0, /** @src 0:13084:13112  \"mUserOp.verificationGasLimit\" */ 64)\n                                        /// @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                        mstore(0, shr(/** @src 0:13084:13112  \"mUserOp.verificationGasLimit\" */ 64, /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ _27))\n                                        mstore(/** @src 0:13061:13073  \"userOp.nonce\" */ 32, /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ _28)\n                                        let dataSlot_1 := keccak256(0, /** @src 0:13084:13112  \"mUserOp.verificationGasLimit\" */ 64)\n                                        /// @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                        let _29 := sload(/** @src 2:1373:1407  \"nonceSequenceNumber[sender][key]++\" */ dataSlot_1)\n                                        /// @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                        sstore(dataSlot_1, /** @src 2:1373:1407  \"nonceSequenceNumber[sender][key]++\" */ increment_uint256(_29))\n                                        /// @src 0:23763:23903  \"if (!_validateAndUpdateNonce(mUserOp.sender, mUserOp.nonce)) {...\"\n                                        if /** @src 0:23767:23822  \"!_validateAndUpdateNonce(mUserOp.sender, mUserOp.nonce)\" */ iszero(/** @src 2:1373:1414  \"nonceSequenceNumber[sender][key]++ == seq\" */ eq(_29, /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ and(/** @src 2:1343:1356  \"uint64(nonce)\" */ _27, /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 0xffffffffffffffff)))\n                                        /// @src 0:23763:23903  \"if (!_validateAndUpdateNonce(mUserOp.sender, mUserOp.nonce)) {...\"\n                                        {\n                                            /// @src 0:23845:23892  \"FailedOp(opIndex, \\\"AA25 invalid account nonce\\\")\"\n                                            let _30 := /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ mload(/** @src 0:13084:13112  \"mUserOp.verificationGasLimit\" */ 64)\n                                            /// @src 0:23845:23892  \"FailedOp(opIndex, \\\"AA25 invalid account nonce\\\")\"\n                                            mstore(_30, /** @src 0:20671:20712  \"FailedOp(opIndex, \\\"AA24 signature error\\\")\" */ shl(225, 0x1101335b))\n                                            /// @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                            mstore(/** @src 0:23845:23892  \"FailedOp(opIndex, \\\"AA25 invalid account nonce\\\")\" */ add(_30, /** @src 0:17177:17279  \"IAccount(sender).validateUserOp{gas: verificationGasLimit}(op, opInfo.userOpHash, missingAccountFunds)\" */ 4), /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ var_opIndex)\n                                            mstore(add(/** @src 0:23845:23892  \"FailedOp(opIndex, \\\"AA25 invalid account nonce\\\")\" */ _30, /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 36), /** @src 0:13084:13112  \"mUserOp.verificationGasLimit\" */ 64)\n                                            /// @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                            mstore(add(/** @src 0:23845:23892  \"FailedOp(opIndex, \\\"AA25 invalid account nonce\\\")\" */ _30, /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 68), 26)\n                                            mstore(add(/** @src 0:23845:23892  \"FailedOp(opIndex, \\\"AA25 invalid account nonce\\\")\" */ _30, /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 100), \"AA25 invalid account nonce\")\n                                            /// @src 0:23845:23892  \"FailedOp(opIndex, \\\"AA25 invalid account nonce\\\")\"\n                                            revert(_30, /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 132)\n                                        }\n                                        /// @src 0:23937:24075  \"if (preGas - gasleft() > verificationGasLimit) {...\"\n                                        if /** @src 0:23941:23982  \"preGas - gasleft() > verificationGasLimit\" */ gt(/** @src 0:1542:1546  \"2048\" */ sub(expr, /** @src 0:23950:23959  \"gasleft()\" */ gas()), /** @src 0:23941:23982  \"preGas - gasleft() > verificationGasLimit\" */ _6)\n                                        /// @src 0:23937:24075  \"if (preGas - gasleft() > verificationGasLimit) {...\"\n                                        {\n                                            /// @src 0:24009:24060  \"FailedOp(opIndex, \\\"AA26 over verificationGasLimit\\\")\"\n                                            let _31 := /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ mload(/** @src 0:13084:13112  \"mUserOp.verificationGasLimit\" */ 64)\n                                            /// @src 0:24009:24060  \"FailedOp(opIndex, \\\"AA26 over verificationGasLimit\\\")\"\n                                            mstore(_31, /** @src 0:20671:20712  \"FailedOp(opIndex, \\\"AA24 signature error\\\")\" */ shl(225, 0x1101335b))\n                                            /// @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                            mstore(/** @src 0:24009:24060  \"FailedOp(opIndex, \\\"AA26 over verificationGasLimit\\\")\" */ add(_31, /** @src 0:17177:17279  \"IAccount(sender).validateUserOp{gas: verificationGasLimit}(op, opInfo.userOpHash, missingAccountFunds)\" */ 4), /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ var_opIndex)\n                                            mstore(add(/** @src 0:24009:24060  \"FailedOp(opIndex, \\\"AA26 over verificationGasLimit\\\")\" */ _31, /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 36), /** @src 0:13084:13112  \"mUserOp.verificationGasLimit\" */ 64)\n                                            /// @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                            mstore(add(/** @src 0:24009:24060  \"FailedOp(opIndex, \\\"AA26 over verificationGasLimit\\\")\" */ _31, /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 68), 30)\n                                            mstore(add(/** @src 0:24009:24060  \"FailedOp(opIndex, \\\"AA26 over verificationGasLimit\\\")\" */ _31, /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 100), \"AA26 over verificationGasLimit\")\n                                            /// @src 0:24009:24060  \"FailedOp(opIndex, \\\"AA26 over verificationGasLimit\\\")\"\n                                            revert(_31, /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 132)\n                                        }\n                                        /// @src 0:24095:24115  \"bytes memory context\"\n                                        let var_context_1749_mpos := /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 0\n                                        /// @src 0:24095:24115  \"bytes memory context\"\n                                        var_context_1749_mpos := /** @src 0:13114:13134  \"mUserOp.callGasLimit\" */ 96\n                                        /// @src 0:24125:24313  \"if (mUserOp.paymaster != address(0)) {...\"\n                                        if /** @src 0:24129:24160  \"mUserOp.paymaster != address(0)\" */ iszero(iszero(/** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ and(/** @src 0:1296:1301  \"10000\" */ mload(/** @src 0:24129:24146  \"mUserOp.paymaster\" */ add(_431_mpos, /** @src 0:13408:13431  \"userOp.paymasterAndData\" */ 224)), /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ sub(shl(160, 1), 1))))\n                                        /// @src 0:24125:24313  \"if (mUserOp.paymaster != address(0)) {...\"\n                                        {\n                                            /// @src 0:24229:24302  \"_validatePaymasterPrepayment(opIndex, userOp, outOpInfo, requiredPreFund)\"\n                                            let var_context_mpos := /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 0\n                                            /// @src 0:24229:24302  \"_validatePaymasterPrepayment(opIndex, userOp, outOpInfo, requiredPreFund)\"\n                                            let var_validationData_2 := /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 0\n                                            /// @src 0:18780:18789  \"gasleft()\"\n                                            let expr_9 := gas()\n                                            /// @src 0:18833:18847  \"opInfo.mUserOp\"\n                                            let _mpos_1 := mload(var_outOpInfo_mpos)\n                                            /// @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                            let cleaned_4 := and(/** @src 0:1296:1301  \"10000\" */ mload(/** @src 0:18881:18898  \"mUserOp.paymaster\" */ add(_mpos_1, /** @src 0:13408:13431  \"userOp.paymasterAndData\" */ 224)), /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ sub(shl(160, 1), 1))\n                                            mstore(0, cleaned_4)\n                                            mstore(/** @src 0:13061:13073  \"userOp.nonce\" */ 32, /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 0)\n                                            let dataSlot_2 := keccak256(0, /** @src 0:13084:13112  \"mUserOp.verificationGasLimit\" */ 64)\n                                            /// @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                            let _32 := sload(/** @src 0:18999:19020  \"paymasterInfo.deposit\" */ dataSlot_2)\n                                            /// @src 0:19034:19156  \"if (deposit < requiredPreFund) {...\"\n                                            if /** @src 0:19038:19063  \"deposit < requiredPreFund\" */ lt(_32, product)\n                                            /// @src 0:19034:19156  \"if (deposit < requiredPreFund) {...\"\n                                            {\n                                                /// @src 0:19090:19141  \"FailedOp(opIndex, \\\"AA31 paymaster deposit too low\\\")\"\n                                                let _33 := /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ mload(/** @src 0:13084:13112  \"mUserOp.verificationGasLimit\" */ 64)\n                                                /// @src 0:19090:19141  \"FailedOp(opIndex, \\\"AA31 paymaster deposit too low\\\")\"\n                                                mstore(_33, /** @src 0:20671:20712  \"FailedOp(opIndex, \\\"AA24 signature error\\\")\" */ shl(225, 0x1101335b))\n                                                /// @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                                mstore(/** @src 0:19090:19141  \"FailedOp(opIndex, \\\"AA31 paymaster deposit too low\\\")\" */ add(_33, /** @src 0:17177:17279  \"IAccount(sender).validateUserOp{gas: verificationGasLimit}(op, opInfo.userOpHash, missingAccountFunds)\" */ 4), /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ var_opIndex)\n                                                mstore(add(/** @src 0:19090:19141  \"FailedOp(opIndex, \\\"AA31 paymaster deposit too low\\\")\" */ _33, /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 36), /** @src 0:13084:13112  \"mUserOp.verificationGasLimit\" */ 64)\n                                                /// @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                                mstore(add(/** @src 0:19090:19141  \"FailedOp(opIndex, \\\"AA31 paymaster deposit too low\\\")\" */ _33, /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 68), 30)\n                                                mstore(add(/** @src 0:19090:19141  \"FailedOp(opIndex, \\\"AA31 paymaster deposit too low\\\")\" */ _33, /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 100), \"AA31 paymaster deposit too low\")\n                                                /// @src 0:19090:19141  \"FailedOp(opIndex, \\\"AA31 paymaster deposit too low\\\")\"\n                                                revert(_33, /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 132)\n                                            }\n                                            sstore(dataSlot_2, /** @src 0:1542:1546  \"2048\" */ sub(/** @src 0:19193:19218  \"deposit - requiredPreFund\" */ _32, product))\n                                            /// @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                            let _34 := mload(/** @src 0:19265:19302  \"mUserOp.paymasterVerificationGasLimit\" */ add(_mpos_1, /** @src 0:13167:13190  \"userOp.accountGasLimits\" */ 128))\n                                            /// @src 0:1542:1546  \"2048\"\n                                            let _35 := mload(/** @src 0:22963:22983  \"outOpInfo.userOpHash\" */ add(var_outOpInfo_mpos, /** @src 0:13061:13073  \"userOp.nonce\" */ 32))\n                                            /// @src 0:19320:19464  \"IPaymaster(paymaster).validatePaymasterUserOp{gas: pmVerificationGasLimit}(...\"\n                                            let _36 := /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ mload(/** @src 0:13084:13112  \"mUserOp.verificationGasLimit\" */ 64)\n                                            /// @src 0:19320:19464  \"IPaymaster(paymaster).validatePaymasterUserOp{gas: pmVerificationGasLimit}(...\"\n                                            mstore(_36, /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ shl(226, 0x14add44b))\n                                            /// @src 0:19320:19464  \"IPaymaster(paymaster).validatePaymasterUserOp{gas: pmVerificationGasLimit}(...\"\n                                            let trySuccessCondition_1 := call(_34, cleaned_4, /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 0, /** @src 0:19320:19464  \"IPaymaster(paymaster).validatePaymasterUserOp{gas: pmVerificationGasLimit}(...\" */ _36, sub(abi_encode_struct_PackedUserOperation_calldata_bytes32_uint256(add(_36, /** @src 0:17177:17279  \"IAccount(sender).validateUserOp{gas: verificationGasLimit}(op, opInfo.userOpHash, missingAccountFunds)\" */ 4), /** @src 0:19320:19464  \"IPaymaster(paymaster).validatePaymasterUserOp{gas: pmVerificationGasLimit}(...\" */ var_userOp_1632_offset, _35, product), _36), _36, /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 0)\n                                            /// @src 0:19320:19464  \"IPaymaster(paymaster).validatePaymasterUserOp{gas: pmVerificationGasLimit}(...\"\n                                            let expr_component_mpos := /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 0\n                                            let expr_component := 0\n                                            /// @src 0:19320:19464  \"IPaymaster(paymaster).validatePaymasterUserOp{gas: pmVerificationGasLimit}(...\"\n                                            if trySuccessCondition_1\n                                            {\n                                                let _37 := returndatasize()\n                                                returndatacopy(_36, /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 0, /** @src 0:19320:19464  \"IPaymaster(paymaster).validatePaymasterUserOp{gas: pmVerificationGasLimit}(...\" */ _37)\n                                                finalize_allocation(_36, _37)\n                                                /// @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                                if slt(sub(/** @src 0:19320:19464  \"IPaymaster(paymaster).validatePaymasterUserOp{gas: pmVerificationGasLimit}(...\" */ add(_36, _37), /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ _36), /** @src 0:13084:13112  \"mUserOp.verificationGasLimit\" */ 64)\n                                                /// @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                                { revert(0, 0) }\n                                                let offset := mload(_36)\n                                                if gt(offset, 0xffffffffffffffff) { revert(0, 0) }\n                                                if iszero(slt(add(add(_36, offset), 0x1f), /** @src 0:19320:19464  \"IPaymaster(paymaster).validatePaymasterUserOp{gas: pmVerificationGasLimit}(...\" */ add(_36, _37)))\n                                                /// @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                                { revert(0, 0) }\n                                                let _38 := mload(add(_36, offset))\n                                                let _39 := array_allocation_size_bytes(_38)\n                                                let memPtr_2 := mload(/** @src 0:13084:13112  \"mUserOp.verificationGasLimit\" */ 64)\n                                                /// @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                                finalize_allocation(memPtr_2, _39)\n                                                mstore(memPtr_2, _38)\n                                                if gt(add(add(add(_36, offset), _38), /** @src 0:13061:13073  \"userOp.nonce\" */ 32), /** @src 0:19320:19464  \"IPaymaster(paymaster).validatePaymasterUserOp{gas: pmVerificationGasLimit}(...\" */ add(_36, _37))\n                                                /// @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                                { revert(0, 0) }\n                                                copy_memory_to_memory_with_cleanup(add(add(_36, offset), /** @src 0:13061:13073  \"userOp.nonce\" */ 32), /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ add(memPtr_2, /** @src 0:13061:13073  \"userOp.nonce\" */ 32), /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ _38)\n                                                let value_1 := mload(add(_36, /** @src 0:13061:13073  \"userOp.nonce\" */ 32))\n                                                /// @src 0:19320:19464  \"IPaymaster(paymaster).validatePaymasterUserOp{gas: pmVerificationGasLimit}(...\"\n                                                expr_component_mpos := memPtr_2\n                                                expr_component := value_1\n                                            }\n                                            /// @src 0:19316:19757  \"try IPaymaster(paymaster).validatePaymasterUserOp{gas: pmVerificationGasLimit}(...\"\n                                            switch iszero(trySuccessCondition_1)\n                                            case 0 {\n                                                /// @src 0:19540:19558  \"context = _context\"\n                                                var_context_mpos := expr_component_mpos\n                                                /// @src 0:19576:19608  \"validationData = _validationData\"\n                                                var_validationData_2 := expr_component\n                                            }\n                                            default /// @src 0:19316:19757  \"try IPaymaster(paymaster).validatePaymasterUserOp{gas: pmVerificationGasLimit}(...\"\n                                            {\n                                                /// @src 14:1204:1553  \"assembly (\\\"memory-safe\\\") {...\"\n                                                let usr$len_1 := returndatasize()\n                                                /// @src 0:1542:1546  \"2048\"\n                                                let _40 := 0x0800\n                                                /// @src 14:1204:1553  \"assembly (\\\"memory-safe\\\") {...\"\n                                                if gt(usr$len_1, /** @src 0:1542:1546  \"2048\" */ _40)\n                                                /// @src 14:1204:1553  \"assembly (\\\"memory-safe\\\") {...\"\n                                                {\n                                                    usr$len_1 := /** @src 0:1542:1546  \"2048\" */ _40\n                                                }\n                                                /// @src 14:1204:1553  \"assembly (\\\"memory-safe\\\") {...\"\n                                                let usr$ptr_1 := mload(/** @src 0:13084:13112  \"mUserOp.verificationGasLimit\" */ 64)\n                                                /// @src 14:1204:1553  \"assembly (\\\"memory-safe\\\") {...\"\n                                                mstore(/** @src 0:13084:13112  \"mUserOp.verificationGasLimit\" */ 64, /** @src 14:1204:1553  \"assembly (\\\"memory-safe\\\") {...\" */ add(add(usr$ptr_1, usr$len_1), /** @src 0:13061:13073  \"userOp.nonce\" */ 32))\n                                                /// @src 14:1204:1553  \"assembly (\\\"memory-safe\\\") {...\"\n                                                mstore(usr$ptr_1, usr$len_1)\n                                                returndatacopy(add(usr$ptr_1, /** @src 0:13061:13073  \"userOp.nonce\" */ 32), /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 0, /** @src 14:1204:1553  \"assembly (\\\"memory-safe\\\") {...\" */ usr$len_1)\n                                                /// @src 0:19655:19742  \"FailedOpWithRevert(opIndex, \\\"AA33 reverted\\\", Exec.getReturnData(REVERT_REASON_MAX_LEN))\"\n                                                let _41 := /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ mload(/** @src 0:13084:13112  \"mUserOp.verificationGasLimit\" */ 64)\n                                                /// @src 0:19655:19742  \"FailedOpWithRevert(opIndex, \\\"AA33 reverted\\\", Exec.getReturnData(REVERT_REASON_MAX_LEN))\"\n                                                mstore(_41, /** @src 0:17423:17510  \"FailedOpWithRevert(opIndex, \\\"AA23 reverted\\\", Exec.getReturnData(REVERT_REASON_MAX_LEN))\" */ shl(224, 0x65c8fd4d))\n                                                /// @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                                mstore(/** @src 0:19655:19742  \"FailedOpWithRevert(opIndex, \\\"AA33 reverted\\\", Exec.getReturnData(REVERT_REASON_MAX_LEN))\" */ add(_41, /** @src 0:17177:17279  \"IAccount(sender).validateUserOp{gas: verificationGasLimit}(op, opInfo.userOpHash, missingAccountFunds)\" */ 4), /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ var_opIndex)\n                                                mstore(add(/** @src 0:19655:19742  \"FailedOpWithRevert(opIndex, \\\"AA33 reverted\\\", Exec.getReturnData(REVERT_REASON_MAX_LEN))\" */ _41, /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 36), /** @src 0:13114:13134  \"mUserOp.callGasLimit\" */ 96)\n                                                /// @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                                mstore(add(/** @src 0:19655:19742  \"FailedOpWithRevert(opIndex, \\\"AA33 reverted\\\", Exec.getReturnData(REVERT_REASON_MAX_LEN))\" */ _41, /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 100), 13)\n                                                mstore(add(/** @src 0:19655:19742  \"FailedOpWithRevert(opIndex, \\\"AA33 reverted\\\", Exec.getReturnData(REVERT_REASON_MAX_LEN))\" */ _41, /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 132), \"AA33 reverted\")\n                                                mstore(add(/** @src 0:19655:19742  \"FailedOpWithRevert(opIndex, \\\"AA33 reverted\\\", Exec.getReturnData(REVERT_REASON_MAX_LEN))\" */ _41, /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 68), /** @src 0:13230:13255  \"userOp.preVerificationGas\" */ 160)\n                                                /// @src 0:19655:19742  \"FailedOpWithRevert(opIndex, \\\"AA33 reverted\\\", Exec.getReturnData(REVERT_REASON_MAX_LEN))\"\n                                                revert(_41, sub(/** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ abi_encode_bytes(usr$ptr_1, add(/** @src 0:19655:19742  \"FailedOpWithRevert(opIndex, \\\"AA33 reverted\\\", Exec.getReturnData(REVERT_REASON_MAX_LEN))\" */ _41, /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 164)), /** @src 0:19655:19742  \"FailedOpWithRevert(opIndex, \\\"AA33 reverted\\\", Exec.getReturnData(REVERT_REASON_MAX_LEN))\" */ _41))\n                                            }\n                                            /// @src 0:19770:19919  \"if (preGas - gasleft() > pmVerificationGasLimit) {...\"\n                                            if /** @src 0:19774:19817  \"preGas - gasleft() > pmVerificationGasLimit\" */ gt(/** @src 0:1542:1546  \"2048\" */ sub(expr_9, /** @src 0:19783:19792  \"gasleft()\" */ gas()), /** @src 0:19774:19817  \"preGas - gasleft() > pmVerificationGasLimit\" */ _34)\n                                            /// @src 0:19770:19919  \"if (preGas - gasleft() > pmVerificationGasLimit) {...\"\n                                            {\n                                                /// @src 0:19844:19904  \"FailedOp(opIndex, \\\"AA36 over paymasterVerificationGasLimit\\\")\"\n                                                let _42 := /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ mload(/** @src 0:13084:13112  \"mUserOp.verificationGasLimit\" */ 64)\n                                                /// @src 0:19844:19904  \"FailedOp(opIndex, \\\"AA36 over paymasterVerificationGasLimit\\\")\"\n                                                mstore(_42, /** @src 0:20671:20712  \"FailedOp(opIndex, \\\"AA24 signature error\\\")\" */ shl(225, 0x1101335b))\n                                                /// @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                                mstore(/** @src 0:19844:19904  \"FailedOp(opIndex, \\\"AA36 over paymasterVerificationGasLimit\\\")\" */ add(_42, /** @src 0:17177:17279  \"IAccount(sender).validateUserOp{gas: verificationGasLimit}(op, opInfo.userOpHash, missingAccountFunds)\" */ 4), /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ var_opIndex)\n                                                mstore(add(/** @src 0:19844:19904  \"FailedOp(opIndex, \\\"AA36 over paymasterVerificationGasLimit\\\")\" */ _42, /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 36), /** @src 0:13084:13112  \"mUserOp.verificationGasLimit\" */ 64)\n                                                /// @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                                mstore(add(/** @src 0:19844:19904  \"FailedOp(opIndex, \\\"AA36 over paymasterVerificationGasLimit\\\")\" */ _42, /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 68), 39)\n                                                mstore(add(/** @src 0:19844:19904  \"FailedOp(opIndex, \\\"AA36 over paymasterVerificationGasLimit\\\")\" */ _42, /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 100), \"AA36 over paymasterVerificationG\")\n                                                mstore(add(/** @src 0:19844:19904  \"FailedOp(opIndex, \\\"AA36 over paymasterVerificationGasLimit\\\")\" */ _42, /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 132), \"asLimit\")\n                                                /// @src 0:19844:19904  \"FailedOp(opIndex, \\\"AA36 over paymasterVerificationGasLimit\\\")\"\n                                                revert(_42, /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 164)\n                                            }\n                                            /// @src 0:24176:24302  \"(context, paymasterValidationData) =...\"\n                                            var_paymasterValidationData := var_validationData_2\n                                            var_context_1749_mpos := var_context_mpos\n                                        }\n                                        /// @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                        mstore(/** @src 0:24346:24363  \"outOpInfo.prefund\" */ add(var_outOpInfo_mpos, /** @src 0:13084:13112  \"mUserOp.verificationGasLimit\" */ 64), /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ product)\n                                        mstore(/** @src 0:24395:24418  \"outOpInfo.contextOffset\" */ add(var_outOpInfo_mpos, /** @src 0:13114:13134  \"mUserOp.callGasLimit\" */ 96), /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ var_context_1749_mpos)\n                                        mstore(/** @src 0:24466:24484  \"outOpInfo.preOpGas\" */ add(var_outOpInfo_mpos, /** @src 0:13167:13190  \"userOp.accountGasLimits\" */ 128), /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ add(/** @src 0:1542:1546  \"2048\" */ sub(expr, /** @src 0:24496:24505  \"gasleft()\" */ gas()), /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ calldataload(/** @src 0:13230:13255  \"userOp.preVerificationGas\" */ add(var_userOp_1632_offset, 160))))\n                                    }\n                                    /// @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                    function abi_encode_struct_UserOpInfo(value, pos)\n                                    {\n                                        let _1 := mload(value)\n                                        let _2 := sub(shl(160, 1), 1)\n                                        mstore(pos, and(mload(_1), _2))\n                                        mstore(add(pos, 0x20), mload(add(_1, 0x20)))\n                                        mstore(add(pos, 0x40), mload(add(_1, 0x40)))\n                                        mstore(add(pos, 0x60), mload(add(_1, 0x60)))\n                                        mstore(add(pos, 0x80), mload(add(_1, 0x80)))\n                                        mstore(add(pos, 0xa0), mload(add(_1, 0xa0)))\n                                        mstore(add(pos, 0xc0), mload(add(_1, 0xc0)))\n                                        mstore(add(pos, 0xe0), and(mload(add(_1, 0xe0)), _2))\n                                        let _3 := 0x0100\n                                        mstore(add(pos, _3), mload(add(_1, _3)))\n                                        let _4 := 0x0120\n                                        mstore(add(pos, _4), mload(add(_1, _4)))\n                                        mstore(add(pos, 0x0140), mload(add(value, 0x20)))\n                                        mstore(add(pos, 0x0160), mload(add(value, 0x40)))\n                                        mstore(add(pos, 0x0180), mload(add(value, 0x60)))\n                                        mstore(add(pos, 0x01a0), mload(add(value, 0x80)))\n                                    }\n                                    /// @ast-id 328 @src 0:3018:5928  \"function _executeUserOp(uint256 opIndex, PackedUserOperation calldata userOp, UserOpInfo memory opInfo)...\"\n                                    function fun_executeUserOp(var_opIndex, var_userOp_offset, var_opInfo_155_mpos) -> var_collected\n                                    {\n                                        /// @src 0:3206:3215  \"gasleft()\"\n                                        let expr := gas()\n                                        /// @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                        let _1 := mload(/** @src 0:3273:3293  \"opInfo.contextOffset\" */ add(var_opInfo_155_mpos, 96))\n                                        /// @src 0:3373:3456  \"assembly (\\\"memory-safe\\\") {...\"\n                                        let _2 := 0x40\n                                        let var_saveFreePtr := mload(_2)\n                                        /// @src 0:3495:3510  \"userOp.callData\"\n                                        let expr_offset, expr_182_length := access_calldata_tail_bytes_calldata(var_userOp_offset, add(var_userOp_offset, /** @src 0:3273:3293  \"opInfo.contextOffset\" */ 96))\n                                        /// @src 0:3524:3546  \"bytes memory innerCall\"\n                                        let var_innerCall_mpos := /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 0\n                                        /// @src 0:3560:3576  \"bytes4 methodSig\"\n                                        let var_methodSig := /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ var_innerCall_mpos\n                                        /// @src 0:3560:3576  \"bytes4 methodSig\"\n                                        var_methodSig := /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ var_innerCall_mpos\n                                        /// @src 0:3590:3734  \"assembly {...\"\n                                        if gt(expr_182_length, 3)\n                                        {\n                                            var_methodSig := calldataload(expr_offset)\n                                        }\n                                        /// @src 0:3764:3802  \"IAccountExecute.executeUserOp.selector\"\n                                        let _3 := shl(224, 0x8dd7712f)\n                                        /// @src 0:3747:4152  \"if (methodSig == IAccountExecute.executeUserOp.selector) {...\"\n                                        switch /** @src 0:3751:3802  \"methodSig == IAccountExecute.executeUserOp.selector\" */ eq(/** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ and(/** @src 0:3751:3802  \"methodSig == IAccountExecute.executeUserOp.selector\" */ var_methodSig, /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ shl(224, 0xffffffff)), /** @src 0:3764:3802  \"IAccountExecute.executeUserOp.selector\" */ _3)\n                                        case /** @src 0:3747:4152  \"if (methodSig == IAccountExecute.executeUserOp.selector) {...\" */ 0 {\n                                            /// @src 0:4074:4137  \"abi.encodeCall(this.innerHandleOp, (callData, opInfo, context))\"\n                                            mstore(add(var_saveFreePtr, 0x20), /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ shl(224, 4381779))\n                                            mstore(/** @src 0:4074:4137  \"abi.encodeCall(this.innerHandleOp, (callData, opInfo, context))\" */ add(var_saveFreePtr, 36), /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 512)\n                                            let tail := abi_encode_bytes_calldata(expr_offset, expr_182_length, add(/** @src 0:4074:4137  \"abi.encodeCall(this.innerHandleOp, (callData, opInfo, context))\" */ var_saveFreePtr, /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 548))\n                                            abi_encode_struct_UserOpInfo(var_opInfo_155_mpos, add(/** @src 0:4074:4137  \"abi.encodeCall(this.innerHandleOp, (callData, opInfo, context))\" */ var_saveFreePtr, /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 68))\n                                            mstore(add(/** @src 0:4074:4137  \"abi.encodeCall(this.innerHandleOp, (callData, opInfo, context))\" */ var_saveFreePtr, /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 516), add(sub(tail, /** @src 0:4074:4137  \"abi.encodeCall(this.innerHandleOp, (callData, opInfo, context))\" */ var_saveFreePtr), /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ not(35)))\n                                            /// @src 0:4074:4137  \"abi.encodeCall(this.innerHandleOp, (callData, opInfo, context))\"\n                                            let _4 := sub(/** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ abi_encode_bytes(_1, tail), /** @src 0:4074:4137  \"abi.encodeCall(this.innerHandleOp, (callData, opInfo, context))\" */ var_saveFreePtr)\n                                            mstore(var_saveFreePtr, add(_4, /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ not(31)))\n                                            /// @src 0:4074:4137  \"abi.encodeCall(this.innerHandleOp, (callData, opInfo, context))\"\n                                            finalize_allocation(var_saveFreePtr, _4)\n                                            /// @src 0:4062:4137  \"innerCall = abi.encodeCall(this.innerHandleOp, (callData, opInfo, context))\"\n                                            var_innerCall_mpos := var_saveFreePtr\n                                        }\n                                        default /// @src 0:3747:4152  \"if (methodSig == IAccountExecute.executeUserOp.selector) {...\"\n                                        {\n                                            /// @src 0:1542:1546  \"2048\"\n                                            let _5 := mload(/** @src 0:3906:3923  \"opInfo.userOpHash\" */ add(var_opInfo_155_mpos, 32))\n                                            /// @src 0:3851:3925  \"abi.encodeCall(IAccountExecute.executeUserOp, (userOp, opInfo.userOpHash))\"\n                                            let expr_mpos := /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ mload(/** @src 0:3373:3456  \"assembly (\\\"memory-safe\\\") {...\" */ _2)\n                                            /// @src 0:3851:3925  \"abi.encodeCall(IAccountExecute.executeUserOp, (userOp, opInfo.userOpHash))\"\n                                            mstore(add(expr_mpos, /** @src 0:3906:3923  \"opInfo.userOpHash\" */ 32), /** @src 0:3764:3802  \"IAccountExecute.executeUserOp.selector\" */ _3)\n                                            /// @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                            mstore(/** @src 0:3851:3925  \"abi.encodeCall(IAccountExecute.executeUserOp, (userOp, opInfo.userOpHash))\" */ add(expr_mpos, 36), /** @src 0:3373:3456  \"assembly (\\\"memory-safe\\\") {...\" */ _2)\n                                            /// @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                            let tail_1 := abi_encode_struct_PackedUserOperation_calldata(var_userOp_offset, add(/** @src 0:3851:3925  \"abi.encodeCall(IAccountExecute.executeUserOp, (userOp, opInfo.userOpHash))\" */ expr_mpos, /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 100))\n                                            mstore(add(/** @src 0:3851:3925  \"abi.encodeCall(IAccountExecute.executeUserOp, (userOp, opInfo.userOpHash))\" */ expr_mpos, /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 68), _5)\n                                            /// @src 0:3851:3925  \"abi.encodeCall(IAccountExecute.executeUserOp, (userOp, opInfo.userOpHash))\"\n                                            let _6 := sub(tail_1, expr_mpos)\n                                            let _7 := /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ not(31)\n                                            /// @src 0:3851:3925  \"abi.encodeCall(IAccountExecute.executeUserOp, (userOp, opInfo.userOpHash))\"\n                                            mstore(expr_mpos, add(_6, _7))\n                                            finalize_allocation(expr_mpos, _6)\n                                            /// @src 0:3955:4023  \"abi.encodeCall(this.innerHandleOp, (executeUserOp, opInfo, context))\"\n                                            let expr_217_mpos := /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ mload(/** @src 0:3373:3456  \"assembly (\\\"memory-safe\\\") {...\" */ _2)\n                                            /// @src 0:3955:4023  \"abi.encodeCall(this.innerHandleOp, (executeUserOp, opInfo, context))\"\n                                            mstore(add(expr_217_mpos, /** @src 0:3906:3923  \"opInfo.userOpHash\" */ 32), /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ shl(224, 4381779))\n                                            mstore(/** @src 0:3955:4023  \"abi.encodeCall(this.innerHandleOp, (executeUserOp, opInfo, context))\" */ add(expr_217_mpos, /** @src 0:3851:3925  \"abi.encodeCall(IAccountExecute.executeUserOp, (userOp, opInfo.userOpHash))\" */ 36), /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 512)\n                                            let tail_2 := abi_encode_bytes(expr_mpos, add(/** @src 0:3955:4023  \"abi.encodeCall(this.innerHandleOp, (executeUserOp, opInfo, context))\" */ expr_217_mpos, /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 548))\n                                            abi_encode_struct_UserOpInfo(var_opInfo_155_mpos, add(/** @src 0:3955:4023  \"abi.encodeCall(this.innerHandleOp, (executeUserOp, opInfo, context))\" */ expr_217_mpos, /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 68))\n                                            mstore(add(/** @src 0:3955:4023  \"abi.encodeCall(this.innerHandleOp, (executeUserOp, opInfo, context))\" */ expr_217_mpos, /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 516), add(sub(tail_2, /** @src 0:3955:4023  \"abi.encodeCall(this.innerHandleOp, (executeUserOp, opInfo, context))\" */ expr_217_mpos), /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ not(35)))\n                                            /// @src 0:3955:4023  \"abi.encodeCall(this.innerHandleOp, (executeUserOp, opInfo, context))\"\n                                            let _8 := sub(/** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ abi_encode_bytes(_1, tail_2), /** @src 0:3955:4023  \"abi.encodeCall(this.innerHandleOp, (executeUserOp, opInfo, context))\" */ expr_217_mpos)\n                                            mstore(expr_217_mpos, add(_8, /** @src 0:3851:3925  \"abi.encodeCall(IAccountExecute.executeUserOp, (userOp, opInfo.userOpHash))\" */ _7))\n                                            /// @src 0:3955:4023  \"abi.encodeCall(this.innerHandleOp, (executeUserOp, opInfo, context))\"\n                                            finalize_allocation(expr_217_mpos, _8)\n                                            /// @src 0:3943:4023  \"innerCall = abi.encodeCall(this.innerHandleOp, (executeUserOp, opInfo, context))\"\n                                            var_innerCall_mpos := expr_217_mpos\n                                        }\n                                        /// @src 0:4165:4385  \"assembly (\\\"memory-safe\\\") {...\"\n                                        let _9 := 32\n                                        let var_success := call(gas(), address(), /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 0, /** @src 0:4165:4385  \"assembly (\\\"memory-safe\\\") {...\" */ add(var_innerCall_mpos, _9), mload(var_innerCall_mpos), /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 0, /** @src 0:4165:4385  \"assembly (\\\"memory-safe\\\") {...\" */ _9)\n                                        var_collected := mload(/** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 0)\n                                        /// @src 0:4165:4385  \"assembly (\\\"memory-safe\\\") {...\"\n                                        mstore(/** @src 0:3373:3456  \"assembly (\\\"memory-safe\\\") {...\" */ _2, /** @src 0:4165:4385  \"assembly (\\\"memory-safe\\\") {...\" */ var_saveFreePtr)\n                                        /// @src 0:4404:5922  \"if (!success) {...\"\n                                        if /** @src 0:4408:4416  \"!success\" */ iszero(var_success)\n                                        /// @src 0:4404:5922  \"if (!success) {...\"\n                                        {\n                                            /// @src 0:4432:4455  \"bytes32 innerRevertCode\"\n                                            let var_innerRevertCode := /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 0\n                                            /// @src 0:4469:4697  \"assembly (\\\"memory-safe\\\") {...\"\n                                            if eq(/** @src 0:4165:4385  \"assembly (\\\"memory-safe\\\") {...\" */ _9, /** @src 0:4469:4697  \"assembly (\\\"memory-safe\\\") {...\" */ returndatasize())\n                                            {\n                                                returndatacopy(/** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ var_innerRevertCode, var_innerRevertCode, /** @src 0:4165:4385  \"assembly (\\\"memory-safe\\\") {...\" */ _9)\n                                                /// @src 0:4469:4697  \"assembly (\\\"memory-safe\\\") {...\"\n                                                var_innerRevertCode := mload(/** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ var_innerRevertCode)\n                                            }\n                                            /// @src 0:4710:5912  \"if (innerRevertCode == INNER_OUT_OF_GAS) {...\"\n                                            switch /** @src 0:4714:4749  \"innerRevertCode == INNER_OUT_OF_GAS\" */ eq(var_innerRevertCode, /** @src 0:11604:11730  \"assembly (\\\"memory-safe\\\") {...\" */ shl(224, 0xdeaddead))\n                                            case /** @src 0:4710:5912  \"if (innerRevertCode == INNER_OUT_OF_GAS) {...\" */ 0 {\n                                                /// @src 0:5006:5912  \"if (innerRevertCode == INNER_REVERT_LOW_PREFUND) {...\"\n                                                switch /** @src 0:5010:5053  \"innerRevertCode == INNER_REVERT_LOW_PREFUND\" */ eq(var_innerRevertCode, /** @src 0:27628:27774  \"assembly (\\\"memory-safe\\\") {...\" */ shl(224, 0xdeadaa51))\n                                                case /** @src 0:5006:5912  \"if (innerRevertCode == INNER_REVERT_LOW_PREFUND) {...\" */ 0 {\n                                                    /// @src 0:1542:1546  \"2048\"\n                                                    let _10 := mload(/** @src 0:5529:5546  \"opInfo.userOpHash\" */ add(var_opInfo_155_mpos, /** @src 0:4165:4385  \"assembly (\\\"memory-safe\\\") {...\" */ _9))\n                                                    /// @src 0:5568:5582  \"opInfo.mUserOp\"\n                                                    let _565_mpos := mload(var_opInfo_155_mpos)\n                                                    /// @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                                    let _11 := sub(shl(160, 1), 1)\n                                                    let cleaned := and(/** @src 0:1296:1301  \"10000\" */ mload(/** @src 0:5568:5589  \"opInfo.mUserOp.sender\" */ _565_mpos), /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ _11)\n                                                    let _12 := mload(/** @src 0:5611:5631  \"opInfo.mUserOp.nonce\" */ add(_565_mpos, /** @src 0:4165:4385  \"assembly (\\\"memory-safe\\\") {...\" */ _9))\n                                                    /// @src 14:1204:1553  \"assembly (\\\"memory-safe\\\") {...\"\n                                                    let usr$len := returndatasize()\n                                                    /// @src 0:1542:1546  \"2048\"\n                                                    let _13 := 0x0800\n                                                    /// @src 14:1204:1553  \"assembly (\\\"memory-safe\\\") {...\"\n                                                    if gt(usr$len, /** @src 0:1542:1546  \"2048\" */ _13)\n                                                    /// @src 14:1204:1553  \"assembly (\\\"memory-safe\\\") {...\"\n                                                    {\n                                                        usr$len := /** @src 0:1542:1546  \"2048\" */ _13\n                                                    }\n                                                    /// @src 14:1204:1553  \"assembly (\\\"memory-safe\\\") {...\"\n                                                    let usr$ptr := mload(/** @src 0:3373:3456  \"assembly (\\\"memory-safe\\\") {...\" */ _2)\n                                                    /// @src 14:1204:1553  \"assembly (\\\"memory-safe\\\") {...\"\n                                                    mstore(/** @src 0:3373:3456  \"assembly (\\\"memory-safe\\\") {...\" */ _2, /** @src 14:1204:1553  \"assembly (\\\"memory-safe\\\") {...\" */ add(add(usr$ptr, usr$len), /** @src 0:4165:4385  \"assembly (\\\"memory-safe\\\") {...\" */ _9))\n                                                    /// @src 14:1204:1553  \"assembly (\\\"memory-safe\\\") {...\"\n                                                    mstore(usr$ptr, usr$len)\n                                                    returndatacopy(add(usr$ptr, /** @src 0:4165:4385  \"assembly (\\\"memory-safe\\\") {...\" */ _9), /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 0, /** @src 14:1204:1553  \"assembly (\\\"memory-safe\\\") {...\" */ usr$len)\n                                                    /// @src 0:5489:5712  \"PostOpRevertReason(...\"\n                                                    let _14 := /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ mload(/** @src 0:3373:3456  \"assembly (\\\"memory-safe\\\") {...\" */ _2)\n                                                    /// @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                                    mstore(_14, _12)\n                                                    /// @src 0:1542:1546  \"2048\"\n                                                    mstore(add(_14, /** @src 0:4165:4385  \"assembly (\\\"memory-safe\\\") {...\" */ _9), /** @src 0:3373:3456  \"assembly (\\\"memory-safe\\\") {...\" */ _2)\n                                                    /// @src 0:5489:5712  \"PostOpRevertReason(...\"\n                                                    log3(_14, sub(/** @src 0:1542:1546  \"2048\" */ abi_encode_bytes(usr$ptr, add(_14, /** @src 0:3373:3456  \"assembly (\\\"memory-safe\\\") {...\" */ _2)), /** @src 0:5489:5712  \"PostOpRevertReason(...\" */ _14), 0xf62676f440ff169a3a9afdbf812e89e7f95975ee8e5c31214ffdef631c5f4792, _10, cleaned)\n                                                    /// @src 0:5751:5769  \"preGas - gasleft()\"\n                                                    let expr_1 := checked_sub_uint256(expr, /** @src 0:5760:5769  \"gasleft()\" */ gas())\n                                                    /// @src 0:5772:5787  \"opInfo.preOpGas\"\n                                                    let _15 := add(var_opInfo_155_mpos, 128)\n                                                    /// @src 0:5817:5897  \"_postExecution(IPaymaster.PostOpMode.postOpReverted, opInfo, context, actualGas)\"\n                                                    let var_actualGas := /** @src 0:5751:5787  \"preGas - gasleft() + opInfo.preOpGas\" */ checked_add_uint256(expr_1, /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ mload(/** @src 0:5772:5787  \"opInfo.preOpGas\" */ _15))\n                                                    /// @src 0:5817:5897  \"_postExecution(IPaymaster.PostOpMode.postOpReverted, opInfo, context, actualGas)\"\n                                                    let var_actualGasCost := /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 0\n                                                    /// @src 0:25391:25400  \"gasleft()\"\n                                                    let expr_2 := gas()\n                                                    /// @src 0:25434:25455  \"address refundAddress\"\n                                                    let var_refundAddress := /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ var_actualGasCost\n                                                    /// @src 0:25434:25455  \"address refundAddress\"\n                                                    let var_refundAddress_1 := /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ var_actualGasCost\n                                                    /// @src 0:25499:25513  \"opInfo.mUserOp\"\n                                                    let _mpos := mload(var_opInfo_155_mpos)\n                                                    /// @src 0:25546:25572  \"getUserOpGasPrice(mUserOp)\"\n                                                    let expr_3 := fun_getUserOpGasPrice(_mpos)\n                                                    /// @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                                    let cleaned_1 := and(/** @src 0:1296:1301  \"10000\" */ mload(/** @src 0:25607:25624  \"mUserOp.paymaster\" */ add(_mpos, 224)), /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ _11)\n                                                    /// @src 0:25638:26482  \"if (paymaster == address(0)) {...\"\n                                                    switch /** @src 0:25642:25665  \"paymaster == address(0)\" */ iszero(/** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ cleaned_1)\n                                                    case /** @src 0:25638:26482  \"if (paymaster == address(0)) {...\" */ 0 {\n                                                        /// @src 0:25754:25779  \"refundAddress = paymaster\"\n                                                        var_refundAddress := cleaned_1\n                                                        /// @src 0:25797:26468  \"if (context.length > 0) {...\"\n                                                        if /** @src 0:25801:25819  \"context.length > 0\" */ iszero(iszero(/** @src 0:1296:1301  \"10000\" */ mload(/** @src 0:25801:25815  \"context.length\" */ _1)))\n                                                        /// @src 0:25797:26468  \"if (context.length > 0) {...\"\n                                                        {\n                                                            /// @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                                            var_refundAddress_1 := var_actualGasCost\n                                                        }\n                                                    }\n                                                    default /// @src 0:25638:26482  \"if (paymaster == address(0)) {...\"\n                                                    {\n                                                        /// @src 0:25685:25715  \"refundAddress = mUserOp.sender\"\n                                                        var_refundAddress := /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ and(/** @src 0:1296:1301  \"10000\" */ mload(/** @src 0:25701:25715  \"mUserOp.sender\" */ _mpos), /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ _11)\n                                                    }\n                                                    /// @src 0:26495:26526  \"actualGas += preGas - gasleft()\"\n                                                    var_actualGas := /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ add(var_actualGas, /** @src 0:1542:1546  \"2048\" */ sub(expr_2, /** @src 0:26517:26526  \"gasleft()\" */ gas()))\n                                                    /// @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                                    let _16 := mload(/** @src 0:26649:26669  \"mUserOp.callGasLimit\" */ add(_mpos, /** @src 0:3273:3293  \"opInfo.contextOffset\" */ 96))\n                                                    /// @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                                    let sum := add(_16, mload(/** @src 0:26672:26703  \"mUserOp.paymasterPostOpGasLimit\" */ add(_mpos, 160)))\n                                                    /// @src 0:1542:1546  \"2048\"\n                                                    let diff := sub(var_actualGas, /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ mload(/** @src 0:26760:26775  \"opInfo.preOpGas\" */ _15))\n                                                    /// @src 0:26909:27183  \"if (executionGasLimit > executionGasUsed) {...\"\n                                                    if /** @src 0:26913:26949  \"executionGasLimit > executionGasUsed\" */ gt(sum, diff)\n                                                    /// @src 0:26909:27183  \"if (executionGasLimit > executionGasUsed) {...\"\n                                                    {\n                                                        /// @src 0:27135:27164  \"actualGas += unusedGasPenalty\"\n                                                        var_actualGas := /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ add(var_actualGas, div(mul(/** @src 0:1542:1546  \"2048\" */ sub(/** @src 0:26993:27029  \"executionGasLimit - executionGasUsed\" */ sum, diff), /** @src 0:1595:1597  \"10\" */ 0x0a), /** @src 0:27110:27113  \"100\" */ 0x64))\n                                                    }\n                                                    /// @src 0:27211:27247  \"actualGasCost = actualGas * gasPrice\"\n                                                    var_actualGasCost := /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ mul(/** @src 0:27227:27247  \"actualGas * gasPrice\" */ var_actualGas, expr_3)\n                                                    /// @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                                    let _17 := mload(/** @src 0:27279:27293  \"opInfo.prefund\" */ add(var_opInfo_155_mpos, /** @src 0:3373:3456  \"assembly (\\\"memory-safe\\\") {...\" */ _2))\n                                                    /// @src 0:27307:28100  \"if (prefund < actualGasCost) {...\"\n                                                    switch /** @src 0:27311:27334  \"prefund < actualGasCost\" */ lt(_17, var_actualGasCost)\n                                                    case /** @src 0:27307:28100  \"if (prefund < actualGasCost) {...\" */ 0 {\n                                                        /// @src 0:27888:27928  \"_incrementDeposit(refundAddress, refund)\"\n                                                        pop(fun_incrementDeposit(var_refundAddress, /** @src 0:1542:1546  \"2048\" */ sub(/** @src 0:27847:27870  \"prefund - actualGasCost\" */ _17, var_actualGasCost)))\n                                                        /// @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                                        if var_refundAddress_1\n                                                        {\n                                                            mstore(/** @src -1:-1:-1 */ var_refundAddress_1, /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ shl(224, 0x4e487b71))\n                                                            mstore(4, 0x21)\n                                                            revert(/** @src -1:-1:-1 */ var_refundAddress_1, /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 0x24)\n                                                        }\n                                                        /// @src 0:28075:28084  \"actualGas\"\n                                                        fun_emitUserOperationEvent(var_opInfo_155_mpos, var_actualGasCost, var_actualGas)\n                                                    }\n                                                    default /// @src 0:27307:28100  \"if (prefund < actualGasCost) {...\"\n                                                    {\n                                                        /// @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                                        if var_refundAddress_1\n                                                        {\n                                                            mstore(/** @src -1:-1:-1 */ var_refundAddress_1, /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ shl(224, 0x4e487b71))\n                                                            mstore(4, 0x21)\n                                                            revert(/** @src -1:-1:-1 */ var_refundAddress_1, /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 0x24)\n                                                        }\n                                                        /// @src 0:27426:27449  \"actualGasCost = prefund\"\n                                                        var_actualGasCost := _17\n                                                        /// @src 0:27489:27495  \"opInfo\"\n                                                        fun_emitPrefundTooLow(var_opInfo_155_mpos)\n                                                        /// @src 0:27571:27580  \"actualGas\"\n                                                        fun_emitUserOperationEvent(var_opInfo_155_mpos, _17, var_actualGas)\n                                                    }\n                                                    /// @src 0:5805:5897  \"collected = _postExecution(IPaymaster.PostOpMode.postOpReverted, opInfo, context, actualGas)\"\n                                                    var_collected := var_actualGasCost\n                                                }\n                                                default /// @src 0:5006:5912  \"if (innerRevertCode == INNER_REVERT_LOW_PREFUND) {...\"\n                                                {\n                                                    /// @src 0:5186:5204  \"preGas - gasleft()\"\n                                                    let expr_4 := checked_sub_uint256(expr, /** @src 0:5195:5204  \"gasleft()\" */ gas())\n                                                    /// @src 0:5186:5222  \"preGas - gasleft() + opInfo.preOpGas\"\n                                                    let expr_5 := checked_add_uint256(expr_4, /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ mload(/** @src 0:5207:5222  \"opInfo.preOpGas\" */ add(var_opInfo_155_mpos, 128)))\n                                                    /// @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                                    let _18 := mload(/** @src 0:5264:5278  \"opInfo.prefund\" */ add(var_opInfo_155_mpos, /** @src 0:3373:3456  \"assembly (\\\"memory-safe\\\") {...\" */ _2))\n                                                    /// @src 0:5314:5320  \"opInfo\"\n                                                    fun_emitPrefundTooLow(var_opInfo_155_mpos)\n                                                    /// @src 0:5392:5401  \"actualGas\"\n                                                    fun_emitUserOperationEvent(var_opInfo_155_mpos, _18, expr_5)\n                                                    /// @src 0:5420:5445  \"collected = actualGasCost\"\n                                                    var_collected := _18\n                                                }\n                                            }\n                                            default /// @src 0:4710:5912  \"if (innerRevertCode == INNER_OUT_OF_GAS) {...\"\n                                            {\n                                                /// @src 0:4949:4985  \"FailedOp(opIndex, \\\"AA95 out of gas\\\")\"\n                                                let _19 := /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ mload(/** @src 0:3373:3456  \"assembly (\\\"memory-safe\\\") {...\" */ _2)\n                                                /// @src 0:4949:4985  \"FailedOp(opIndex, \\\"AA95 out of gas\\\")\"\n                                                mstore(_19, /** @src 0:20671:20712  \"FailedOp(opIndex, \\\"AA24 signature error\\\")\" */ shl(225, 0x1101335b))\n                                                /// @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                                mstore(/** @src 0:4949:4985  \"FailedOp(opIndex, \\\"AA95 out of gas\\\")\" */ add(_19, 4), /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ var_opIndex)\n                                                /// @src 0:1473:1486  \"hex\\\"deadaa51\\\"\"\n                                                mstore(add(/** @src 0:4949:4985  \"FailedOp(opIndex, \\\"AA95 out of gas\\\")\" */ _19, /** @src 0:1473:1486  \"hex\\\"deadaa51\\\"\" */ 36), /** @src 0:3373:3456  \"assembly (\\\"memory-safe\\\") {...\" */ _2)\n                                                /// @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                                mstore(/** @src 0:1473:1486  \"hex\\\"deadaa51\\\"\" */ add(/** @src 0:4949:4985  \"FailedOp(opIndex, \\\"AA95 out of gas\\\")\" */ _19, /** @src 0:1473:1486  \"hex\\\"deadaa51\\\"\" */ 68), 15)\n                                                mstore(/** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ add(/** @src 0:4949:4985  \"FailedOp(opIndex, \\\"AA95 out of gas\\\")\" */ _19, /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 100), /** @src 0:1473:1486  \"hex\\\"deadaa51\\\"\" */ \"AA95 out of gas\")\n                                                /// @src 0:4949:4985  \"FailedOp(opIndex, \\\"AA95 out of gas\\\")\"\n                                                revert(_19, /** @src 0:1473:1486  \"hex\\\"deadaa51\\\"\" */ 132)\n                                            }\n                                        }\n                                    }\n                                    /// @ast-id 146 @src 0:2433:2711  \"function _compensate(address payable beneficiary, uint256 amount) internal {...\"\n                                    function fun_compensate(var_beneficiary, var_amount)\n                                    {\n                                        /// @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                        let _1 := and(/** @src 0:2526:2551  \"beneficiary != address(0)\" */ var_beneficiary, /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ sub(shl(160, 1), 1))\n                                        if /** @src 0:2526:2551  \"beneficiary != address(0)\" */ iszero(_1)\n                                        /// @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                        {\n                                            let memPtr := mload(64)\n                                            mstore(memPtr, shl(229, 4594637))\n                                            mstore(add(memPtr, 4), 32)\n                                            mstore(add(memPtr, 36), 24)\n                                            mstore(add(memPtr, 68), \"AA90 invalid beneficiary\")\n                                            revert(memPtr, 100)\n                                        }\n                                        /// @src 0:2608:2643  \"beneficiary.call{value: amount}(\\\"\\\")\"\n                                        let expr_138_component := call(gas(), _1, var_amount, /** @src 0:2549:2550  \"0\" */ 0x00, 0x00, 0x00, 0x00)\n                                        /// @src 0:2608:2643  \"beneficiary.call{value: amount}(\\\"\\\")\"\n                                        pop(extract_returndata())\n                                        /// @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                        if iszero(expr_138_component)\n                                        {\n                                            let memPtr_1 := mload(64)\n                                            mstore(memPtr_1, shl(229, 4594637))\n                                            mstore(add(memPtr_1, 4), 32)\n                                            mstore(add(memPtr_1, 36), 31)\n                                            mstore(add(memPtr_1, 68), \"AA91 failed send to beneficiary\")\n                                            revert(memPtr_1, 100)\n                                        }\n                                    }\n                                    /// @ast-id 2531 @src 4:1559:1818  \"function _incrementDeposit(address account, uint256 amount) internal returns (uint256) {...\"\n                                    function fun_incrementDeposit(var_account, var_amount) -> var\n                                    {\n                                        /// @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                        mstore(/** @src 4:1683:1691  \"deposits\" */ 0x00, /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ and(var_account, sub(shl(160, 1), 1)))\n                                        mstore(0x20, /** @src 4:1683:1691  \"deposits\" */ 0x00)\n                                        /// @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                        let dataSlot := keccak256(/** @src 4:1683:1691  \"deposits\" */ 0x00, /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 0x40)\n                                        /// @src 4:1730:1751  \"info.deposit + amount\"\n                                        let expr := checked_add_uint256(/** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ sload(/** @src 4:1730:1742  \"info.deposit\" */ dataSlot), /** @src 4:1730:1751  \"info.deposit + amount\" */ var_amount)\n                                        /// @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                        sstore(dataSlot, expr)\n                                        /// @src 4:1795:1811  \"return newAmount\"\n                                        var := expr\n                                    }\n                                    /// @ast-id 2057 @src 0:28360:28877  \"function getUserOpGasPrice(MemoryUserOp memory mUserOp) internal view returns (uint256) {...\"\n                                    function fun_getUserOpGasPrice(var_mUserOp_mpos) -> var_\n                                    {\n                                        /// @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                        let _1 := mload(/** @src 0:28505:28525  \"mUserOp.maxFeePerGas\" */ add(var_mUserOp_mpos, 256))\n                                        /// @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                        let _2 := mload(/** @src 0:28570:28598  \"mUserOp.maxPriorityFeePerGas\" */ add(var_mUserOp_mpos, 288))\n                                        /// @src 0:28612:28785  \"if (maxFeePerGas == maxPriorityFeePerGas) {...\"\n                                        if /** @src 0:28616:28652  \"maxFeePerGas == maxPriorityFeePerGas\" */ eq(_1, _2)\n                                        /// @src 0:28612:28785  \"if (maxFeePerGas == maxPriorityFeePerGas) {...\"\n                                        {\n                                            /// @src 0:28751:28770  \"return maxFeePerGas\"\n                                            var_ := _1\n                                            leave\n                                        }\n                                        /// @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                        let _3 := add(/** @src 0:28823:28859  \"maxPriorityFeePerGas + block.basefee\" */ _2, /** @src 0:28846:28859  \"block.basefee\" */ basefee())\n                                        /// @src 1:3338:3351  \"a < b ? a : b\"\n                                        let expr := /** @src -1:-1:-1 */ 0\n                                        /// @src 1:3338:3351  \"a < b ? a : b\"\n                                        switch /** @src 1:3338:3343  \"a < b\" */ lt(_1, _3)\n                                        case /** @src 1:3338:3351  \"a < b ? a : b\" */ 0 { expr := _3 }\n                                        default { expr := _1 }\n                                        /// @src 0:28798:28860  \"return min(maxFeePerGas, maxPriorityFeePerGas + block.basefee)\"\n                                        var_ := expr\n                                    }\n                                    /// @ast-id 358 @src 0:5934:6344  \"function emitUserOperationEvent(UserOpInfo memory opInfo, bool success, uint256 actualGasCost, uint256 actualGas)...\"\n                                    function fun_emitUserOperationEvent(var_opInfo_mpos, var_actualGasCost, var_actualGas)\n                                    {\n                                        /// @src 0:1542:1546  \"2048\"\n                                        let _1 := mload(/** @src 0:6132:6149  \"opInfo.userOpHash\" */ add(var_opInfo_mpos, 32))\n                                        /// @src 0:6163:6177  \"opInfo.mUserOp\"\n                                        let _mpos := mload(var_opInfo_mpos)\n                                        /// @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                        let _2 := sub(shl(160, 1), 1)\n                                        let cleaned := and(/** @src 0:1296:1301  \"10000\" */ mload(/** @src 0:6163:6184  \"opInfo.mUserOp.sender\" */ _mpos), /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ _2)\n                                        let cleaned_1 := and(/** @src 0:1296:1301  \"10000\" */ mload(/** @src 0:6198:6222  \"opInfo.mUserOp.paymaster\" */ add(_mpos, 224)), /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ _2)\n                                        let _3 := mload(/** @src 0:6236:6256  \"opInfo.mUserOp.nonce\" */ add(_mpos, /** @src 0:6132:6149  \"opInfo.userOpHash\" */ 32))\n                                        /// @src 0:6100:6337  \"UserOperationEvent(...\"\n                                        let _4 := /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ mload(64)\n                                        mstore(_4, _3)\n                                        mstore(add(_4, /** @src 0:6132:6149  \"opInfo.userOpHash\" */ 32), /** @src -1:-1:-1 */ 0)\n                                        /// @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                        mstore(add(_4, 64), var_actualGasCost)\n                                        mstore(add(_4, 96), var_actualGas)\n                                        /// @src 0:6100:6337  \"UserOperationEvent(...\"\n                                        log4(_4, /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 128, /** @src 0:6100:6337  \"UserOperationEvent(...\" */ 0x49628fd1471006c1482da88028e9ce4dbb080b815c9b0344d39e5a8e6ec1419f, _1, cleaned, cleaned_1)\n                                    }\n                                    /// @ast-id 376 @src 0:6350:6532  \"function emitPrefundTooLow(UserOpInfo memory opInfo) internal virtual {...\"\n                                    function fun_emitPrefundTooLow(var_opInfo_mpos)\n                                    {\n                                        /// @src 0:1542:1546  \"2048\"\n                                        let _1 := mload(/** @src 0:6462:6479  \"opInfo.userOpHash\" */ add(var_opInfo_mpos, 32))\n                                        /// @src 0:6481:6495  \"opInfo.mUserOp\"\n                                        let _665_mpos := mload(var_opInfo_mpos)\n                                        /// @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                        let cleaned := and(/** @src 0:1296:1301  \"10000\" */ mload(/** @src 0:6481:6502  \"opInfo.mUserOp.sender\" */ _665_mpos), /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ sub(shl(160, 1), 1))\n                                        let _2 := mload(/** @src 0:6504:6524  \"opInfo.mUserOp.nonce\" */ add(_665_mpos, /** @src 0:6462:6479  \"opInfo.userOpHash\" */ 32))\n                                        /// @src 0:6435:6525  \"UserOperationPrefundTooLow(opInfo.userOpHash, opInfo.mUserOp.sender, opInfo.mUserOp.nonce)\"\n                                        let _3 := /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ mload(64)\n                                        mstore(_3, _2)\n                                        /// @src 0:6435:6525  \"UserOperationPrefundTooLow(opInfo.userOpHash, opInfo.mUserOp.sender, opInfo.mUserOp.nonce)\"\n                                        log3(_3, /** @src 0:6462:6479  \"opInfo.userOpHash\" */ 32, /** @src 0:6435:6525  \"UserOperationPrefundTooLow(opInfo.userOpHash, opInfo.mUserOp.sender, opInfo.mUserOp.nonce)\" */ 0x67b4fa9642f42120bf031f3051d1824b0fe25627945b27b8a6a65d5761d5482e, _1, cleaned)\n                                    }\n                                    /// @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                    function abi_encode_struct_PackedUserOperation_calldata_bytes32_uint256(headStart, value0, value1, value2) -> tail\n                                    {\n                                        mstore(headStart, 96)\n                                        tail := abi_encode_struct_PackedUserOperation_calldata(value0, add(headStart, 96))\n                                        mstore(add(headStart, 32), value1)\n                                        mstore(add(headStart, 64), value2)\n                                    }\n                                    /// @ast-id 1626 @src 0:21739:22239  \"function _getValidationData(uint256 validationData)...\"\n                                    function fun_getValidationData(var_validationData) -> var_aggregator, var_outOfTimeRange\n                                    {\n                                        /// @src 0:21893:21969  \"if (validationData == 0) {...\"\n                                        if /** @src 0:21897:21916  \"validationData == 0\" */ iszero(var_validationData)\n                                        /// @src 0:21893:21969  \"if (validationData == 0) {...\"\n                                        {\n                                            /// @src 0:21932:21958  \"return (address(0), false)\"\n                                            var_aggregator := /** @src 0:21915:21916  \"0\" */ 0x00\n                                            /// @src 0:21932:21958  \"return (address(0), false)\"\n                                            var_outOfTimeRange := /** @src 0:21915:21916  \"0\" */ 0x00\n                                            /// @src 0:21932:21958  \"return (address(0), false)\"\n                                            leave\n                                        }\n                                        /// @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                        let memPtr := mload(64)\n                                        finalize_allocation_26350(memPtr)\n                                        mstore(memPtr, /** @src 0:21915:21916  \"0\" */ 0x00)\n                                        /// @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                        mstore(add(memPtr, 32), /** @src 0:21915:21916  \"0\" */ 0x00)\n                                        /// @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                        mstore(add(memPtr, 64), /** @src 0:21915:21916  \"0\" */ 0x00)\n                                        /// @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                        let _1 := and(/** @src 1:1507:1530  \"uint160(validationData)\" */ var_validationData, /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ sub(shl(160, 1), 1))\n                                        let _2 := 0xffffffffffff\n                                        /// @src 1:1537:1586  \"uint48 validUntil = uint48(validationData >> 160)\"\n                                        let var_validUntil := /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ and(shr(/** @src 1:1582:1585  \"160\" */ 0xa0, /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ var_validationData), _2)\n                                        /// @src 1:1592:1659  \"if (validUntil == 0) {...\"\n                                        if /** @src 1:1596:1611  \"validUntil == 0\" */ iszero(/** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ var_validUntil)\n                                        /// @src 1:1592:1659  \"if (validUntil == 0) {...\"\n                                        {\n                                            /// @src 1:1623:1652  \"validUntil = type(uint48).max\"\n                                            var_validUntil := /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ _2\n                                        }\n                                        let result := shr(/** @src 1:1710:1718  \"48 + 160\" */ 0xd0, /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ var_validationData)\n                                        let memPtr_1 := mload(64)\n                                        finalize_allocation_26350(memPtr_1)\n                                        mstore(memPtr_1, _1)\n                                        mstore(/** @src 1:1733:1783  \"ValidationData(aggregator, validAfter, validUntil)\" */ add(memPtr_1, /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 32), result)\n                                        let _3 := and(var_validUntil, _2)\n                                        mstore(/** @src 1:1733:1783  \"ValidationData(aggregator, validAfter, validUntil)\" */ add(memPtr_1, /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 64), _3)\n                                        /// @src 0:22124:22194  \"block.timestamp > data.validUntil || block.timestamp < data.validAfter\"\n                                        let expr := /** @src 0:22124:22157  \"block.timestamp > data.validUntil\" */ gt(/** @src 0:22124:22139  \"block.timestamp\" */ timestamp(), /** @src 0:22124:22157  \"block.timestamp > data.validUntil\" */ _3)\n                                        /// @src 0:22124:22194  \"block.timestamp > data.validUntil || block.timestamp < data.validAfter\"\n                                        if iszero(expr)\n                                        {\n                                            expr := /** @src 0:22161:22194  \"block.timestamp < data.validAfter\" */ lt(/** @src 0:22124:22139  \"block.timestamp\" */ timestamp(), /** @src 0:22161:22194  \"block.timestamp < data.validAfter\" */ result)\n                                        }\n                                        /// @src 0:22107:22194  \"outOfTimeRange = block.timestamp > data.validUntil || block.timestamp < data.validAfter\"\n                                        var_outOfTimeRange := expr\n                                        /// @src 0:22204:22232  \"aggregator = data.aggregator\"\n                                        var_aggregator := _1\n                                    }\n                                }\n                                data \".metadata\" hex\"a164736f6c6343000818000a\"\n                            }\n                            /// @use-src 3:\"lib/account-abstraction/contracts/core/SenderCreator.sol\"\n                            object \"SenderCreator_2418\" {\n                                code {\n                                    {\n                                        /// @src 3:205:1231  \"contract SenderCreator {...\"\n                                        let _1 := memoryguard(0x80)\n                                        mstore(64, _1)\n                                        if callvalue() { revert(0, 0) }\n                                        let _2 := datasize(\"SenderCreator_2418_deployed\")\n                                        codecopy(_1, dataoffset(\"SenderCreator_2418_deployed\"), _2)\n                                        return(_1, _2)\n                                    }\n                                }\n                                /// @use-src 3:\"lib/account-abstraction/contracts/core/SenderCreator.sol\"\n                                object \"SenderCreator_2418_deployed\" {\n                                    code {\n                                        {\n                                            /// @src 3:205:1231  \"contract SenderCreator {...\"\n                                            let _1 := memoryguard(0x80)\n                                            if iszero(lt(calldatasize(), 4))\n                                            {\n                                                let _2 := 0\n                                                if eq(0x570e1a36, shr(224, calldataload(_2)))\n                                                {\n                                                    if callvalue() { revert(_2, _2) }\n                                                    if slt(add(calldatasize(), not(3)), 32) { revert(_2, _2) }\n                                                    let offset := calldataload(4)\n                                                    let _3 := 0xffffffffffffffff\n                                                    if gt(offset, _3) { revert(_2, _2) }\n                                                    if iszero(slt(add(offset, 35), calldatasize())) { revert(_2, _2) }\n                                                    let length := calldataload(add(4, offset))\n                                                    if gt(length, _3) { revert(_2, _2) }\n                                                    if gt(add(add(offset, length), 36), calldatasize()) { revert(_2, _2) }\n                                                    let var_sender := _2\n                                                    if gt(/** @src 3:726:728  \"20\" */ 0x14, /** @src 3:205:1231  \"contract SenderCreator {...\" */ length) { revert(_2, _2) }\n                                                    let lengthOut := add(length, not(19))\n                                                    if gt(lengthOut, _3)\n                                                    {\n                                                        mstore(_2, shl(224, 0x4e487b71))\n                                                        mstore(4, 0x41)\n                                                        revert(_2, 36)\n                                                    }\n                                                    let _4 := not(31)\n                                                    let newFreePtr := add(_1, and(add(and(add(length, 11), _4), 63), _4))\n                                                    if or(gt(newFreePtr, _3), lt(newFreePtr, _1))\n                                                    {\n                                                        mstore(_2, shl(224, 0x4e487b71))\n                                                        mstore(4, 0x41)\n                                                        revert(_2, 36)\n                                                    }\n                                                    mstore(64, newFreePtr)\n                                                    mstore(_1, lengthOut)\n                                                    let dst := add(_1, 32)\n                                                    calldatacopy(dst, add(offset, 56), lengthOut)\n                                                    mstore(add(add(_1, length), 12), _2)\n                                                    /// @src 3:863:1156  \"assembly (\\\"memory-safe\\\") {...\"\n                                                    let var_success := call(gas(), /** @src 3:205:1231  \"contract SenderCreator {...\" */ shr(96, calldataload(add(offset, 36))), _2, /** @src 3:863:1156  \"assembly (\\\"memory-safe\\\") {...\" */ dst, mload(_1), /** @src 3:205:1231  \"contract SenderCreator {...\" */ _2, 32)\n                                                    /// @src 3:863:1156  \"assembly (\\\"memory-safe\\\") {...\"\n                                                    var_sender := mload(/** @src 3:205:1231  \"contract SenderCreator {...\" */ _2)\n                                                    /// @src 3:1165:1223  \"if (!success) {...\"\n                                                    if /** @src 3:1169:1177  \"!success\" */ iszero(var_success)\n                                                    /// @src 3:1165:1223  \"if (!success) {...\"\n                                                    {\n                                                        /// @src 3:1193:1212  \"sender = address(0)\"\n                                                        var_sender := /** @src 3:205:1231  \"contract SenderCreator {...\" */ _2\n                                                    }\n                                                    let memPos := mload(64)\n                                                    mstore(memPos, and(var_sender, sub(shl(160, 1), 1)))\n                                                    return(memPos, 32)\n                                                }\n                                            }\n                                            revert(0, 0)\n                                        }\n                                    }\n                                    data \".metadata\" hex\"a164736f6c6343000818000a\"\n                                }\n                            }\n                        }\n                        data \".metadata\" hex\"a164736f6c6343000818000a\"\n                    }\n                }\n                /// @use-src 6:\"lib/account-abstraction/contracts/interfaces/IAccount.sol\", 60:\"lib/openzeppelin-contracts/contracts/access/Ownable.sol\", 69:\"lib/openzeppelin-contracts/contracts/utils/Context.sol\", 81:\"src/ethereum/MinimalAccount.sol\"\n                object \"MinimalAccount_51163\" {\n                    code {\n                        {\n                            /// @src 81:697:4162  \"contract MinimalAccount is IAccount, Ownable {...\"\n                            let _1 := memoryguard(0xa0)\n                            if callvalue() { revert(0, 0) }\n                            let programSize := datasize(\"MinimalAccount_51163\")\n                            let argSize := sub(codesize(), programSize)\n                            let newFreePtr := add(_1, and(add(argSize, 31), not(31)))\n                            if or(gt(newFreePtr, sub(shl(64, 1), 1)), lt(newFreePtr, _1))\n                            {\n                                mstore(/** @src -1:-1:-1 */ 0, /** @src 81:697:4162  \"contract MinimalAccount is IAccount, Ownable {...\" */ shl(224, 0x4e487b71))\n                                mstore(4, 0x41)\n                                revert(/** @src -1:-1:-1 */ 0, /** @src 81:697:4162  \"contract MinimalAccount is IAccount, Ownable {...\" */ 0x24)\n                            }\n                            mstore(64, newFreePtr)\n                            codecopy(_1, programSize, argSize)\n                            if slt(sub(add(_1, argSize), _1), 32)\n                            {\n                                revert(/** @src -1:-1:-1 */ 0, 0)\n                            }\n                            /// @src 81:697:4162  \"contract MinimalAccount is IAccount, Ownable {...\"\n                            let value := mload(_1)\n                            let _2 := sub(shl(160, 1), 1)\n                            let _3 := and(value, _2)\n                            if iszero(eq(value, _3))\n                            {\n                                revert(/** @src -1:-1:-1 */ 0, 0)\n                            }\n                            /// @src 60:1269:1364  \"if (initialOwner == address(0)) {...\"\n                            if /** @src 60:1273:1299  \"initialOwner == address(0)\" */ iszero(/** @src 81:2100:2110  \"msg.sender\" */ caller())\n                            /// @src 60:1269:1364  \"if (initialOwner == address(0)) {...\"\n                            {\n                                /// @src 60:1322:1353  \"OwnableInvalidOwner(address(0))\"\n                                let _4 := /** @src 81:697:4162  \"contract MinimalAccount is IAccount, Ownable {...\" */ mload(64)\n                                /// @src 60:1322:1353  \"OwnableInvalidOwner(address(0))\"\n                                mstore(_4, shl(224, 0x1e4fbdf7))\n                                /// @src 81:697:4162  \"contract MinimalAccount is IAccount, Ownable {...\"\n                                mstore(/** @src 60:1322:1353  \"OwnableInvalidOwner(address(0))\" */ add(_4, 4), /** @src -1:-1:-1 */ 0)\n                                /// @src 60:1322:1353  \"OwnableInvalidOwner(address(0))\"\n                                revert(_4, /** @src 81:697:4162  \"contract MinimalAccount is IAccount, Ownable {...\" */ 36)\n                            }\n                            let _5 := sload(/** @src -1:-1:-1 */ 0)\n                            /// @src 81:697:4162  \"contract MinimalAccount is IAccount, Ownable {...\"\n                            sstore(/** @src -1:-1:-1 */ 0, /** @src 81:697:4162  \"contract MinimalAccount is IAccount, Ownable {...\" */ or(and(_5, not(sub(shl(160, 1), 1))), /** @src 81:2100:2110  \"msg.sender\" */ caller()))\n                            /// @src 60:3052:3092  \"OwnershipTransferred(oldOwner, newOwner)\"\n                            let _6 := /** @src 81:697:4162  \"contract MinimalAccount is IAccount, Ownable {...\" */ mload(64)\n                            /// @src 60:3052:3092  \"OwnershipTransferred(oldOwner, newOwner)\"\n                            log3(/** @src -1:-1:-1 */ 0, 0, /** @src 60:3052:3092  \"OwnershipTransferred(oldOwner, newOwner)\" */ 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0, /** @src 81:697:4162  \"contract MinimalAccount is IAccount, Ownable {...\" */ and(_5, _2), /** @src 81:2100:2110  \"msg.sender\" */ caller())\n                            /// @src 81:2122:2160  \"i_entryPoint = IEntryPoint(entryPoint)\"\n                            mstore(128, /** @src 81:697:4162  \"contract MinimalAccount is IAccount, Ownable {...\" */ _3)\n                            let _7 := datasize(\"MinimalAccount_51163_deployed\")\n                            codecopy(_6, dataoffset(\"MinimalAccount_51163_deployed\"), _7)\n                            setimmutable(_6, \"50967\", mload(/** @src 81:2122:2160  \"i_entryPoint = IEntryPoint(entryPoint)\" */ 128))\n                            /// @src 81:697:4162  \"contract MinimalAccount is IAccount, Ownable {...\"\n                            return(_6, _7)\n                        }\n                    }\n                    /// @use-src 1:\"lib/account-abstraction/contracts/core/Helpers.sol\", 60:\"lib/openzeppelin-contracts/contracts/access/Ownable.sol\", 69:\"lib/openzeppelin-contracts/contracts/utils/Context.sol\", 72:\"lib/openzeppelin-contracts/contracts/utils/cryptography/ECDSA.sol\", 73:\"lib/openzeppelin-contracts/contracts/utils/cryptography/MessageHashUtils.sol\", 81:\"src/ethereum/MinimalAccount.sol\"\n                    object \"MinimalAccount_51163_deployed\" {\n                        code {\n                            {\n                                /// @src 81:697:4162  \"contract MinimalAccount is IAccount, Ownable {...\"\n                                let _1 := memoryguard(0x80)\n                                let _2 := 64\n                                mstore(_2, _1)\n                                let _3 := 4\n                                if iszero(lt(calldatasize(), _3))\n                                {\n                                    let _4 := 0\n                                    switch shr(224, calldataload(_4))\n                                    case 0x19822f7c {\n                                        if callvalue() { revert(_4, _4) }\n                                        let _5 := not(3)\n                                        if slt(add(calldatasize(), _5), 96) { revert(_4, _4) }\n                                        let offset := calldataload(_3)\n                                        if gt(offset, 0xffffffffffffffff) { revert(_4, _4) }\n                                        if slt(add(sub(calldatasize(), offset), _5), 288) { revert(_4, _4) }\n                                        let value := calldataload(68)\n                                        /// @src 81:1538:1643  \"if (msg.sender != address(i_entryPoint)) {...\"\n                                        if /** @src 81:1542:1577  \"msg.sender != address(i_entryPoint)\" */ iszero(eq(/** @src 81:1542:1552  \"msg.sender\" */ caller(), /** @src 81:697:4162  \"contract MinimalAccount is IAccount, Ownable {...\" */ and(/** @src 81:1564:1576  \"i_entryPoint\" */ loadimmutable(\"50967\"), /** @src 81:697:4162  \"contract MinimalAccount is IAccount, Ownable {...\" */ sub(shl(160, 1), 1))))\n                                        /// @src 81:1538:1643  \"if (msg.sender != address(i_entryPoint)) {...\"\n                                        {\n                                            /// @src 81:1600:1632  \"MinimalAccount__OnlyEntryPoint()\"\n                                            mstore(_1, shl(225, 0x54068c25))\n                                            revert(_1, /** @src 81:697:4162  \"contract MinimalAccount is IAccount, Ownable {...\" */ _3)\n                                        }\n                                        /// @src 81:2440:2495  \"validationData = _validateSignature(userOp, userOpHash)\"\n                                        let var_validationData := /** @src 81:2457:2495  \"_validateSignature(userOp, userOpHash)\" */ fun_validateSignature(/** @src 81:697:4162  \"contract MinimalAccount is IAccount, Ownable {...\" */ add(_3, offset), calldataload(36))\n                                        /// @src 81:3682:3857  \"if (missingAccountFunds > 0) {...\"\n                                        if /** @src 81:3686:3709  \"missingAccountFunds > 0\" */ iszero(iszero(value))\n                                        /// @src 81:3682:3857  \"if (missingAccountFunds > 0) {...\"\n                                        {\n                                            /// @src 81:3743:3823  \"payable(msg.sender).call{value: missingAccountFunds, gas: type(uint256).max}(\\\"\\\")\"\n                                            pop(call(/** @src 81:3801:3818  \"type(uint256).max\" */ not(0), /** @src 81:1542:1552  \"msg.sender\" */ caller(), /** @src 81:3743:3823  \"payable(msg.sender).call{value: missingAccountFunds, gas: type(uint256).max}(\\\"\\\")\" */ value, /** @src 81:697:4162  \"contract MinimalAccount is IAccount, Ownable {...\" */ _4, _4, _4, _4))\n                                            /// @src 81:3743:3823  \"payable(msg.sender).call{value: missingAccountFunds, gas: type(uint256).max}(\\\"\\\")\"\n                                            pop(extract_returndata())\n                                        }\n                                        /// @src 81:697:4162  \"contract MinimalAccount is IAccount, Ownable {...\"\n                                        let memPos := mload(_2)\n                                        mstore(memPos, var_validationData)\n                                        return(memPos, 32)\n                                    }\n                                    case 0x44ab613f {\n                                        if callvalue() { revert(_4, _4) }\n                                        if slt(add(calldatasize(), not(3)), _4) { revert(_4, _4) }\n                                        let memPos_1 := mload(_2)\n                                        mstore(memPos_1, and(/** @src 81:4140:4152  \"i_entryPoint\" */ loadimmutable(\"50967\"), /** @src 81:697:4162  \"contract MinimalAccount is IAccount, Ownable {...\" */ sub(shl(160, 1), 1)))\n                                        return(memPos_1, 32)\n                                    }\n                                    case 0x715018a6 {\n                                        if callvalue() { revert(_4, _4) }\n                                        if slt(add(calldatasize(), not(3)), _4) { revert(_4, _4) }\n                                        /// @src 60:1500:1562  \"modifier onlyOwner() {...\"\n                                        fun_checkOwner()\n                                        /// @src 81:697:4162  \"contract MinimalAccount is IAccount, Ownable {...\"\n                                        let _6 := sload(_4)\n                                        sstore(_4, and(_6, shl(160, 0xffffffffffffffffffffffff)))\n                                        /// @src 60:3052:3092  \"OwnershipTransferred(oldOwner, newOwner)\"\n                                        log3(/** @src 81:697:4162  \"contract MinimalAccount is IAccount, Ownable {...\" */ _4, _4, /** @src 60:3052:3092  \"OwnershipTransferred(oldOwner, newOwner)\" */ 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0, /** @src 81:697:4162  \"contract MinimalAccount is IAccount, Ownable {...\" */ and(_6, sub(shl(160, 1), 1)), _4)\n                                        return(_4, _4)\n                                    }\n                                    case 0x8da5cb5b {\n                                        if callvalue() { revert(_4, _4) }\n                                        if slt(add(calldatasize(), not(3)), _4) { revert(_4, _4) }\n                                        let cleaned := and(sload(_4), sub(shl(160, 1), 1))\n                                        let memPos_2 := mload(_2)\n                                        mstore(memPos_2, cleaned)\n                                        return(memPos_2, 32)\n                                    }\n                                    case 0xb61d27f6 {\n                                        if callvalue() { revert(_4, _4) }\n                                        if slt(add(calldatasize(), not(3)), 96) { revert(_4, _4) }\n                                        let value0 := abi_decode_address()\n                                        let _7 := 68\n                                        let offset_1 := calldataload(68)\n                                        let _8 := 0xffffffffffffffff\n                                        if gt(offset_1, _8) { revert(_4, _4) }\n                                        if iszero(slt(add(offset_1, 35), calldatasize())) { revert(_4, _4) }\n                                        let length := calldataload(add(_3, offset_1))\n                                        if gt(length, _8) { revert(_4, _4) }\n                                        if gt(add(add(offset_1, length), 36), calldatasize()) { revert(_4, _4) }\n                                        let _9 := sub(shl(160, 1), 1)\n                                        /// @src 81:1713:1773  \"msg.sender != address(i_entryPoint) && msg.sender != owner()\"\n                                        let expr := /** @src 81:1713:1748  \"msg.sender != address(i_entryPoint)\" */ iszero(eq(/** @src 81:1713:1723  \"msg.sender\" */ caller(), /** @src 81:697:4162  \"contract MinimalAccount is IAccount, Ownable {...\" */ and(/** @src 81:1735:1747  \"i_entryPoint\" */ loadimmutable(\"50967\"), /** @src 81:697:4162  \"contract MinimalAccount is IAccount, Ownable {...\" */ _9)))\n                                        /// @src 81:1713:1773  \"msg.sender != address(i_entryPoint) && msg.sender != owner()\"\n                                        if expr\n                                        {\n                                            expr := /** @src 81:1752:1773  \"msg.sender != owner()\" */ iszero(eq(/** @src 81:1713:1723  \"msg.sender\" */ caller(), /** @src 81:697:4162  \"contract MinimalAccount is IAccount, Ownable {...\" */ and(sload(_4), _9)))\n                                        }\n                                        /// @src 81:1709:1846  \"if (msg.sender != address(i_entryPoint) && msg.sender != owner()) {...\"\n                                        if expr\n                                        {\n                                            /// @src 81:1796:1835  \"MinimalAccount__OnlyEntryPointOrOwner()\"\n                                            let _10 := /** @src 81:697:4162  \"contract MinimalAccount is IAccount, Ownable {...\" */ mload(_2)\n                                            /// @src 81:1796:1835  \"MinimalAccount__OnlyEntryPointOrOwner()\"\n                                            mstore(_10, shl(225, 0x54b4aab7))\n                                            revert(_10, /** @src 81:697:4162  \"contract MinimalAccount is IAccount, Ownable {...\" */ _3)\n                                        }\n                                        /// @src 81:2736:2773  \"dest.call{value: value}(functionData)\"\n                                        let _11 := /** @src 81:697:4162  \"contract MinimalAccount is IAccount, Ownable {...\" */ mload(_2)\n                                        calldatacopy(_11, add(offset_1, 36), length)\n                                        let _12 := add(_11, length)\n                                        mstore(_12, _4)\n                                        /// @src 81:2736:2773  \"dest.call{value: value}(functionData)\"\n                                        let expr_component := call(gas(), value0, /** @src 81:697:4162  \"contract MinimalAccount is IAccount, Ownable {...\" */ calldataload(36), /** @src 81:2736:2773  \"dest.call{value: value}(functionData)\" */ _11, sub(/** @src 81:697:4162  \"contract MinimalAccount is IAccount, Ownable {...\" */ _12, /** @src 81:2736:2773  \"dest.call{value: value}(functionData)\" */ _11), /** @src 81:697:4162  \"contract MinimalAccount is IAccount, Ownable {...\" */ _4, _4)\n                                        /// @src 81:2736:2773  \"dest.call{value: value}(functionData)\"\n                                        let expr_component_mpos := extract_returndata()\n                                        /// @src 81:2783:2863  \"if (!success) {...\"\n                                        if /** @src 81:2787:2795  \"!success\" */ iszero(expr_component)\n                                        /// @src 81:2783:2863  \"if (!success) {...\"\n                                        {\n                                            /// @src 81:2818:2852  \"MinimalAccount__CallFailed(result)\"\n                                            let _13 := /** @src 81:697:4162  \"contract MinimalAccount is IAccount, Ownable {...\" */ mload(_2)\n                                            /// @src 81:2818:2852  \"MinimalAccount__CallFailed(result)\"\n                                            mstore(_13, shl(228, 0x038fe215))\n                                            /// @src 81:697:4162  \"contract MinimalAccount is IAccount, Ownable {...\"\n                                            let _14 := 32\n                                            mstore(/** @src 81:2818:2852  \"MinimalAccount__CallFailed(result)\" */ add(_13, /** @src 81:697:4162  \"contract MinimalAccount is IAccount, Ownable {...\" */ _3), 32)\n                                            let length_1 := mload(expr_component_mpos)\n                                            mstore(add(/** @src 81:2818:2852  \"MinimalAccount__CallFailed(result)\" */ _13, /** @src 81:697:4162  \"contract MinimalAccount is IAccount, Ownable {...\" */ 36), length_1)\n                                            let i := _4\n                                            for { } lt(i, length_1) { i := add(i, _14) }\n                                            {\n                                                mstore(add(add(/** @src 81:2818:2852  \"MinimalAccount__CallFailed(result)\" */ _13, /** @src 81:697:4162  \"contract MinimalAccount is IAccount, Ownable {...\" */ i), _7), mload(add(add(expr_component_mpos, i), _14)))\n                                            }\n                                            mstore(add(add(/** @src 81:2818:2852  \"MinimalAccount__CallFailed(result)\" */ _13, /** @src 81:697:4162  \"contract MinimalAccount is IAccount, Ownable {...\" */ length_1), 68), _4)\n                                            /// @src 81:2818:2852  \"MinimalAccount__CallFailed(result)\"\n                                            revert(_13, add(sub(/** @src 81:697:4162  \"contract MinimalAccount is IAccount, Ownable {...\" */ add(/** @src 81:2818:2852  \"MinimalAccount__CallFailed(result)\" */ _13, /** @src 81:697:4162  \"contract MinimalAccount is IAccount, Ownable {...\" */ and(add(length_1, 0x1f), not(31))), /** @src 81:2818:2852  \"MinimalAccount__CallFailed(result)\" */ _13), /** @src 81:697:4162  \"contract MinimalAccount is IAccount, Ownable {...\" */ 68))\n                                        }\n                                        return(_4, _4)\n                                    }\n                                    case 0xf2fde38b {\n                                        if callvalue() { revert(_4, _4) }\n                                        if slt(add(calldatasize(), not(3)), 32) { revert(_4, _4) }\n                                        let value0_1 := abi_decode_address()\n                                        /// @src 60:1500:1562  \"modifier onlyOwner() {...\"\n                                        fun_checkOwner()\n                                        /// @src 81:697:4162  \"contract MinimalAccount is IAccount, Ownable {...\"\n                                        let _15 := sub(shl(160, 1), 1)\n                                        let _16 := and(/** @src 60:2627:2649  \"newOwner == address(0)\" */ value0_1, /** @src 81:697:4162  \"contract MinimalAccount is IAccount, Ownable {...\" */ _15)\n                                        /// @src 60:2623:2714  \"if (newOwner == address(0)) {...\"\n                                        if /** @src 60:2627:2649  \"newOwner == address(0)\" */ iszero(/** @src 81:697:4162  \"contract MinimalAccount is IAccount, Ownable {...\" */ _16)\n                                        /// @src 60:2623:2714  \"if (newOwner == address(0)) {...\"\n                                        {\n                                            /// @src 60:2672:2703  \"OwnableInvalidOwner(address(0))\"\n                                            let _17 := /** @src 81:697:4162  \"contract MinimalAccount is IAccount, Ownable {...\" */ mload(_2)\n                                            /// @src 60:2672:2703  \"OwnableInvalidOwner(address(0))\"\n                                            mstore(_17, shl(224, 0x1e4fbdf7))\n                                            /// @src 81:697:4162  \"contract MinimalAccount is IAccount, Ownable {...\"\n                                            mstore(/** @src 60:2672:2703  \"OwnableInvalidOwner(address(0))\" */ add(_17, /** @src 81:697:4162  \"contract MinimalAccount is IAccount, Ownable {...\" */ _3), _4)\n                                            /// @src 60:2672:2703  \"OwnableInvalidOwner(address(0))\"\n                                            revert(_17, /** @src 81:697:4162  \"contract MinimalAccount is IAccount, Ownable {...\" */ 36)\n                                        }\n                                        let _18 := sload(_4)\n                                        sstore(_4, or(and(_18, shl(160, 0xffffffffffffffffffffffff)), _16))\n                                        /// @src 60:3052:3092  \"OwnershipTransferred(oldOwner, newOwner)\"\n                                        log3(/** @src 81:697:4162  \"contract MinimalAccount is IAccount, Ownable {...\" */ _4, _4, /** @src 60:3052:3092  \"OwnershipTransferred(oldOwner, newOwner)\" */ 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0, /** @src 81:697:4162  \"contract MinimalAccount is IAccount, Ownable {...\" */ and(_18, _15), /** @src 60:3052:3092  \"OwnershipTransferred(oldOwner, newOwner)\" */ _16)\n                                        /// @src 81:697:4162  \"contract MinimalAccount is IAccount, Ownable {...\"\n                                        return(_4, _4)\n                                    }\n                                }\n                                if iszero(calldatasize()) { stop() }\n                                revert(0, 0)\n                            }\n                            function abi_decode_address() -> value\n                            {\n                                value := calldataload(4)\n                                if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(0, 0) }\n                            }\n                            function allocate_memory(size) -> memPtr\n                            {\n                                memPtr := mload(64)\n                                let newFreePtr := add(memPtr, and(add(size, 31), not(31)))\n                                if or(gt(newFreePtr, 0xffffffffffffffff), lt(newFreePtr, memPtr))\n                                {\n                                    mstore(0, shl(224, 0x4e487b71))\n                                    mstore(4, 0x41)\n                                    revert(0, 0x24)\n                                }\n                                mstore(64, newFreePtr)\n                            }\n                            function array_allocation_size_bytes(length) -> size\n                            {\n                                if gt(length, 0xffffffffffffffff)\n                                {\n                                    mstore(0, shl(224, 0x4e487b71))\n                                    mstore(4, 0x41)\n                                    revert(0, 0x24)\n                                }\n                                size := add(and(add(length, 31), not(31)), 0x20)\n                            }\n                            function extract_returndata() -> data\n                            {\n                                switch returndatasize()\n                                case 0 { data := 96 }\n                                default {\n                                    let _1 := returndatasize()\n                                    let memPtr := allocate_memory(array_allocation_size_bytes(_1))\n                                    mstore(memPtr, _1)\n                                    data := memPtr\n                                    returndatacopy(add(memPtr, 0x20), /** @src -1:-1:-1 */ 0, /** @src 81:697:4162  \"contract MinimalAccount is IAccount, Ownable {...\" */ returndatasize())\n                                }\n                            }\n                            /// @ast-id 51119 @src 81:3144:3607  \"function _validateSignature(PackedUserOperation calldata userOp, bytes32 userOpHash)...\"\n                            function fun_validateSignature(var_userOp_offset, var_userOpHash) -> var_validationData\n                            {\n                                /// @src -1:-1:-1\n                                let _1 := 0\n                                /// @src 73:1367:1676  \"assembly {...\"\n                                mstore(/** @src -1:-1:-1 */ _1, /** @src 73:1367:1676  \"assembly {...\" */ \"\\x19Ethereum Signed Message:\\n32\")\n                                mstore(0x1c, var_userOpHash)\n                                let var_digest := keccak256(/** @src -1:-1:-1 */ _1, /** @src 73:1367:1676  \"assembly {...\" */ 0x3c)\n                                /// @src 81:697:4162  \"contract MinimalAccount is IAccount, Ownable {...\"\n                                let rel_offset_of_tail := calldataload(/** @src 81:3459:3475  \"userOp.signature\" */ add(var_userOp_offset, 256))\n                                /// @src 81:697:4162  \"contract MinimalAccount is IAccount, Ownable {...\"\n                                if iszero(slt(rel_offset_of_tail, add(sub(calldatasize(), var_userOp_offset), not(30))))\n                                {\n                                    revert(/** @src -1:-1:-1 */ _1, _1)\n                                }\n                                /// @src 81:697:4162  \"contract MinimalAccount is IAccount, Ownable {...\"\n                                let addr := add(var_userOp_offset, rel_offset_of_tail)\n                                let length := calldataload(addr)\n                                if gt(length, 0xffffffffffffffff)\n                                {\n                                    revert(/** @src -1:-1:-1 */ _1, _1)\n                                }\n                                /// @src 81:697:4162  \"contract MinimalAccount is IAccount, Ownable {...\"\n                                let addr_1 := add(addr, 0x20)\n                                if sgt(addr_1, sub(calldatasize(), length))\n                                {\n                                    revert(/** @src -1:-1:-1 */ _1, _1)\n                                }\n                                /// @src 81:697:4162  \"contract MinimalAccount is IAccount, Ownable {...\"\n                                let array := allocate_memory(array_allocation_size_bytes(length))\n                                mstore(array, length)\n                                if gt(add(add(addr, length), 0x20), calldatasize())\n                                {\n                                    revert(/** @src -1:-1:-1 */ _1, _1)\n                                }\n                                /// @src 81:697:4162  \"contract MinimalAccount is IAccount, Ownable {...\"\n                                calldatacopy(add(array, 0x20), addr_1, length)\n                                mstore(add(add(array, length), 0x20), /** @src -1:-1:-1 */ _1)\n                                /// @src 72:3859:3886  \"tryRecover(hash, signature)\"\n                                let expr_component, expr_component_1, expr_component_2 := fun_tryRecover_48818(var_digest, array)\n                                /// @src 72:3915:3923  \"errorArg\"\n                                fun_throwError(expr_component_1, expr_component_2)\n                                /// @src 81:697:4162  \"contract MinimalAccount is IAccount, Ownable {...\"\n                                let _2 := sub(shl(160, 1), 1)\n                                /// @src 81:3486:3562  \"if (signer != owner()) {...\"\n                                if /** @src 81:3490:3507  \"signer != owner()\" */ iszero(eq(/** @src 81:697:4162  \"contract MinimalAccount is IAccount, Ownable {...\" */ and(/** @src 81:3490:3507  \"signer != owner()\" */ expr_component, /** @src 81:697:4162  \"contract MinimalAccount is IAccount, Ownable {...\" */ _2), and(sload(/** @src -1:-1:-1 */ _1), /** @src 81:697:4162  \"contract MinimalAccount is IAccount, Ownable {...\" */ _2)))\n                                /// @src 81:3486:3562  \"if (signer != owner()) {...\"\n                                {\n                                    /// @src 81:3523:3551  \"return SIG_VALIDATION_FAILED\"\n                                    var_validationData := /** @src 1:305:306  \"1\" */ 0x01\n                                    /// @src 81:3523:3551  \"return SIG_VALIDATION_FAILED\"\n                                    leave\n                                }\n                                /// @src 81:3571:3600  \"return SIG_VALIDATION_SUCCESS\"\n                                var_validationData := /** @src -1:-1:-1 */ _1\n                            }\n                            /// @ast-id 46951 @src 60:1796:1958  \"function _checkOwner() internal view virtual {...\"\n                            function fun_checkOwner()\n                            {\n                                /// @src 81:697:4162  \"contract MinimalAccount is IAccount, Ownable {...\"\n                                let cleaned := and(sload(/** @src 60:1710:1716  \"_owner\" */ 0x00), /** @src 81:697:4162  \"contract MinimalAccount is IAccount, Ownable {...\" */ sub(shl(160, 1), 1))\n                                /// @src 60:1851:1952  \"if (owner() != _msgSender()) {...\"\n                                if /** @src 60:1855:1878  \"owner() != _msgSender()\" */ iszero(eq(/** @src 81:697:4162  \"contract MinimalAccount is IAccount, Ownable {...\" */ cleaned, /** @src 69:735:745  \"msg.sender\" */ caller()))\n                                /// @src 60:1851:1952  \"if (owner() != _msgSender()) {...\"\n                                {\n                                    /// @src 60:1901:1941  \"OwnableUnauthorizedAccount(_msgSender())\"\n                                    let _1 := /** @src 81:697:4162  \"contract MinimalAccount is IAccount, Ownable {...\" */ mload(64)\n                                    /// @src 60:1901:1941  \"OwnableUnauthorizedAccount(_msgSender())\"\n                                    mstore(_1, shl(224, 0x118cdaa7))\n                                    /// @src 81:697:4162  \"contract MinimalAccount is IAccount, Ownable {...\"\n                                    mstore(/** @src 60:1901:1941  \"OwnableUnauthorizedAccount(_msgSender())\" */ add(_1, 4), /** @src 69:735:745  \"msg.sender\" */ caller())\n                                    /// @src 60:1901:1941  \"OwnableUnauthorizedAccount(_msgSender())\"\n                                    revert(_1, /** @src 81:697:4162  \"contract MinimalAccount is IAccount, Ownable {...\" */ 36)\n                                }\n                            }\n                            /// @ast-id 48818 @src 72:2129:2895  \"function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError, bytes32) {...\"\n                            function fun_tryRecover_48818(var_hash, var_signature_mpos) -> var, var_, var_1\n                            {\n                                /// @src 72:2256:2272  \"signature.length\"\n                                let expr := /** @src 81:697:4162  \"contract MinimalAccount is IAccount, Ownable {...\" */ mload(/** @src 72:2256:2272  \"signature.length\" */ var_signature_mpos)\n                                /// @src 72:2252:2889  \"if (signature.length == 65) {...\"\n                                switch /** @src 72:2256:2278  \"signature.length == 65\" */ eq(expr, /** @src 72:2276:2278  \"65\" */ 0x41)\n                                case /** @src 72:2252:2889  \"if (signature.length == 65) {...\" */ 0 {\n                                    /// @src 72:2795:2878  \"return (address(0), RecoverError.InvalidSignatureLength, bytes32(signature.length))\"\n                                    var := /** @src 72:2811:2812  \"0\" */ 0x00\n                                    /// @src 72:2795:2878  \"return (address(0), RecoverError.InvalidSignatureLength, bytes32(signature.length))\"\n                                    var_ := /** @src 72:2815:2850  \"RecoverError.InvalidSignatureLength\" */ 2\n                                    /// @src 72:2795:2878  \"return (address(0), RecoverError.InvalidSignatureLength, bytes32(signature.length))\"\n                                    var_1 := expr\n                                    leave\n                                }\n                                default /// @src 72:2252:2889  \"if (signature.length == 65) {...\"\n                                {\n                                    /// @src 72:2539:2719  \"assembly {...\"\n                                    let var_r := mload(add(var_signature_mpos, 0x20))\n                                    /// @src 72:2739:2764  \"tryRecover(hash, v, r, s)\"\n                                    let expr_48799_component, expr_component, expr_component_1 := fun_tryRecover(var_hash, /** @src 72:2539:2719  \"assembly {...\" */ byte(/** @src -1:-1:-1 */ 0, /** @src 72:2539:2719  \"assembly {...\" */ mload(add(var_signature_mpos, 0x60))), /** @src 72:2739:2764  \"tryRecover(hash, v, r, s)\" */ var_r, /** @src 72:2539:2719  \"assembly {...\" */ mload(add(var_signature_mpos, 0x40)))\n                                    /// @src 72:2732:2764  \"return tryRecover(hash, v, r, s)\"\n                                    var := expr_48799_component\n                                    var_ := expr_component\n                                    var_1 := expr_component_1\n                                    leave\n                                }\n                            }\n                            /// @ast-id 49091 @src 72:7196:7728  \"function _throwError(RecoverError error, bytes32 errorArg) private pure {...\"\n                            function fun_throwError(var_error, var_errorArg)\n                            {\n                                /// @src 81:697:4162  \"contract MinimalAccount is IAccount, Ownable {...\"\n                                if iszero(lt(var_error, 4))\n                                {\n                                    mstore(/** @src 72:7291:7311  \"RecoverError.NoError\" */ 0, /** @src 81:697:4162  \"contract MinimalAccount is IAccount, Ownable {...\" */ shl(224, 0x4e487b71))\n                                    mstore(4, 0x21)\n                                    revert(/** @src 72:7291:7311  \"RecoverError.NoError\" */ 0, /** @src 81:697:4162  \"contract MinimalAccount is IAccount, Ownable {...\" */ 0x24)\n                                }\n                                /// @src 72:7278:7722  \"if (error == RecoverError.NoError) {...\"\n                                switch /** @src 72:7282:7311  \"error == RecoverError.NoError\" */ iszero(var_error)\n                                case /** @src 72:7278:7722  \"if (error == RecoverError.NoError) {...\" */ 0 {\n                                    /// @src 72:7374:7722  \"if (error == RecoverError.InvalidSignature) {...\"\n                                    switch /** @src 72:7378:7416  \"error == RecoverError.InvalidSignature\" */ eq(var_error, /** @src 81:697:4162  \"contract MinimalAccount is IAccount, Ownable {...\" */ 1)\n                                    case /** @src 72:7374:7722  \"if (error == RecoverError.InvalidSignature) {...\" */ 0 {\n                                        /// @src 72:7479:7722  \"if (error == RecoverError.InvalidSignatureLength) {...\"\n                                        switch /** @src 72:7483:7527  \"error == RecoverError.InvalidSignatureLength\" */ eq(var_error, /** @src 72:7492:7527  \"RecoverError.InvalidSignatureLength\" */ 2)\n                                        case /** @src 72:7479:7722  \"if (error == RecoverError.InvalidSignatureLength) {...\" */ 0 {\n                                            /// @src 72:7613:7722  \"if (error == RecoverError.InvalidSignatureS) {...\"\n                                            if /** @src 72:7617:7656  \"error == RecoverError.InvalidSignatureS\" */ eq(var_error, /** @src 72:7626:7656  \"RecoverError.InvalidSignatureS\" */ 3)\n                                            /// @src 72:7613:7722  \"if (error == RecoverError.InvalidSignatureS) {...\"\n                                            {\n                                                /// @src 72:7679:7711  \"ECDSAInvalidSignatureS(errorArg)\"\n                                                let _1 := /** @src 81:697:4162  \"contract MinimalAccount is IAccount, Ownable {...\" */ mload(64)\n                                                /// @src 72:7679:7711  \"ECDSAInvalidSignatureS(errorArg)\"\n                                                mstore(_1, shl(226, 0x35e2f383))\n                                                /// @src 81:697:4162  \"contract MinimalAccount is IAccount, Ownable {...\"\n                                                mstore(/** @src 72:7679:7711  \"ECDSAInvalidSignatureS(errorArg)\" */ add(_1, /** @src 81:697:4162  \"contract MinimalAccount is IAccount, Ownable {...\" */ 4), var_errorArg)\n                                                /// @src 72:7679:7711  \"ECDSAInvalidSignatureS(errorArg)\"\n                                                revert(_1, /** @src 81:697:4162  \"contract MinimalAccount is IAccount, Ownable {...\" */ 36)\n                                            }\n                                        }\n                                        default /// @src 72:7479:7722  \"if (error == RecoverError.InvalidSignatureLength) {...\"\n                                        {\n                                            /// @src 72:7550:7596  \"ECDSAInvalidSignatureLength(uint256(errorArg))\"\n                                            let _2 := /** @src 81:697:4162  \"contract MinimalAccount is IAccount, Ownable {...\" */ mload(64)\n                                            /// @src 72:7550:7596  \"ECDSAInvalidSignatureLength(uint256(errorArg))\"\n                                            mstore(_2, shl(224, 0xfce698f7))\n                                            /// @src 81:697:4162  \"contract MinimalAccount is IAccount, Ownable {...\"\n                                            mstore(/** @src 72:7550:7596  \"ECDSAInvalidSignatureLength(uint256(errorArg))\" */ add(_2, /** @src 81:697:4162  \"contract MinimalAccount is IAccount, Ownable {...\" */ 4), var_errorArg)\n                                            /// @src 72:7550:7596  \"ECDSAInvalidSignatureLength(uint256(errorArg))\"\n                                            revert(_2, /** @src 81:697:4162  \"contract MinimalAccount is IAccount, Ownable {...\" */ 36)\n                                        }\n                                    }\n                                    default /// @src 72:7374:7722  \"if (error == RecoverError.InvalidSignature) {...\"\n                                    {\n                                        /// @src 72:7439:7462  \"ECDSAInvalidSignature()\"\n                                        let _3 := /** @src 81:697:4162  \"contract MinimalAccount is IAccount, Ownable {...\" */ mload(64)\n                                        /// @src 72:7439:7462  \"ECDSAInvalidSignature()\"\n                                        mstore(_3, shl(224, 0xf645eedf))\n                                        revert(_3, /** @src 81:697:4162  \"contract MinimalAccount is IAccount, Ownable {...\" */ 4)\n                                    }\n                                }\n                                default /// @src 72:7278:7722  \"if (error == RecoverError.NoError) {...\"\n                                {\n                                    /// @src 72:7327:7334  \"return;\"\n                                    leave\n                                }\n                            }\n                            /// @ast-id 49006 @src 72:5140:6670  \"function tryRecover(...\"\n                            function fun_tryRecover(var_hash, var_v, var_r, var_s) -> var, var_1, var_2\n                            {\n                                /// @src 72:6182:6346  \"if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {...\"\n                                if /** @src 72:6186:6265  \"uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0\" */ gt(var_s, /** @src 72:6199:6265  \"0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0\" */ 0x7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0)\n                                /// @src 72:6182:6346  \"if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {...\"\n                                {\n                                    /// @src 72:6281:6335  \"return (address(0), RecoverError.InvalidSignatureS, s)\"\n                                    var := /** @src 72:6297:6298  \"0\" */ 0x00\n                                    /// @src 72:6281:6335  \"return (address(0), RecoverError.InvalidSignatureS, s)\"\n                                    var_1 := /** @src 72:6301:6331  \"RecoverError.InvalidSignatureS\" */ 3\n                                    /// @src 72:6281:6335  \"return (address(0), RecoverError.InvalidSignatureS, s)\"\n                                    var_2 := var_s\n                                    leave\n                                }\n                                /// @src 72:6457:6481  \"ecrecover(hash, v, r, s)\"\n                                let _1 := /** @src 81:697:4162  \"contract MinimalAccount is IAccount, Ownable {...\" */ mload(64)\n                                mstore(_1, var_hash)\n                                mstore(add(_1, 32), and(var_v, 0xff))\n                                mstore(add(_1, 64), var_r)\n                                mstore(add(_1, 96), var_s)\n                                /// @src -1:-1:-1\n                                let _2 := 0\n                                /// @src 72:6457:6481  \"ecrecover(hash, v, r, s)\"\n                                mstore(/** @src -1:-1:-1 */ _2, _2)\n                                /// @src 72:6457:6481  \"ecrecover(hash, v, r, s)\"\n                                if iszero(staticcall(gas(), 1, _1, /** @src 81:697:4162  \"contract MinimalAccount is IAccount, Ownable {...\" */ 128, /** @src -1:-1:-1 */ _2, /** @src 81:697:4162  \"contract MinimalAccount is IAccount, Ownable {...\" */ 32))\n                                /// @src 72:6457:6481  \"ecrecover(hash, v, r, s)\"\n                                {\n                                    /// @src 81:697:4162  \"contract MinimalAccount is IAccount, Ownable {...\"\n                                    let pos := mload(64)\n                                    returndatacopy(pos, /** @src -1:-1:-1 */ _2, /** @src 81:697:4162  \"contract MinimalAccount is IAccount, Ownable {...\" */ returndatasize())\n                                    revert(pos, returndatasize())\n                                }\n                                /// @src 72:6457:6481  \"ecrecover(hash, v, r, s)\"\n                                let _3 := mload(/** @src -1:-1:-1 */ _2)\n                                /// @src 72:6491:6604  \"if (signer == address(0)) {...\"\n                                if /** @src 72:6495:6515  \"signer == address(0)\" */ iszero(/** @src 81:697:4162  \"contract MinimalAccount is IAccount, Ownable {...\" */ and(/** @src 72:6495:6515  \"signer == address(0)\" */ _3, /** @src 81:697:4162  \"contract MinimalAccount is IAccount, Ownable {...\" */ sub(shl(160, 1), 1)))\n                                /// @src 72:6491:6604  \"if (signer == address(0)) {...\"\n                                {\n                                    /// @src 72:6531:6593  \"return (address(0), RecoverError.InvalidSignature, bytes32(0))\"\n                                    var := /** @src -1:-1:-1 */ _2\n                                    /// @src 72:6531:6593  \"return (address(0), RecoverError.InvalidSignature, bytes32(0))\"\n                                    var_1 := /** @src 72:6457:6481  \"ecrecover(hash, v, r, s)\" */ 1\n                                    /// @src 72:6531:6593  \"return (address(0), RecoverError.InvalidSignature, bytes32(0))\"\n                                    var_2 := /** @src -1:-1:-1 */ _2\n                                    /// @src 72:6531:6593  \"return (address(0), RecoverError.InvalidSignature, bytes32(0))\"\n                                    leave\n                                }\n                                /// @src 72:6614:6663  \"return (signer, RecoverError.NoError, bytes32(0))\"\n                                var := _3\n                                var_1 := /** @src -1:-1:-1 */ _2\n                                /// @src 72:6614:6663  \"return (signer, RecoverError.NoError, bytes32(0))\"\n                                var_2 := /** @src -1:-1:-1 */ _2\n                            }\n                        }\n                        data \".metadata\" hex\"a164736f6c6343000818000a\"\n                    }\n                }\n                data \".metadata\" hex\"a164736f6c6343000818000a\"\n            }\n        }\n        /// @use-src 15:\"lib/forge-std/src/Base.sol\", 16:\"lib/forge-std/src/Script.sol\", 18:\"lib/forge-std/src/StdChains.sol\", 19:\"lib/forge-std/src/StdCheats.sol\", 27:\"lib/forge-std/src/StdUtils.sol\", 80:\"script/SendPackedUserOp.s.sol\"\n        object \"SendPackedUserOp_50935\" {\n            code {\n                {\n                    /// @src 80:575:3616  \"contract SendPackedUserOp is Script {...\"\n                    let _1 := memoryguard(0x80)\n                    mstore(64, _1)\n                    if callvalue() { revert(0, 0) }\n                    sstore(/** @src 18:3166:3170  \"true\" */ 0x0c, /** @src 80:575:3616  \"contract SendPackedUserOp is Script {...\" */ or(and(sload(/** @src 18:3166:3170  \"true\" */ 0x0c), /** @src 80:575:3616  \"contract SendPackedUserOp is Script {...\" */ not(16711935)), 65537))\n                    let _2 := datasize(\"SendPackedUserOp_50935_deployed\")\n                    codecopy(_1, dataoffset(\"SendPackedUserOp_50935_deployed\"), _2)\n                    return(_1, _2)\n                }\n            }\n            /// @use-src 15:\"lib/forge-std/src/Base.sol\", 16:\"lib/forge-std/src/Script.sol\", 73:\"lib/openzeppelin-contracts/contracts/utils/cryptography/MessageHashUtils.sol\", 80:\"script/SendPackedUserOp.s.sol\"\n            object \"SendPackedUserOp_50935_deployed\" {\n                code {\n                    {\n                        /// @src 80:575:3616  \"contract SendPackedUserOp is Script {...\"\n                        let _1 := memoryguard(0x80)\n                        let _2 := 64\n                        mstore(_2, _1)\n                        let _3 := 4\n                        if iszero(lt(calldatasize(), _3))\n                        {\n                            let _4 := 0\n                            switch shr(224, calldataload(_4))\n                            case 0xb337f547 {\n                                if callvalue() { revert(_4, _4) }\n                                if slt(add(calldatasize(), not(3)), 128) { revert(_4, _4) }\n                                let offset := calldataload(_3)\n                                let _5 := 0xffffffffffffffff\n                                if gt(offset, _5) { revert(_4, _4) }\n                                if iszero(slt(add(offset, 35), calldatasize())) { revert(_4, _4) }\n                                let _6 := calldataload(add(_3, offset))\n                                if gt(_6, _5)\n                                {\n                                    mstore(_4, shl(224, 0x4e487b71))\n                                    mstore(_3, 0x41)\n                                    revert(_4, 36)\n                                }\n                                let _7 := 0x20\n                                finalize_allocation(_1, add(and(add(_6, 31), not(31)), _7))\n                                mstore(_1, _6)\n                                if gt(add(add(offset, _6), 36), calldatasize()) { revert(_4, _4) }\n                                calldatacopy(add(_1, _7), add(offset, 36), _6)\n                                mstore(add(add(_1, _6), _7), _4)\n                                if slt(add(calldatasize(), not(35)), _2) { revert(_4, _4) }\n                                let memPtr := mload(_2)\n                                finalize_allocation_5090(memPtr)\n                                let value := calldataload(36)\n                                let _8 := sub(shl(160, 1), 1)\n                                if iszero(eq(value, and(value, _8))) { revert(_4, _4) }\n                                mstore(memPtr, value)\n                                let value_1 := calldataload(68)\n                                if iszero(eq(value_1, and(value_1, _8))) { revert(_4, _4) }\n                                mstore(add(memPtr, _7), value_1)\n                                let value_2 := calldataload(100)\n                                if iszero(eq(value_2, and(value_2, _8))) { revert(_4, _4) }\n                                let ret := fun_generatePackedUserOp(_1, memPtr, value_2)\n                                let memPos := mload(_2)\n                                mstore(memPos, _7)\n                                return(memPos, sub(abi_encode_struct_PackedUserOperation(ret, add(memPos, _7)), memPos))\n                            }\n                            case 0xc0406226 {\n                                if callvalue() { revert(_4, _4) }\n                                if slt(add(calldatasize(), not(3)), _4) { revert(_4, _4) }\n                                /// @src 80:677:695  \"new HelperConfig()\"\n                                let _9 := /** @src 80:575:3616  \"contract SendPackedUserOp is Script {...\" */ mload(_2)\n                                /// @src 80:677:695  \"new HelperConfig()\"\n                                let _10 := datasize(\"HelperConfig_50629\")\n                                let _11 := add(_9, _10)\n                                let _12 := 0xffffffffffffffff\n                                if or(gt(_11, _12), lt(_11, _9))\n                                {\n                                    /// @src 80:575:3616  \"contract SendPackedUserOp is Script {...\"\n                                    mstore(_4, shl(224, 0x4e487b71))\n                                    mstore(_3, 0x41)\n                                    revert(_4, 0x24)\n                                }\n                                /// @src 80:677:695  \"new HelperConfig()\"\n                                datacopy(_9, dataoffset(\"HelperConfig_50629\"), _10)\n                                let expr_address := create(/** @src 80:575:3616  \"contract SendPackedUserOp is Script {...\" */ _4, /** @src 80:677:695  \"new HelperConfig()\" */ _9, sub(_11, _9))\n                                if iszero(expr_address)\n                                {\n                                    /// @src 15:1590:1604  \"Vm(VM_ADDRESS)\"\n                                    let pos := /** @src 80:575:3616  \"contract SendPackedUserOp is Script {...\" */ mload(_2)\n                                    /// @src 15:1590:1604  \"Vm(VM_ADDRESS)\"\n                                    returndatacopy(pos, /** @src 80:575:3616  \"contract SendPackedUserOp is Script {...\" */ _4, /** @src 15:1590:1604  \"Vm(VM_ADDRESS)\" */ returndatasize())\n                                    revert(pos, returndatasize())\n                                }\n                                /// @src 80:575:3616  \"contract SendPackedUserOp is Script {...\"\n                                let _13 := sub(shl(160, 1), 1)\n                                let _14 := and(/** @src 80:756:778  \"helperConfig.getConfig\" */ expr_address, /** @src 80:575:3616  \"contract SendPackedUserOp is Script {...\" */ _13)\n                                /// @src 80:756:780  \"helperConfig.getConfig()\"\n                                let _15 := /** @src 80:575:3616  \"contract SendPackedUserOp is Script {...\" */ mload(_2)\n                                /// @src 15:1590:1604  \"Vm(VM_ADDRESS)\"\n                                let _16 := shl(226, 0x30fe4275)\n                                /// @src 80:756:780  \"helperConfig.getConfig()\"\n                                mstore(_15, /** @src 15:1590:1604  \"Vm(VM_ADDRESS)\" */ _16)\n                                /// @src 80:756:780  \"helperConfig.getConfig()\"\n                                let _17 := call(gas(), _14, /** @src 80:575:3616  \"contract SendPackedUserOp is Script {...\" */ _4, /** @src 80:756:780  \"helperConfig.getConfig()\" */ _15, /** @src 80:575:3616  \"contract SendPackedUserOp is Script {...\" */ _3, /** @src 80:756:780  \"helperConfig.getConfig()\" */ _15, /** @src 80:575:3616  \"contract SendPackedUserOp is Script {...\" */ _2)\n                                /// @src 80:756:780  \"helperConfig.getConfig()\"\n                                if iszero(_17)\n                                {\n                                    /// @src 15:1590:1604  \"Vm(VM_ADDRESS)\"\n                                    let pos_1 := /** @src 80:575:3616  \"contract SendPackedUserOp is Script {...\" */ mload(_2)\n                                    /// @src 15:1590:1604  \"Vm(VM_ADDRESS)\"\n                                    returndatacopy(pos_1, /** @src 80:575:3616  \"contract SendPackedUserOp is Script {...\" */ _4, /** @src 15:1590:1604  \"Vm(VM_ADDRESS)\" */ returndatasize())\n                                    revert(pos_1, returndatasize())\n                                }\n                                /// @src 80:756:780  \"helperConfig.getConfig()\"\n                                let expr_mpos := /** @src 80:575:3616  \"contract SendPackedUserOp is Script {...\" */ _4\n                                /// @src 80:756:780  \"helperConfig.getConfig()\"\n                                if _17\n                                {\n                                    let _18 := /** @src 80:575:3616  \"contract SendPackedUserOp is Script {...\" */ _2\n                                    /// @src 80:756:780  \"helperConfig.getConfig()\"\n                                    if gt(/** @src 80:575:3616  \"contract SendPackedUserOp is Script {...\" */ _2, /** @src 80:756:780  \"helperConfig.getConfig()\" */ returndatasize()) { _18 := returndatasize() }\n                                    finalize_allocation(_15, _18)\n                                    expr_mpos := abi_decode_struct_NetworkConfig_fromMemory(_15, add(_15, _18))\n                                }\n                                /// @src 80:575:3616  \"contract SendPackedUserOp is Script {...\"\n                                let cleaned := and(/** @src 15:1590:1604  \"Vm(VM_ADDRESS)\" */ mload(/** @src 80:756:791  \"helperConfig.getConfig().entryPoint\" */ expr_mpos), /** @src 80:575:3616  \"contract SendPackedUserOp is Script {...\" */ _13)\n                                /// @src 80:737:792  \"new MinimalAccount(helperConfig.getConfig().entryPoint)\"\n                                let _19 := /** @src 80:575:3616  \"contract SendPackedUserOp is Script {...\" */ mload(_2)\n                                /// @src 80:737:792  \"new MinimalAccount(helperConfig.getConfig().entryPoint)\"\n                                let _20 := datasize(\"MinimalAccount_51163\")\n                                let _21 := add(_19, _20)\n                                if or(gt(_21, /** @src 80:677:695  \"new HelperConfig()\" */ _12), /** @src 80:737:792  \"new MinimalAccount(helperConfig.getConfig().entryPoint)\" */ lt(_21, _19))\n                                {\n                                    /// @src 80:575:3616  \"contract SendPackedUserOp is Script {...\"\n                                    mstore(_4, shl(224, 0x4e487b71))\n                                    mstore(_3, 0x41)\n                                    revert(_4, 0x24)\n                                }\n                                /// @src 80:737:792  \"new MinimalAccount(helperConfig.getConfig().entryPoint)\"\n                                datacopy(_19, dataoffset(\"MinimalAccount_51163\"), _20)\n                                /// @src 80:575:3616  \"contract SendPackedUserOp is Script {...\"\n                                mstore(_21, cleaned)\n                                /// @src 15:1590:1604  \"Vm(VM_ADDRESS)\"\n                                let _22 := 32\n                                /// @src 80:737:792  \"new MinimalAccount(helperConfig.getConfig().entryPoint)\"\n                                let expr_address_1 := create(/** @src 80:575:3616  \"contract SendPackedUserOp is Script {...\" */ _4, /** @src 80:737:792  \"new MinimalAccount(helperConfig.getConfig().entryPoint)\" */ _19, add(sub(/** @src 15:1590:1604  \"Vm(VM_ADDRESS)\" */ _21, /** @src 80:737:792  \"new MinimalAccount(helperConfig.getConfig().entryPoint)\" */ _19), /** @src 15:1590:1604  \"Vm(VM_ADDRESS)\" */ _22))\n                                /// @src 80:737:792  \"new MinimalAccount(helperConfig.getConfig().entryPoint)\"\n                                if iszero(expr_address_1)\n                                {\n                                    /// @src 15:1590:1604  \"Vm(VM_ADDRESS)\"\n                                    let pos_2 := /** @src 80:575:3616  \"contract SendPackedUserOp is Script {...\" */ mload(_2)\n                                    /// @src 15:1590:1604  \"Vm(VM_ADDRESS)\"\n                                    returndatacopy(pos_2, /** @src 80:575:3616  \"contract SendPackedUserOp is Script {...\" */ _4, /** @src 15:1590:1604  \"Vm(VM_ADDRESS)\" */ returndatasize())\n                                    revert(pos_2, returndatasize())\n                                }\n                                /// @src 80:1038:1103  \"abi.encodeWithSelector(IERC20.approve.selector, myAddress, value)\"\n                                let expr_mpos_1 := /** @src 80:575:3616  \"contract SendPackedUserOp is Script {...\" */ mload(_2)\n                                /// @src 80:1038:1103  \"abi.encodeWithSelector(IERC20.approve.selector, myAddress, value)\"\n                                mstore(add(expr_mpos_1, /** @src 15:1590:1604  \"Vm(VM_ADDRESS)\" */ _22), /** @src 80:1061:1084  \"IERC20.approve.selector\" */ shl(224, 0x095ea7b3))\n                                /// @src 80:914:956  \"0x86E26DC295d7c11FF54a39aA3420E3F163581D0c\"\n                                let _23 := 0x86e26dc295d7c11ff54a39aa3420e3f163581d0c\n                                /// @src 80:575:3616  \"contract SendPackedUserOp is Script {...\"\n                                mstore(/** @src 80:1038:1103  \"abi.encodeWithSelector(IERC20.approve.selector, myAddress, value)\" */ add(expr_mpos_1, 36), /** @src 80:914:956  \"0x86E26DC295d7c11FF54a39aA3420E3F163581D0c\" */ _23)\n                                /// @src 80:575:3616  \"contract SendPackedUserOp is Script {...\"\n                                mstore(add(/** @src 80:1038:1103  \"abi.encodeWithSelector(IERC20.approve.selector, myAddress, value)\" */ expr_mpos_1, /** @src 80:575:3616  \"contract SendPackedUserOp is Script {...\" */ 68), _4)\n                                /// @src 80:1038:1103  \"abi.encodeWithSelector(IERC20.approve.selector, myAddress, value)\"\n                                mstore(expr_mpos_1, /** @src 80:575:3616  \"contract SendPackedUserOp is Script {...\" */ 68)\n                                /// @src 80:1038:1103  \"abi.encodeWithSelector(IERC20.approve.selector, myAddress, value)\"\n                                finalize_allocation_7534(expr_mpos_1)\n                                /// @src 80:1156:1238  \"abi.encodeWithSelector(MinimalAccount.execute.selector, dest, value, functionData)\"\n                                let expr_mpos_2 := /** @src 80:575:3616  \"contract SendPackedUserOp is Script {...\" */ mload(_2)\n                                /// @src 80:1156:1238  \"abi.encodeWithSelector(MinimalAccount.execute.selector, dest, value, functionData)\"\n                                mstore(add(expr_mpos_2, /** @src 15:1590:1604  \"Vm(VM_ADDRESS)\" */ _22), /** @src 80:1179:1210  \"MinimalAccount.execute.selector\" */ shl(225, 0x5b0e93fb))\n                                /// @src 80:575:3616  \"contract SendPackedUserOp is Script {...\"\n                                mstore(/** @src 80:1156:1238  \"abi.encodeWithSelector(MinimalAccount.execute.selector, dest, value, functionData)\" */ add(expr_mpos_2, /** @src 80:1038:1103  \"abi.encodeWithSelector(IERC20.approve.selector, myAddress, value)\" */ 36), /** @src 80:817:859  \"0xbC47901f4d2C5fc871ae0037Ea05c3F614690781\" */ 0xbc47901f4d2c5fc871ae0037ea05c3f614690781)\n                                /// @src 80:575:3616  \"contract SendPackedUserOp is Script {...\"\n                                mstore(add(/** @src 80:1156:1238  \"abi.encodeWithSelector(MinimalAccount.execute.selector, dest, value, functionData)\" */ expr_mpos_2, /** @src 80:575:3616  \"contract SendPackedUserOp is Script {...\" */ 68), _4)\n                                mstore(add(/** @src 80:1156:1238  \"abi.encodeWithSelector(MinimalAccount.execute.selector, dest, value, functionData)\" */ expr_mpos_2, /** @src 80:575:3616  \"contract SendPackedUserOp is Script {...\" */ 100), 96)\n                                /// @src 80:1156:1238  \"abi.encodeWithSelector(MinimalAccount.execute.selector, dest, value, functionData)\"\n                                let _24 := sub(/** @src 80:575:3616  \"contract SendPackedUserOp is Script {...\" */ abi_encode_bytes(expr_mpos_1, add(/** @src 80:1156:1238  \"abi.encodeWithSelector(MinimalAccount.execute.selector, dest, value, functionData)\" */ expr_mpos_2, /** @src 80:575:3616  \"contract SendPackedUserOp is Script {...\" */ 132)), /** @src 80:1156:1238  \"abi.encodeWithSelector(MinimalAccount.execute.selector, dest, value, functionData)\" */ expr_mpos_2)\n                                mstore(expr_mpos_2, add(_24, /** @src 80:575:3616  \"contract SendPackedUserOp is Script {...\" */ not(31)))\n                                /// @src 80:1156:1238  \"abi.encodeWithSelector(MinimalAccount.execute.selector, dest, value, functionData)\"\n                                finalize_allocation(expr_mpos_2, _24)\n                                /// @src 80:1334:1358  \"helperConfig.getConfig()\"\n                                let _25 := /** @src 80:575:3616  \"contract SendPackedUserOp is Script {...\" */ mload(_2)\n                                /// @src 80:1334:1358  \"helperConfig.getConfig()\"\n                                mstore(_25, /** @src 15:1590:1604  \"Vm(VM_ADDRESS)\" */ _16)\n                                /// @src 80:1334:1358  \"helperConfig.getConfig()\"\n                                let _26 := call(gas(), _14, /** @src 80:575:3616  \"contract SendPackedUserOp is Script {...\" */ _4, /** @src 80:1334:1358  \"helperConfig.getConfig()\" */ _25, /** @src 80:575:3616  \"contract SendPackedUserOp is Script {...\" */ _3, /** @src 80:1334:1358  \"helperConfig.getConfig()\" */ _25, /** @src 80:575:3616  \"contract SendPackedUserOp is Script {...\" */ _2)\n                                /// @src 80:1334:1358  \"helperConfig.getConfig()\"\n                                if iszero(_26)\n                                {\n                                    /// @src 15:1590:1604  \"Vm(VM_ADDRESS)\"\n                                    let pos_3 := /** @src 80:575:3616  \"contract SendPackedUserOp is Script {...\" */ mload(_2)\n                                    /// @src 15:1590:1604  \"Vm(VM_ADDRESS)\"\n                                    returndatacopy(pos_3, /** @src 80:575:3616  \"contract SendPackedUserOp is Script {...\" */ _4, /** @src 15:1590:1604  \"Vm(VM_ADDRESS)\" */ returndatasize())\n                                    revert(pos_3, returndatasize())\n                                }\n                                /// @src 80:1334:1358  \"helperConfig.getConfig()\"\n                                let expr_mpos_3 := /** @src 80:575:3616  \"contract SendPackedUserOp is Script {...\" */ _4\n                                /// @src 80:1334:1358  \"helperConfig.getConfig()\"\n                                if _26\n                                {\n                                    let _27 := /** @src 80:575:3616  \"contract SendPackedUserOp is Script {...\" */ _2\n                                    /// @src 80:1334:1358  \"helperConfig.getConfig()\"\n                                    if gt(/** @src 80:575:3616  \"contract SendPackedUserOp is Script {...\" */ _2, /** @src 80:1334:1358  \"helperConfig.getConfig()\" */ returndatasize()) { _27 := returndatasize() }\n                                    finalize_allocation(_25, _27)\n                                    expr_mpos_3 := abi_decode_struct_NetworkConfig_fromMemory(_25, add(_25, _27))\n                                }\n                                /// @src 80:1296:1384  \"generatePackedUserOp(executeCalldata, helperConfig.getConfig(), address(minimalAccount))\"\n                                let expr_mpos_4 := fun_generatePackedUserOp(expr_mpos_2, expr_mpos_3, /** @src 80:575:3616  \"contract SendPackedUserOp is Script {...\" */ and(/** @src 80:1360:1383  \"address(minimalAccount)\" */ expr_address_1, /** @src 80:575:3616  \"contract SendPackedUserOp is Script {...\" */ _13))\n                                let memPtr_1 := mload(_2)\n                                finalize_allocation_5090(memPtr_1)\n                                /// @src 80:1455:1456  \"1\"\n                                let _28 := 0x01\n                                /// @src 80:575:3616  \"contract SendPackedUserOp is Script {...\"\n                                mstore(memPtr_1, /** @src 80:1455:1456  \"1\" */ 0x01)\n                                /// @src 80:575:3616  \"contract SendPackedUserOp is Script {...\"\n                                let i := _4\n                                for { }\n                                lt(i, /** @src 15:1590:1604  \"Vm(VM_ADDRESS)\" */ _22)\n                                /// @src 80:575:3616  \"contract SendPackedUserOp is Script {...\"\n                                {\n                                    i := add(i, /** @src 15:1590:1604  \"Vm(VM_ADDRESS)\" */ _22)\n                                }\n                                /// @src 80:575:3616  \"contract SendPackedUserOp is Script {...\"\n                                {\n                                    mstore(add(add(memPtr_1, i), /** @src 15:1590:1604  \"Vm(VM_ADDRESS)\" */ _22), /** @src 80:575:3616  \"contract SendPackedUserOp is Script {...\" */ allocate_and_zero_memory_struct_struct_PackedUserOperation())\n                                }\n                                /// @src 80:1467:1482  \"ops[0] = userOp\"\n                                mstore(memory_array_index_access_struct_PackedUserOperation_dyn(memPtr_1), expr_mpos_4)\n                                pop(memory_array_index_access_struct_PackedUserOperation_dyn(memPtr_1))\n                                /// @src 80:575:3616  \"contract SendPackedUserOp is Script {...\"\n                                let _29 := 0x7109709ecfa91a80626ff3989d68f67f5b1dd12d\n                                /// @src 80:1493:1521  \"vm.startBroadcast(myAddress)\"\n                                if iszero(extcodesize(/** @src 80:575:3616  \"contract SendPackedUserOp is Script {...\" */ _29))\n                                /// @src 80:1493:1521  \"vm.startBroadcast(myAddress)\"\n                                {\n                                    /// @src 80:575:3616  \"contract SendPackedUserOp is Script {...\"\n                                    revert(_4, _4)\n                                }\n                                /// @src 80:1493:1521  \"vm.startBroadcast(myAddress)\"\n                                let _30 := /** @src 80:575:3616  \"contract SendPackedUserOp is Script {...\" */ mload(_2)\n                                /// @src 80:1493:1521  \"vm.startBroadcast(myAddress)\"\n                                mstore(_30, /** @src 15:1590:1604  \"Vm(VM_ADDRESS)\" */ shl(224, 0x7fec2a8d))\n                                /// @src 80:575:3616  \"contract SendPackedUserOp is Script {...\"\n                                mstore(/** @src 80:1493:1521  \"vm.startBroadcast(myAddress)\" */ add(_30, /** @src 80:575:3616  \"contract SendPackedUserOp is Script {...\" */ _3), /** @src 80:914:956  \"0x86E26DC295d7c11FF54a39aA3420E3F163581D0c\" */ _23)\n                                /// @src 80:1493:1521  \"vm.startBroadcast(myAddress)\"\n                                let _31 := call(gas(), /** @src 80:575:3616  \"contract SendPackedUserOp is Script {...\" */ _29, _4, /** @src 80:1493:1521  \"vm.startBroadcast(myAddress)\" */ _30, /** @src 80:1038:1103  \"abi.encodeWithSelector(IERC20.approve.selector, myAddress, value)\" */ 36, /** @src 80:1493:1521  \"vm.startBroadcast(myAddress)\" */ _30, /** @src 80:575:3616  \"contract SendPackedUserOp is Script {...\" */ _4)\n                                /// @src 80:1493:1521  \"vm.startBroadcast(myAddress)\"\n                                if iszero(_31)\n                                {\n                                    /// @src 15:1590:1604  \"Vm(VM_ADDRESS)\"\n                                    let pos_4 := /** @src 80:575:3616  \"contract SendPackedUserOp is Script {...\" */ mload(_2)\n                                    /// @src 15:1590:1604  \"Vm(VM_ADDRESS)\"\n                                    returndatacopy(pos_4, /** @src 80:575:3616  \"contract SendPackedUserOp is Script {...\" */ _4, /** @src 15:1590:1604  \"Vm(VM_ADDRESS)\" */ returndatasize())\n                                    revert(pos_4, returndatasize())\n                                }\n                                /// @src 80:1493:1521  \"vm.startBroadcast(myAddress)\"\n                                if _31\n                                {\n                                    finalize_allocation_5098(_30)\n                                    /// @src 80:575:3616  \"contract SendPackedUserOp is Script {...\"\n                                    _4 := _4\n                                }\n                                /// @src 80:1543:1567  \"helperConfig.getConfig()\"\n                                let _32 := /** @src 80:575:3616  \"contract SendPackedUserOp is Script {...\" */ mload(_2)\n                                /// @src 80:1543:1567  \"helperConfig.getConfig()\"\n                                mstore(_32, /** @src 15:1590:1604  \"Vm(VM_ADDRESS)\" */ _16)\n                                /// @src 80:1543:1567  \"helperConfig.getConfig()\"\n                                let _33 := call(gas(), _14, /** @src 80:575:3616  \"contract SendPackedUserOp is Script {...\" */ _4, /** @src 80:1543:1567  \"helperConfig.getConfig()\" */ _32, /** @src 80:575:3616  \"contract SendPackedUserOp is Script {...\" */ _3, /** @src 80:1543:1567  \"helperConfig.getConfig()\" */ _32, /** @src 80:575:3616  \"contract SendPackedUserOp is Script {...\" */ _2)\n                                /// @src 80:1543:1567  \"helperConfig.getConfig()\"\n                                if iszero(_33)\n                                {\n                                    /// @src 15:1590:1604  \"Vm(VM_ADDRESS)\"\n                                    let pos_5 := /** @src 80:575:3616  \"contract SendPackedUserOp is Script {...\" */ mload(_2)\n                                    /// @src 15:1590:1604  \"Vm(VM_ADDRESS)\"\n                                    returndatacopy(pos_5, /** @src 80:575:3616  \"contract SendPackedUserOp is Script {...\" */ _4, /** @src 15:1590:1604  \"Vm(VM_ADDRESS)\" */ returndatasize())\n                                    revert(pos_5, returndatasize())\n                                }\n                                /// @src 80:1543:1567  \"helperConfig.getConfig()\"\n                                let expr_mpos_5 := _4\n                                if _33\n                                {\n                                    let _34 := /** @src 80:575:3616  \"contract SendPackedUserOp is Script {...\" */ _2\n                                    /// @src 80:1543:1567  \"helperConfig.getConfig()\"\n                                    if gt(/** @src 80:575:3616  \"contract SendPackedUserOp is Script {...\" */ _2, /** @src 80:1543:1567  \"helperConfig.getConfig()\" */ returndatasize()) { _34 := returndatasize() }\n                                    finalize_allocation(_32, _34)\n                                    expr_mpos_5 := abi_decode_struct_NetworkConfig_fromMemory(_32, add(_32, _34))\n                                }\n                                /// @src 80:575:3616  \"contract SendPackedUserOp is Script {...\"\n                                let cleaned_1 := and(/** @src 15:1590:1604  \"Vm(VM_ADDRESS)\" */ mload(/** @src 80:1543:1578  \"helperConfig.getConfig().entryPoint\" */ expr_mpos_5), /** @src 80:575:3616  \"contract SendPackedUserOp is Script {...\" */ _13)\n                                /// @src 80:1603:1627  \"helperConfig.getConfig()\"\n                                let _35 := /** @src 80:575:3616  \"contract SendPackedUserOp is Script {...\" */ mload(_2)\n                                /// @src 80:1603:1627  \"helperConfig.getConfig()\"\n                                mstore(_35, /** @src 15:1590:1604  \"Vm(VM_ADDRESS)\" */ _16)\n                                /// @src 80:1603:1627  \"helperConfig.getConfig()\"\n                                let _36 := call(gas(), _14, /** @src 80:575:3616  \"contract SendPackedUserOp is Script {...\" */ _4, /** @src 80:1603:1627  \"helperConfig.getConfig()\" */ _35, /** @src 80:575:3616  \"contract SendPackedUserOp is Script {...\" */ _3, /** @src 80:1603:1627  \"helperConfig.getConfig()\" */ _35, /** @src 80:575:3616  \"contract SendPackedUserOp is Script {...\" */ _2)\n                                /// @src 80:1603:1627  \"helperConfig.getConfig()\"\n                                if iszero(_36)\n                                {\n                                    /// @src 15:1590:1604  \"Vm(VM_ADDRESS)\"\n                                    let pos_6 := /** @src 80:575:3616  \"contract SendPackedUserOp is Script {...\" */ mload(_2)\n                                    /// @src 15:1590:1604  \"Vm(VM_ADDRESS)\"\n                                    returndatacopy(pos_6, /** @src 80:575:3616  \"contract SendPackedUserOp is Script {...\" */ _4, /** @src 15:1590:1604  \"Vm(VM_ADDRESS)\" */ returndatasize())\n                                    revert(pos_6, returndatasize())\n                                }\n                                /// @src 80:1603:1627  \"helperConfig.getConfig()\"\n                                let expr_mpos_6 := _4\n                                if _36\n                                {\n                                    let _37 := /** @src 80:575:3616  \"contract SendPackedUserOp is Script {...\" */ _2\n                                    /// @src 80:1603:1627  \"helperConfig.getConfig()\"\n                                    if gt(/** @src 80:575:3616  \"contract SendPackedUserOp is Script {...\" */ _2, /** @src 80:1603:1627  \"helperConfig.getConfig()\" */ returndatasize()) { _37 := returndatasize() }\n                                    finalize_allocation(_35, _37)\n                                    expr_mpos_6 := abi_decode_struct_NetworkConfig_fromMemory(_35, add(_35, _37))\n                                }\n                                /// @src 80:575:3616  \"contract SendPackedUserOp is Script {...\"\n                                let cleaned_2 := and(/** @src 15:1590:1604  \"Vm(VM_ADDRESS)\" */ mload(/** @src 80:1603:1635  \"helperConfig.getConfig().account\" */ add(expr_mpos_6, /** @src 15:1590:1604  \"Vm(VM_ADDRESS)\" */ _22)), /** @src 80:575:3616  \"contract SendPackedUserOp is Script {...\" */ _13)\n                                /// @src 80:1531:1637  \"IEntryPoint(helperConfig.getConfig().entryPoint).handleOps(ops, payable(helperConfig.getConfig().account))\"\n                                if iszero(extcodesize(cleaned_1))\n                                {\n                                    /// @src 80:575:3616  \"contract SendPackedUserOp is Script {...\"\n                                    revert(_4, _4)\n                                }\n                                /// @src 80:1531:1637  \"IEntryPoint(helperConfig.getConfig().entryPoint).handleOps(ops, payable(helperConfig.getConfig().account))\"\n                                let _38 := /** @src 80:575:3616  \"contract SendPackedUserOp is Script {...\" */ mload(_2)\n                                /// @src 80:1531:1637  \"IEntryPoint(helperConfig.getConfig().entryPoint).handleOps(ops, payable(helperConfig.getConfig().account))\"\n                                mstore(_38, /** @src 15:1590:1604  \"Vm(VM_ADDRESS)\" */ shl(224, 0x765e827f))\n                                /// @src 80:575:3616  \"contract SendPackedUserOp is Script {...\"\n                                let tail := add(/** @src 80:1531:1637  \"IEntryPoint(helperConfig.getConfig().entryPoint).handleOps(ops, payable(helperConfig.getConfig().account))\" */ _38, /** @src 80:575:3616  \"contract SendPackedUserOp is Script {...\" */ 68)\n                                mstore(/** @src 80:1531:1637  \"IEntryPoint(helperConfig.getConfig().entryPoint).handleOps(ops, payable(helperConfig.getConfig().account))\" */ add(_38, /** @src 80:575:3616  \"contract SendPackedUserOp is Script {...\" */ _3), _2)\n                                let pos_7 := tail\n                                let length := mload(memPtr_1)\n                                mstore(tail, length)\n                                pos_7 := add(/** @src 80:1531:1637  \"IEntryPoint(helperConfig.getConfig().entryPoint).handleOps(ops, payable(helperConfig.getConfig().account))\" */ _38, /** @src 80:575:3616  \"contract SendPackedUserOp is Script {...\" */ 100)\n                                let tail_1 := add(add(/** @src 80:1531:1637  \"IEntryPoint(helperConfig.getConfig().entryPoint).handleOps(ops, payable(helperConfig.getConfig().account))\" */ _38, /** @src 80:575:3616  \"contract SendPackedUserOp is Script {...\" */ shl(5, length)), 100)\n                                let srcPtr := add(memPtr_1, /** @src 15:1590:1604  \"Vm(VM_ADDRESS)\" */ _22)\n                                /// @src 80:575:3616  \"contract SendPackedUserOp is Script {...\"\n                                let i_1 := _4\n                                for { }\n                                lt(i_1, length)\n                                {\n                                    i_1 := add(i_1, /** @src 80:1455:1456  \"1\" */ _28)\n                                }\n                                /// @src 80:575:3616  \"contract SendPackedUserOp is Script {...\"\n                                {\n                                    mstore(pos_7, add(sub(tail_1, /** @src 80:1531:1637  \"IEntryPoint(helperConfig.getConfig().entryPoint).handleOps(ops, payable(helperConfig.getConfig().account))\" */ _38), /** @src 80:575:3616  \"contract SendPackedUserOp is Script {...\" */ not(99)))\n                                    tail_1 := abi_encode_struct_PackedUserOperation(mload(srcPtr), tail_1)\n                                    srcPtr := add(srcPtr, /** @src 15:1590:1604  \"Vm(VM_ADDRESS)\" */ _22)\n                                    /// @src 80:575:3616  \"contract SendPackedUserOp is Script {...\"\n                                    pos_7 := add(pos_7, /** @src 15:1590:1604  \"Vm(VM_ADDRESS)\" */ _22)\n                                }\n                                /// @src 80:575:3616  \"contract SendPackedUserOp is Script {...\"\n                                mstore(add(/** @src 80:1531:1637  \"IEntryPoint(helperConfig.getConfig().entryPoint).handleOps(ops, payable(helperConfig.getConfig().account))\" */ _38, /** @src 80:1038:1103  \"abi.encodeWithSelector(IERC20.approve.selector, myAddress, value)\" */ 36), /** @src 80:575:3616  \"contract SendPackedUserOp is Script {...\" */ cleaned_2)\n                                /// @src 80:1531:1637  \"IEntryPoint(helperConfig.getConfig().entryPoint).handleOps(ops, payable(helperConfig.getConfig().account))\"\n                                let _39 := call(gas(), cleaned_1, /** @src 80:575:3616  \"contract SendPackedUserOp is Script {...\" */ _4, /** @src 80:1531:1637  \"IEntryPoint(helperConfig.getConfig().entryPoint).handleOps(ops, payable(helperConfig.getConfig().account))\" */ _38, sub(tail_1, _38), _38, /** @src 80:575:3616  \"contract SendPackedUserOp is Script {...\" */ _4)\n                                /// @src 80:1531:1637  \"IEntryPoint(helperConfig.getConfig().entryPoint).handleOps(ops, payable(helperConfig.getConfig().account))\"\n                                if iszero(_39)\n                                {\n                                    /// @src 15:1590:1604  \"Vm(VM_ADDRESS)\"\n                                    let pos_8 := /** @src 80:575:3616  \"contract SendPackedUserOp is Script {...\" */ mload(_2)\n                                    /// @src 15:1590:1604  \"Vm(VM_ADDRESS)\"\n                                    returndatacopy(pos_8, /** @src 80:575:3616  \"contract SendPackedUserOp is Script {...\" */ _4, /** @src 15:1590:1604  \"Vm(VM_ADDRESS)\" */ returndatasize())\n                                    revert(pos_8, returndatasize())\n                                }\n                                /// @src 80:1531:1637  \"IEntryPoint(helperConfig.getConfig().entryPoint).handleOps(ops, payable(helperConfig.getConfig().account))\"\n                                if _39\n                                {\n                                    finalize_allocation_5098(_38)\n                                    /// @src 80:575:3616  \"contract SendPackedUserOp is Script {...\"\n                                    if _4 { revert(_4, _4) }\n                                }\n                                /// @src 80:1647:1665  \"vm.stopBroadcast()\"\n                                if iszero(extcodesize(/** @src 80:575:3616  \"contract SendPackedUserOp is Script {...\" */ _29))\n                                /// @src 80:1647:1665  \"vm.stopBroadcast()\"\n                                {\n                                    /// @src 80:575:3616  \"contract SendPackedUserOp is Script {...\"\n                                    revert(_4, _4)\n                                }\n                                /// @src 80:1647:1665  \"vm.stopBroadcast()\"\n                                let _40 := /** @src 80:575:3616  \"contract SendPackedUserOp is Script {...\" */ mload(_2)\n                                /// @src 80:1647:1665  \"vm.stopBroadcast()\"\n                                mstore(_40, /** @src 15:1590:1604  \"Vm(VM_ADDRESS)\" */ shl(225, 0x3b756e9b))\n                                /// @src 80:1647:1665  \"vm.stopBroadcast()\"\n                                let _41 := call(gas(), /** @src 80:575:3616  \"contract SendPackedUserOp is Script {...\" */ _29, _4, /** @src 80:1647:1665  \"vm.stopBroadcast()\" */ _40, /** @src 80:575:3616  \"contract SendPackedUserOp is Script {...\" */ _3, /** @src 80:1647:1665  \"vm.stopBroadcast()\" */ _40, /** @src 80:575:3616  \"contract SendPackedUserOp is Script {...\" */ _4)\n                                /// @src 80:1647:1665  \"vm.stopBroadcast()\"\n                                if iszero(_41)\n                                {\n                                    /// @src 15:1590:1604  \"Vm(VM_ADDRESS)\"\n                                    let pos_9 := /** @src 80:575:3616  \"contract SendPackedUserOp is Script {...\" */ mload(_2)\n                                    /// @src 15:1590:1604  \"Vm(VM_ADDRESS)\"\n                                    returndatacopy(pos_9, /** @src 80:575:3616  \"contract SendPackedUserOp is Script {...\" */ _4, /** @src 15:1590:1604  \"Vm(VM_ADDRESS)\" */ returndatasize())\n                                    revert(pos_9, returndatasize())\n                                }\n                                /// @src 80:1647:1665  \"vm.stopBroadcast()\"\n                                if _41\n                                {\n                                    finalize_allocation_5098(_40)\n                                    /// @src 80:575:3616  \"contract SendPackedUserOp is Script {...\"\n                                    if _4 { revert(_4, _4) }\n                                }\n                                return(_4, _4)\n                            }\n                            case 0xf8ccbf47 {\n                                if callvalue() { revert(_4, _4) }\n                                if slt(add(calldatasize(), not(3)), _4) { revert(_4, _4) }\n                                let value_3 := and(shr(16, sload(/** @src 16:800:828  \"bool public IS_SCRIPT = true\" */ 12)), /** @src 80:575:3616  \"contract SendPackedUserOp is Script {...\" */ 0xff)\n                                let memPos_1 := mload(_2)\n                                mstore(memPos_1, iszero(iszero(value_3)))\n                                return(memPos_1, 32)\n                            }\n                        }\n                        revert(0, 0)\n                    }\n                    function finalize_allocation_5090(memPtr)\n                    {\n                        let newFreePtr := add(memPtr, 64)\n                        if or(gt(newFreePtr, 0xffffffffffffffff), lt(newFreePtr, memPtr))\n                        {\n                            mstore(0, shl(224, 0x4e487b71))\n                            mstore(4, 0x41)\n                            revert(0, 0x24)\n                        }\n                        mstore(64, newFreePtr)\n                    }\n                    function finalize_allocation_5098(memPtr)\n                    {\n                        if gt(memPtr, 0xffffffffffffffff)\n                        {\n                            mstore(0, shl(224, 0x4e487b71))\n                            mstore(4, 0x41)\n                            revert(0, 0x24)\n                        }\n                        mstore(64, memPtr)\n                    }\n                    function finalize_allocation_5114(memPtr)\n                    {\n                        let newFreePtr := add(memPtr, 288)\n                        if or(gt(newFreePtr, 0xffffffffffffffff), lt(newFreePtr, memPtr))\n                        {\n                            mstore(0, shl(224, 0x4e487b71))\n                            mstore(4, 0x41)\n                            revert(0, 0x24)\n                        }\n                        mstore(64, newFreePtr)\n                    }\n                    function finalize_allocation_7534(memPtr)\n                    {\n                        let newFreePtr := add(memPtr, 128)\n                        if or(gt(newFreePtr, 0xffffffffffffffff), lt(newFreePtr, memPtr))\n                        {\n                            mstore(0, shl(224, 0x4e487b71))\n                            mstore(4, 0x41)\n                            revert(0, 0x24)\n                        }\n                        mstore(64, newFreePtr)\n                    }\n                    function finalize_allocation_7536(memPtr)\n                    {\n                        let newFreePtr := add(memPtr, /** @src 80:1944:1971  \"vm.getNonce(minimalAccount)\" */ 32)\n                        /// @src 80:575:3616  \"contract SendPackedUserOp is Script {...\"\n                        if or(gt(newFreePtr, 0xffffffffffffffff), lt(newFreePtr, memPtr))\n                        {\n                            mstore(0, shl(224, 0x4e487b71))\n                            mstore(4, 0x41)\n                            revert(0, 0x24)\n                        }\n                        mstore(64, newFreePtr)\n                    }\n                    function finalize_allocation(memPtr, size)\n                    {\n                        let newFreePtr := add(memPtr, and(add(size, 31), not(31)))\n                        if or(gt(newFreePtr, 0xffffffffffffffff), lt(newFreePtr, memPtr))\n                        {\n                            mstore(0, shl(224, 0x4e487b71))\n                            mstore(4, 0x41)\n                            revert(0, 0x24)\n                        }\n                        mstore(64, newFreePtr)\n                    }\n                    function abi_encode_bytes(value, pos) -> end\n                    {\n                        let length := mload(value)\n                        mstore(pos, length)\n                        let i := 0\n                        for { } lt(i, length) { i := add(i, 0x20) }\n                        {\n                            let _1 := 0x20\n                            mstore(add(add(pos, i), _1), mload(add(add(value, i), _1)))\n                        }\n                        mstore(add(add(pos, length), 0x20), 0)\n                        end := add(add(pos, and(add(length, 31), not(31))), 0x20)\n                    }\n                    function abi_encode_struct_PackedUserOperation(value, pos) -> end\n                    {\n                        let _1 := 0x0120\n                        mstore(pos, and(mload(value), sub(shl(160, 1), 1)))\n                        mstore(add(pos, 0x20), mload(add(value, 0x20)))\n                        let memberValue0 := mload(add(value, 0x40))\n                        mstore(add(pos, 0x40), _1)\n                        let tail := abi_encode_bytes(memberValue0, add(pos, _1))\n                        let memberValue0_1 := mload(add(value, 0x60))\n                        mstore(add(pos, 0x60), sub(tail, pos))\n                        let tail_1 := abi_encode_bytes(memberValue0_1, tail)\n                        mstore(add(pos, 0x80), mload(add(value, 0x80)))\n                        mstore(add(pos, 0xa0), mload(add(value, 0xa0)))\n                        mstore(add(pos, 0xc0), mload(add(value, 0xc0)))\n                        let memberValue0_2 := mload(add(value, 0xe0))\n                        mstore(add(pos, 0xe0), sub(tail_1, pos))\n                        let tail_2 := abi_encode_bytes(memberValue0_2, tail_1)\n                        let _2 := 0x0100\n                        let memberValue0_3 := mload(add(value, _2))\n                        mstore(add(pos, _2), sub(tail_2, pos))\n                        end := abi_encode_bytes(memberValue0_3, tail_2)\n                    }\n                    function allocate_and_zero_memory_struct_struct_PackedUserOperation() -> memPtr\n                    {\n                        let memPtr_1 := mload(64)\n                        finalize_allocation_5114(memPtr_1)\n                        memPtr := memPtr_1\n                        mstore(memPtr_1, /** @src -1:-1:-1 */ 0)\n                        /// @src 80:575:3616  \"contract SendPackedUserOp is Script {...\"\n                        mstore(add(memPtr_1, 32), /** @src -1:-1:-1 */ 0)\n                        /// @src 80:575:3616  \"contract SendPackedUserOp is Script {...\"\n                        mstore(add(memPtr_1, 64), 96)\n                        mstore(add(memPtr_1, 96), 96)\n                        mstore(add(memPtr_1, 128), /** @src -1:-1:-1 */ 0)\n                        /// @src 80:575:3616  \"contract SendPackedUserOp is Script {...\"\n                        mstore(add(memPtr_1, 160), /** @src -1:-1:-1 */ 0)\n                        /// @src 80:575:3616  \"contract SendPackedUserOp is Script {...\"\n                        mstore(add(memPtr_1, 192), /** @src -1:-1:-1 */ 0)\n                        /// @src 80:575:3616  \"contract SendPackedUserOp is Script {...\"\n                        mstore(add(memPtr_1, 224), 96)\n                        mstore(add(memPtr_1, 256), 96)\n                    }\n                    /// @src 15:1590:1604  \"Vm(VM_ADDRESS)\"\n                    function abi_decode_uint8t_bytes32t_bytes32_fromMemory(headStart, dataEnd) -> value0, value1, value2\n                    {\n                        if slt(sub(dataEnd, headStart), 96)\n                        {\n                            /// @src 80:575:3616  \"contract SendPackedUserOp is Script {...\"\n                            revert(0, 0)\n                        }\n                        /// @src 15:1590:1604  \"Vm(VM_ADDRESS)\"\n                        let value := mload(headStart)\n                        if iszero(eq(value, /** @src 80:575:3616  \"contract SendPackedUserOp is Script {...\" */ and(/** @src 15:1590:1604  \"Vm(VM_ADDRESS)\" */ value, /** @src 80:575:3616  \"contract SendPackedUserOp is Script {...\" */ 0xff)))\n                        /// @src 15:1590:1604  \"Vm(VM_ADDRESS)\"\n                        {\n                            revert(/** @src -1:-1:-1 */ 0, 0)\n                        }\n                        /// @src 15:1590:1604  \"Vm(VM_ADDRESS)\"\n                        value0 := value\n                        value1 := mload(add(headStart, 32))\n                        value2 := mload(add(headStart, 64))\n                    }\n                    /// @ast-id 50873 @src 80:1719:2777  \"function generatePackedUserOp(...\"\n                    function fun_generatePackedUserOp(var_callData_mpos, var_config_mpos, var_minimalAccount) -> var_mpos\n                    {\n                        /// @src 80:575:3616  \"contract SendPackedUserOp is Script {...\"\n                        pop(allocate_and_zero_memory_struct_struct_PackedUserOperation())\n                        let _1 := 64\n                        /// @src 80:1944:1971  \"vm.getNonce(minimalAccount)\"\n                        let _2 := /** @src 80:575:3616  \"contract SendPackedUserOp is Script {...\" */ mload(_1)\n                        /// @src 80:1944:1971  \"vm.getNonce(minimalAccount)\"\n                        mstore(_2, /** @src 15:1590:1604  \"Vm(VM_ADDRESS)\" */ shl(224, 0x2d0335ab))\n                        /// @src 80:575:3616  \"contract SendPackedUserOp is Script {...\"\n                        let _3 := sub(shl(160, 1), 1)\n                        let _4 := and(var_minimalAccount, _3)\n                        mstore(/** @src 80:1944:1971  \"vm.getNonce(minimalAccount)\" */ add(_2, 4), /** @src 80:575:3616  \"contract SendPackedUserOp is Script {...\" */ _4)\n                        /// @src 80:1944:1971  \"vm.getNonce(minimalAccount)\"\n                        let _5 := 32\n                        /// @src 80:575:3616  \"contract SendPackedUserOp is Script {...\"\n                        let _6 := 0x7109709ecfa91a80626ff3989d68f67f5b1dd12d\n                        /// @src 80:1944:1971  \"vm.getNonce(minimalAccount)\"\n                        let _7 := staticcall(gas(), /** @src 80:575:3616  \"contract SendPackedUserOp is Script {...\" */ _6, /** @src 80:1944:1971  \"vm.getNonce(minimalAccount)\" */ _2, /** @src 15:1590:1604  \"Vm(VM_ADDRESS)\" */ 36, /** @src 80:1944:1971  \"vm.getNonce(minimalAccount)\" */ _2, _5)\n                        if iszero(_7)\n                        {\n                            /// @src 15:1590:1604  \"Vm(VM_ADDRESS)\"\n                            let pos := /** @src 80:575:3616  \"contract SendPackedUserOp is Script {...\" */ mload(_1)\n                            /// @src 15:1590:1604  \"Vm(VM_ADDRESS)\"\n                            returndatacopy(pos, /** @src -1:-1:-1 */ 0, /** @src 15:1590:1604  \"Vm(VM_ADDRESS)\" */ returndatasize())\n                            revert(pos, returndatasize())\n                        }\n                        /// @src 80:1944:1971  \"vm.getNonce(minimalAccount)\"\n                        let expr := /** @src -1:-1:-1 */ 0\n                        /// @src 80:1944:1971  \"vm.getNonce(minimalAccount)\"\n                        if _7\n                        {\n                            let _8 := _5\n                            if gt(_5, returndatasize()) { _8 := returndatasize() }\n                            finalize_allocation(_2, _8)\n                            /// @src 15:1590:1604  \"Vm(VM_ADDRESS)\"\n                            if slt(sub(/** @src 80:1944:1971  \"vm.getNonce(minimalAccount)\" */ add(_2, _8), /** @src 15:1590:1604  \"Vm(VM_ADDRESS)\" */ _2), /** @src 80:1944:1971  \"vm.getNonce(minimalAccount)\" */ _5)\n                            /// @src 15:1590:1604  \"Vm(VM_ADDRESS)\"\n                            {\n                                /// @src 80:575:3616  \"contract SendPackedUserOp is Script {...\"\n                                revert(/** @src -1:-1:-1 */ expr, expr)\n                            }\n                            /// @src 15:1590:1604  \"Vm(VM_ADDRESS)\"\n                            let value := mload(_2)\n                            if iszero(eq(value, and(value, 0xffffffffffffffff)))\n                            {\n                                revert(/** @src -1:-1:-1 */ expr, expr)\n                            }\n                            /// @src 80:1944:1971  \"vm.getNonce(minimalAccount)\"\n                            expr := value\n                        }\n                        /// @src 15:1590:1604  \"Vm(VM_ADDRESS)\"\n                        let _9 := 0xffffffffffffffff\n                        let diff := add(and(expr, _9), not(0))\n                        if gt(diff, _9)\n                        {\n                            mstore(/** @src -1:-1:-1 */ 0, /** @src 80:575:3616  \"contract SendPackedUserOp is Script {...\" */ shl(224, 0x4e487b71))\n                            /// @src 15:1590:1604  \"Vm(VM_ADDRESS)\"\n                            mstore(/** @src 80:1944:1971  \"vm.getNonce(minimalAccount)\" */ 4, /** @src 15:1590:1604  \"Vm(VM_ADDRESS)\" */ 0x11)\n                            revert(/** @src -1:-1:-1 */ 0, /** @src 15:1590:1604  \"Vm(VM_ADDRESS)\" */ 36)\n                        }\n                        /// @src 80:575:3616  \"contract SendPackedUserOp is Script {...\"\n                        pop(allocate_and_zero_memory_struct_struct_PackedUserOperation())\n                        let memPtr := mload(_1)\n                        finalize_allocation_5114(memPtr)\n                        mstore(memPtr, _4)\n                        mstore(/** @src 80:3165:3607  \"PackedUserOperation({...\" */ add(memPtr, /** @src 80:1944:1971  \"vm.getNonce(minimalAccount)\" */ _5), /** @src 15:1590:1604  \"Vm(VM_ADDRESS)\" */ and(diff, _9))\n                        /// @src 80:575:3616  \"contract SendPackedUserOp is Script {...\"\n                        let memPtr_1 := mload(_1)\n                        finalize_allocation_7536(memPtr_1)\n                        mstore(memPtr_1, /** @src -1:-1:-1 */ 0)\n                        /// @src 80:575:3616  \"contract SendPackedUserOp is Script {...\"\n                        mstore(/** @src 80:3165:3607  \"PackedUserOperation({...\" */ add(memPtr, /** @src 80:575:3616  \"contract SendPackedUserOp is Script {...\" */ _1), memPtr_1)\n                        /// @src 80:3165:3607  \"PackedUserOperation({...\"\n                        let _10 := 96\n                        /// @src 80:575:3616  \"contract SendPackedUserOp is Script {...\"\n                        mstore(/** @src 80:3165:3607  \"PackedUserOperation({...\" */ add(memPtr, _10), /** @src 80:575:3616  \"contract SendPackedUserOp is Script {...\" */ var_callData_mpos)\n                        mstore(/** @src 80:3165:3607  \"PackedUserOperation({...\" */ add(memPtr, /** @src 80:3376:3379  \"128\" */ 0x80), /** @src 80:3343:3394  \"uint256(verificationGasLimit) << 128 | callGasLimit\" */ 0x0100000000000000000000000000000001000000)\n                        /// @src 80:575:3616  \"contract SendPackedUserOp is Script {...\"\n                        mstore(/** @src 80:3165:3607  \"PackedUserOperation({...\" */ add(memPtr, 160), /** @src 80:2993:3001  \"16777216\" */ 0x01000000)\n                        /// @src 80:575:3616  \"contract SendPackedUserOp is Script {...\"\n                        mstore(/** @src 80:3165:3607  \"PackedUserOperation({...\" */ add(memPtr, 192), /** @src 80:3480:3528  \"uint256(maxPriorityFeePerGas) << 128 | maxFeeGas\" */ 0x010000000000000000000000000000000100)\n                        /// @src 80:575:3616  \"contract SendPackedUserOp is Script {...\"\n                        let memPtr_2 := mload(_1)\n                        finalize_allocation_7536(memPtr_2)\n                        mstore(memPtr_2, /** @src -1:-1:-1 */ 0)\n                        /// @src 80:575:3616  \"contract SendPackedUserOp is Script {...\"\n                        mstore(/** @src 80:3165:3607  \"PackedUserOperation({...\" */ add(memPtr, /** @src 15:1590:1604  \"Vm(VM_ADDRESS)\" */ 224), /** @src 80:575:3616  \"contract SendPackedUserOp is Script {...\" */ memPtr_2)\n                        let memPtr_3 := mload(_1)\n                        finalize_allocation_7536(memPtr_3)\n                        mstore(memPtr_3, /** @src -1:-1:-1 */ 0)\n                        /// @src 80:3165:3607  \"PackedUserOperation({...\"\n                        let _11 := add(memPtr, /** @src 80:3095:3098  \"256\" */ 0x0100)\n                        /// @src 80:575:3616  \"contract SendPackedUserOp is Script {...\"\n                        mstore(_11, memPtr_3)\n                        let cleaned := and(/** @src 15:1590:1604  \"Vm(VM_ADDRESS)\" */ mload(/** @src 80:2203:2220  \"config.entryPoint\" */ var_config_mpos), /** @src 80:575:3616  \"contract SendPackedUserOp is Script {...\" */ _3)\n                        /// @src 80:2191:2243  \"IEntryPoint(config.entryPoint).getUserOpHash(userOp)\"\n                        let _12 := /** @src 80:575:3616  \"contract SendPackedUserOp is Script {...\" */ mload(_1)\n                        /// @src 80:2191:2243  \"IEntryPoint(config.entryPoint).getUserOpHash(userOp)\"\n                        mstore(_12, /** @src 15:1590:1604  \"Vm(VM_ADDRESS)\" */ shl(226, 0x08b37793))\n                        /// @src 80:575:3616  \"contract SendPackedUserOp is Script {...\"\n                        mstore(/** @src 80:2191:2243  \"IEntryPoint(config.entryPoint).getUserOpHash(userOp)\" */ add(_12, /** @src 80:1944:1971  \"vm.getNonce(minimalAccount)\" */ 4), _5)\n                        /// @src 80:2191:2243  \"IEntryPoint(config.entryPoint).getUserOpHash(userOp)\"\n                        let _13 := staticcall(gas(), cleaned, _12, sub(/** @src 80:575:3616  \"contract SendPackedUserOp is Script {...\" */ abi_encode_struct_PackedUserOperation(memPtr, add(/** @src 80:2191:2243  \"IEntryPoint(config.entryPoint).getUserOpHash(userOp)\" */ _12, /** @src 15:1590:1604  \"Vm(VM_ADDRESS)\" */ 36)), /** @src 80:2191:2243  \"IEntryPoint(config.entryPoint).getUserOpHash(userOp)\" */ _12), _12, /** @src 80:1944:1971  \"vm.getNonce(minimalAccount)\" */ _5)\n                        /// @src 80:2191:2243  \"IEntryPoint(config.entryPoint).getUserOpHash(userOp)\"\n                        if iszero(_13)\n                        {\n                            /// @src 15:1590:1604  \"Vm(VM_ADDRESS)\"\n                            let pos_1 := /** @src 80:575:3616  \"contract SendPackedUserOp is Script {...\" */ mload(_1)\n                            /// @src 15:1590:1604  \"Vm(VM_ADDRESS)\"\n                            returndatacopy(pos_1, /** @src -1:-1:-1 */ 0, /** @src 15:1590:1604  \"Vm(VM_ADDRESS)\" */ returndatasize())\n                            revert(pos_1, returndatasize())\n                        }\n                        /// @src 80:2191:2243  \"IEntryPoint(config.entryPoint).getUserOpHash(userOp)\"\n                        let expr_1 := /** @src -1:-1:-1 */ 0\n                        /// @src 80:2191:2243  \"IEntryPoint(config.entryPoint).getUserOpHash(userOp)\"\n                        if _13\n                        {\n                            let _14 := /** @src 80:1944:1971  \"vm.getNonce(minimalAccount)\" */ _5\n                            /// @src 80:2191:2243  \"IEntryPoint(config.entryPoint).getUserOpHash(userOp)\"\n                            if gt(/** @src 80:1944:1971  \"vm.getNonce(minimalAccount)\" */ _5, /** @src 80:2191:2243  \"IEntryPoint(config.entryPoint).getUserOpHash(userOp)\" */ returndatasize()) { _14 := returndatasize() }\n                            finalize_allocation(_12, _14)\n                            /// @src 15:1590:1604  \"Vm(VM_ADDRESS)\"\n                            if slt(sub(/** @src 80:2191:2243  \"IEntryPoint(config.entryPoint).getUserOpHash(userOp)\" */ add(_12, _14), /** @src 15:1590:1604  \"Vm(VM_ADDRESS)\" */ _12), /** @src 80:1944:1971  \"vm.getNonce(minimalAccount)\" */ _5)\n                            /// @src 15:1590:1604  \"Vm(VM_ADDRESS)\"\n                            {\n                                /// @src 80:575:3616  \"contract SendPackedUserOp is Script {...\"\n                                revert(/** @src -1:-1:-1 */ 0, 0)\n                            }\n                            /// @src 80:2191:2243  \"IEntryPoint(config.entryPoint).getUserOpHash(userOp)\"\n                            expr_1 := /** @src 15:1590:1604  \"Vm(VM_ADDRESS)\" */ mload(_12)\n                        }\n                        /// @src 73:1367:1676  \"assembly {...\"\n                        mstore(/** @src -1:-1:-1 */ 0, /** @src 73:1367:1676  \"assembly {...\" */ \"\\x19Ethereum Signed Message:\\n32\")\n                        mstore(0x1c, expr_1)\n                        let var_digest := keccak256(/** @src -1:-1:-1 */ 0, /** @src 73:1367:1676  \"assembly {...\" */ 0x3c)\n                        /// @src 80:2361:2368  \"uint8 v\"\n                        let var_v := /** @src -1:-1:-1 */ 0\n                        /// @src 80:2378:2387  \"bytes32 r\"\n                        let var_r := /** @src -1:-1:-1 */ var_v\n                        /// @src 80:2397:2406  \"bytes32 s\"\n                        let var_s := /** @src -1:-1:-1 */ var_v\n                        /// @src 80:2520:2693  \"if (block.chainid == 31337) {...\"\n                        switch /** @src 80:2524:2546  \"block.chainid == 31337\" */ eq(/** @src 80:2524:2537  \"block.chainid\" */ chainid(), /** @src 80:2541:2546  \"31337\" */ 0x7a69)\n                        case /** @src 80:2520:2693  \"if (block.chainid == 31337) {...\" */ 0 {\n                            /// @src 80:575:3616  \"contract SendPackedUserOp is Script {...\"\n                            let cleaned_1 := and(/** @src 15:1590:1604  \"Vm(VM_ADDRESS)\" */ mload(/** @src 80:2659:2673  \"config.account\" */ add(var_config_mpos, /** @src 80:1944:1971  \"vm.getNonce(minimalAccount)\" */ _5)), /** @src 80:575:3616  \"contract SendPackedUserOp is Script {...\" */ _3)\n                            /// @src 80:2651:2682  \"vm.sign(config.account, digest)\"\n                            let _15 := /** @src 80:575:3616  \"contract SendPackedUserOp is Script {...\" */ mload(_1)\n                            /// @src 80:2651:2682  \"vm.sign(config.account, digest)\"\n                            mstore(_15, /** @src 15:1590:1604  \"Vm(VM_ADDRESS)\" */ shl(224, 0x8c1aa205))\n                            /// @src 80:575:3616  \"contract SendPackedUserOp is Script {...\"\n                            mstore(/** @src 80:2651:2682  \"vm.sign(config.account, digest)\" */ add(_15, /** @src 80:1944:1971  \"vm.getNonce(minimalAccount)\" */ 4), /** @src 80:575:3616  \"contract SendPackedUserOp is Script {...\" */ cleaned_1)\n                            mstore(/** @src 15:1590:1604  \"Vm(VM_ADDRESS)\" */ add(/** @src 80:2651:2682  \"vm.sign(config.account, digest)\" */ _15, /** @src 15:1590:1604  \"Vm(VM_ADDRESS)\" */ 36), /** @src 80:575:3616  \"contract SendPackedUserOp is Script {...\" */ var_digest)\n                            /// @src 80:2651:2682  \"vm.sign(config.account, digest)\"\n                            let _16 := staticcall(gas(), /** @src 80:575:3616  \"contract SendPackedUserOp is Script {...\" */ _6, /** @src 80:2651:2682  \"vm.sign(config.account, digest)\" */ _15, /** @src 15:1590:1604  \"Vm(VM_ADDRESS)\" */ 68, /** @src 80:2651:2682  \"vm.sign(config.account, digest)\" */ _15, /** @src 80:3165:3607  \"PackedUserOperation({...\" */ _10)\n                            /// @src 80:2651:2682  \"vm.sign(config.account, digest)\"\n                            if iszero(_16)\n                            {\n                                /// @src 15:1590:1604  \"Vm(VM_ADDRESS)\"\n                                let pos_2 := /** @src 80:575:3616  \"contract SendPackedUserOp is Script {...\" */ mload(_1)\n                                /// @src 15:1590:1604  \"Vm(VM_ADDRESS)\"\n                                returndatacopy(pos_2, /** @src -1:-1:-1 */ var_v, /** @src 15:1590:1604  \"Vm(VM_ADDRESS)\" */ returndatasize())\n                                revert(pos_2, returndatasize())\n                            }\n                            /// @src 80:2651:2682  \"vm.sign(config.account, digest)\"\n                            let expr_component := /** @src -1:-1:-1 */ var_v\n                            let expr_50854_component := var_v\n                            let expr_50854_component_1 := var_v\n                            /// @src 80:2651:2682  \"vm.sign(config.account, digest)\"\n                            if _16\n                            {\n                                let _17 := /** @src 80:3165:3607  \"PackedUserOperation({...\" */ _10\n                                /// @src 80:2651:2682  \"vm.sign(config.account, digest)\"\n                                if gt(/** @src 80:3165:3607  \"PackedUserOperation({...\" */ _10, /** @src 80:2651:2682  \"vm.sign(config.account, digest)\" */ returndatasize()) { _17 := returndatasize() }\n                                finalize_allocation(_15, _17)\n                                let expr_component_1, expr_component_2, expr_component_3 := abi_decode_uint8t_bytes32t_bytes32_fromMemory(_15, add(_15, _17))\n                                expr_component := expr_component_1\n                                expr_50854_component := expr_component_2\n                                expr_50854_component_1 := expr_component_3\n                            }\n                            /// @src 80:2639:2682  \"(v, r, s) = vm.sign(config.account, digest)\"\n                            var_s := expr_50854_component_1\n                            var_r := expr_50854_component\n                            var_v := expr_component\n                        }\n                        default /// @src 80:2520:2693  \"if (block.chainid == 31337) {...\"\n                        {\n                            /// @src 80:2574:2608  \"vm.sign(ANVIL_DEFAULT_KEY, digest)\"\n                            let _18 := /** @src 80:575:3616  \"contract SendPackedUserOp is Script {...\" */ mload(_1)\n                            /// @src 80:2574:2608  \"vm.sign(ANVIL_DEFAULT_KEY, digest)\"\n                            mstore(_18, /** @src 15:1590:1604  \"Vm(VM_ADDRESS)\" */ shl(226, 0x38d07aa9))\n                            /// @src 80:575:3616  \"contract SendPackedUserOp is Script {...\"\n                            mstore(/** @src 80:2574:2608  \"vm.sign(ANVIL_DEFAULT_KEY, digest)\" */ add(_18, /** @src 80:1944:1971  \"vm.getNonce(minimalAccount)\" */ 4), /** @src 80:2444:2510  \"0xac0974bec39a17e36ba4a6b4d238ff944bacb478cbed5efcae784d7bf4f2ff80\" */ 0xac0974bec39a17e36ba4a6b4d238ff944bacb478cbed5efcae784d7bf4f2ff80)\n                            /// @src 80:575:3616  \"contract SendPackedUserOp is Script {...\"\n                            mstore(/** @src 15:1590:1604  \"Vm(VM_ADDRESS)\" */ add(/** @src 80:2574:2608  \"vm.sign(ANVIL_DEFAULT_KEY, digest)\" */ _18, /** @src 15:1590:1604  \"Vm(VM_ADDRESS)\" */ 36), /** @src 80:575:3616  \"contract SendPackedUserOp is Script {...\" */ var_digest)\n                            /// @src 80:2574:2608  \"vm.sign(ANVIL_DEFAULT_KEY, digest)\"\n                            let _19 := staticcall(gas(), /** @src 80:575:3616  \"contract SendPackedUserOp is Script {...\" */ _6, /** @src 80:2574:2608  \"vm.sign(ANVIL_DEFAULT_KEY, digest)\" */ _18, /** @src 15:1590:1604  \"Vm(VM_ADDRESS)\" */ 68, /** @src 80:2574:2608  \"vm.sign(ANVIL_DEFAULT_KEY, digest)\" */ _18, /** @src 80:3165:3607  \"PackedUserOperation({...\" */ _10)\n                            /// @src 80:2574:2608  \"vm.sign(ANVIL_DEFAULT_KEY, digest)\"\n                            if iszero(_19)\n                            {\n                                /// @src 15:1590:1604  \"Vm(VM_ADDRESS)\"\n                                let pos_3 := /** @src 80:575:3616  \"contract SendPackedUserOp is Script {...\" */ mload(_1)\n                                /// @src 15:1590:1604  \"Vm(VM_ADDRESS)\"\n                                returndatacopy(pos_3, /** @src -1:-1:-1 */ 0, /** @src 15:1590:1604  \"Vm(VM_ADDRESS)\" */ returndatasize())\n                                revert(pos_3, returndatasize())\n                            }\n                            /// @src 80:2574:2608  \"vm.sign(ANVIL_DEFAULT_KEY, digest)\"\n                            let expr_component_4 := /** @src -1:-1:-1 */ 0\n                            let expr_component_5 := 0\n                            let expr_component_6 := 0\n                            /// @src 80:2574:2608  \"vm.sign(ANVIL_DEFAULT_KEY, digest)\"\n                            if _19\n                            {\n                                let _20 := /** @src 80:3165:3607  \"PackedUserOperation({...\" */ _10\n                                /// @src 80:2574:2608  \"vm.sign(ANVIL_DEFAULT_KEY, digest)\"\n                                if gt(/** @src 80:3165:3607  \"PackedUserOperation({...\" */ _10, /** @src 80:2574:2608  \"vm.sign(ANVIL_DEFAULT_KEY, digest)\" */ returndatasize()) { _20 := returndatasize() }\n                                finalize_allocation(_18, _20)\n                                let expr_component_7, expr_component_8, expr_component_9 := abi_decode_uint8t_bytes32t_bytes32_fromMemory(_18, add(_18, _20))\n                                expr_component_4 := expr_component_7\n                                expr_component_5 := expr_component_8\n                                expr_component_6 := expr_component_9\n                            }\n                            /// @src 80:2562:2608  \"(v, r, s) = vm.sign(ANVIL_DEFAULT_KEY, digest)\"\n                            var_s := expr_component_6\n                            var_r := expr_component_5\n                            var_v := expr_component_4\n                        }\n                        /// @src 80:2721:2746  \"abi.encodePacked(r, s, v)\"\n                        let expr_50867_mpos := /** @src 80:575:3616  \"contract SendPackedUserOp is Script {...\" */ mload(_1)\n                        mstore(/** @src 80:2721:2746  \"abi.encodePacked(r, s, v)\" */ add(expr_50867_mpos, /** @src 80:1944:1971  \"vm.getNonce(minimalAccount)\" */ _5), /** @src 80:575:3616  \"contract SendPackedUserOp is Script {...\" */ var_r)\n                        mstore(/** @src 15:1590:1604  \"Vm(VM_ADDRESS)\" */ add(/** @src 80:2721:2746  \"abi.encodePacked(r, s, v)\" */ expr_50867_mpos, /** @src 80:575:3616  \"contract SendPackedUserOp is Script {...\" */ _1), var_s)\n                        /// @src 15:1590:1604  \"Vm(VM_ADDRESS)\"\n                        mstore(add(/** @src 80:2721:2746  \"abi.encodePacked(r, s, v)\" */ expr_50867_mpos, /** @src 80:3165:3607  \"PackedUserOperation({...\" */ _10), /** @src 15:1590:1604  \"Vm(VM_ADDRESS)\" */ and(shl(248, var_v), shl(248, 255)))\n                        /// @src 80:2721:2746  \"abi.encodePacked(r, s, v)\"\n                        mstore(expr_50867_mpos, 65)\n                        finalize_allocation_7534(expr_50867_mpos)\n                        /// @src 80:2702:2746  \"userOp.signature = abi.encodePacked(r, s, v)\"\n                        mstore(/** @src 80:2702:2718  \"userOp.signature\" */ _11, /** @src 80:2702:2746  \"userOp.signature = abi.encodePacked(r, s, v)\" */ expr_50867_mpos)\n                        /// @src 80:2757:2770  \"return userOp\"\n                        var_mpos := memPtr\n                    }\n                    /// @src 80:575:3616  \"contract SendPackedUserOp is Script {...\"\n                    function abi_decode_address_fromMemory(offset) -> value\n                    {\n                        value := mload(offset)\n                        if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(0, 0) }\n                    }\n                    function abi_decode_struct_NetworkConfig_fromMemory(headStart, dataEnd) -> value0\n                    {\n                        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n                        let memPtr := mload(64)\n                        finalize_allocation_5090(memPtr)\n                        mstore(memPtr, abi_decode_address_fromMemory(headStart))\n                        mstore(add(memPtr, 32), abi_decode_address_fromMemory(add(headStart, 32)))\n                        value0 := memPtr\n                    }\n                    function memory_array_index_access_struct_PackedUserOperation_dyn(baseRef) -> addr\n                    {\n                        if iszero(mload(baseRef))\n                        {\n                            mstore(0, shl(224, 0x4e487b71))\n                            mstore(4, 0x32)\n                            revert(0, 0x24)\n                        }\n                        addr := add(baseRef, 32)\n                    }\n                }\n                /// @use-src 15:\"lib/forge-std/src/Base.sol\", 16:\"lib/forge-std/src/Script.sol\", 18:\"lib/forge-std/src/StdChains.sol\", 19:\"lib/forge-std/src/StdCheats.sol\", 27:\"lib/forge-std/src/StdUtils.sol\", 79:\"script/HelperConfig.s.sol\"\n                object \"HelperConfig_50629\" {\n                    code {\n                        {\n                            /// @src 79:191:2411  \"contract HelperConfig is Script {...\"\n                            mstore(64, memoryguard(0x80))\n                            if callvalue() { revert(0, 0) }\n                            sstore(/** @src 18:3166:3170  \"true\" */ 0x0c, /** @src 79:191:2411  \"contract HelperConfig is Script {...\" */ or(and(sload(/** @src 18:3166:3170  \"true\" */ 0x0c), /** @src 79:191:2411  \"contract HelperConfig is Script {...\" */ not(16711935)), 65537))\n                            let memPtr := allocate_memory()\n                            mstore(memPtr, 0)\n                            mstore(add(memPtr, 32), 0)\n                            /// @src 79:1530:1625  \"NetworkConfig({entryPoint: 0x5FF137D4b0FDCD49DcA30c7CF57E578a026d2789, account: BURNER_WALLET})\"\n                            let expr_mpos := /** @src 79:191:2411  \"contract HelperConfig is Script {...\" */ allocate_memory()\n                            /// @src 79:539:581  \"0x86E26DC295d7c11FF54a39aA3420E3F163581D0c\"\n                            mstore(expr_mpos, /** @src 79:1557:1599  \"0x5FF137D4b0FDCD49DcA30c7CF57E578a026d2789\" */ 0x5ff137d4b0fdcd49dca30c7cf57e578a026d2789)\n                            /// @src 79:1530:1625  \"NetworkConfig({entryPoint: 0x5FF137D4b0FDCD49DcA30c7CF57E578a026d2789, account: BURNER_WALLET})\"\n                            let _1 := add(expr_mpos, /** @src 79:191:2411  \"contract HelperConfig is Script {...\" */ 32)\n                            /// @src 79:539:581  \"0x86E26DC295d7c11FF54a39aA3420E3F163581D0c\"\n                            mstore(_1, 0x86e26dc295d7c11ff54a39aa3420e3f163581d0c)\n                            /// @src 79:399:407  \"11155111\"\n                            mstore(/** @src 79:191:2411  \"contract HelperConfig is Script {...\" */ 0, /** @src 79:399:407  \"11155111\" */ 0xaa36a7)\n                            mstore(/** @src 79:191:2411  \"contract HelperConfig is Script {...\" */ 32, /** @src 79:884:898  \"networkConfigs\" */ 0x0f)\n                            /// @src 79:399:407  \"11155111\"\n                            let dataSlot := keccak256(/** @src 79:191:2411  \"contract HelperConfig is Script {...\" */ 0, 64)\n                            /// @src 79:399:407  \"11155111\"\n                            let _2 := sub(shl(160, /** @src 79:191:2411  \"contract HelperConfig is Script {...\" */ 1), 1)\n                            /// @src 79:399:407  \"11155111\"\n                            let _3 := and(mload(expr_mpos), _2)\n                            let _4 := not(sub(shl(160, /** @src 79:191:2411  \"contract HelperConfig is Script {...\" */ 1), 1))\n                            /// @src 79:399:407  \"11155111\"\n                            sstore(dataSlot, or(and(sload(dataSlot), _4), _3))\n                            let memberSlot := add(dataSlot, /** @src 18:3166:3170  \"true\" */ 0x01)\n                            /// @src 79:399:407  \"11155111\"\n                            sstore(memberSlot, or(and(sload(memberSlot), _4), and(mload(_1), _2)))\n                            /// @src 79:191:2411  \"contract HelperConfig is Script {...\"\n                            let _5 := mload(64)\n                            let _6 := datasize(\"HelperConfig_50629_deployed\")\n                            codecopy(_5, dataoffset(\"HelperConfig_50629_deployed\"), _6)\n                            return(_5, _6)\n                        }\n                        function allocate_memory() -> memPtr\n                        {\n                            memPtr := mload(64)\n                            let newFreePtr := add(memPtr, 64)\n                            if or(gt(newFreePtr, sub(shl(64, 1), 1)), lt(newFreePtr, memPtr))\n                            {\n                                mstore(0, shl(224, 0x4e487b71))\n                                mstore(4, 0x41)\n                                revert(0, 0x24)\n                            }\n                            mstore(64, newFreePtr)\n                        }\n                    }\n                    /// @use-src 15:\"lib/forge-std/src/Base.sol\", 16:\"lib/forge-std/src/Script.sol\", 30:\"lib/forge-std/src/console.sol\", 79:\"script/HelperConfig.s.sol\"\n                    object \"HelperConfig_50629_deployed\" {\n                        code {\n                            {\n                                /// @src 79:191:2411  \"contract HelperConfig is Script {...\"\n                                let _1 := 64\n                                mstore(_1, memoryguard(0x80))\n                                if iszero(lt(calldatasize(), 4))\n                                {\n                                    let _2 := 0\n                                    switch shr(224, calldataload(_2))\n                                    case 0x12900da8 {\n                                        if callvalue() { revert(_2, _2) }\n                                        if slt(add(calldatasize(), not(3)), _2) { revert(_2, _2) }\n                                        let ret := fun_getOrCreateAnvilEthConfig()\n                                        let memPos := mload(_1)\n                                        return(memPos, sub(abi_encode_struct_NetworkConfig(memPos, ret), memPos))\n                                    }\n                                    case 0x3408e470 {\n                                        if callvalue() { revert(_2, _2) }\n                                        if slt(add(calldatasize(), not(3)), _2) { revert(_2, _2) }\n                                        let memPos_1 := mload(_1)\n                                        mstore(memPos_1, /** @src 79:2389:2402  \"block.chainid\" */ chainid())\n                                        /// @src 79:191:2411  \"contract HelperConfig is Script {...\"\n                                        return(memPos_1, 32)\n                                    }\n                                    case 0x7b99b603 {\n                                        if callvalue() { revert(_2, _2) }\n                                        if slt(add(calldatasize(), not(3)), 32) { revert(_2, _2) }\n                                        mstore(_2, calldataload(4))\n                                        mstore(32, /** @src 79:790:853  \"mapping(uint256 chainId => NetworkConfig) public networkConfigs\" */ 15)\n                                        /// @src 79:191:2411  \"contract HelperConfig is Script {...\"\n                                        let dataSlot := keccak256(_2, _1)\n                                        let _3 := sub(shl(160, 1), 1)\n                                        let cleaned := and(sload(/** @src 79:790:853  \"mapping(uint256 chainId => NetworkConfig) public networkConfigs\" */ dataSlot), /** @src 79:191:2411  \"contract HelperConfig is Script {...\" */ _3)\n                                        let cleaned_1 := and(sload(/** @src 79:790:853  \"mapping(uint256 chainId => NetworkConfig) public networkConfigs\" */ add(dataSlot, /** @src 79:191:2411  \"contract HelperConfig is Script {...\" */ 1)), _3)\n                                        let memPos_2 := mload(_1)\n                                        return(memPos_2, sub(abi_encode_address_address(memPos_2, cleaned, cleaned_1), memPos_2))\n                                    }\n                                    case 0xa60f7516 {\n                                        if callvalue() { revert(_2, _2) }\n                                        if slt(add(calldatasize(), not(3)), _2) { revert(_2, _2) }\n                                        let _4 := sub(shl(160, 1), 1)\n                                        let cleaned_2 := and(sload(/** @src 79:745:784  \"NetworkConfig public localNetworkConfig\" */ 13), /** @src 79:191:2411  \"contract HelperConfig is Script {...\" */ _4)\n                                        let cleaned_3 := and(sload(/** @src 79:745:784  \"NetworkConfig public localNetworkConfig\" */ 14), /** @src 79:191:2411  \"contract HelperConfig is Script {...\" */ _4)\n                                        let memPos_3 := mload(_1)\n                                        return(memPos_3, sub(abi_encode_address_address(memPos_3, cleaned_2, cleaned_3), memPos_3))\n                                    }\n                                    case 0xc3f909d4 {\n                                        if callvalue() { revert(_2, _2) }\n                                        if slt(add(calldatasize(), not(3)), _2) { revert(_2, _2) }\n                                        let memPtr := mload(_1)\n                                        finalize_allocation_2007(memPtr)\n                                        mstore(memPtr, _2)\n                                        mstore(add(memPtr, 32), _2)\n                                        /// @src 79:1026:1067  \"return _getConfigByChainId(block.chainid)\"\n                                        let var_mpos := /** @src 79:1033:1067  \"_getConfigByChainId(block.chainid)\" */ fun_getConfigByChainId(/** @src 79:1053:1066  \"block.chainid\" */ chainid())\n                                        /// @src 79:191:2411  \"contract HelperConfig is Script {...\"\n                                        let memPos_4 := mload(_1)\n                                        return(memPos_4, sub(abi_encode_struct_NetworkConfig(memPos_4, var_mpos), memPos_4))\n                                    }\n                                    case 0xf8ccbf47 {\n                                        if callvalue() { revert(_2, _2) }\n                                        if slt(add(calldatasize(), not(3)), _2) { revert(_2, _2) }\n                                        let value := and(shr(16, sload(/** @src 16:800:828  \"bool public IS_SCRIPT = true\" */ 12)), /** @src 79:191:2411  \"contract HelperConfig is Script {...\" */ 0xff)\n                                        let memPos_5 := mload(_1)\n                                        mstore(memPos_5, iszero(iszero(value)))\n                                        return(memPos_5, 32)\n                                    }\n                                }\n                                revert(0, 0)\n                            }\n                            function abi_encode_struct_NetworkConfig(headStart, value0) -> tail\n                            {\n                                tail := add(headStart, 64)\n                                let _1 := sub(shl(160, 1), 1)\n                                mstore(headStart, and(mload(value0), _1))\n                                mstore(add(headStart, 0x20), and(mload(add(value0, 0x20)), _1))\n                            }\n                            function abi_encode_address_address(headStart, value0, value1) -> tail\n                            {\n                                tail := add(headStart, 64)\n                                let _1 := sub(shl(160, 1), 1)\n                                mstore(headStart, and(value0, _1))\n                                mstore(add(headStart, 32), and(value1, _1))\n                            }\n                            function finalize_allocation_2007(memPtr)\n                            {\n                                let newFreePtr := add(memPtr, 64)\n                                if or(gt(newFreePtr, 0xffffffffffffffff), lt(newFreePtr, memPtr))\n                                {\n                                    mstore(0, shl(224, 0x4e487b71))\n                                    mstore(4, 0x41)\n                                    revert(0, 0x24)\n                                }\n                                mstore(64, newFreePtr)\n                            }\n                            function finalize_allocation(memPtr)\n                            {\n                                if gt(memPtr, 0xffffffffffffffff)\n                                {\n                                    mstore(0, shl(224, 0x4e487b71))\n                                    mstore(4, 0x41)\n                                    revert(0, 0x24)\n                                }\n                                mstore(64, memPtr)\n                            }\n                            function read_from_storage_reference_type_struct_NetworkConfig() -> value\n                            {\n                                let memPtr := mload(64)\n                                finalize_allocation_2007(memPtr)\n                                value := memPtr\n                                let _1 := sub(shl(160, 1), 1)\n                                mstore(memPtr, and(sload(/** @src 79:1899:1917  \"localNetworkConfig\" */ 0x0d), /** @src 79:191:2411  \"contract HelperConfig is Script {...\" */ _1))\n                                mstore(add(memPtr, 32), and(sload(14), _1))\n                            }\n                            /// @ast-id 50619 @src 79:1810:2314  \"function getOrCreateAnvilEthConfig() public returns (NetworkConfig memory) {...\"\n                            function fun_getOrCreateAnvilEthConfig() -> var_50568_mpos\n                            {\n                                /// @src 79:191:2411  \"contract HelperConfig is Script {...\"\n                                let _1 := 64\n                                let memPtr := mload(_1)\n                                finalize_allocation_2007(memPtr)\n                                /// @src -1:-1:-1\n                                let _2 := 0\n                                /// @src 79:191:2411  \"contract HelperConfig is Script {...\"\n                                mstore(memPtr, /** @src -1:-1:-1 */ _2)\n                                /// @src 79:191:2411  \"contract HelperConfig is Script {...\"\n                                let _3 := 32\n                                mstore(add(memPtr, _3), /** @src -1:-1:-1 */ _2)\n                                /// @src 79:191:2411  \"contract HelperConfig is Script {...\"\n                                let _4 := sload(/** @src 79:1899:1925  \"localNetworkConfig.account\" */ 14)\n                                /// @src 79:191:2411  \"contract HelperConfig is Script {...\"\n                                let cleaned := /** @src -1:-1:-1 */ _2\n                                /// @src 79:191:2411  \"contract HelperConfig is Script {...\"\n                                let _5 := sub(shl(160, 1), 1)\n                                /// @src 79:1895:1991  \"if (localNetworkConfig.account != address(0)) {...\"\n                                if /** @src 79:1899:1939  \"localNetworkConfig.account != address(0)\" */ iszero(iszero(/** @src 79:191:2411  \"contract HelperConfig is Script {...\" */ and(_4, _5)))\n                                /// @src 79:1895:1991  \"if (localNetworkConfig.account != address(0)) {...\"\n                                {\n                                    /// @src 79:1955:1980  \"return localNetworkConfig\"\n                                    var_50568_mpos := /** @src 79:191:2411  \"contract HelperConfig is Script {...\" */ read_from_storage_reference_type_struct_NetworkConfig()\n                                    /// @src 79:1955:1980  \"return localNetworkConfig\"\n                                    leave\n                                }\n                                /// @src 79:191:2411  \"contract HelperConfig is Script {...\"\n                                let memPtr_1 := mload(_1)\n                                finalize_allocation_2007(memPtr_1)\n                                mstore(memPtr_1, 15)\n                                mstore(add(memPtr_1, _3), \"Deploying mocks\")\n                                /// @src 30:6071:6113  \"abi.encodeWithSignature(\\\"log(string)\\\", p0)\"\n                                let expr_mpos := /** @src 79:191:2411  \"contract HelperConfig is Script {...\" */ mload(_1)\n                                /// @src 30:6071:6113  \"abi.encodeWithSignature(\\\"log(string)\\\", p0)\"\n                                let _6 := add(expr_mpos, /** @src 79:191:2411  \"contract HelperConfig is Script {...\" */ _3)\n                                /// @src 30:6071:6113  \"abi.encodeWithSignature(\\\"log(string)\\\", p0)\"\n                                mstore(_6, shl(226, 0x104c13eb))\n                                /// @src 79:191:2411  \"contract HelperConfig is Script {...\"\n                                mstore(/** @src 30:6071:6113  \"abi.encodeWithSignature(\\\"log(string)\\\", p0)\" */ add(expr_mpos, 36), /** @src 79:191:2411  \"contract HelperConfig is Script {...\" */ _3)\n                                let length := mload(memPtr_1)\n                                mstore(add(/** @src 30:6071:6113  \"abi.encodeWithSignature(\\\"log(string)\\\", p0)\" */ expr_mpos, /** @src 79:191:2411  \"contract HelperConfig is Script {...\" */ 68), length)\n                                let i := /** @src -1:-1:-1 */ _2\n                                /// @src 79:191:2411  \"contract HelperConfig is Script {...\"\n                                for { } lt(i, length) { i := add(i, _3) }\n                                {\n                                    mstore(add(add(/** @src 30:6071:6113  \"abi.encodeWithSignature(\\\"log(string)\\\", p0)\" */ expr_mpos, /** @src 79:191:2411  \"contract HelperConfig is Script {...\" */ i), 100), mload(add(add(memPtr_1, i), _3)))\n                                }\n                                mstore(add(add(/** @src 30:6071:6113  \"abi.encodeWithSignature(\\\"log(string)\\\", p0)\" */ expr_mpos, /** @src 79:191:2411  \"contract HelperConfig is Script {...\" */ length), 100), /** @src -1:-1:-1 */ _2)\n                                /// @src 79:191:2411  \"contract HelperConfig is Script {...\"\n                                let _7 := not(31)\n                                /// @src 30:6071:6113  \"abi.encodeWithSignature(\\\"log(string)\\\", p0)\"\n                                let _8 := sub(/** @src 79:191:2411  \"contract HelperConfig is Script {...\" */ add(/** @src 30:6071:6113  \"abi.encodeWithSignature(\\\"log(string)\\\", p0)\" */ expr_mpos, /** @src 79:191:2411  \"contract HelperConfig is Script {...\" */ and(add(length, 31), _7)), /** @src 30:6071:6113  \"abi.encodeWithSignature(\\\"log(string)\\\", p0)\" */ expr_mpos)\n                                mstore(expr_mpos, add(_8, /** @src 79:191:2411  \"contract HelperConfig is Script {...\" */ 68))\n                                let newFreePtr := add(expr_mpos, and(add(/** @src 30:6071:6113  \"abi.encodeWithSignature(\\\"log(string)\\\", p0)\" */ _8, /** @src 79:191:2411  \"contract HelperConfig is Script {...\" */ 131), _7))\n                                let _9 := 0xffffffffffffffff\n                                if or(gt(newFreePtr, _9), lt(newFreePtr, expr_mpos))\n                                {\n                                    mstore(/** @src -1:-1:-1 */ _2, /** @src 79:191:2411  \"contract HelperConfig is Script {...\" */ shl(224, 0x4e487b71))\n                                    mstore(4, 0x41)\n                                    revert(/** @src -1:-1:-1 */ _2, /** @src 30:6071:6113  \"abi.encodeWithSignature(\\\"log(string)\\\", p0)\" */ 36)\n                                }\n                                /// @src 79:191:2411  \"contract HelperConfig is Script {...\"\n                                mstore(_1, newFreePtr)\n                                /// @src 30:762:921  \"assembly {...\"\n                                pop(staticcall(gas(), /** @src 30:131:173  \"0x000000000000000000636F6e736F6c652e6c6f67\" */ 0x636f6e736f6c652e6c6f67, /** @src 30:762:921  \"assembly {...\" */ _6, /** @src 79:191:2411  \"contract HelperConfig is Script {...\" */ mload(/** @src 30:645:659  \"payload.length\" */ expr_mpos), /** @src -1:-1:-1 */ _2, _2))\n                                /// @src 79:191:2411  \"contract HelperConfig is Script {...\"\n                                let _10 := 0x7109709ecfa91a80626ff3989d68f67f5b1dd12d\n                                /// @src 79:2041:2081  \"vm.startBroadcast(ANVIL_DEFAULT_ADDRESS)\"\n                                if iszero(extcodesize(/** @src 79:191:2411  \"contract HelperConfig is Script {...\" */ _10))\n                                /// @src 79:2041:2081  \"vm.startBroadcast(ANVIL_DEFAULT_ADDRESS)\"\n                                {\n                                    /// @src 79:191:2411  \"contract HelperConfig is Script {...\"\n                                    revert(/** @src -1:-1:-1 */ _2, _2)\n                                }\n                                /// @src 79:2041:2081  \"vm.startBroadcast(ANVIL_DEFAULT_ADDRESS)\"\n                                let _11 := /** @src 79:191:2411  \"contract HelperConfig is Script {...\" */ mload(_1)\n                                /// @src 79:2041:2081  \"vm.startBroadcast(ANVIL_DEFAULT_ADDRESS)\"\n                                mstore(_11, /** @src 79:628:670  \"0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266\" */ shl(224, 0x7fec2a8d))\n                                let _12 := 0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266\n                                /// @src 79:191:2411  \"contract HelperConfig is Script {...\"\n                                mstore(/** @src 79:2041:2081  \"vm.startBroadcast(ANVIL_DEFAULT_ADDRESS)\" */ add(_11, 4), /** @src 79:628:670  \"0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266\" */ _12)\n                                /// @src 79:2041:2081  \"vm.startBroadcast(ANVIL_DEFAULT_ADDRESS)\"\n                                let _13 := call(gas(), /** @src 79:191:2411  \"contract HelperConfig is Script {...\" */ _10, /** @src -1:-1:-1 */ _2, /** @src 79:2041:2081  \"vm.startBroadcast(ANVIL_DEFAULT_ADDRESS)\" */ _11, /** @src 30:6071:6113  \"abi.encodeWithSignature(\\\"log(string)\\\", p0)\" */ 36, /** @src 79:2041:2081  \"vm.startBroadcast(ANVIL_DEFAULT_ADDRESS)\" */ _11, /** @src -1:-1:-1 */ _2)\n                                /// @src 79:2041:2081  \"vm.startBroadcast(ANVIL_DEFAULT_ADDRESS)\"\n                                if iszero(_13)\n                                {\n                                    /// @src 79:628:670  \"0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266\"\n                                    let pos := /** @src 79:191:2411  \"contract HelperConfig is Script {...\" */ mload(_1)\n                                    /// @src 79:628:670  \"0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266\"\n                                    returndatacopy(pos, /** @src -1:-1:-1 */ _2, /** @src 79:628:670  \"0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266\" */ returndatasize())\n                                    revert(pos, returndatasize())\n                                }\n                                /// @src 79:2041:2081  \"vm.startBroadcast(ANVIL_DEFAULT_ADDRESS)\"\n                                if _13\n                                {\n                                    finalize_allocation(_11)\n                                    /// @src 79:191:2411  \"contract HelperConfig is Script {...\"\n                                    cleaned := /** @src -1:-1:-1 */ _2\n                                }\n                                /// @src 79:2115:2131  \"new EntryPoint()\"\n                                let _14 := /** @src 79:191:2411  \"contract HelperConfig is Script {...\" */ mload(_1)\n                                /// @src 79:2115:2131  \"new EntryPoint()\"\n                                let _15 := datasize(\"EntryPoint_2101\")\n                                let _16 := add(_14, _15)\n                                if or(gt(_16, /** @src 79:191:2411  \"contract HelperConfig is Script {...\" */ _9), /** @src 79:2115:2131  \"new EntryPoint()\" */ lt(_16, _14))\n                                {\n                                    /// @src 79:191:2411  \"contract HelperConfig is Script {...\"\n                                    mstore(/** @src 79:1937:1938  \"0\" */ cleaned, /** @src 79:191:2411  \"contract HelperConfig is Script {...\" */ shl(224, 0x4e487b71))\n                                    mstore(/** @src 79:2041:2081  \"vm.startBroadcast(ANVIL_DEFAULT_ADDRESS)\" */ 4, /** @src 79:191:2411  \"contract HelperConfig is Script {...\" */ 0x41)\n                                    revert(/** @src 79:1937:1938  \"0\" */ cleaned, /** @src 30:6071:6113  \"abi.encodeWithSignature(\\\"log(string)\\\", p0)\" */ 36)\n                                }\n                                /// @src 79:2115:2131  \"new EntryPoint()\"\n                                datacopy(_14, dataoffset(\"EntryPoint_2101\"), _15)\n                                let expr_address := create(/** @src 79:1937:1938  \"0\" */ cleaned, /** @src 79:2115:2131  \"new EntryPoint()\" */ _14, sub(_16, _14))\n                                if iszero(expr_address)\n                                {\n                                    /// @src 79:628:670  \"0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266\"\n                                    let pos_1 := /** @src 79:191:2411  \"contract HelperConfig is Script {...\" */ mload(_1)\n                                    /// @src 79:628:670  \"0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266\"\n                                    returndatacopy(pos_1, /** @src 79:1937:1938  \"0\" */ cleaned, /** @src 79:628:670  \"0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266\" */ returndatasize())\n                                    revert(pos_1, returndatasize())\n                                }\n                                /// @src 79:2141:2159  \"vm.stopBroadcast()\"\n                                if iszero(extcodesize(/** @src 79:191:2411  \"contract HelperConfig is Script {...\" */ _10))\n                                /// @src 79:2141:2159  \"vm.stopBroadcast()\"\n                                {\n                                    /// @src 79:191:2411  \"contract HelperConfig is Script {...\"\n                                    revert(/** @src 79:1937:1938  \"0\" */ cleaned, cleaned)\n                                }\n                                /// @src 79:2141:2159  \"vm.stopBroadcast()\"\n                                let _17 := /** @src 79:191:2411  \"contract HelperConfig is Script {...\" */ mload(_1)\n                                /// @src 79:2141:2159  \"vm.stopBroadcast()\"\n                                mstore(_17, /** @src 79:628:670  \"0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266\" */ shl(225, 0x3b756e9b))\n                                /// @src 79:2141:2159  \"vm.stopBroadcast()\"\n                                let _18 := call(gas(), /** @src 79:191:2411  \"contract HelperConfig is Script {...\" */ _10, /** @src 79:1937:1938  \"0\" */ cleaned, /** @src 79:2141:2159  \"vm.stopBroadcast()\" */ _17, /** @src 79:2041:2081  \"vm.startBroadcast(ANVIL_DEFAULT_ADDRESS)\" */ 4, /** @src 79:2141:2159  \"vm.stopBroadcast()\" */ _17, /** @src 79:1937:1938  \"0\" */ cleaned)\n                                /// @src 79:2141:2159  \"vm.stopBroadcast()\"\n                                if iszero(_18)\n                                {\n                                    /// @src 79:628:670  \"0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266\"\n                                    let pos_2 := /** @src 79:191:2411  \"contract HelperConfig is Script {...\" */ mload(_1)\n                                    /// @src 79:628:670  \"0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266\"\n                                    returndatacopy(pos_2, /** @src 79:1937:1938  \"0\" */ cleaned, /** @src 79:628:670  \"0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266\" */ returndatasize())\n                                    revert(pos_2, returndatasize())\n                                }\n                                /// @src 79:2141:2159  \"vm.stopBroadcast()\"\n                                if _18\n                                {\n                                    finalize_allocation(_17)\n                                    /// @src 79:191:2411  \"contract HelperConfig is Script {...\"\n                                    if cleaned\n                                    {\n                                        revert(/** @src 79:1937:1938  \"0\" */ cleaned, cleaned)\n                                    }\n                                }\n                                /// @src 79:191:2411  \"contract HelperConfig is Script {...\"\n                                let _19 := and(/** @src 79:2218:2237  \"address(entryPoint)\" */ expr_address, /** @src 79:191:2411  \"contract HelperConfig is Script {...\" */ _5)\n                                let memPtr_2 := mload(_1)\n                                finalize_allocation_2007(memPtr_2)\n                                mstore(memPtr_2, _19)\n                                mstore(/** @src 79:2191:2271  \"NetworkConfig({entryPoint: address(entryPoint), account: ANVIL_DEFAULT_ADDRESS})\" */ add(memPtr_2, /** @src 79:191:2411  \"contract HelperConfig is Script {...\" */ _3), /** @src 79:628:670  \"0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266\" */ _12)\n                                let _20 := shl(160, 0xffffffffffffffffffffffff)\n                                sstore(/** @src 79:1899:1917  \"localNetworkConfig\" */ 0x0d, /** @src 79:628:670  \"0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266\" */ or(and(sload(/** @src 79:1899:1917  \"localNetworkConfig\" */ 0x0d), /** @src 79:628:670  \"0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266\" */ _20), /** @src 79:191:2411  \"contract HelperConfig is Script {...\" */ _19))\n                                /// @src 79:628:670  \"0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266\"\n                                sstore(/** @src 79:1899:1925  \"localNetworkConfig.account\" */ 14, /** @src 79:628:670  \"0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266\" */ or(and(sload(/** @src 79:1899:1925  \"localNetworkConfig.account\" */ 14), /** @src 79:628:670  \"0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266\" */ _20), _12))\n                                /// @src 79:2282:2307  \"return localNetworkConfig\"\n                                var_50568_mpos := /** @src 79:191:2411  \"contract HelperConfig is Script {...\" */ read_from_storage_reference_type_struct_NetworkConfig()\n                            }\n                            /// @ast-id 50537 @src 79:1080:1431  \"function _getConfigByChainId(uint256 chainId) internal returns (NetworkConfig memory) {...\"\n                            function fun_getConfigByChainId(var_chainId) -> var_mpos\n                            {\n                                /// @src 79:191:2411  \"contract HelperConfig is Script {...\"\n                                let memPtr := mload(64)\n                                finalize_allocation_2007(memPtr)\n                                mstore(memPtr, /** @src -1:-1:-1 */ 0)\n                                /// @src 79:191:2411  \"contract HelperConfig is Script {...\"\n                                mstore(add(memPtr, 32), /** @src -1:-1:-1 */ 0)\n                                /// @src 79:1176:1378  \"if (chainId == LOCAL_CHAIN_ID) {...\"\n                                switch /** @src 79:1180:1205  \"chainId == LOCAL_CHAIN_ID\" */ eq(var_chainId, /** @src 79:495:500  \"31337\" */ 0x7a69)\n                                case /** @src 79:1176:1378  \"if (chainId == LOCAL_CHAIN_ID) {...\" */ 0 {\n                                    /// @src 79:191:2411  \"contract HelperConfig is Script {...\"\n                                    mstore(/** @src -1:-1:-1 */ 0, /** @src 79:191:2411  \"contract HelperConfig is Script {...\" */ var_chainId)\n                                    mstore(32, /** @src 79:1276:1290  \"networkConfigs\" */ 0x0f)\n                                    /// @src 79:191:2411  \"contract HelperConfig is Script {...\"\n                                    let dataSlot := keccak256(/** @src -1:-1:-1 */ 0, /** @src 79:191:2411  \"contract HelperConfig is Script {...\" */ 64)\n                                    let _1 := sub(shl(160, 1), 1)\n                                    let _2 := and(sload(/** @src 79:1276:1307  \"networkConfigs[chainId].account\" */ add(/** @src 79:1276:1299  \"networkConfigs[chainId]\" */ dataSlot, /** @src 79:1276:1307  \"networkConfigs[chainId].account\" */ 1)), /** @src 79:191:2411  \"contract HelperConfig is Script {...\" */ _1)\n                                    /// @src 79:1272:1378  \"if (networkConfigs[chainId].account != address(0)) {...\"\n                                    if /** @src 79:1276:1321  \"networkConfigs[chainId].account != address(0)\" */ iszero(iszero(/** @src 79:191:2411  \"contract HelperConfig is Script {...\" */ _2))\n                                    /// @src 79:1272:1378  \"if (networkConfigs[chainId].account != address(0)) {...\"\n                                    {\n                                        /// @src 79:191:2411  \"contract HelperConfig is Script {...\"\n                                        let memPtr_1 := mload(64)\n                                        finalize_allocation_2007(memPtr_1)\n                                        mstore(memPtr_1, and(sload(dataSlot), _1))\n                                        mstore(add(memPtr_1, 32), _2)\n                                        /// @src 79:1337:1367  \"return networkConfigs[chainId]\"\n                                        var_mpos := memPtr_1\n                                        leave\n                                    }\n                                }\n                                default /// @src 79:1176:1378  \"if (chainId == LOCAL_CHAIN_ID) {...\"\n                                {\n                                    /// @src 79:1221:1255  \"return getOrCreateAnvilEthConfig()\"\n                                    var_mpos := /** @src 79:1228:1255  \"getOrCreateAnvilEthConfig()\" */ fun_getOrCreateAnvilEthConfig()\n                                    /// @src 79:1221:1255  \"return getOrCreateAnvilEthConfig()\"\n                                    leave\n                                }\n                                /// @src 79:1394:1424  \"HelperConfig__InvalidChainId()\"\n                                let _3 := /** @src 79:191:2411  \"contract HelperConfig is Script {...\" */ mload(64)\n                                /// @src 79:1394:1424  \"HelperConfig__InvalidChainId()\"\n                                mstore(_3, shl(225, 0x64780a77))\n                                revert(_3, 4)\n                            }\n                        }\n                        /// @use-src 0:\"lib/account-abstraction/contracts/core/EntryPoint.sol\", 2:\"lib/account-abstraction/contracts/core/NonceManager.sol\", 4:\"lib/account-abstraction/contracts/core/StakeManager.sol\", 9:\"lib/account-abstraction/contracts/interfaces/IEntryPoint.sol\", 10:\"lib/account-abstraction/contracts/interfaces/INonceManager.sol\", 12:\"lib/account-abstraction/contracts/interfaces/IStakeManager.sol\", 70:\"lib/openzeppelin-contracts/contracts/utils/ReentrancyGuard.sol\", 74:\"lib/openzeppelin-contracts/contracts/utils/introspection/ERC165.sol\", 75:\"lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol\"\n                        object \"EntryPoint_2101\" {\n                            code {\n                                {\n                                    /// @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                    let _1 := memoryguard(0xa0)\n                                    mstore(64, _1)\n                                    if callvalue() { revert(0, 0) }\n                                    /// @src 70:1713:1714  \"1\"\n                                    sstore(/** @src 70:1917:1938  \"_status = NOT_ENTERED\" */ 0x02, /** @src 70:1713:1714  \"1\" */ 0x01)\n                                    /// @src 0:985:1004  \"new SenderCreator()\"\n                                    let _2 := datasize(\"SenderCreator_2418\")\n                                    let _3 := add(_1, _2)\n                                    if or(gt(_3, sub(shl(64, 1), 1)), lt(_3, _1))\n                                    {\n                                        /// @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                        mstore(/** @src -1:-1:-1 */ 0, /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ shl(224, 0x4e487b71))\n                                        mstore(4, 0x41)\n                                        revert(/** @src -1:-1:-1 */ 0, /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 0x24)\n                                    }\n                                    /// @src 0:985:1004  \"new SenderCreator()\"\n                                    datacopy(_1, dataoffset(\"SenderCreator_2418\"), _2)\n                                    let expr_address := create(/** @src -1:-1:-1 */ 0, /** @src 0:985:1004  \"new SenderCreator()\" */ _1, sub(_3, _1))\n                                    if iszero(expr_address)\n                                    {\n                                        /// @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                        let pos := mload(64)\n                                        returndatacopy(pos, /** @src -1:-1:-1 */ 0, /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ returndatasize())\n                                        revert(pos, returndatasize())\n                                    }\n                                    /// @src 0:985:1004  \"new SenderCreator()\"\n                                    mstore(128, expr_address)\n                                    /// @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                    let _4 := mload(64)\n                                    let _5 := datasize(\"EntryPoint_2101_deployed\")\n                                    codecopy(_4, dataoffset(\"EntryPoint_2101_deployed\"), _5)\n                                    setimmutable(_4, \"35\", mload(/** @src 0:985:1004  \"new SenderCreator()\" */ 128))\n                                    /// @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                    return(_4, _5)\n                                }\n                            }\n                            /// @use-src 0:\"lib/account-abstraction/contracts/core/EntryPoint.sol\", 1:\"lib/account-abstraction/contracts/core/Helpers.sol\", 2:\"lib/account-abstraction/contracts/core/NonceManager.sol\", 4:\"lib/account-abstraction/contracts/core/StakeManager.sol\", 5:\"lib/account-abstraction/contracts/core/UserOperationLib.sol\", 14:\"lib/account-abstraction/contracts/utils/Exec.sol\", 70:\"lib/openzeppelin-contracts/contracts/utils/ReentrancyGuard.sol\", 74:\"lib/openzeppelin-contracts/contracts/utils/introspection/ERC165.sol\"\n                            object \"EntryPoint_2101_deployed\" {\n                                code {\n                                    {\n                                        /// @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                        mstore(64, memoryguard(0x80))\n                                        if iszero(lt(calldatasize(), 4))\n                                        {\n                                            switch shr(224, calldataload(0))\n                                            case 0x0042dc53 {\n                                                if callvalue() { revert(0, 0) }\n                                                if slt(add(calldatasize(), not(3)), 512) { revert(0, 0) }\n                                                let offset := calldataload(4)\n                                                let _1 := 0xffffffffffffffff\n                                                if gt(offset, _1) { revert(0, 0) }\n                                                if iszero(slt(add(offset, 35), calldatasize())) { revert(0, 0) }\n                                                let array := abi_decode_available_length_bytes(add(offset, 36), calldataload(add(4, offset)), calldatasize())\n                                                let _2 := add(calldatasize(), not(35))\n                                                if slt(_2, 0x01c0) { revert(0, 0) }\n                                                let memPtr := mload(64)\n                                                finalize_allocation_26259(memPtr)\n                                                if slt(_2, 0x0140) { revert(0, 0) }\n                                                let memPtr_1 := mload(64)\n                                                finalize_allocation_26260(memPtr_1)\n                                                let value := calldataload(36)\n                                                if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(0, 0) }\n                                                mstore(memPtr_1, value)\n                                                let _3 := 0x20\n                                                mstore(add(memPtr_1, _3), calldataload(68))\n                                                mstore(add(memPtr_1, 64), calldataload(100))\n                                                mstore(add(memPtr_1, 96), calldataload(132))\n                                                mstore(add(memPtr_1, 128), calldataload(164))\n                                                mstore(add(memPtr_1, 0xa0), calldataload(196))\n                                                mstore(add(memPtr_1, 192), calldataload(228))\n                                                let value_1 := calldataload(260)\n                                                if iszero(eq(value_1, and(value_1, sub(shl(160, 1), 1)))) { revert(0, 0) }\n                                                mstore(add(memPtr_1, 224), value_1)\n                                                mstore(add(memPtr_1, 256), calldataload(292))\n                                                mstore(add(memPtr_1, 288), calldataload(324))\n                                                mstore(memPtr, memPtr_1)\n                                                mstore(add(memPtr, _3), calldataload(356))\n                                                mstore(add(memPtr, 64), calldataload(388))\n                                                mstore(add(memPtr, 96), calldataload(420))\n                                                mstore(add(memPtr, 128), calldataload(452))\n                                                let offset_1 := calldataload(484)\n                                                if gt(offset_1, _1) { revert(0, 0) }\n                                                let value2, value3 := abi_decode_bytes_calldata(add(4, offset_1), calldatasize())\n                                                /// @src 0:11186:11195  \"gasleft()\"\n                                                let expr := gas()\n                                                /// @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                                if iszero(/** @src 0:11213:11240  \"msg.sender == address(this)\" */ eq(/** @src 0:11213:11223  \"msg.sender\" */ caller(), /** @src 0:11235:11239  \"this\" */ address()))\n                                                /// @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                                {\n                                                    let memPtr_2 := mload(64)\n                                                    mstore(memPtr_2, shl(229, 4594637))\n                                                    mstore(add(memPtr_2, 4), _3)\n                                                    mstore(add(memPtr_2, 36), 23)\n                                                    mstore(add(memPtr_2, 68), \"AA92 internal call only\")\n                                                    revert(memPtr_2, 100)\n                                                }\n                                                /// @src 0:11308:11322  \"opInfo.mUserOp\"\n                                                let _mpos := mload(memPtr)\n                                                /// @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                                let _4 := mload(/** @src 0:11356:11376  \"mUserOp.callGasLimit\" */ add(_mpos, /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 96))\n                                                let r := shr(6, mul(/** @src 0:11495:11504  \"gasleft()\" */ gas(), /** @src 0:11507:11509  \"63\" */ 0x3f))\n                                                /// @src 0:11491:11744  \"if (gasleft() * 63 / 64 < callGasLimit + mUserOp.paymasterPostOpGasLimit + INNER_GAS_OVERHEAD) {...\"\n                                                if /** @src 0:11495:11584  \"gasleft() * 63 / 64 < callGasLimit + mUserOp.paymasterPostOpGasLimit + INNER_GAS_OVERHEAD\" */ lt(r, /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ add(add(_4, mload(/** @src 0:11532:11563  \"mUserOp.paymasterPostOpGasLimit\" */ add(_mpos, /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 0xa0))), /** @src 0:1296:1301  \"10000\" */ 0x2710))\n                                                /// @src 0:11491:11744  \"if (gasleft() * 63 / 64 < callGasLimit + mUserOp.paymasterPostOpGasLimit + INNER_GAS_OVERHEAD) {...\"\n                                                {\n                                                    /// @src 0:11604:11730  \"assembly (\\\"memory-safe\\\") {...\"\n                                                    mstore(/** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 0, /** @src 0:11604:11730  \"assembly (\\\"memory-safe\\\") {...\" */ shl(224, 0xdeaddead))\n                                                    revert(/** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 0, _3)\n                                                }\n                                                /// @src 0:11764:11826  \"IPaymaster.PostOpMode mode = IPaymaster.PostOpMode.opSucceeded\"\n                                                let var_mode := /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 0\n                                                /// @src 0:11840:11855  \"callData.length\"\n                                                let expr_1 := /** @src 0:1296:1301  \"10000\" */ mload(/** @src 0:11840:11855  \"callData.length\" */ array)\n                                                /// @src 0:11836:12302  \"if (callData.length > 0) {...\"\n                                                if /** @src 0:11840:11859  \"callData.length > 0\" */ iszero(iszero(expr_1))\n                                                /// @src 0:11836:12302  \"if (callData.length > 0) {...\"\n                                                {\n                                                    /// @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                                    let cleaned := and(/** @src 0:1296:1301  \"10000\" */ mload(/** @src 0:11900:11914  \"mUserOp.sender\" */ _mpos), /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ sub(shl(160, 1), 1))\n                                                    /// @src 0:11956:12292  \"if (!success) {...\"\n                                                    if /** @src 0:11960:11968  \"!success\" */ iszero(/** @src 14:378:496  \"assembly (\\\"memory-safe\\\") {...\" */ call(_4, cleaned, /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 0, /** @src 14:378:496  \"assembly (\\\"memory-safe\\\") {...\" */ add(array, /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ _3), /** @src 14:378:496  \"assembly (\\\"memory-safe\\\") {...\" */ expr_1, /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 0, 0))\n                                                    /// @src 0:11956:12292  \"if (!success) {...\"\n                                                    {\n                                                        /// @src 14:1204:1553  \"assembly (\\\"memory-safe\\\") {...\"\n                                                        let usr$len := returndatasize()\n                                                        /// @src 0:1542:1546  \"2048\"\n                                                        let _5 := 0x0800\n                                                        /// @src 14:1204:1553  \"assembly (\\\"memory-safe\\\") {...\"\n                                                        if gt(usr$len, /** @src 0:1542:1546  \"2048\" */ _5)\n                                                        /// @src 14:1204:1553  \"assembly (\\\"memory-safe\\\") {...\"\n                                                        {\n                                                            usr$len := /** @src 0:1542:1546  \"2048\" */ _5\n                                                        }\n                                                        /// @src 14:1204:1553  \"assembly (\\\"memory-safe\\\") {...\"\n                                                        let usr$ptr := mload(/** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 64)\n                                                        /// @src 14:1204:1553  \"assembly (\\\"memory-safe\\\") {...\"\n                                                        mstore(/** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 64, /** @src 14:1204:1553  \"assembly (\\\"memory-safe\\\") {...\" */ add(add(usr$ptr, usr$len), /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ _3))\n                                                        /// @src 14:1204:1553  \"assembly (\\\"memory-safe\\\") {...\"\n                                                        mstore(usr$ptr, usr$len)\n                                                        returndatacopy(add(usr$ptr, /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ _3), 0, /** @src 14:1204:1553  \"assembly (\\\"memory-safe\\\") {...\" */ usr$len)\n                                                        /// @src 0:12069:12221  \"if (result.length > 0) {...\"\n                                                        if /** @src 0:12073:12090  \"result.length > 0\" */ iszero(iszero(/** @src 0:1296:1301  \"10000\" */ mload(/** @src 0:12073:12086  \"result.length\" */ usr$ptr)))\n                                                        /// @src 0:12069:12221  \"if (result.length > 0) {...\"\n                                                        {\n                                                            /// @src 0:1542:1546  \"2048\"\n                                                            let _6 := mload(/** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ add(memPtr, _3))\n                                                            let cleaned_1 := and(/** @src 0:1296:1301  \"10000\" */ mload(/** @src 0:12164:12178  \"mUserOp.sender\" */ _mpos), /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ sub(shl(160, 1), 1))\n                                                            let _7 := mload(/** @src 0:12180:12193  \"mUserOp.nonce\" */ add(_mpos, /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ _3))\n                                                            /// @src 0:12119:12202  \"UserOperationRevertReason(opInfo.userOpHash, mUserOp.sender, mUserOp.nonce, result)\"\n                                                            let _8 := /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ mload(64)\n                                                            mstore(_8, _7)\n                                                            /// @src 0:1542:1546  \"2048\"\n                                                            mstore(add(_8, /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ _3), 64)\n                                                            /// @src 0:12119:12202  \"UserOperationRevertReason(opInfo.userOpHash, mUserOp.sender, mUserOp.nonce, result)\"\n                                                            log3(_8, sub(/** @src 0:1542:1546  \"2048\" */ abi_encode_bytes(usr$ptr, add(_8, /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 64)), /** @src 0:12119:12202  \"UserOperationRevertReason(opInfo.userOpHash, mUserOp.sender, mUserOp.nonce, result)\" */ _8), 0x1c4fada7374c0a9ee8841fc38afe82932dc0f8e69012e927f061a8bae611a201, _6, cleaned_1)\n                                                        }\n                                                        /// @src 0:12238:12277  \"mode = IPaymaster.PostOpMode.opReverted\"\n                                                        var_mode := /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 1\n                                                    }\n                                                }\n                                                /// @src 0:1542:1546  \"2048\"\n                                                let diff := sub(expr, /** @src 0:12365:12374  \"gasleft()\" */ gas())\n                                                /// @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                                let _9 := add(diff, mload(add(memPtr, 128)))\n                                                /// @src 0:1542:1546  \"2048\"\n                                                let _10 := abi_decode_available_length_bytes(/** @src 0:12413:12461  \"_postExecution(mode, opInfo, context, actualGas)\" */ value2, value3, /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ calldatasize())\n                                                /// @src 0:12413:12461  \"_postExecution(mode, opInfo, context, actualGas)\"\n                                                let var_actualGas := _9\n                                                let var_actualGasCost := /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 0\n                                                /// @src 0:25391:25400  \"gasleft()\"\n                                                let expr_2 := gas()\n                                                /// @src 0:25434:25455  \"address refundAddress\"\n                                                let var_refundAddress := /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 0\n                                                /// @src 0:25434:25455  \"address refundAddress\"\n                                                let var_refundAddress_1 := /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 0\n                                                /// @src 0:25499:25513  \"opInfo.mUserOp\"\n                                                let _mpos_1 := mload(memPtr)\n                                                /// @src 0:25546:25572  \"getUserOpGasPrice(mUserOp)\"\n                                                let expr_3 := fun_getUserOpGasPrice(_mpos_1)\n                                                /// @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                                let cleaned_2 := and(/** @src 0:1296:1301  \"10000\" */ mload(/** @src 0:25607:25624  \"mUserOp.paymaster\" */ add(_mpos_1, /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 224)), sub(shl(160, 1), 1))\n                                                /// @src 0:25638:26482  \"if (paymaster == address(0)) {...\"\n                                                switch /** @src 0:25642:25665  \"paymaster == address(0)\" */ iszero(/** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ cleaned_2)\n                                                case /** @src 0:25638:26482  \"if (paymaster == address(0)) {...\" */ 0 {\n                                                    /// @src 0:25754:25779  \"refundAddress = paymaster\"\n                                                    var_refundAddress := cleaned_2\n                                                    /// @src 0:25797:26468  \"if (context.length > 0) {...\"\n                                                    if /** @src 0:25801:25819  \"context.length > 0\" */ iszero(iszero(/** @src 0:1296:1301  \"10000\" */ mload(/** @src 0:25801:25815  \"context.length\" */ _10)))\n                                                    /// @src 0:25797:26468  \"if (context.length > 0) {...\"\n                                                    {\n                                                        /// @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                                        if iszero(lt(var_mode, 3))\n                                                        {\n                                                            mstore(0, shl(224, 0x4e487b71))\n                                                            mstore(4, 0x21)\n                                                            revert(0, 36)\n                                                        }\n                                                        /// @src 0:25901:26450  \"if (mode != IPaymaster.PostOpMode.postOpReverted) {...\"\n                                                        if /** @src 0:25905:25949  \"mode != IPaymaster.PostOpMode.postOpReverted\" */ iszero(eq(var_mode, /** @src 0:25913:25949  \"IPaymaster.PostOpMode.postOpReverted\" */ 2))\n                                                        /// @src 0:25901:26450  \"if (mode != IPaymaster.PostOpMode.postOpReverted) {...\"\n                                                        {\n                                                            /// @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                                            let _11 := mload(/** @src 0:26015:26046  \"mUserOp.paymasterPostOpGasLimit\" */ add(_mpos_1, /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 0xa0))\n                                                            /// @src 0:25981:26141  \"IPaymaster(paymaster).postOp{gas: mUserOp.paymasterPostOpGasLimit}(...\"\n                                                            if iszero(extcodesize(cleaned_2))\n                                                            {\n                                                                /// @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                                                revert(0, 0)\n                                                            }\n                                                            /// @src 0:25981:26141  \"IPaymaster(paymaster).postOp{gas: mUserOp.paymasterPostOpGasLimit}(...\"\n                                                            let _12 := /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ mload(64)\n                                                            /// @src 0:25981:26141  \"IPaymaster(paymaster).postOp{gas: mUserOp.paymasterPostOpGasLimit}(...\"\n                                                            mstore(_12, /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ shl(224, 0x7c627b21))\n                                                            mstore(/** @src 0:25981:26141  \"IPaymaster(paymaster).postOp{gas: mUserOp.paymasterPostOpGasLimit}(...\" */ add(_12, /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 4), var_mode)\n                                                            mstore(add(/** @src 0:25981:26141  \"IPaymaster(paymaster).postOp{gas: mUserOp.paymasterPostOpGasLimit}(...\" */ _12, /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 36), 128)\n                                                            let tail := abi_encode_bytes(_10, add(/** @src 0:25981:26141  \"IPaymaster(paymaster).postOp{gas: mUserOp.paymasterPostOpGasLimit}(...\" */ _12, /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 132))\n                                                            mstore(add(/** @src 0:25981:26141  \"IPaymaster(paymaster).postOp{gas: mUserOp.paymasterPostOpGasLimit}(...\" */ _12, /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 68), mul(/** @src 0:25859:25879  \"actualGas * gasPrice\" */ _9, expr_3))\n                                                            /// @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                                            mstore(add(/** @src 0:25981:26141  \"IPaymaster(paymaster).postOp{gas: mUserOp.paymasterPostOpGasLimit}(...\" */ _12, /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 100), expr_3)\n                                                            /// @src 0:25981:26141  \"IPaymaster(paymaster).postOp{gas: mUserOp.paymasterPostOpGasLimit}(...\"\n                                                            let trySuccessCondition := call(_11, cleaned_2, /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 0, /** @src 0:25981:26141  \"IPaymaster(paymaster).postOp{gas: mUserOp.paymasterPostOpGasLimit}(...\" */ _12, sub(tail, _12), _12, /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 0)\n                                                            /// @src 0:25981:26141  \"IPaymaster(paymaster).postOp{gas: mUserOp.paymasterPostOpGasLimit}(...\"\n                                                            if trySuccessCondition\n                                                            {\n                                                                finalize_allocation_26283(_12)\n                                                                /// @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                                                var_refundAddress_1 := 0\n                                                            }\n                                                            /// @src 0:25977:26428  \"try IPaymaster(paymaster).postOp{gas: mUserOp.paymasterPostOpGasLimit}(...\"\n                                                            switch iszero(trySuccessCondition)\n                                                            case 0 { }\n                                                            default {\n                                                                /// @src 14:1204:1553  \"assembly (\\\"memory-safe\\\") {...\"\n                                                                let usr$len_1 := returndatasize()\n                                                                /// @src 0:1542:1546  \"2048\"\n                                                                let _13 := 0x0800\n                                                                /// @src 14:1204:1553  \"assembly (\\\"memory-safe\\\") {...\"\n                                                                if gt(usr$len_1, /** @src 0:1542:1546  \"2048\" */ _13)\n                                                                /// @src 14:1204:1553  \"assembly (\\\"memory-safe\\\") {...\"\n                                                                {\n                                                                    usr$len_1 := /** @src 0:1542:1546  \"2048\" */ _13\n                                                                }\n                                                                /// @src 14:1204:1553  \"assembly (\\\"memory-safe\\\") {...\"\n                                                                let usr$ptr_1 := mload(/** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 64)\n                                                                /// @src 14:1204:1553  \"assembly (\\\"memory-safe\\\") {...\"\n                                                                mstore(/** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 64, /** @src 14:1204:1553  \"assembly (\\\"memory-safe\\\") {...\" */ add(add(usr$ptr_1, usr$len_1), /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ _3))\n                                                                /// @src 14:1204:1553  \"assembly (\\\"memory-safe\\\") {...\"\n                                                                mstore(usr$ptr_1, usr$len_1)\n                                                                returndatacopy(add(usr$ptr_1, /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ _3), /** @src -1:-1:-1 */ var_refundAddress_1, /** @src 14:1204:1553  \"assembly (\\\"memory-safe\\\") {...\" */ usr$len_1)\n                                                                /// @src 0:26379:26401  \"PostOpReverted(reason)\"\n                                                                let _14 := /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ mload(64)\n                                                                /// @src 0:26379:26401  \"PostOpReverted(reason)\"\n                                                                mstore(_14, shl(226, 0x2b5e552f))\n                                                                /// @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                                                mstore(/** @src 0:26379:26401  \"PostOpReverted(reason)\" */ add(_14, /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 4), _3)\n                                                                /// @src 0:26379:26401  \"PostOpReverted(reason)\"\n                                                                revert(_14, sub(/** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ abi_encode_bytes(usr$ptr_1, add(/** @src 0:26379:26401  \"PostOpReverted(reason)\" */ _14, /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 36)), /** @src 0:26379:26401  \"PostOpReverted(reason)\" */ _14))\n                                                            }\n                                                        }\n                                                    }\n                                                }\n                                                default /// @src 0:25638:26482  \"if (paymaster == address(0)) {...\"\n                                                {\n                                                    /// @src 0:25685:25715  \"refundAddress = mUserOp.sender\"\n                                                    var_refundAddress := /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ and(/** @src 0:1296:1301  \"10000\" */ mload(/** @src 0:25701:25715  \"mUserOp.sender\" */ _mpos_1), /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ sub(shl(160, 1), 1))\n                                                }\n                                                /// @src 0:26495:26526  \"actualGas += preGas - gasleft()\"\n                                                var_actualGas := /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ add(_9, /** @src 0:1542:1546  \"2048\" */ sub(expr_2, /** @src 0:26517:26526  \"gasleft()\" */ gas()))\n                                                /// @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                                let _15 := mload(/** @src 0:26649:26669  \"mUserOp.callGasLimit\" */ add(_mpos_1, /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 96))\n                                                let sum := add(_15, mload(/** @src 0:26672:26703  \"mUserOp.paymasterPostOpGasLimit\" */ add(_mpos_1, /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 0xa0)))\n                                                /// @src 0:1542:1546  \"2048\"\n                                                let diff_1 := sub(var_actualGas, /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ mload(add(memPtr, 128)))\n                                                /// @src 0:26909:27183  \"if (executionGasLimit > executionGasUsed) {...\"\n                                                if /** @src 0:26913:26949  \"executionGasLimit > executionGasUsed\" */ gt(sum, diff_1)\n                                                /// @src 0:26909:27183  \"if (executionGasLimit > executionGasUsed) {...\"\n                                                {\n                                                    /// @src 0:27135:27164  \"actualGas += unusedGasPenalty\"\n                                                    var_actualGas := /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ add(var_actualGas, div(mul(/** @src 0:1542:1546  \"2048\" */ sub(/** @src 0:26993:27029  \"executionGasLimit - executionGasUsed\" */ sum, diff_1), /** @src 0:1595:1597  \"10\" */ 0x0a), /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 100))\n                                                }\n                                                /// @src 0:27211:27247  \"actualGasCost = actualGas * gasPrice\"\n                                                var_actualGasCost := /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ mul(/** @src 0:27227:27247  \"actualGas * gasPrice\" */ var_actualGas, expr_3)\n                                                /// @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                                let _16 := mload(add(memPtr, 64))\n                                                /// @src 0:27307:28100  \"if (prefund < actualGasCost) {...\"\n                                                switch /** @src 0:27311:27334  \"prefund < actualGasCost\" */ lt(_16, var_actualGasCost)\n                                                case /** @src 0:27307:28100  \"if (prefund < actualGasCost) {...\" */ 0 {\n                                                    /// @src 0:27888:27928  \"_incrementDeposit(refundAddress, refund)\"\n                                                    pop(fun_incrementDeposit(var_refundAddress, /** @src 0:1542:1546  \"2048\" */ sub(/** @src 0:27847:27870  \"prefund - actualGasCost\" */ _16, var_actualGasCost)))\n                                                    /// @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                                    if iszero(lt(var_mode, 3))\n                                                    {\n                                                        mstore(/** @src -1:-1:-1 */ var_refundAddress_1, /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ shl(224, 0x4e487b71))\n                                                        mstore(4, 0x21)\n                                                        revert(/** @src -1:-1:-1 */ var_refundAddress_1, /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 36)\n                                                    }\n                                                    /// @src 0:1542:1546  \"2048\"\n                                                    let _17 := mload(/** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ add(memPtr, _3))\n                                                    /// @src 0:6163:6177  \"opInfo.mUserOp\"\n                                                    let _mpos_2 := mload(memPtr)\n                                                    /// @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                                    let cleaned_3 := and(/** @src 0:1296:1301  \"10000\" */ mload(/** @src 0:6163:6184  \"opInfo.mUserOp.sender\" */ _mpos_2), /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ sub(shl(160, 1), 1))\n                                                    let cleaned_4 := and(/** @src 0:1296:1301  \"10000\" */ mload(/** @src 0:6198:6222  \"opInfo.mUserOp.paymaster\" */ add(_mpos_2, /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 224)), sub(shl(160, 1), 1))\n                                                    let _18 := mload(/** @src 0:6236:6256  \"opInfo.mUserOp.nonce\" */ add(_mpos_2, /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ _3))\n                                                    /// @src 0:6100:6337  \"UserOperationEvent(...\"\n                                                    let _19 := /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ mload(64)\n                                                    mstore(_19, _18)\n                                                    mstore(add(_19, _3), /** @src 0:27961:28002  \"mode == IPaymaster.PostOpMode.opSucceeded\" */ iszero(var_mode))\n                                                    /// @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                                    mstore(add(_19, 64), var_actualGasCost)\n                                                    mstore(add(_19, 96), var_actualGas)\n                                                    /// @src 0:6100:6337  \"UserOperationEvent(...\"\n                                                    log4(_19, /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 128, /** @src 0:6100:6337  \"UserOperationEvent(...\" */ 0x49628fd1471006c1482da88028e9ce4dbb080b815c9b0344d39e5a8e6ec1419f, _17, cleaned_3, cleaned_4)\n                                                }\n                                                default /// @src 0:27307:28100  \"if (prefund < actualGasCost) {...\"\n                                                {\n                                                    /// @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                                    if iszero(lt(var_mode, 3))\n                                                    {\n                                                        mstore(/** @src -1:-1:-1 */ var_refundAddress_1, /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ shl(224, 0x4e487b71))\n                                                        mstore(4, 0x21)\n                                                        revert(/** @src -1:-1:-1 */ var_refundAddress_1, /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 36)\n                                                    }\n                                                    /// @src 0:27354:27792  \"if (mode == IPaymaster.PostOpMode.postOpReverted) {...\"\n                                                    switch /** @src 0:27358:27402  \"mode == IPaymaster.PostOpMode.postOpReverted\" */ eq(var_mode, /** @src 0:27366:27402  \"IPaymaster.PostOpMode.postOpReverted\" */ 2)\n                                                    case /** @src 0:27354:27792  \"if (mode == IPaymaster.PostOpMode.postOpReverted) {...\" */ 0 {\n                                                        /// @src 0:27628:27774  \"assembly (\\\"memory-safe\\\") {...\"\n                                                        mstore(/** @src -1:-1:-1 */ var_refundAddress_1, /** @src 0:27628:27774  \"assembly (\\\"memory-safe\\\") {...\" */ shl(224, 0xdeadaa51))\n                                                        revert(/** @src -1:-1:-1 */ var_refundAddress_1, /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ _3)\n                                                    }\n                                                    default /// @src 0:27354:27792  \"if (mode == IPaymaster.PostOpMode.postOpReverted) {...\"\n                                                    {\n                                                        /// @src 0:27426:27449  \"actualGasCost = prefund\"\n                                                        var_actualGasCost := _16\n                                                        /// @src 0:27489:27495  \"opInfo\"\n                                                        fun_emitPrefundTooLow(memPtr)\n                                                        /// @src 0:27571:27580  \"actualGas\"\n                                                        fun_emitUserOperationEvent(memPtr, _16, var_actualGas)\n                                                    }\n                                                }\n                                                /// @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                                let memPos := mload(64)\n                                                mstore(memPos, var_actualGasCost)\n                                                return(memPos, _3)\n                                            }\n                                            case 0x01ffc9a7 {\n                                                if callvalue() { revert(0, 0) }\n                                                if slt(add(calldatasize(), not(3)), 32) { revert(0, 0) }\n                                                let value_2 := calldataload(4)\n                                                let _20 := and(value_2, shl(224, 0xffffffff))\n                                                if iszero(eq(value_2, _20)) { revert(0, 0) }\n                                                /// @src 0:1859:2045  \"interfaceId...\"\n                                                let expr_4 := /** @src 0:1859:1985  \"interfaceId...\" */ eq(_20, /** @src 0:1887:1984  \"type(IEntryPoint).interfaceId ^ type(IStakeManager).interfaceId ^ type(INonceManager).interfaceId\" */ shl(225, 0x307e35b7))\n                                                /// @src 0:1859:2045  \"interfaceId...\"\n                                                if iszero(expr_4)\n                                                {\n                                                    expr_4 := /** @src 0:2001:2045  \"interfaceId == type(IEntryPoint).interfaceId\" */ eq(_20, /** @src 0:1887:1916  \"type(IEntryPoint).interfaceId\" */ shl(227, 0x122a0e9b))\n                                                }\n                                                /// @src 0:1859:2095  \"interfaceId...\"\n                                                let expr_5 := expr_4\n                                                if iszero(expr_4)\n                                                {\n                                                    expr_5 := /** @src 0:2049:2095  \"interfaceId == type(IStakeManager).interfaceId\" */ eq(_20, /** @src 0:1919:1950  \"type(IStakeManager).interfaceId\" */ shl(224, 0xcf28ef97))\n                                                }\n                                                /// @src 0:1859:2157  \"interfaceId...\"\n                                                let expr_6 := expr_5\n                                                if iszero(expr_5)\n                                                {\n                                                    expr_6 := /** @src 0:2111:2157  \"interfaceId == type(INonceManager).interfaceId\" */ eq(_20, /** @src 0:1953:1984  \"type(INonceManager).interfaceId\" */ shl(224, 0x3e84f021))\n                                                }\n                                                /// @src 0:1859:2197  \"interfaceId...\"\n                                                let expr_7 := expr_6\n                                                if iszero(expr_6)\n                                                {\n                                                    expr_7 := /** @src 74:861:901  \"interfaceId == type(IERC165).interfaceId\" */ eq(_20, /** @src 74:876:901  \"type(IERC165).interfaceId\" */ shl(224, 0x01ffc9a7))\n                                                }\n                                                /// @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                                let memPos_1 := mload(64)\n                                                mstore(memPos_1, iszero(iszero(expr_7)))\n                                                return(memPos_1, 32)\n                                            }\n                                            case 0x0396cb60 {\n                                                let _21 := 32\n                                                if slt(add(calldatasize(), not(3)), _21) { revert(0, 0) }\n                                                let value_3 := calldataload(4)\n                                                let _22 := 0xffffffff\n                                                let _23 := and(value_3, _22)\n                                                if iszero(eq(value_3, _23)) { revert(0, 0) }\n                                                mstore(0, /** @src 4:2428:2438  \"msg.sender\" */ caller())\n                                                /// @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                                mstore(_21, 0)\n                                                let dataSlot := keccak256(0, 64)\n                                                if /** @src 4:2457:2476  \"unstakeDelaySec > 0\" */ iszero(_23)\n                                                /// @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                                {\n                                                    let memPtr_3 := mload(64)\n                                                    mstore(memPtr_3, shl(229, 4594637))\n                                                    mstore(add(memPtr_3, 4), _21)\n                                                    mstore(add(memPtr_3, 36), 26)\n                                                    mstore(add(memPtr_3, 68), \"must specify unstake delay\")\n                                                    revert(memPtr_3, 100)\n                                                }\n                                                let _24 := sload(/** @src 4:2557:2577  \"info.unstakeDelaySec\" */ add(dataSlot, 1))\n                                                /// @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                                if /** @src 4:2538:2577  \"unstakeDelaySec >= info.unstakeDelaySec\" */ lt(_23, /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ and(shr(120, _24), _22))\n                                                {\n                                                    let memPtr_4 := mload(64)\n                                                    mstore(memPtr_4, shl(229, 4594637))\n                                                    mstore(add(memPtr_4, 4), _21)\n                                                    mstore(add(memPtr_4, 36), 28)\n                                                    mstore(add(memPtr_4, 68), \"cannot decrease unstake time\")\n                                                    revert(memPtr_4, 100)\n                                                }\n                                                let _25 := 0xffffffffffffffffffffffffffff\n                                                /// @src 4:2657:2679  \"info.stake + msg.value\"\n                                                let expr_8 := checked_add_uint256(/** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ and(shr(8, _24), _25), /** @src 4:2670:2679  \"msg.value\" */ callvalue())\n                                                /// @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                                if /** @src 4:2697:2706  \"stake > 0\" */ iszero(expr_8)\n                                                /// @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                                {\n                                                    let memPtr_5 := mload(64)\n                                                    mstore(memPtr_5, shl(229, 4594637))\n                                                    mstore(add(memPtr_5, 4), _21)\n                                                    mstore(add(memPtr_5, 36), 18)\n                                                    mstore(add(memPtr_5, 68), \"no stake specified\")\n                                                    revert(memPtr_5, 100)\n                                                }\n                                                if /** @src 4:2747:2773  \"stake <= type(uint112).max\" */ gt(expr_8, /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ _25)\n                                                {\n                                                    let memPtr_6 := mload(64)\n                                                    mstore(memPtr_6, shl(229, 4594637))\n                                                    mstore(add(memPtr_6, 4), _21)\n                                                    mstore(add(memPtr_6, 36), 14)\n                                                    mstore(add(memPtr_6, 68), \"stake overflow\")\n                                                    revert(memPtr_6, 100)\n                                                }\n                                                let _26 := sload(/** @src 4:2850:2862  \"info.deposit\" */ dataSlot)\n                                                /// @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                                let memPtr_7 := mload(64)\n                                                finalize_allocation_26259(memPtr_7)\n                                                mstore(memPtr_7, _26)\n                                                /// @src 4:2825:2962  \"DepositInfo(...\"\n                                                let _27 := add(memPtr_7, /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ _21)\n                                                mstore(_27, /** @src 4:2557:2577  \"info.unstakeDelaySec\" */ 1)\n                                                /// @src 4:2825:2962  \"DepositInfo(...\"\n                                                let _28 := add(memPtr_7, /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 64)\n                                                mstore(_28, and(/** @src 4:2894:2908  \"uint112(stake)\" */ expr_8, /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ _25))\n                                                /// @src 4:2825:2962  \"DepositInfo(...\"\n                                                let _29 := add(memPtr_7, 96)\n                                                /// @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                                mstore(_29, _23)\n                                                /// @src 4:2825:2962  \"DepositInfo(...\"\n                                                let _30 := add(memPtr_7, 128)\n                                                /// @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                                mstore(_30, 0)\n                                                mstore(0, /** @src 4:2428:2438  \"msg.sender\" */ caller())\n                                                /// @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                                mstore(_21, 0)\n                                                let dataSlot_1 := keccak256(0, 64)\n                                                sstore(dataSlot_1, mload(memPtr_7))\n                                                let memberSlot := add(dataSlot_1, /** @src 4:2557:2577  \"info.unstakeDelaySec\" */ 1)\n                                                /// @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                                let _31 := iszero(iszero(mload(_27)))\n                                                let _32 := sload(memberSlot)\n                                                let _33 := and(shl(8, mload(_28)), 0xffffffffffffffffffffffffffff00)\n                                                sstore(memberSlot, or(or(_33, or(and(_32, shl(152, 0xffffffffffffffffffffffffff)), and(_31, 255))), and(shl(120, mload(_29)), shl(120, 0xffffffff))))\n                                                update_storage_value_offsett_uint48_to_uint48(memberSlot, and(mload(_30), 0xffffffffffff))\n                                                /// @src 4:2977:3024  \"StakeLocked(msg.sender, stake, unstakeDelaySec)\"\n                                                let _34 := /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ mload(64)\n                                                mstore(_34, expr_8)\n                                                mstore(add(_34, _21), _23)\n                                                /// @src 4:2977:3024  \"StakeLocked(msg.sender, stake, unstakeDelaySec)\"\n                                                log2(_34, /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 64, /** @src 4:2977:3024  \"StakeLocked(msg.sender, stake, unstakeDelaySec)\" */ 0xa5ae833d0bb1dcd632d98a8b70973e8516812898e19bf27b70071ebc8dc52c01, /** @src 4:2428:2438  \"msg.sender\" */ caller())\n                                                /// @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                                return(0, 0)\n                                            }\n                                            case 0x0bd28e3b {\n                                                if callvalue() { revert(0, 0) }\n                                                if slt(add(calldatasize(), not(3)), 32) { revert(0, 0) }\n                                                let value_4 := calldataload(4)\n                                                let _35 := and(value_4, sub(shl(192, 1), 1))\n                                                if iszero(eq(value_4, _35)) { revert(0, 0) }\n                                                mstore(0, /** @src 2:913:923  \"msg.sender\" */ caller())\n                                                /// @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                                mstore(32, /** @src 2:893:912  \"nonceSequenceNumber\" */ 0x01)\n                                                /// @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                                let _36 := keccak256(0, 64)\n                                                mstore(0, _35)\n                                                mstore(32, _36)\n                                                let dataSlot_2 := keccak256(0, 64)\n                                                sstore(dataSlot_2, /** @src 2:893:931  \"nonceSequenceNumber[msg.sender][key]++\" */ increment_uint256(/** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ sload(/** @src 2:893:931  \"nonceSequenceNumber[msg.sender][key]++\" */ dataSlot_2)))\n                                                /// @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                                return(0, 0)\n                                            }\n                                            case 0x1b2e01b8 {\n                                                if callvalue() { revert(0, 0) }\n                                                if slt(add(calldatasize(), not(3)), 64) { revert(0, 0) }\n                                                let value0 := abi_decode_address()\n                                                let value1 := abi_decode_uint192()\n                                                mstore(0, and(value0, sub(shl(160, 1), 1)))\n                                                mstore(32, /** @src 2:279:353  \"mapping(address => mapping(uint192 => uint256)) public nonceSequenceNumber\" */ 1)\n                                                /// @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                                let _37 := keccak256(0, 64)\n                                                mstore(0, and(value1, sub(shl(192, 1), 1)))\n                                                mstore(32, _37)\n                                                let _38 := sload(keccak256(0, 64))\n                                                let memPos_2 := mload(64)\n                                                mstore(memPos_2, _38)\n                                                return(memPos_2, 32)\n                                            }\n                                            case 0x205c2878 {\n                                                if callvalue() { revert(0, 0) }\n                                                if slt(add(calldatasize(), not(3)), 64) { revert(0, 0) }\n                                                let value0_1 := abi_decode_address()\n                                                let value_5 := calldataload(36)\n                                                mstore(0, /** @src 4:4805:4815  \"msg.sender\" */ caller())\n                                                /// @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                                mstore(32, 0)\n                                                let dataSlot_3 := keccak256(0, 64)\n                                                let _39 := sload(/** @src 4:4852:4864  \"info.deposit\" */ dataSlot_3)\n                                                /// @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                                if /** @src 4:4834:4864  \"withdrawAmount <= info.deposit\" */ gt(value_5, _39)\n                                                /// @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                                {\n                                                    let memPtr_8 := mload(64)\n                                                    mstore(memPtr_8, shl(229, 4594637))\n                                                    mstore(add(memPtr_8, 4), 32)\n                                                    mstore(add(memPtr_8, 36), 25)\n                                                    mstore(add(memPtr_8, 68), \"Withdraw amount too large\")\n                                                    revert(memPtr_8, 100)\n                                                }\n                                                sstore(dataSlot_3, /** @src 4:4919:4948  \"info.deposit - withdrawAmount\" */ checked_sub_uint256(/** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ _39, /** @src 4:4919:4948  \"info.deposit - withdrawAmount\" */ value_5))\n                                                /// @src 4:4963:5017  \"Withdrawn(msg.sender, withdrawAddress, withdrawAmount)\"\n                                                let _40 := /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ mload(64)\n                                                /// @src 4:4963:5017  \"Withdrawn(msg.sender, withdrawAddress, withdrawAmount)\"\n                                                log2(_40, sub(abi_encode_address_payable_uint256(_40, value0_1, value_5), _40), 0xd1c19fbcd4551a5edfb66d43d2e337c04837afda3482b42bdf569a8fccdae5fb, /** @src 4:4805:4815  \"msg.sender\" */ caller())\n                                                /// @src 4:5045:5092  \"withdrawAddress.call{value: withdrawAmount}(\\\"\\\")\"\n                                                let expr_component := call(gas(), /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ and(/** @src 4:5045:5065  \"withdrawAddress.call\" */ value0_1, /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ sub(shl(160, 1), 1)), /** @src 4:5045:5092  \"withdrawAddress.call{value: withdrawAmount}(\\\"\\\")\" */ value_5, /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 0, 0, 0, 0)\n                                                /// @src 4:5045:5092  \"withdrawAddress.call{value: withdrawAmount}(\\\"\\\")\"\n                                                pop(extract_returndata())\n                                                /// @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                                if iszero(expr_component)\n                                                {\n                                                    let memPtr_9 := mload(64)\n                                                    mstore(memPtr_9, shl(229, 4594637))\n                                                    mstore(add(memPtr_9, 4), 32)\n                                                    mstore(add(memPtr_9, 36), 18)\n                                                    mstore(add(memPtr_9, 68), \"failed to withdraw\")\n                                                    revert(memPtr_9, 100)\n                                                }\n                                                return(0, 0)\n                                            }\n                                            case 0x22cdde4c {\n                                                if callvalue() { revert(0, 0) }\n                                                let _41 := not(3)\n                                                if slt(add(calldatasize(), _41), 32) { revert(0, 0) }\n                                                let offset_2 := calldataload(4)\n                                                if gt(offset_2, 0xffffffffffffffff) { revert(0, 0) }\n                                                if slt(add(sub(calldatasize(), offset_2), _41), 288) { revert(0, 0) }\n                                                let ret := fun_getUserOpHash(add(4, offset_2))\n                                                let memPos_3 := mload(64)\n                                                mstore(memPos_3, ret)\n                                                return(memPos_3, 32)\n                                            }\n                                            case 0x35567e1a {\n                                                if callvalue() { revert(0, 0) }\n                                                if slt(add(calldatasize(), not(3)), 64) { revert(0, 0) }\n                                                let value0_2 := abi_decode_address()\n                                                let value1_1 := abi_decode_uint192()\n                                                mstore(0, and(value0_2, sub(shl(160, 1), 1)))\n                                                mstore(32, /** @src 2:507:526  \"nonceSequenceNumber\" */ 0x01)\n                                                /// @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                                let _42 := keccak256(0, 64)\n                                                mstore(0, and(value1_1, sub(shl(192, 1), 1)))\n                                                mstore(32, _42)\n                                                let _43 := sload(keccak256(0, 64))\n                                                let memPos_4 := mload(64)\n                                                mstore(memPos_4, /** @src 2:507:562  \"nonceSequenceNumber[sender][key] | (uint256(key) << 64)\" */ or(_43, /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ and(shl(64, /** @src 2:543:555  \"uint256(key)\" */ value1_1), /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ not(0xffffffffffffffff))))\n                                                return(memPos_4, 32)\n                                            }\n                                            case 0x5287ce12 {\n                                                if callvalue() { revert(0, 0) }\n                                                if slt(add(calldatasize(), not(3)), 32) { revert(0, 0) }\n                                                let value0_3 := abi_decode_address()\n                                                let memPtr_10 := mload(64)\n                                                finalize_allocation_26259(memPtr_10)\n                                                mstore(memPtr_10, 0)\n                                                mstore(add(memPtr_10, 32), 0)\n                                                mstore(add(memPtr_10, 64), 0)\n                                                mstore(add(memPtr_10, 96), 0)\n                                                mstore(add(memPtr_10, 128), 0)\n                                                mstore(0, and(value0_3, sub(shl(160, 1), 1)))\n                                                mstore(32, 0)\n                                                let dataSlot_4 := keccak256(0, 64)\n                                                let memPtr_11 := mload(64)\n                                                finalize_allocation_26259(memPtr_11)\n                                                let _44 := sload(dataSlot_4)\n                                                mstore(memPtr_11, _44)\n                                                let _45 := sload(add(dataSlot_4, 1))\n                                                let _46 := add(memPtr_11, 32)\n                                                mstore(_46, iszero(iszero(and(_45, 0xff))))\n                                                let _47 := 0xffffffffffffffffffffffffffff\n                                                let _48 := add(memPtr_11, 64)\n                                                mstore(_48, and(shr(8, _45), _47))\n                                                let _49 := 0xffffffff\n                                                let _50 := add(memPtr_11, 96)\n                                                mstore(_50, and(shr(120, _45), _49))\n                                                let _51 := 0xffffffffffff\n                                                let _52 := add(memPtr_11, 128)\n                                                mstore(_52, and(shr(152, _45), _51))\n                                                let memPos_5 := mload(64)\n                                                mstore(memPos_5, _44)\n                                                mstore(add(memPos_5, 32), iszero(iszero(mload(_46))))\n                                                mstore(add(memPos_5, 64), and(mload(_48), _47))\n                                                mstore(add(memPos_5, 96), and(mload(_50), _49))\n                                                mstore(add(memPos_5, 128), and(mload(_52), _51))\n                                                return(memPos_5, 160)\n                                            }\n                                            case 0x70a08231 {\n                                                if callvalue() { revert(0, 0) }\n                                                if slt(add(calldatasize(), not(3)), 32) { revert(0, 0) }\n                                                mstore(0, and(abi_decode_address(), sub(shl(160, 1), 1)))\n                                                mstore(32, 0)\n                                                let _53 := sload(keccak256(0, 64))\n                                                let memPos_6 := mload(64)\n                                                mstore(memPos_6, _53)\n                                                return(memPos_6, 32)\n                                            }\n                                            case 0x765e827f {\n                                                if callvalue() { revert(0, 0) }\n                                                let param, param_1, param_2 := abi_decode_array_struct_PackedUserOperation_calldata_dyn_calldatat_address_payable(calldatasize())\n                                                /// @src 70:2322:2425  \"modifier nonReentrant() {...\"\n                                                fun_nonReentrantBefore()\n                                                /// @src 0:6751:6775  \"new UserOpInfo[](opslen)\"\n                                                let expr_mpos := allocate_and_zero_memory_array_array_struct_UserOpInfo_dyn(param_1)\n                                                /// @src 0:6815:6828  \"uint256 i = 0\"\n                                                let var_i := /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 0\n                                                /// @src 0:6810:7135  \"for (uint256 i = 0; i < opslen; i++) {...\"\n                                                for { }\n                                                /** @src 0:6830:6840  \"i < opslen\" */ lt(var_i, param_1)\n                                                /// @src 0:6815:6828  \"uint256 i = 0\"\n                                                {\n                                                    /// @src 0:6842:6845  \"i++\"\n                                                    var_i := /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ add(/** @src 0:6842:6845  \"i++\" */ var_i, /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 1)\n                                                }\n                                                /// @src 0:6842:6845  \"i++\"\n                                                {\n                                                    /// @src 0:6973:7011  \"_validatePrepayment(i, ops[i], opInfo)\"\n                                                    let expr_component_1, expr_component_2 := fun_validatePrepayment(var_i, /** @src 0:6996:7002  \"ops[i]\" */ calldata_array_index_access_struct_PackedUserOperation_calldata_dyn_calldata(param, param_1, var_i), /** @src 0:6892:6902  \"opInfos[i]\" */ mload(memory_array_index_access_struct_UserOpInfo_dyn(expr_mpos, var_i)))\n                                                    /// @src 0:20568:20602  \"_getValidationData(validationData)\"\n                                                    let expr_component_3, expr_component_4 := fun_getValidationData(expr_component_1)\n                                                    /// @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                                    let _54 := sub(shl(160, 1), 1)\n                                                    /// @src 0:20612:20723  \"if (expectedAggregator != aggregator) {...\"\n                                                    if /** @src 0:20616:20648  \"expectedAggregator != aggregator\" */ iszero(iszero(/** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ and(/** @src 0:20616:20648  \"expectedAggregator != aggregator\" */ expr_component_3, /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ _54)))\n                                                    /// @src 0:20612:20723  \"if (expectedAggregator != aggregator) {...\"\n                                                    {\n                                                        /// @src 0:20671:20712  \"FailedOp(opIndex, \\\"AA24 signature error\\\")\"\n                                                        let _55 := /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ mload(64)\n                                                        /// @src 0:20671:20712  \"FailedOp(opIndex, \\\"AA24 signature error\\\")\"\n                                                        mstore(_55, shl(225, 0x1101335b))\n                                                        /// @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                                        mstore(/** @src 0:20671:20712  \"FailedOp(opIndex, \\\"AA24 signature error\\\")\" */ add(_55, /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 4), var_i)\n                                                        mstore(add(/** @src 0:20671:20712  \"FailedOp(opIndex, \\\"AA24 signature error\\\")\" */ _55, /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 36), 64)\n                                                        mstore(add(/** @src 0:20671:20712  \"FailedOp(opIndex, \\\"AA24 signature error\\\")\" */ _55, /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 68), 20)\n                                                        mstore(add(/** @src 0:20671:20712  \"FailedOp(opIndex, \\\"AA24 signature error\\\")\" */ _55, /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 100), \"AA24 signature error\")\n                                                        /// @src 0:20671:20712  \"FailedOp(opIndex, \\\"AA24 signature error\\\")\"\n                                                        revert(_55, /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 132)\n                                                    }\n                                                    /// @src 0:20732:20828  \"if (outOfTimeRange) {...\"\n                                                    if expr_component_4\n                                                    {\n                                                        /// @src 0:20773:20817  \"FailedOp(opIndex, \\\"AA22 expired or not due\\\")\"\n                                                        let _56 := /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ mload(64)\n                                                        /// @src 0:20773:20817  \"FailedOp(opIndex, \\\"AA22 expired or not due\\\")\"\n                                                        mstore(_56, /** @src 0:20671:20712  \"FailedOp(opIndex, \\\"AA24 signature error\\\")\" */ shl(225, 0x1101335b))\n                                                        /// @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                                        mstore(/** @src 0:20773:20817  \"FailedOp(opIndex, \\\"AA22 expired or not due\\\")\" */ add(_56, /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 4), var_i)\n                                                        mstore(add(/** @src 0:20773:20817  \"FailedOp(opIndex, \\\"AA22 expired or not due\\\")\" */ _56, /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 36), 64)\n                                                        mstore(add(/** @src 0:20773:20817  \"FailedOp(opIndex, \\\"AA22 expired or not due\\\")\" */ _56, /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 68), 23)\n                                                        mstore(add(/** @src 0:20773:20817  \"FailedOp(opIndex, \\\"AA22 expired or not due\\\")\" */ _56, /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 100), \"AA22 expired or not due\")\n                                                        /// @src 0:20773:20817  \"FailedOp(opIndex, \\\"AA22 expired or not due\\\")\"\n                                                        revert(_56, /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 132)\n                                                    }\n                                                    /// @src 0:21130:21173  \"_getValidationData(paymasterValidationData)\"\n                                                    let expr_component_5, expr_component_6 := fun_getValidationData(expr_component_2)\n                                                    /// @src 0:21183:21288  \"if (pmAggregator != address(0)) {...\"\n                                                    if /** @src 0:21187:21213  \"pmAggregator != address(0)\" */ iszero(iszero(/** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ and(/** @src 0:21187:21213  \"pmAggregator != address(0)\" */ expr_component_5, /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ _54)))\n                                                    /// @src 0:21183:21288  \"if (pmAggregator != address(0)) {...\"\n                                                    {\n                                                        /// @src 0:21236:21277  \"FailedOp(opIndex, \\\"AA34 signature error\\\")\"\n                                                        let _57 := /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ mload(64)\n                                                        /// @src 0:21236:21277  \"FailedOp(opIndex, \\\"AA34 signature error\\\")\"\n                                                        mstore(_57, /** @src 0:20671:20712  \"FailedOp(opIndex, \\\"AA24 signature error\\\")\" */ shl(225, 0x1101335b))\n                                                        /// @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                                        mstore(/** @src 0:21236:21277  \"FailedOp(opIndex, \\\"AA34 signature error\\\")\" */ add(_57, /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 4), var_i)\n                                                        mstore(add(/** @src 0:21236:21277  \"FailedOp(opIndex, \\\"AA34 signature error\\\")\" */ _57, /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 36), 64)\n                                                        mstore(add(/** @src 0:21236:21277  \"FailedOp(opIndex, \\\"AA34 signature error\\\")\" */ _57, /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 68), 20)\n                                                        mstore(add(/** @src 0:21236:21277  \"FailedOp(opIndex, \\\"AA34 signature error\\\")\" */ _57, /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 100), \"AA34 signature error\")\n                                                        /// @src 0:21236:21277  \"FailedOp(opIndex, \\\"AA34 signature error\\\")\"\n                                                        revert(_57, /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 132)\n                                                    }\n                                                    /// @src 0:21297:21403  \"if (outOfTimeRange) {...\"\n                                                    if expr_component_6\n                                                    {\n                                                        /// @src 0:21338:21392  \"FailedOp(opIndex, \\\"AA32 paymaster expired or not due\\\")\"\n                                                        let _58 := /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ mload(64)\n                                                        /// @src 0:21338:21392  \"FailedOp(opIndex, \\\"AA32 paymaster expired or not due\\\")\"\n                                                        mstore(_58, /** @src 0:20671:20712  \"FailedOp(opIndex, \\\"AA24 signature error\\\")\" */ shl(225, 0x1101335b))\n                                                        /// @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                                        mstore(/** @src 0:21338:21392  \"FailedOp(opIndex, \\\"AA32 paymaster expired or not due\\\")\" */ add(_58, /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 4), var_i)\n                                                        mstore(add(/** @src 0:21338:21392  \"FailedOp(opIndex, \\\"AA32 paymaster expired or not due\\\")\" */ _58, /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 36), 64)\n                                                        mstore(add(/** @src 0:21338:21392  \"FailedOp(opIndex, \\\"AA32 paymaster expired or not due\\\")\" */ _58, /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 68), 33)\n                                                        mstore(add(/** @src 0:21338:21392  \"FailedOp(opIndex, \\\"AA32 paymaster expired or not due\\\")\" */ _58, /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 100), \"AA32 paymaster expired or not du\")\n                                                        mstore(add(/** @src 0:21338:21392  \"FailedOp(opIndex, \\\"AA32 paymaster expired or not due\\\")\" */ _58, /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 132), \"e\")\n                                                        /// @src 0:21338:21392  \"FailedOp(opIndex, \\\"AA32 paymaster expired or not due\\\")\"\n                                                        revert(_58, /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 164)\n                                                    }\n                                                }\n                                                /// @src 0:7149:7170  \"uint256 collected = 0\"\n                                                let var_collected := /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 0\n                                                /// @src 0:7189:7206  \"BeforeExecution()\"\n                                                log1(/** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 0, 0, /** @src 0:7189:7206  \"BeforeExecution()\" */ 0xbb47ee3e183a558b1a2ff0874b079f3fc5478b7454eacf2bfc5af2ff5878f972)\n                                                /// @src 0:7226:7239  \"uint256 i = 0\"\n                                                let var_i_1 := /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 0\n                                                /// @src 0:7221:7341  \"for (uint256 i = 0; i < opslen; i++) {...\"\n                                                for { }\n                                                /** @src 0:7241:7251  \"i < opslen\" */ lt(var_i_1, param_1)\n                                                /// @src 0:7226:7239  \"uint256 i = 0\"\n                                                {\n                                                    /// @src 0:7253:7256  \"i++\"\n                                                    var_i_1 := /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ add(/** @src 0:7253:7256  \"i++\" */ var_i_1, /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 1)\n                                                }\n                                                /// @src 0:7253:7256  \"i++\"\n                                                {\n                                                    /// @src 0:7307:7313  \"ops[i]\"\n                                                    let expr_offset := calldata_array_index_access_struct_PackedUserOperation_calldata_dyn_calldata(param, param_1, var_i_1)\n                                                    /// @src 0:7276:7326  \"collected += _executeUserOp(i, ops[i], opInfos[i])\"\n                                                    var_collected := /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ add(var_collected, /** @src 0:7289:7326  \"_executeUserOp(i, ops[i], opInfos[i])\" */ fun_executeUserOp(var_i_1, expr_offset, /** @src 0:7315:7325  \"opInfos[i]\" */ mload(memory_array_index_access_struct_UserOpInfo_dyn(expr_mpos, var_i_1))))\n                                                }\n                                                /// @src 0:7380:7389  \"collected\"\n                                                fun_compensate(param_2, var_collected)\n                                                /// @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                                sstore(/** @src 70:2924:2945  \"_status = NOT_ENTERED\" */ 0x02, /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 1)\n                                                return(0, 0)\n                                            }\n                                            case 0x850aaf62 {\n                                                if callvalue() { revert(0, 0) }\n                                                if slt(add(calldatasize(), not(3)), 64) { revert(0, 0) }\n                                                let value0_4 := abi_decode_address()\n                                                let offset_3 := calldataload(36)\n                                                if gt(offset_3, 0xffffffffffffffff) { revert(0, 0) }\n                                                let value1_2, value2_1 := abi_decode_bytes_calldata(add(4, offset_3), calldatasize())\n                                                /// @src 0:29607:29632  \"target.delegatecall(data)\"\n                                                let _59 := /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ mload(64)\n                                                calldatacopy(_59, value1_2, value2_1)\n                                                let _60 := add(_59, value2_1)\n                                                mstore(_60, 0)\n                                                /// @src 0:29607:29632  \"target.delegatecall(data)\"\n                                                let expr_component_7 := delegatecall(gas(), value0_4, _59, sub(/** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ _60, /** @src 0:29607:29632  \"target.delegatecall(data)\" */ _59), /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 0, 0)\n                                                /// @src 0:29607:29632  \"target.delegatecall(data)\"\n                                                let expr_component_mpos := extract_returndata()\n                                                /// @src 0:29649:29680  \"DelegateAndRevert(success, ret)\"\n                                                let _61 := /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ mload(64)\n                                                /// @src 0:29649:29680  \"DelegateAndRevert(success, ret)\"\n                                                mstore(_61, shl(226, 0x26504155))\n                                                /// @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                                mstore(/** @src 0:29649:29680  \"DelegateAndRevert(success, ret)\" */ add(_61, /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 4), iszero(iszero(expr_component_7)))\n                                                mstore(add(/** @src 0:29649:29680  \"DelegateAndRevert(success, ret)\" */ _61, /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 36), 64)\n                                                /// @src 0:29649:29680  \"DelegateAndRevert(success, ret)\"\n                                                revert(_61, sub(/** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ abi_encode_bytes(expr_component_mpos, add(/** @src 0:29649:29680  \"DelegateAndRevert(success, ret)\" */ _61, /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 68)), /** @src 0:29649:29680  \"DelegateAndRevert(success, ret)\" */ _61))\n                                            }\n                                            case /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 0x9b249f69 {\n                                                if callvalue() { revert(0, 0) }\n                                                if slt(add(calldatasize(), not(3)), 32) { revert(0, 0) }\n                                                let offset_4 := calldataload(4)\n                                                if gt(offset_4, 0xffffffffffffffff) { revert(0, 0) }\n                                                let value0_5, value1_3 := abi_decode_bytes_calldata(add(4, offset_4), calldatasize())\n                                                let _62 := sub(shl(160, 1), 1)\n                                                /// @src 0:15911:15949  \"senderCreator().createSender(initCode)\"\n                                                let _63 := /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ mload(64)\n                                                /// @src 0:15911:15949  \"senderCreator().createSender(initCode)\"\n                                                mstore(_63, /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ shl(225, 0x2b870d1b))\n                                                mstore(/** @src 0:15911:15949  \"senderCreator().createSender(initCode)\" */ add(_63, /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 4), 32)\n                                                /// @src 0:15911:15949  \"senderCreator().createSender(initCode)\"\n                                                let _64 := call(gas(), /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ and(/** @src 0:1099:1113  \"_senderCreator\" */ loadimmutable(\"35\"), /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ _62), 0, /** @src 0:15911:15949  \"senderCreator().createSender(initCode)\" */ _63, sub(/** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ abi_encode_bytes_calldata(value0_5, value1_3, add(/** @src 0:15911:15949  \"senderCreator().createSender(initCode)\" */ _63, /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 36)), /** @src 0:15911:15949  \"senderCreator().createSender(initCode)\" */ _63), _63, /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 32)\n                                                /// @src 0:15911:15949  \"senderCreator().createSender(initCode)\"\n                                                if iszero(_64)\n                                                {\n                                                    /// @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                                    let pos := mload(64)\n                                                    returndatacopy(pos, 0, returndatasize())\n                                                    revert(pos, returndatasize())\n                                                }\n                                                /// @src 0:15911:15949  \"senderCreator().createSender(initCode)\"\n                                                let expr_9 := /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 0\n                                                /// @src 0:15911:15949  \"senderCreator().createSender(initCode)\"\n                                                if _64\n                                                {\n                                                    let _65 := /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 32\n                                                    /// @src 0:15911:15949  \"senderCreator().createSender(initCode)\"\n                                                    if gt(/** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 32, /** @src 0:15911:15949  \"senderCreator().createSender(initCode)\" */ returndatasize()) { _65 := returndatasize() }\n                                                    finalize_allocation(_63, _65)\n                                                    expr_9 := abi_decode_address_fromMemory(_63, add(_63, _65))\n                                                }\n                                                /// @src 0:15966:15993  \"SenderAddressResult(sender)\"\n                                                let _66 := /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ mload(64)\n                                                /// @src 0:15966:15993  \"SenderAddressResult(sender)\"\n                                                mstore(_66, shl(225, 0x3653dc03))\n                                                /// @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                                mstore(/** @src 0:15966:15993  \"SenderAddressResult(sender)\" */ add(_66, /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 4), and(expr_9, _62))\n                                                /// @src 0:15966:15993  \"SenderAddressResult(sender)\"\n                                                revert(_66, /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 36)\n                                            }\n                                            case 0xb760faf9 {\n                                                if slt(add(calldatasize(), not(3)), 32) { revert(0, 0) }\n                                                fun_depositTo(abi_decode_address())\n                                                return(0, 0)\n                                            }\n                                            case 0xbb9fe6bf {\n                                                if callvalue() { revert(0, 0) }\n                                                if slt(add(calldatasize(), not(3)), 0) { revert(0, 0) }\n                                                mstore(0, /** @src 4:3248:3258  \"msg.sender\" */ caller())\n                                                /// @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                                mstore(0x20, 0)\n                                                /// @src 4:3277:3297  \"info.unstakeDelaySec\"\n                                                let _67 := add(/** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ keccak256(0, 64), /** @src 4:3277:3297  \"info.unstakeDelaySec\" */ 1)\n                                                /// @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                                let _68 := sload(/** @src 4:3277:3297  \"info.unstakeDelaySec\" */ _67)\n                                                /// @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                                let value_6 := and(shr(120, _68), 0xffffffff)\n                                                if /** @src 4:3277:3302  \"info.unstakeDelaySec != 0\" */ iszero(/** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ value_6)\n                                                {\n                                                    let memPtr_12 := mload(64)\n                                                    mstore(memPtr_12, shl(229, 4594637))\n                                                    mstore(add(memPtr_12, 4), 0x20)\n                                                    mstore(add(memPtr_12, 36), 10)\n                                                    mstore(add(memPtr_12, 68), \"not staked\")\n                                                    revert(memPtr_12, 100)\n                                                }\n                                                if iszero(and(_68, 0xff))\n                                                {\n                                                    let memPtr_13 := mload(64)\n                                                    mstore(memPtr_13, shl(229, 4594637))\n                                                    mstore(add(memPtr_13, 4), 0x20)\n                                                    mstore(add(memPtr_13, 36), 17)\n                                                    mstore(add(memPtr_13, 68), \"already unstaking\")\n                                                    revert(memPtr_13, 100)\n                                                }\n                                                let _69 := 0xffffffffffff\n                                                let sum_1 := add(and(/** @src 4:3407:3422  \"block.timestamp\" */ timestamp(), /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ _69), value_6)\n                                                if gt(sum_1, _69)\n                                                {\n                                                    mstore(0, shl(224, 0x4e487b71))\n                                                    mstore(4, 0x11)\n                                                    revert(0, 0x24)\n                                                }\n                                                /// @src 4:3456:3488  \"info.withdrawTime = withdrawTime\"\n                                                update_storage_value_offsett_uint48_to_uint48(_67, sum_1)\n                                                /// @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                                sstore(_67, and(sload(_67), not(255)))\n                                                /// @src 4:3532:3571  \"StakeUnlocked(msg.sender, withdrawTime)\"\n                                                let _70 := /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ mload(64)\n                                                mstore(_70, and(sum_1, _69))\n                                                /// @src 4:3532:3571  \"StakeUnlocked(msg.sender, withdrawTime)\"\n                                                log2(_70, /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 0x20, /** @src 4:3532:3571  \"StakeUnlocked(msg.sender, withdrawTime)\" */ 0xfa9b3c14cc825c412c9ed81b3ba365a5b459439403f18829e572ed53a4180f0a, /** @src 4:3248:3258  \"msg.sender\" */ caller())\n                                                /// @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                                return(0, 0)\n                                            }\n                                            case 0xc23a5cea {\n                                                if callvalue() { revert(0, 0) }\n                                                let _71 := 32\n                                                if slt(add(calldatasize(), not(3)), _71) { revert(0, 0) }\n                                                let value0_6 := abi_decode_address()\n                                                mstore(0, /** @src 4:3897:3907  \"msg.sender\" */ caller())\n                                                /// @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                                mstore(_71, 0)\n                                                /// @src 4:3934:3944  \"info.stake\"\n                                                let _72 := add(/** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ keccak256(0, 64), /** @src 4:3934:3944  \"info.stake\" */ 1)\n                                                /// @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                                let _73 := sload(/** @src 4:3934:3944  \"info.stake\" */ _72)\n                                                /// @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                                let value_7 := and(shr(8, _73), 0xffffffffffffffffffffffffffff)\n                                                if /** @src 4:3962:3971  \"stake > 0\" */ iszero(value_7)\n                                                /// @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                                {\n                                                    let memPtr_14 := mload(64)\n                                                    mstore(memPtr_14, shl(229, 4594637))\n                                                    mstore(add(memPtr_14, 4), _71)\n                                                    mstore(add(memPtr_14, 36), 20)\n                                                    mstore(add(memPtr_14, 68), \"No stake to withdraw\")\n                                                    revert(memPtr_14, 100)\n                                                }\n                                                let value_8 := and(shr(152, _73), 0xffffffffffff)\n                                                if /** @src 4:4014:4035  \"info.withdrawTime > 0\" */ iszero(/** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ value_8)\n                                                {\n                                                    let memPtr_15 := mload(64)\n                                                    mstore(memPtr_15, shl(229, 4594637))\n                                                    mstore(add(memPtr_15, 4), _71)\n                                                    mstore(add(memPtr_15, 36), 29)\n                                                    mstore(add(memPtr_15, 68), \"must call unlockStake() first\")\n                                                    revert(memPtr_15, 100)\n                                                }\n                                                if /** @src 4:4100:4136  \"info.withdrawTime <= block.timestamp\" */ gt(/** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ value_8, /** @src 4:4121:4136  \"block.timestamp\" */ timestamp())\n                                                /// @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                                {\n                                                    let memPtr_16 := mload(64)\n                                                    mstore(memPtr_16, shl(229, 4594637))\n                                                    mstore(add(memPtr_16, 4), _71)\n                                                    mstore(add(memPtr_16, 36), 27)\n                                                    mstore(add(memPtr_16, 68), \"Stake withdrawal is not due\")\n                                                    revert(memPtr_16, 100)\n                                                }\n                                                sstore(_72, and(_73, not(sub(shl(200, 1), 256))))\n                                                /// @src 4:4293:4343  \"StakeWithdrawn(msg.sender, withdrawAddress, stake)\"\n                                                let _74 := /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ mload(64)\n                                                /// @src 4:4293:4343  \"StakeWithdrawn(msg.sender, withdrawAddress, stake)\"\n                                                log2(_74, sub(abi_encode_address_payable_uint256(_74, value0_6, value_7), _74), 0xb7c918e0e249f999e965cafeb6c664271b3f4317d296461500e71da39f0cbda3, /** @src 4:3897:3907  \"msg.sender\" */ caller())\n                                                /// @src 4:4371:4409  \"withdrawAddress.call{value: stake}(\\\"\\\")\"\n                                                let expr_component_8 := call(gas(), /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ and(/** @src 4:4371:4391  \"withdrawAddress.call\" */ value0_6, /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ sub(shl(160, 1), 1)), /** @src 4:4371:4409  \"withdrawAddress.call{value: stake}(\\\"\\\")\" */ value_7, /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 0, 0, 0, 0)\n                                                /// @src 4:4371:4409  \"withdrawAddress.call{value: stake}(\\\"\\\")\"\n                                                pop(extract_returndata())\n                                                /// @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                                if iszero(expr_component_8)\n                                                {\n                                                    let memPtr_17 := mload(64)\n                                                    mstore(memPtr_17, shl(229, 4594637))\n                                                    mstore(add(memPtr_17, 4), _71)\n                                                    mstore(add(memPtr_17, 36), 24)\n                                                    mstore(add(memPtr_17, 68), \"failed to withdraw stake\")\n                                                    revert(memPtr_17, 100)\n                                                }\n                                                return(0, 0)\n                                            }\n                                            case 0xdbed18e0 {\n                                                if callvalue() { revert(0, 0) }\n                                                let param_3, param_4, param_5 := abi_decode_array_struct_PackedUserOperation_calldata_dyn_calldatat_address_payable(calldatasize())\n                                                /// @src 70:2322:2425  \"modifier nonReentrant() {...\"\n                                                fun_nonReentrantBefore()\n                                                /// @src 0:7654:7674  \"uint256 totalOps = 0\"\n                                                let var_totalOps := /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 0\n                                                /// @src 0:7689:7702  \"uint256 i = 0\"\n                                                let var_i_2 := /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 0\n                                                /// @src 0:7684:8421  \"for (uint256 i = 0; i < opasLen; i++) {...\"\n                                                for { }\n                                                /** @src 0:7704:7715  \"i < opasLen\" */ lt(var_i_2, param_4)\n                                                /// @src 0:7689:7702  \"uint256 i = 0\"\n                                                {\n                                                    /// @src 0:7717:7720  \"i++\"\n                                                    var_i_2 := /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ add(/** @src 0:7717:7720  \"i++\" */ var_i_2, /** @src 0:8024:8025  \"1\" */ 0x01)\n                                                }\n                                                /// @src 0:7717:7720  \"i++\"\n                                                {\n                                                    /// @src 0:7772:7791  \"opsPerAggregator[i]\"\n                                                    let expr_offset_1 := calldata_array_index_access_struct_UserOpsPerAggregator_calldata_dyn_calldata(param_3, param_4, var_i_2)\n                                                    /// @src 0:7842:7853  \"opa.userOps\"\n                                                    let expr_offset_2, expr_length := access_calldata_tail_array_struct_PackedUserOperation_calldata_dyn_calldata(expr_offset_1, expr_offset_1)\n                                                    /// @src 0:7892:7906  \"opa.aggregator\"\n                                                    let _75 := 32\n                                                    /// @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                                    let _76 := and(/** @src 0:7892:7906  \"opa.aggregator\" */ read_from_calldatat_contract_IAggregator(add(expr_offset_1, _75)), /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ sub(shl(160, 1), 1))\n                                                    /// @src 0:8024:8025  \"1\"\n                                                    let _77 := 0x01\n                                                    /// @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                                    if /** @src 0:7993:8026  \"address(aggregator) != address(1)\" */ eq(_76, /** @src 0:8024:8025  \"1\" */ _77)\n                                                    /// @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                                    {\n                                                        let memPtr_18 := mload(64)\n                                                        mstore(memPtr_18, shl(229, 4594637))\n                                                        mstore(add(memPtr_18, 4), /** @src 0:7892:7906  \"opa.aggregator\" */ _75)\n                                                        /// @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                                        mstore(add(memPtr_18, 36), 23)\n                                                        mstore(add(memPtr_18, 68), \"AA96 invalid aggregator\")\n                                                        revert(memPtr_18, 100)\n                                                    }\n                                                    /// @src 0:8069:8374  \"if (address(aggregator) != address(0)) {...\"\n                                                    if /** @src 0:8073:8106  \"address(aggregator) != address(0)\" */ iszero(iszero(_76))\n                                                    /// @src 0:8069:8374  \"if (address(aggregator) != address(0)) {...\"\n                                                    {\n                                                        /// @src 0:8226:8239  \"opa.signature\"\n                                                        let expr_offset_3, expr_length_1 := access_calldata_tail_bytes_calldata(expr_offset_1, add(expr_offset_1, /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 64))\n                                                        /// @src 0:8191:8240  \"aggregator.validateSignatures(ops, opa.signature)\"\n                                                        if iszero(extcodesize(_76))\n                                                        {\n                                                            /// @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                                            revert(0, 0)\n                                                        }\n                                                        /// @src 0:8191:8240  \"aggregator.validateSignatures(ops, opa.signature)\"\n                                                        let _78 := /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ mload(64)\n                                                        /// @src 0:8191:8240  \"aggregator.validateSignatures(ops, opa.signature)\"\n                                                        mstore(_78, /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ shl(224, 0x2dd81133))\n                                                        let tail_1 := add(/** @src 0:8191:8240  \"aggregator.validateSignatures(ops, opa.signature)\" */ _78, /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 68)\n                                                        mstore(/** @src 0:8191:8240  \"aggregator.validateSignatures(ops, opa.signature)\" */ add(_78, /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 4), 64)\n                                                        let pos_1 := tail_1\n                                                        mstore(tail_1, expr_length)\n                                                        let _79 := 100\n                                                        pos_1 := add(/** @src 0:8191:8240  \"aggregator.validateSignatures(ops, opa.signature)\" */ _78, /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ _79)\n                                                        let tail_2 := add(add(/** @src 0:8191:8240  \"aggregator.validateSignatures(ops, opa.signature)\" */ _78, /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ shl(5, expr_length)), _79)\n                                                        let srcPtr := expr_offset_2\n                                                        let i := 0\n                                                        for { }\n                                                        lt(i, expr_length)\n                                                        {\n                                                            i := add(i, /** @src 0:8024:8025  \"1\" */ _77)\n                                                        }\n                                                        /// @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                                        {\n                                                            mstore(pos_1, add(sub(tail_2, /** @src 0:8191:8240  \"aggregator.validateSignatures(ops, opa.signature)\" */ _78), /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ not(99)))\n                                                            let rel_offset_of_tail := calldataload(srcPtr)\n                                                            if iszero(slt(rel_offset_of_tail, add(sub(calldatasize(), expr_offset_2), not(286)))) { revert(0, 0) }\n                                                            tail_2 := abi_encode_struct_PackedUserOperation_calldata(add(rel_offset_of_tail, expr_offset_2), tail_2)\n                                                            srcPtr := add(srcPtr, /** @src 0:7892:7906  \"opa.aggregator\" */ _75)\n                                                            /// @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                                            pos_1 := add(pos_1, /** @src 0:7892:7906  \"opa.aggregator\" */ _75)\n                                                        }\n                                                        /// @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                                        mstore(add(/** @src 0:8191:8240  \"aggregator.validateSignatures(ops, opa.signature)\" */ _78, /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 36), add(sub(tail_2, /** @src 0:8191:8240  \"aggregator.validateSignatures(ops, opa.signature)\" */ _78), /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ not(3)))\n                                                        /// @src 0:8191:8240  \"aggregator.validateSignatures(ops, opa.signature)\"\n                                                        let trySuccessCondition_1 := staticcall(gas(), _76, _78, sub(/** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ abi_encode_bytes_calldata(expr_offset_3, expr_length_1, tail_2), /** @src 0:8191:8240  \"aggregator.validateSignatures(ops, opa.signature)\" */ _78), _78, /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 0)\n                                                        /// @src 0:8191:8240  \"aggregator.validateSignatures(ops, opa.signature)\"\n                                                        if trySuccessCondition_1\n                                                        {\n                                                            finalize_allocation_26283(_78)\n                                                        }\n                                                        /// @src 0:8187:8360  \"try aggregator.validateSignatures(ops, opa.signature) {}...\"\n                                                        switch iszero(trySuccessCondition_1)\n                                                        case 0 { }\n                                                        default {\n                                                            /// @src 0:8295:8341  \"SignatureValidationFailed(address(aggregator))\"\n                                                            let _80 := /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ mload(64)\n                                                            /// @src 0:8295:8341  \"SignatureValidationFailed(address(aggregator))\"\n                                                            mstore(_80, shl(228, 0x086a9f75))\n                                                            /// @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                                            mstore(/** @src 0:8295:8341  \"SignatureValidationFailed(address(aggregator))\" */ add(_80, /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 4), _76)\n                                                            /// @src 0:8295:8341  \"SignatureValidationFailed(address(aggregator))\"\n                                                            revert(_80, /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 36)\n                                                        }\n                                                    }\n                                                    /// @src 0:8388:8410  \"totalOps += ops.length\"\n                                                    var_totalOps := checked_add_uint256(var_totalOps, /** @src 0:8400:8410  \"ops.length\" */ expr_length)\n                                                }\n                                                /// @src 0:8461:8487  \"new UserOpInfo[](totalOps)\"\n                                                let expr_mpos_1 := allocate_and_zero_memory_array_array_struct_UserOpInfo_dyn(var_totalOps)\n                                                /// @src 0:8498:8517  \"uint256 opIndex = 0\"\n                                                let var_opIndex := /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 0\n                                                /// @src 0:8532:8545  \"uint256 a = 0\"\n                                                let var_a := /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 0\n                                                /// @src 0:8527:9240  \"for (uint256 a = 0; a < opasLen; a++) {...\"\n                                                for { }\n                                                /** @src 0:8547:8558  \"a < opasLen\" */ lt(var_a, param_4)\n                                                /// @src 0:8532:8545  \"uint256 a = 0\"\n                                                {\n                                                    /// @src 0:8560:8563  \"a++\"\n                                                    var_a := /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ add(/** @src 0:8560:8563  \"a++\" */ var_a, /** @src 0:8024:8025  \"1\" */ 0x01)\n                                                }\n                                                /// @src 0:8560:8563  \"a++\"\n                                                {\n                                                    /// @src 0:8615:8634  \"opsPerAggregator[a]\"\n                                                    let expr_offset_4 := calldata_array_index_access_struct_UserOpsPerAggregator_calldata_dyn_calldata(param_3, param_4, var_a)\n                                                    /// @src 0:8685:8696  \"opa.userOps\"\n                                                    let expr_offset_5, expr_length_2 := access_calldata_tail_array_struct_PackedUserOperation_calldata_dyn_calldata(expr_offset_4, expr_offset_4)\n                                                    /// @src 0:8735:8749  \"opa.aggregator\"\n                                                    let expr_address := read_from_calldatat_contract_IAggregator(add(expr_offset_4, /** @src 0:7892:7906  \"opa.aggregator\" */ 32))\n                                                    /// @src 0:8810:8823  \"uint256 i = 0\"\n                                                    let var_i_3 := /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 0\n                                                    let _81 := sub(shl(160, 1), 1)\n                                                    let _82 := and(/** @src 0:9151:9170  \"address(aggregator)\" */ expr_address, /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ _81)\n                                                    /// @src 0:8805:9230  \"for (uint256 i = 0; i < opslen; i++) {...\"\n                                                    for { }\n                                                    /** @src 0:8825:8835  \"i < opslen\" */ lt(var_i_3, expr_length_2)\n                                                    /// @src 0:8810:8823  \"uint256 i = 0\"\n                                                    {\n                                                        /// @src 0:8837:8840  \"i++\"\n                                                        var_i_3 := /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ add(/** @src 0:8837:8840  \"i++\" */ var_i_3, /** @src 0:8024:8025  \"1\" */ 0x01)\n                                                    }\n                                                    /// @src 0:8837:8840  \"i++\"\n                                                    {\n                                                        /// @src 0:8981:9025  \"_validatePrepayment(opIndex, ops[i], opInfo)\"\n                                                        let expr_component_9, expr_component_10 := fun_validatePrepayment(var_opIndex, /** @src 0:9010:9016  \"ops[i]\" */ calldata_array_index_access_struct_PackedUserOperation_calldata_dyn_calldata(expr_offset_5, expr_length_2, var_i_3), /** @src 0:8887:8903  \"opInfos[opIndex]\" */ mload(memory_array_index_access_struct_UserOpInfo_dyn(expr_mpos_1, var_opIndex)))\n                                                        /// @src 0:20568:20602  \"_getValidationData(validationData)\"\n                                                        let expr_component_11, expr_component_12 := fun_getValidationData(expr_component_9)\n                                                        /// @src 0:20612:20723  \"if (expectedAggregator != aggregator) {...\"\n                                                        if /** @src 0:20616:20648  \"expectedAggregator != aggregator\" */ iszero(eq(/** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ _82, and(/** @src 0:20616:20648  \"expectedAggregator != aggregator\" */ expr_component_11, /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ _81)))\n                                                        /// @src 0:20612:20723  \"if (expectedAggregator != aggregator) {...\"\n                                                        {\n                                                            /// @src 0:20671:20712  \"FailedOp(opIndex, \\\"AA24 signature error\\\")\"\n                                                            let _83 := /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ mload(64)\n                                                            /// @src 0:20671:20712  \"FailedOp(opIndex, \\\"AA24 signature error\\\")\"\n                                                            mstore(_83, shl(225, 0x1101335b))\n                                                            /// @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                                            mstore(/** @src 0:20671:20712  \"FailedOp(opIndex, \\\"AA24 signature error\\\")\" */ add(_83, /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 4), var_i_3)\n                                                            mstore(add(/** @src 0:20671:20712  \"FailedOp(opIndex, \\\"AA24 signature error\\\")\" */ _83, /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 36), 64)\n                                                            mstore(add(/** @src 0:20671:20712  \"FailedOp(opIndex, \\\"AA24 signature error\\\")\" */ _83, /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 68), 20)\n                                                            mstore(add(/** @src 0:20671:20712  \"FailedOp(opIndex, \\\"AA24 signature error\\\")\" */ _83, /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 100), \"AA24 signature error\")\n                                                            /// @src 0:20671:20712  \"FailedOp(opIndex, \\\"AA24 signature error\\\")\"\n                                                            revert(_83, /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 132)\n                                                        }\n                                                        /// @src 0:20732:20828  \"if (outOfTimeRange) {...\"\n                                                        if expr_component_12\n                                                        {\n                                                            /// @src 0:20773:20817  \"FailedOp(opIndex, \\\"AA22 expired or not due\\\")\"\n                                                            let _84 := /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ mload(64)\n                                                            /// @src 0:20773:20817  \"FailedOp(opIndex, \\\"AA22 expired or not due\\\")\"\n                                                            mstore(_84, /** @src 0:20671:20712  \"FailedOp(opIndex, \\\"AA24 signature error\\\")\" */ shl(225, 0x1101335b))\n                                                            /// @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                                            mstore(/** @src 0:20773:20817  \"FailedOp(opIndex, \\\"AA22 expired or not due\\\")\" */ add(_84, /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 4), var_i_3)\n                                                            mstore(add(/** @src 0:20773:20817  \"FailedOp(opIndex, \\\"AA22 expired or not due\\\")\" */ _84, /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 36), 64)\n                                                            mstore(add(/** @src 0:20773:20817  \"FailedOp(opIndex, \\\"AA22 expired or not due\\\")\" */ _84, /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 68), 23)\n                                                            mstore(add(/** @src 0:20773:20817  \"FailedOp(opIndex, \\\"AA22 expired or not due\\\")\" */ _84, /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 100), \"AA22 expired or not due\")\n                                                            /// @src 0:20773:20817  \"FailedOp(opIndex, \\\"AA22 expired or not due\\\")\"\n                                                            revert(_84, /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 132)\n                                                        }\n                                                        /// @src 0:21130:21173  \"_getValidationData(paymasterValidationData)\"\n                                                        let expr_component_13, expr_component_14 := fun_getValidationData(expr_component_10)\n                                                        /// @src 0:21183:21288  \"if (pmAggregator != address(0)) {...\"\n                                                        if /** @src 0:21187:21213  \"pmAggregator != address(0)\" */ iszero(iszero(/** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ and(/** @src 0:21187:21213  \"pmAggregator != address(0)\" */ expr_component_13, /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ _81)))\n                                                        /// @src 0:21183:21288  \"if (pmAggregator != address(0)) {...\"\n                                                        {\n                                                            /// @src 0:21236:21277  \"FailedOp(opIndex, \\\"AA34 signature error\\\")\"\n                                                            let _85 := /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ mload(64)\n                                                            /// @src 0:21236:21277  \"FailedOp(opIndex, \\\"AA34 signature error\\\")\"\n                                                            mstore(_85, /** @src 0:20671:20712  \"FailedOp(opIndex, \\\"AA24 signature error\\\")\" */ shl(225, 0x1101335b))\n                                                            /// @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                                            mstore(/** @src 0:21236:21277  \"FailedOp(opIndex, \\\"AA34 signature error\\\")\" */ add(_85, /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 4), var_i_3)\n                                                            mstore(add(/** @src 0:21236:21277  \"FailedOp(opIndex, \\\"AA34 signature error\\\")\" */ _85, /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 36), 64)\n                                                            mstore(add(/** @src 0:21236:21277  \"FailedOp(opIndex, \\\"AA34 signature error\\\")\" */ _85, /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 68), 20)\n                                                            mstore(add(/** @src 0:21236:21277  \"FailedOp(opIndex, \\\"AA34 signature error\\\")\" */ _85, /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 100), \"AA34 signature error\")\n                                                            /// @src 0:21236:21277  \"FailedOp(opIndex, \\\"AA34 signature error\\\")\"\n                                                            revert(_85, /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 132)\n                                                        }\n                                                        /// @src 0:21297:21403  \"if (outOfTimeRange) {...\"\n                                                        if expr_component_14\n                                                        {\n                                                            /// @src 0:21338:21392  \"FailedOp(opIndex, \\\"AA32 paymaster expired or not due\\\")\"\n                                                            let _86 := /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ mload(64)\n                                                            /// @src 0:21338:21392  \"FailedOp(opIndex, \\\"AA32 paymaster expired or not due\\\")\"\n                                                            mstore(_86, /** @src 0:20671:20712  \"FailedOp(opIndex, \\\"AA24 signature error\\\")\" */ shl(225, 0x1101335b))\n                                                            /// @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                                            mstore(/** @src 0:21338:21392  \"FailedOp(opIndex, \\\"AA32 paymaster expired or not due\\\")\" */ add(_86, /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 4), var_i_3)\n                                                            mstore(add(/** @src 0:21338:21392  \"FailedOp(opIndex, \\\"AA32 paymaster expired or not due\\\")\" */ _86, /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 36), 64)\n                                                            mstore(add(/** @src 0:21338:21392  \"FailedOp(opIndex, \\\"AA32 paymaster expired or not due\\\")\" */ _86, /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 68), 33)\n                                                            mstore(add(/** @src 0:21338:21392  \"FailedOp(opIndex, \\\"AA32 paymaster expired or not due\\\")\" */ _86, /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 100), \"AA32 paymaster expired or not du\")\n                                                            mstore(add(/** @src 0:21338:21392  \"FailedOp(opIndex, \\\"AA32 paymaster expired or not due\\\")\" */ _86, /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 132), \"e\")\n                                                            /// @src 0:21338:21392  \"FailedOp(opIndex, \\\"AA32 paymaster expired or not due\\\")\"\n                                                            revert(_86, /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 164)\n                                                        }\n                                                        /// @src 0:9206:9215  \"opIndex++\"\n                                                        var_opIndex := increment_uint256(var_opIndex)\n                                                    }\n                                                }\n                                                /// @src 0:9255:9272  \"BeforeExecution()\"\n                                                log1(/** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 0, 0, /** @src 0:9255:9272  \"BeforeExecution()\" */ 0xbb47ee3e183a558b1a2ff0874b079f3fc5478b7454eacf2bfc5af2ff5878f972)\n                                                /// @src 0:9314:9325  \"opIndex = 0\"\n                                                var_opIndex := /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 0\n                                                /// @src 0:9283:9304  \"uint256 collected = 0\"\n                                                let var_collected_1 := /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 0\n                                                /// @src 0:9340:9353  \"uint256 a = 0\"\n                                                let var_a_1 := /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 0\n                                                /// @src 0:9335:9799  \"for (uint256 a = 0; a < opasLen; a++) {...\"\n                                                for { }\n                                                /** @src 0:9355:9366  \"a < opasLen\" */ lt(var_a_1, param_4)\n                                                /// @src 0:9340:9353  \"uint256 a = 0\"\n                                                {\n                                                    /// @src 0:9368:9371  \"a++\"\n                                                    var_a_1 := /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ add(/** @src 0:9368:9371  \"a++\" */ var_a_1, /** @src 0:8024:8025  \"1\" */ 0x01)\n                                                }\n                                                /// @src 0:9368:9371  \"a++\"\n                                                {\n                                                    /// @src 0:9423:9442  \"opsPerAggregator[a]\"\n                                                    let expr_offset_6 := calldata_array_index_access_struct_UserOpsPerAggregator_calldata_dyn_calldata(param_3, param_4, var_a_1)\n                                                    /// @src 0:9461:9512  \"SignatureAggregatorChanged(address(opa.aggregator))\"\n                                                    log2(/** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 0, 0, /** @src 0:9461:9512  \"SignatureAggregatorChanged(address(opa.aggregator))\" */ 0x575ff3acadd5ab348fe1855e217e0f3678f8d767d7494c9f9fefbee2e17cca4d, /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ and(/** @src 0:9496:9510  \"opa.aggregator\" */ read_from_calldatat_contract_IAggregator(add(expr_offset_6, /** @src 0:7892:7906  \"opa.aggregator\" */ 32)), /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ sub(shl(160, 1), 1)))\n                                                    /// @src 0:9563:9574  \"opa.userOps\"\n                                                    let expr_offset_7, expr_length_3 := access_calldata_tail_array_struct_PackedUserOperation_calldata_dyn_calldata(expr_offset_6, expr_offset_6)\n                                                    /// @src 0:9635:9648  \"uint256 i = 0\"\n                                                    let var_i_4 := /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 0\n                                                    /// @src 0:9630:9789  \"for (uint256 i = 0; i < opslen; i++) {...\"\n                                                    for { }\n                                                    /** @src 0:9650:9660  \"i < opslen\" */ lt(var_i_4, expr_length_3)\n                                                    /// @src 0:9635:9648  \"uint256 i = 0\"\n                                                    {\n                                                        /// @src 0:9662:9665  \"i++\"\n                                                        var_i_4 := /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ add(/** @src 0:9662:9665  \"i++\" */ var_i_4, /** @src 0:8024:8025  \"1\" */ 0x01)\n                                                    }\n                                                    /// @src 0:9662:9665  \"i++\"\n                                                    {\n                                                        /// @src 0:9722:9728  \"ops[i]\"\n                                                        let expr_offset_8 := calldata_array_index_access_struct_PackedUserOperation_calldata_dyn_calldata(expr_offset_7, expr_length_3, var_i_4)\n                                                        /// @src 0:9685:9747  \"collected += _executeUserOp(opIndex, ops[i], opInfos[opIndex])\"\n                                                        var_collected_1 := checked_add_uint256(var_collected_1, /** @src 0:9698:9747  \"_executeUserOp(opIndex, ops[i], opInfos[opIndex])\" */ fun_executeUserOp(var_opIndex, expr_offset_8, /** @src 0:9730:9746  \"opInfos[opIndex]\" */ mload(memory_array_index_access_struct_UserOpInfo_dyn(expr_mpos_1, var_opIndex))))\n                                                        /// @src 0:9765:9774  \"opIndex++\"\n                                                        var_opIndex := increment_uint256(var_opIndex)\n                                                    }\n                                                }\n                                                /// @src 0:9813:9851  \"SignatureAggregatorChanged(address(0))\"\n                                                log2(/** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 0, 0, /** @src 0:9461:9512  \"SignatureAggregatorChanged(address(opa.aggregator))\" */ 0x575ff3acadd5ab348fe1855e217e0f3678f8d767d7494c9f9fefbee2e17cca4d, /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 0)\n                                                /// @src 0:9887:9896  \"collected\"\n                                                fun_compensate(param_5, var_collected_1)\n                                                /// @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                                sstore(/** @src 70:2924:2945  \"_status = NOT_ENTERED\" */ 0x02, /** @src 0:8024:8025  \"1\" */ 0x01)\n                                                /// @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                                return(0, 0)\n                                            }\n                                            case 0xfc7e286d {\n                                                if callvalue() { revert(0, 0) }\n                                                if slt(add(calldatasize(), not(3)), 32) { revert(0, 0) }\n                                                mstore(0, and(abi_decode_address(), sub(shl(160, 1), 1)))\n                                                mstore(32, 0)\n                                                let dataSlot_5 := keccak256(0, 64)\n                                                let _87 := sload(/** @src 4:507:554  \"mapping(address => DepositInfo) public deposits\" */ dataSlot_5)\n                                                /// @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                                let _88 := sload(/** @src 4:507:554  \"mapping(address => DepositInfo) public deposits\" */ add(dataSlot_5, 1))\n                                                /// @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                                let memPos_7 := mload(64)\n                                                mstore(memPos_7, _87)\n                                                mstore(add(memPos_7, 32), iszero(iszero(and(_88, 0xff))))\n                                                mstore(add(memPos_7, 64), and(shr(8, _88), 0xffffffffffffffffffffffffffff))\n                                                mstore(add(memPos_7, 96), and(shr(120, _88), 0xffffffff))\n                                                mstore(add(memPos_7, 128), and(shr(152, _88), 0xffffffffffff))\n                                                return(memPos_7, 160)\n                                            }\n                                        }\n                                        if iszero(calldatasize())\n                                        {\n                                            /// @src 4:1326:1336  \"msg.sender\"\n                                            fun_depositTo(caller())\n                                            /// @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                            stop()\n                                        }\n                                        revert(0, 0)\n                                    }\n                                    function finalize_allocation_26259(memPtr)\n                                    {\n                                        let newFreePtr := add(memPtr, 0xa0)\n                                        if or(gt(newFreePtr, 0xffffffffffffffff), lt(newFreePtr, memPtr))\n                                        {\n                                            mstore(0, shl(224, 0x4e487b71))\n                                            mstore(4, 0x41)\n                                            revert(0, 0x24)\n                                        }\n                                        mstore(64, newFreePtr)\n                                    }\n                                    function finalize_allocation_26260(memPtr)\n                                    {\n                                        let newFreePtr := add(memPtr, 0x0140)\n                                        if or(gt(newFreePtr, 0xffffffffffffffff), lt(newFreePtr, memPtr))\n                                        {\n                                            mstore(0, shl(224, 0x4e487b71))\n                                            mstore(4, 0x41)\n                                            revert(0, 0x24)\n                                        }\n                                        mstore(64, newFreePtr)\n                                    }\n                                    function finalize_allocation_26283(memPtr)\n                                    {\n                                        if gt(memPtr, 0xffffffffffffffff)\n                                        {\n                                            mstore(0, shl(224, 0x4e487b71))\n                                            mstore(4, 0x41)\n                                            revert(0, 0x24)\n                                        }\n                                        mstore(64, memPtr)\n                                    }\n                                    function finalize_allocation_26350(memPtr)\n                                    {\n                                        let newFreePtr := add(memPtr, 96)\n                                        if or(gt(newFreePtr, 0xffffffffffffffff), lt(newFreePtr, memPtr))\n                                        {\n                                            mstore(0, shl(224, 0x4e487b71))\n                                            mstore(4, 0x41)\n                                            revert(0, 0x24)\n                                        }\n                                        mstore(64, newFreePtr)\n                                    }\n                                    function finalize_allocation(memPtr, size)\n                                    {\n                                        let newFreePtr := add(memPtr, and(add(size, 31), not(31)))\n                                        if or(gt(newFreePtr, 0xffffffffffffffff), lt(newFreePtr, memPtr))\n                                        {\n                                            mstore(0, shl(224, 0x4e487b71))\n                                            mstore(4, 0x41)\n                                            revert(0, 0x24)\n                                        }\n                                        mstore(64, newFreePtr)\n                                    }\n                                    function array_allocation_size_bytes(length) -> size\n                                    {\n                                        if gt(length, 0xffffffffffffffff)\n                                        {\n                                            mstore(0, shl(224, 0x4e487b71))\n                                            mstore(4, 0x41)\n                                            revert(0, 0x24)\n                                        }\n                                        size := add(and(add(length, 31), not(31)), 0x20)\n                                    }\n                                    function abi_decode_available_length_bytes(src, length, end) -> array\n                                    {\n                                        let _1 := array_allocation_size_bytes(length)\n                                        let memPtr := mload(64)\n                                        finalize_allocation(memPtr, _1)\n                                        array := memPtr\n                                        mstore(memPtr, length)\n                                        if gt(add(src, length), end)\n                                        {\n                                            revert(/** @src -1:-1:-1 */ 0, 0)\n                                        }\n                                        /// @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                        calldatacopy(add(memPtr, 0x20), src, length)\n                                        mstore(add(add(memPtr, length), 0x20), /** @src -1:-1:-1 */ 0)\n                                    }\n                                    /// @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                    function abi_decode_address() -> value\n                                    {\n                                        value := calldataload(4)\n                                        if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(0, 0) }\n                                    }\n                                    function abi_decode_bytes_calldata(offset, end) -> arrayPos, length\n                                    {\n                                        if iszero(slt(add(offset, 0x1f), end)) { revert(0, 0) }\n                                        length := calldataload(offset)\n                                        if gt(length, 0xffffffffffffffff) { revert(0, 0) }\n                                        arrayPos := add(offset, 0x20)\n                                        if gt(add(add(offset, length), 0x20), end) { revert(0, 0) }\n                                    }\n                                    function abi_decode_uint192() -> value\n                                    {\n                                        value := calldataload(36)\n                                        if iszero(eq(value, and(value, sub(shl(192, 1), 1)))) { revert(0, 0) }\n                                    }\n                                    function abi_decode_array_struct_PackedUserOperation_calldata_dyn_calldatat_address_payable(dataEnd) -> value0, value1, value2\n                                    {\n                                        if slt(add(dataEnd, not(3)), 64) { revert(0, 0) }\n                                        let offset := calldataload(4)\n                                        let _1 := 0xffffffffffffffff\n                                        if gt(offset, _1) { revert(0, 0) }\n                                        if iszero(slt(add(offset, 35), dataEnd))\n                                        {\n                                            revert(/** @src -1:-1:-1 */ 0, 0)\n                                        }\n                                        /// @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                        let length := calldataload(add(4, offset))\n                                        if gt(length, _1)\n                                        {\n                                            revert(/** @src -1:-1:-1 */ 0, 0)\n                                        }\n                                        /// @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                        if gt(add(add(offset, shl(5, length)), 36), dataEnd)\n                                        {\n                                            revert(/** @src -1:-1:-1 */ 0, 0)\n                                        }\n                                        /// @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                        value0 := add(offset, 36)\n                                        value1 := length\n                                        let value := calldataload(36)\n                                        if iszero(eq(value, and(value, sub(shl(160, 1), 1))))\n                                        {\n                                            revert(/** @src -1:-1:-1 */ 0, 0)\n                                        }\n                                        /// @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                        value2 := value\n                                    }\n                                    /// @src 0:1542:1546  \"2048\"\n                                    function copy_memory_to_memory_with_cleanup(src, dst, length)\n                                    {\n                                        let i := 0\n                                        for { } lt(i, length) { i := add(i, 32) }\n                                        {\n                                            mstore(add(dst, i), mload(add(src, i)))\n                                        }\n                                        mstore(add(dst, length), 0)\n                                    }\n                                    function abi_encode_bytes(value, pos) -> end\n                                    {\n                                        let length := /** @src 0:1296:1301  \"10000\" */ mload(/** @src 0:1542:1546  \"2048\" */ value)\n                                        /// @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                        mstore(pos, length)\n                                        /// @src 0:1542:1546  \"2048\"\n                                        copy_memory_to_memory_with_cleanup(add(value, /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 0x20), add(pos, 0x20), /** @src 0:1542:1546  \"2048\" */ length)\n                                        end := add(add(/** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ pos, and(add(/** @src 0:1542:1546  \"2048\" */ length, /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 31), not(31))), 0x20)\n                                    }\n                                    function checked_add_uint256(x, y) -> sum\n                                    {\n                                        sum := add(x, y)\n                                        if gt(x, sum)\n                                        {\n                                            mstore(0, shl(224, 0x4e487b71))\n                                            mstore(4, 0x11)\n                                            revert(0, 0x24)\n                                        }\n                                    }\n                                    function update_storage_value_offsett_uint48_to_uint48(slot, value)\n                                    {\n                                        let _1 := sload(slot)\n                                        sstore(slot, or(and(_1, not(shl(152, 0xffffffffffff))), and(shl(152, value), shl(152, 0xffffffffffff))))\n                                    }\n                                    function increment_uint256(value) -> ret\n                                    {\n                                        if eq(value, not(0))\n                                        {\n                                            mstore(0, shl(224, 0x4e487b71))\n                                            mstore(4, 0x11)\n                                            revert(0, 0x24)\n                                        }\n                                        ret := add(value, 1)\n                                    }\n                                    function checked_sub_uint256(x, y) -> diff\n                                    {\n                                        diff := sub(x, y)\n                                        if gt(diff, x)\n                                        {\n                                            mstore(0, shl(224, 0x4e487b71))\n                                            mstore(4, 0x11)\n                                            revert(0, 0x24)\n                                        }\n                                    }\n                                    function abi_encode_address_payable_uint256(headStart, value0, value1) -> tail\n                                    {\n                                        tail := add(headStart, 64)\n                                        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n                                        mstore(add(headStart, 32), value1)\n                                    }\n                                    function extract_returndata() -> data\n                                    {\n                                        switch returndatasize()\n                                        case 0 { data := 96 }\n                                        default {\n                                            let _1 := returndatasize()\n                                            let _2 := array_allocation_size_bytes(_1)\n                                            let memPtr := mload(64)\n                                            finalize_allocation(memPtr, _2)\n                                            mstore(memPtr, _1)\n                                            data := memPtr\n                                            returndatacopy(add(memPtr, 0x20), /** @src -1:-1:-1 */ 0, /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ returndatasize())\n                                        }\n                                    }\n                                    /// @ast-id 968 @src 0:12516:12696  \"function getUserOpHash(PackedUserOperation calldata userOp) public view returns (bytes32) {...\"\n                                    function fun_getUserOpHash(var_userOp_947_offset) -> var\n                                    {\n                                        /// @src 5:1998:2013  \"userOp.initCode\"\n                                        let _1 := 64\n                                        let expr_offset, expr_length := access_calldata_tail_bytes_calldata(var_userOp_947_offset, add(var_userOp_947_offset, _1))\n                                        /// @src 1:2961:3154  \"assembly (\\\"memory-safe\\\") {...\"\n                                        let usr$mem := mload(/** @src 5:1998:2013  \"userOp.initCode\" */ _1)\n                                        /// @src 1:2961:3154  \"assembly (\\\"memory-safe\\\") {...\"\n                                        calldatacopy(usr$mem, expr_offset, expr_length)\n                                        let var_ret := keccak256(usr$mem, expr_length)\n                                        /// @src 5:2062:2077  \"userOp.callData\"\n                                        let expr_offset_1, expr_length_1 := access_calldata_tail_bytes_calldata(var_userOp_947_offset, add(var_userOp_947_offset, 96))\n                                        /// @src 1:2961:3154  \"assembly (\\\"memory-safe\\\") {...\"\n                                        let usr$mem_1 := mload(/** @src 5:1998:2013  \"userOp.initCode\" */ _1)\n                                        /// @src 1:2961:3154  \"assembly (\\\"memory-safe\\\") {...\"\n                                        calldatacopy(usr$mem_1, expr_offset_1, expr_length_1)\n                                        let var_ret_1 := keccak256(usr$mem_1, expr_length_1)\n                                        /// @src 5:2300:2323  \"userOp.paymasterAndData\"\n                                        let expr_offset_2, expr_length_2 := access_calldata_tail_bytes_calldata(var_userOp_947_offset, add(var_userOp_947_offset, 224))\n                                        /// @src 1:2961:3154  \"assembly (\\\"memory-safe\\\") {...\"\n                                        let usr$mem_2 := mload(/** @src 5:1998:2013  \"userOp.initCode\" */ _1)\n                                        /// @src 1:2961:3154  \"assembly (\\\"memory-safe\\\") {...\"\n                                        calldatacopy(usr$mem_2, expr_offset_2, expr_length_2)\n                                        let var_ret_2 := keccak256(usr$mem_2, expr_length_2)\n                                        /// @src 5:2342:2522  \"abi.encode(...\"\n                                        let expr_mpos := /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ mload(/** @src 5:1998:2013  \"userOp.initCode\" */ _1)\n                                        /// @src 5:2342:2522  \"abi.encode(...\"\n                                        let _2 := add(expr_mpos, /** @src 5:1938:1950  \"userOp.nonce\" */ 32)\n                                        /// @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                        mstore(_2, and(/** @src 5:823:884  \"assembly {...\" */ calldataload(/** @src 5:1895:1912  \"getSender(userOp)\" */ var_userOp_947_offset), /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ sub(shl(160, 1), 1)))\n                                        mstore(add(/** @src 5:2342:2522  \"abi.encode(...\" */ expr_mpos, /** @src 5:1998:2013  \"userOp.initCode\" */ _1), /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ calldataload(/** @src 5:1938:1950  \"userOp.nonce\" */ add(var_userOp_947_offset, 32)))\n                                        /// @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                        mstore(add(/** @src 5:2342:2522  \"abi.encode(...\" */ expr_mpos, /** @src 5:2062:2077  \"userOp.callData\" */ 96), /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ var_ret)\n                                        mstore(add(/** @src 5:2342:2522  \"abi.encode(...\" */ expr_mpos, /** @src 5:2115:2138  \"userOp.accountGasLimits\" */ 128), /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ var_ret_1)\n                                        mstore(add(/** @src 5:2342:2522  \"abi.encode(...\" */ expr_mpos, /** @src 5:2177:2202  \"userOp.preVerificationGas\" */ 160), /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ calldataload(/** @src 5:2115:2138  \"userOp.accountGasLimits\" */ add(var_userOp_947_offset, 128)))\n                                        /// @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                        mstore(add(/** @src 5:2342:2522  \"abi.encode(...\" */ expr_mpos, /** @src 5:2230:2244  \"userOp.gasFees\" */ 192), /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ calldataload(/** @src 5:2177:2202  \"userOp.preVerificationGas\" */ add(var_userOp_947_offset, 160)))\n                                        /// @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                        mstore(add(/** @src 5:2342:2522  \"abi.encode(...\" */ expr_mpos, /** @src 5:2300:2323  \"userOp.paymasterAndData\" */ 224), /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ calldataload(/** @src 5:2230:2244  \"userOp.gasFees\" */ add(var_userOp_947_offset, 192)))\n                                        /// @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                        let _3 := 256\n                                        mstore(add(/** @src 5:2342:2522  \"abi.encode(...\" */ expr_mpos, /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ _3), var_ret_2)\n                                        /// @src 5:2342:2522  \"abi.encode(...\"\n                                        mstore(expr_mpos, /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ _3)\n                                        let newFreePtr := add(expr_mpos, 288)\n                                        let _4 := 0xffffffffffffffff\n                                        if or(gt(newFreePtr, _4), lt(newFreePtr, expr_mpos))\n                                        {\n                                            mstore(0, shl(224, 0x4e487b71))\n                                            mstore(4, 0x41)\n                                            revert(0, 0x24)\n                                        }\n                                        mstore(/** @src 5:1998:2013  \"userOp.initCode\" */ _1, /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ newFreePtr)\n                                        /// @src 5:4955:4987  \"return keccak256(encode(userOp))\"\n                                        let var_1 := /** @src 5:4962:4987  \"keccak256(encode(userOp))\" */ keccak256(/** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ _2, /** @src 0:1296:1301  \"10000\" */ mload(/** @src 5:4962:4987  \"keccak256(encode(userOp))\" */ expr_mpos))\n                                        /// @src 0:12633:12688  \"abi.encode(userOp.hash(), address(this), block.chainid)\"\n                                        let _5 := add(/** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ expr_mpos, /** @src 0:12633:12688  \"abi.encode(userOp.hash(), address(this), block.chainid)\" */ 320)\n                                        /// @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                        mstore(_5, var_1)\n                                        mstore(add(expr_mpos, 352), /** @src 0:12667:12671  \"this\" */ address())\n                                        /// @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                        mstore(add(expr_mpos, 384), /** @src 0:12674:12687  \"block.chainid\" */ chainid())\n                                        /// @src 0:12633:12688  \"abi.encode(userOp.hash(), address(this), block.chainid)\"\n                                        mstore(newFreePtr, /** @src 5:2062:2077  \"userOp.callData\" */ 96)\n                                        /// @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                        let newFreePtr_1 := add(expr_mpos, 416)\n                                        if or(gt(newFreePtr_1, _4), lt(newFreePtr_1, newFreePtr))\n                                        {\n                                            mstore(0, shl(224, 0x4e487b71))\n                                            mstore(4, 0x41)\n                                            revert(0, 0x24)\n                                        }\n                                        mstore(/** @src 5:1998:2013  \"userOp.initCode\" */ _1, /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ newFreePtr_1)\n                                        /// @src 0:12616:12689  \"return keccak256(abi.encode(userOp.hash(), address(this), block.chainid))\"\n                                        var := /** @src 0:12623:12689  \"keccak256(abi.encode(userOp.hash(), address(this), block.chainid))\" */ keccak256(/** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ _5, /** @src 0:1296:1301  \"10000\" */ mload(/** @src 0:12623:12689  \"keccak256(abi.encode(userOp.hash(), address(this), block.chainid))\" */ newFreePtr))\n                                    }\n                                    /// @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                    function array_allocation_size_array_struct_UserOpInfo_dyn(length) -> size\n                                    {\n                                        if gt(length, 0xffffffffffffffff)\n                                        {\n                                            mstore(0, shl(224, 0x4e487b71))\n                                            mstore(4, 0x41)\n                                            revert(0, 0x24)\n                                        }\n                                        size := add(shl(5, length), 0x20)\n                                    }\n                                    function allocate_and_zero_memory_array_array_struct_UserOpInfo_dyn(length) -> memPtr\n                                    {\n                                        let _1 := array_allocation_size_array_struct_UserOpInfo_dyn(length)\n                                        let _2 := 64\n                                        let memPtr_1 := mload(64)\n                                        finalize_allocation(memPtr_1, _1)\n                                        mstore(memPtr_1, length)\n                                        memPtr := memPtr_1\n                                        let _3 := add(array_allocation_size_array_struct_UserOpInfo_dyn(length), not(31))\n                                        let i := /** @src -1:-1:-1 */ 0\n                                        /// @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                        for { } lt(i, _3) { i := add(i, 32) }\n                                        {\n                                            let memPtr_2 := mload(_2)\n                                            finalize_allocation_26259(memPtr_2)\n                                            let memPtr_3 := mload(_2)\n                                            finalize_allocation_26260(memPtr_3)\n                                            mstore(memPtr_3, /** @src -1:-1:-1 */ 0)\n                                            /// @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                            let _4 := 32\n                                            mstore(add(memPtr_3, _4), /** @src -1:-1:-1 */ 0)\n                                            /// @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                            mstore(add(memPtr_3, _2), /** @src -1:-1:-1 */ 0)\n                                            /// @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                            let _5 := 96\n                                            mstore(add(memPtr_3, _5), /** @src -1:-1:-1 */ 0)\n                                            /// @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                            let _6 := 128\n                                            mstore(add(memPtr_3, _6), /** @src -1:-1:-1 */ 0)\n                                            /// @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                            mstore(add(memPtr_3, 160), /** @src -1:-1:-1 */ 0)\n                                            /// @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                            mstore(add(memPtr_3, 192), /** @src -1:-1:-1 */ 0)\n                                            /// @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                            mstore(add(memPtr_3, 224), /** @src -1:-1:-1 */ 0)\n                                            /// @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                            mstore(add(memPtr_3, 256), /** @src -1:-1:-1 */ 0)\n                                            /// @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                            mstore(add(memPtr_3, 288), /** @src -1:-1:-1 */ 0)\n                                            /// @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                            mstore(memPtr_2, memPtr_3)\n                                            mstore(add(memPtr_2, _4), /** @src -1:-1:-1 */ 0)\n                                            /// @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                            mstore(add(memPtr_2, _2), /** @src -1:-1:-1 */ 0)\n                                            /// @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                            mstore(add(memPtr_2, _5), /** @src -1:-1:-1 */ 0)\n                                            /// @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                            mstore(add(memPtr_2, _6), /** @src -1:-1:-1 */ 0)\n                                            /// @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                            mstore(add(add(memPtr_1, i), _4), memPtr_2)\n                                        }\n                                    }\n                                    function memory_array_index_access_struct_UserOpInfo_dyn(baseRef, index) -> addr\n                                    {\n                                        if iszero(lt(index, /** @src 0:1296:1301  \"10000\" */ mload(/** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ baseRef)))\n                                        {\n                                            mstore(0, shl(224, 0x4e487b71))\n                                            mstore(4, 0x32)\n                                            revert(0, 0x24)\n                                        }\n                                        addr := add(add(baseRef, shl(5, index)), 32)\n                                    }\n                                    function calldata_array_index_access_struct_PackedUserOperation_calldata_dyn_calldata(base_ref, length, index) -> addr\n                                    {\n                                        if iszero(lt(index, length))\n                                        {\n                                            mstore(0, shl(224, 0x4e487b71))\n                                            mstore(4, 0x32)\n                                            revert(0, 0x24)\n                                        }\n                                        let rel_offset_of_tail := calldataload(add(base_ref, shl(5, index)))\n                                        if iszero(slt(rel_offset_of_tail, add(sub(calldatasize(), base_ref), not(286))))\n                                        {\n                                            revert(/** @src -1:-1:-1 */ 0, 0)\n                                        }\n                                        /// @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                        addr := add(base_ref, rel_offset_of_tail)\n                                    }\n                                    function abi_decode_address_fromMemory(headStart, dataEnd) -> value0\n                                    {\n                                        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n                                        let value := mload(headStart)\n                                        if iszero(eq(value, and(value, sub(shl(160, 1), 1))))\n                                        {\n                                            revert(/** @src -1:-1:-1 */ 0, 0)\n                                        }\n                                        /// @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                        value0 := value\n                                    }\n                                    function abi_encode_bytes_calldata(start, length, pos) -> end\n                                    {\n                                        mstore(pos, length)\n                                        calldatacopy(add(pos, 0x20), start, length)\n                                        mstore(add(add(pos, length), 0x20), /** @src -1:-1:-1 */ 0)\n                                        /// @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                        end := add(add(pos, and(add(length, 31), not(31))), 0x20)\n                                    }\n                                    /// @ast-id 2551 @src 4:1935:2114  \"function depositTo(address account) public virtual payable {...\"\n                                    function fun_depositTo(var_account)\n                                    {\n                                        /// @src 4:2025:2062  \"_incrementDeposit(account, msg.value)\"\n                                        let expr := fun_incrementDeposit(var_account, /** @src 4:2052:2061  \"msg.value\" */ callvalue())\n                                        /// @src 4:2077:2107  \"Deposited(account, newDeposit)\"\n                                        let _1 := /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ mload(64)\n                                        mstore(_1, expr)\n                                        /// @src 4:2077:2107  \"Deposited(account, newDeposit)\"\n                                        log2(_1, /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 32, /** @src 4:2077:2107  \"Deposited(account, newDeposit)\" */ 0x2da466a7b24304f47e87fa2e1e5a81b9831ce54fec19055ce277ca2f39ba42c4, /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ and(/** @src 4:2077:2107  \"Deposited(account, newDeposit)\" */ var_account, /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ sub(shl(160, 1), 1)))\n                                    }\n                                    function calldata_array_index_access_struct_UserOpsPerAggregator_calldata_dyn_calldata(base_ref, length, index) -> addr\n                                    {\n                                        if iszero(lt(index, length))\n                                        {\n                                            mstore(0, shl(224, 0x4e487b71))\n                                            mstore(4, 0x32)\n                                            revert(0, 0x24)\n                                        }\n                                        let rel_offset_of_tail := calldataload(add(base_ref, shl(5, index)))\n                                        if iszero(slt(rel_offset_of_tail, add(sub(calldatasize(), base_ref), not(94))))\n                                        {\n                                            revert(/** @src -1:-1:-1 */ 0, 0)\n                                        }\n                                        /// @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                        addr := add(base_ref, rel_offset_of_tail)\n                                    }\n                                    function access_calldata_tail_array_struct_PackedUserOperation_calldata_dyn_calldata(base_ref, ptr_to_tail) -> addr, length\n                                    {\n                                        let rel_offset_of_tail := calldataload(ptr_to_tail)\n                                        if iszero(slt(rel_offset_of_tail, add(sub(calldatasize(), base_ref), not(30)))) { revert(0, 0) }\n                                        let addr_1 := add(base_ref, rel_offset_of_tail)\n                                        length := calldataload(addr_1)\n                                        if gt(length, 0xffffffffffffffff) { revert(0, 0) }\n                                        addr := add(addr_1, 0x20)\n                                        if sgt(addr, sub(calldatasize(), shl(5, length))) { revert(0, 0) }\n                                    }\n                                    function read_from_calldatat_contract_IAggregator(ptr) -> returnValue\n                                    {\n                                        let value := calldataload(ptr)\n                                        if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(0, 0) }\n                                        returnValue := value\n                                    }\n                                    function access_calldata_tail_bytes_calldata(base_ref, ptr_to_tail) -> addr, length\n                                    {\n                                        let rel_offset_of_tail := calldataload(ptr_to_tail)\n                                        if iszero(slt(rel_offset_of_tail, add(sub(calldatasize(), base_ref), not(30)))) { revert(0, 0) }\n                                        let addr_1 := add(base_ref, rel_offset_of_tail)\n                                        length := calldataload(addr_1)\n                                        if gt(length, 0xffffffffffffffff) { revert(0, 0) }\n                                        addr := add(addr_1, 0x20)\n                                        if sgt(addr, sub(calldatasize(), length)) { revert(0, 0) }\n                                    }\n                                    function calldata_access_bytes_calldata(base_ref, ptr) -> value, length\n                                    {\n                                        let rel_offset_of_tail := calldataload(ptr)\n                                        if iszero(slt(rel_offset_of_tail, add(sub(calldatasize(), base_ref), not(30)))) { revert(0, 0) }\n                                        let value_1 := add(rel_offset_of_tail, base_ref)\n                                        length := calldataload(value_1)\n                                        value := add(value_1, 0x20)\n                                        if gt(length, 0xffffffffffffffff) { revert(0, 0) }\n                                        if sgt(value, sub(calldatasize(), length)) { revert(0, 0) }\n                                    }\n                                    function abi_encode_struct_PackedUserOperation_calldata(value, pos) -> end\n                                    {\n                                        let _1 := 0x0120\n                                        let value_1 := calldataload(value)\n                                        let _2 := and(value_1, sub(shl(160, 1), 1))\n                                        if iszero(eq(value_1, _2))\n                                        {\n                                            revert(/** @src -1:-1:-1 */ 0, 0)\n                                        }\n                                        /// @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                        mstore(pos, _2)\n                                        mstore(add(pos, 0x20), calldataload(add(value, 0x20)))\n                                        let memberValue0, memberValue1 := calldata_access_bytes_calldata(value, add(value, 0x40))\n                                        mstore(add(pos, 0x40), _1)\n                                        let tail := abi_encode_bytes_calldata(memberValue0, memberValue1, add(pos, _1))\n                                        let memberValue0_1, memberValue1_1 := calldata_access_bytes_calldata(value, add(value, 0x60))\n                                        mstore(add(pos, 0x60), sub(tail, pos))\n                                        let tail_1 := abi_encode_bytes_calldata(memberValue0_1, memberValue1_1, tail)\n                                        mstore(add(pos, 0x80), calldataload(add(value, 0x80)))\n                                        mstore(add(pos, 0xa0), calldataload(add(value, 0xa0)))\n                                        mstore(add(pos, 0xc0), calldataload(add(value, 0xc0)))\n                                        let memberValue0_2, memberValue1_2 := calldata_access_bytes_calldata(value, add(value, 0xe0))\n                                        mstore(add(pos, 0xe0), sub(tail_1, pos))\n                                        let tail_2 := abi_encode_bytes_calldata(memberValue0_2, memberValue1_2, tail_1)\n                                        let _3 := 0x0100\n                                        let memberValue0_3, memberValue1_3 := calldata_access_bytes_calldata(value, add(value, _3))\n                                        mstore(add(pos, _3), sub(tail_2, pos))\n                                        end := abi_encode_bytes_calldata(memberValue0_3, memberValue1_3, tail_2)\n                                    }\n                                    /// @ast-id 48469 @src 70:2431:2738  \"function _nonReentrantBefore() private {...\"\n                                    function fun_nonReentrantBefore()\n                                    {\n                                        /// @src 70:2554:2640  \"if (_status == ENTERED) {...\"\n                                        if /** @src 70:2558:2576  \"_status == ENTERED\" */ eq(/** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ sload(/** @src 70:2558:2565  \"_status\" */ 0x02), 0x02)\n                                        /// @src 70:2554:2640  \"if (_status == ENTERED) {...\"\n                                        {\n                                            /// @src 70:2599:2629  \"ReentrancyGuardReentrantCall()\"\n                                            let _1 := /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ mload(64)\n                                            /// @src 70:2599:2629  \"ReentrancyGuardReentrantCall()\"\n                                            mstore(_1, shl(224, 0x3ee5aeb5))\n                                            revert(_1, 4)\n                                        }\n                                        /// @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                        sstore(/** @src 70:2558:2565  \"_status\" */ 0x02, 0x02)\n                                    }\n                                    /// @ast-id 1799 @src 0:22607:24550  \"function _validatePrepayment(uint256 opIndex, PackedUserOperation calldata userOp, UserOpInfo memory outOpInfo)...\"\n                                    function fun_validatePrepayment(var_opIndex, var_userOp_1632_offset, var_outOpInfo_mpos) -> var_validationData, var_paymasterValidationData\n                                    {\n                                        /// @src 0:22777:22808  \"uint256 paymasterValidationData\"\n                                        var_paymasterValidationData := /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 0\n                                        /// @src 0:22841:22850  \"gasleft()\"\n                                        let expr := gas()\n                                        /// @src 0:22890:22907  \"outOpInfo.mUserOp\"\n                                        let _431_mpos := mload(var_outOpInfo_mpos)\n                                        /// @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                        let value := calldataload(var_userOp_1632_offset)\n                                        let _1 := and(value, sub(shl(160, 1), 1))\n                                        if iszero(eq(value, _1)) { revert(0, 0) }\n                                        mstore(_431_mpos, _1)\n                                        mstore(/** @src 0:13045:13058  \"mUserOp.nonce\" */ add(_431_mpos, /** @src 0:13061:13073  \"userOp.nonce\" */ 32), /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ calldataload(/** @src 0:13061:13073  \"userOp.nonce\" */ add(var_userOp_1632_offset, 32)))\n                                        /// @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                        let _2 := calldataload(/** @src 0:13167:13190  \"userOp.accountGasLimits\" */ add(var_userOp_1632_offset, 128))\n                                        /// @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                        let _3 := 0xffffffffffffffffffffffffffffffff\n                                        mstore(/** @src 0:13114:13134  \"mUserOp.callGasLimit\" */ add(_431_mpos, 96), /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ and(/** @src 5:2694:2709  \"uint256(packed)\" */ _2, /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ _3))\n                                        mstore(/** @src 0:13084:13112  \"mUserOp.verificationGasLimit\" */ add(_431_mpos, 64), /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ shr(/** @src 0:13167:13190  \"userOp.accountGasLimits\" */ 128, /** @src 5:2668:2683  \"bytes16(packed)\" */ _2))\n                                        /// @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                        mstore(/** @src 0:13201:13227  \"mUserOp.preVerificationGas\" */ add(_431_mpos, 192), /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ calldataload(/** @src 0:13230:13255  \"userOp.preVerificationGas\" */ add(var_userOp_1632_offset, 160)))\n                                        /// @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                        let _4 := calldataload(/** @src 0:13349:13363  \"userOp.gasFees\" */ add(var_userOp_1632_offset, /** @src 0:13201:13227  \"mUserOp.preVerificationGas\" */ 192))\n                                        /// @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                        mstore(/** @src 0:13296:13316  \"mUserOp.maxFeePerGas\" */ add(_431_mpos, 256), /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ and(/** @src 5:2694:2709  \"uint256(packed)\" */ _4, /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ _3))\n                                        mstore(/** @src 0:13266:13294  \"mUserOp.maxPriorityFeePerGas\" */ add(_431_mpos, 288), /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ shr(/** @src 0:13167:13190  \"userOp.accountGasLimits\" */ 128, /** @src 5:2668:2683  \"bytes16(packed)\" */ _4))\n                                        /// @src 0:13408:13431  \"userOp.paymasterAndData\"\n                                        let expr_offset, expr_length := access_calldata_tail_bytes_calldata(var_userOp_1632_offset, add(var_userOp_1632_offset, 224))\n                                        /// @src 0:13441:13957  \"if (paymasterAndData.length > 0) {...\"\n                                        switch /** @src 0:13445:13472  \"paymasterAndData.length > 0\" */ iszero(iszero(expr_length))\n                                        case /** @src 0:13441:13957  \"if (paymasterAndData.length > 0) {...\" */ 0 {\n                                            /// @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                            mstore(/** @src 0:13812:13829  \"mUserOp.paymaster\" */ add(_431_mpos, /** @src 0:13408:13431  \"userOp.paymasterAndData\" */ 224), /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 0)\n                                            mstore(/** @src 0:13856:13893  \"mUserOp.paymasterVerificationGasLimit\" */ add(_431_mpos, /** @src 0:13167:13190  \"userOp.accountGasLimits\" */ 128), /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 0)\n                                            mstore(/** @src 0:13911:13942  \"mUserOp.paymasterPostOpGasLimit\" */ add(_431_mpos, /** @src 0:13230:13255  \"userOp.preVerificationGas\" */ 160), /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 0)\n                                        }\n                                        default /// @src 0:13441:13957  \"if (paymasterAndData.length > 0) {...\"\n                                        {\n                                            /// @src 5:490:492  \"52\"\n                                            if /** @src 0:13496:13561  \"paymasterAndData.length >= UserOperationLib.PAYMASTER_DATA_OFFSET\" */ lt(expr_length, /** @src 5:490:492  \"52\" */ 0x34)\n                                            {\n                                                let memPtr := /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ mload(/** @src 0:13084:13112  \"mUserOp.verificationGasLimit\" */ 64)\n                                                /// @src 5:490:492  \"52\"\n                                                mstore(memPtr, /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ shl(229, 4594637))\n                                                /// @src 5:490:492  \"52\"\n                                                mstore(add(memPtr, 4), /** @src 0:13061:13073  \"userOp.nonce\" */ 32)\n                                                /// @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                                mstore(/** @src 5:490:492  \"52\" */ add(memPtr, 36), 29)\n                                                mstore(/** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ add(/** @src 5:490:492  \"52\" */ memPtr, /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 68), /** @src 5:490:492  \"52\" */ \"AA93 invalid paymasterAndData\")\n                                                revert(memPtr, 100)\n                                            }\n                                            /// @src 5:372:374  \"20\"\n                                            if gt(0x14, expr_length)\n                                            {\n                                                /// @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                                revert(0, 0)\n                                            }\n                                            /// @src 5:372:374  \"20\"\n                                            if gt(/** @src 5:434:436  \"36\" */ 0x24, /** @src 5:372:374  \"20\" */ expr_length)\n                                            {\n                                                /// @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                                revert(0, 0)\n                                            }\n                                            /// @src 5:372:374  \"20\"\n                                            if gt(/** @src 5:490:492  \"52\" */ 0x34, /** @src 5:372:374  \"20\" */ expr_length)\n                                            {\n                                                /// @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                                revert(0, 0)\n                                            }\n                                            mstore(/** @src 0:13668:13699  \"mUserOp.paymasterPostOpGasLimit\" */ add(_431_mpos, /** @src 0:13230:13255  \"userOp.preVerificationGas\" */ 160), /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ shr(/** @src 0:13167:13190  \"userOp.accountGasLimits\" */ 128, /** @src 5:434:436  \"36\" */ calldataload(/** @src 5:372:374  \"20\" */ add(expr_offset, /** @src 5:434:436  \"36\" */ 0x24))))\n                                            /// @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                            mstore(/** @src 0:13629:13666  \"mUserOp.paymasterVerificationGasLimit\" */ add(_431_mpos, /** @src 0:13167:13190  \"userOp.accountGasLimits\" */ 128), /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ shr(/** @src 0:13167:13190  \"userOp.accountGasLimits\" */ 128, /** @src 5:434:436  \"36\" */ calldataload(/** @src 5:372:374  \"20\" */ add(expr_offset, 0x14))))\n                                            /// @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                            mstore(/** @src 0:13610:13627  \"mUserOp.paymaster\" */ add(_431_mpos, /** @src 0:13408:13431  \"userOp.paymasterAndData\" */ 224), /** @src 5:372:374  \"20\" */ shr(/** @src 0:13114:13134  \"mUserOp.callGasLimit\" */ 96, /** @src 5:372:374  \"20\" */ calldataload(/** @src 5:4451:4511  \"bytes20(paymasterAndData[: PAYMASTER_VALIDATION_GAS_OFFSET])\" */ expr_offset)))\n                                        }\n                                        /// @src 0:22986:23007  \"getUserOpHash(userOp)\"\n                                        let _5 := fun_getUserOpHash(var_userOp_1632_offset)\n                                        /// @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                        mstore(/** @src 0:22963:22983  \"outOpInfo.userOpHash\" */ add(var_outOpInfo_mpos, /** @src 0:13061:13073  \"userOp.nonce\" */ 32), /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ _5)\n                                        let _6 := mload(/** @src 0:13084:13112  \"mUserOp.verificationGasLimit\" */ add(_431_mpos, 64))\n                                        /// @src 0:23263:23312  \"mUserOp.preVerificationGas | verificationGasLimit\"\n                                        let expr_1 := or(/** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ mload(/** @src 0:13201:13227  \"mUserOp.preVerificationGas\" */ add(_431_mpos, 192)), /** @src 0:23263:23312  \"mUserOp.preVerificationGas | verificationGasLimit\" */ _6)\n                                        /// @src 0:23263:23335  \"mUserOp.preVerificationGas | verificationGasLimit | mUserOp.callGasLimit\"\n                                        let expr_2 := or(expr_1, /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ mload(/** @src 0:13114:13134  \"mUserOp.callGasLimit\" */ add(_431_mpos, 96)))\n                                        /// @src 0:23263:23387  \"mUserOp.preVerificationGas | verificationGasLimit | mUserOp.callGasLimit...\"\n                                        let expr_3 := or(expr_2, /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ mload(/** @src 0:23350:23387  \"mUserOp.paymasterVerificationGasLimit\" */ add(_431_mpos, /** @src 0:13167:13190  \"userOp.accountGasLimits\" */ 128)))\n                                        /// @src 0:23263:23421  \"mUserOp.preVerificationGas | verificationGasLimit | mUserOp.callGasLimit...\"\n                                        let expr_4 := or(expr_3, /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ mload(/** @src 0:23390:23421  \"mUserOp.paymasterPostOpGasLimit\" */ add(_431_mpos, /** @src 0:13230:13255  \"userOp.preVerificationGas\" */ 160)))\n                                        /// @src 0:23263:23444  \"mUserOp.preVerificationGas | verificationGasLimit | mUserOp.callGasLimit...\"\n                                        let expr_5 := or(expr_4, /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ mload(/** @src 0:13296:13316  \"mUserOp.maxFeePerGas\" */ add(_431_mpos, 256)))\n                                        /// @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                        if /** @src 0:23505:23538  \"maxGasValues <= type(uint120).max\" */ gt(/** @src 0:23263:23487  \"mUserOp.preVerificationGas | verificationGasLimit | mUserOp.callGasLimit...\" */ or(expr_5, /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ mload(/** @src 0:13266:13294  \"mUserOp.maxPriorityFeePerGas\" */ add(_431_mpos, 288))), /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 0xffffffffffffffffffffffffffffff)\n                                        {\n                                            let memPtr_1 := mload(/** @src 0:13084:13112  \"mUserOp.verificationGasLimit\" */ 64)\n                                            /// @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                            mstore(memPtr_1, shl(229, 4594637))\n                                            mstore(add(memPtr_1, 4), /** @src 0:13061:13073  \"userOp.nonce\" */ 32)\n                                            /// @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                            mstore(add(memPtr_1, 36), 24)\n                                            mstore(add(memPtr_1, 68), \"AA94 gas values overflow\")\n                                            revert(memPtr_1, 100)\n                                        }\n                                        let _7 := mload(/** @src 0:13084:13112  \"mUserOp.verificationGasLimit\" */ add(_431_mpos, 64))\n                                        /// @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                        let sum := add(_7, mload(/** @src 0:13114:13134  \"mUserOp.callGasLimit\" */ add(_431_mpos, 96)))\n                                        /// @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                        let sum_1 := add(sum, mload(/** @src 0:23350:23387  \"mUserOp.paymasterVerificationGasLimit\" */ add(_431_mpos, /** @src 0:13167:13190  \"userOp.accountGasLimits\" */ 128)))\n                                        /// @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                        let sum_2 := add(sum_1, mload(/** @src 0:23390:23421  \"mUserOp.paymasterPostOpGasLimit\" */ add(_431_mpos, /** @src 0:13230:13255  \"userOp.preVerificationGas\" */ 160)))\n                                        /// @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                        let sum_3 := add(sum_2, mload(/** @src 0:13201:13227  \"mUserOp.preVerificationGas\" */ add(_431_mpos, 192)))\n                                        /// @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                        let product := mul(sum_3, mload(/** @src 0:13296:13316  \"mUserOp.maxFeePerGas\" */ add(_431_mpos, 256)))\n                                        /// @src 0:23659:23752  \"_validateAccountPrepayment(opIndex, userOp, outOpInfo, requiredPreFund, verificationGasLimit)\"\n                                        let var_validationData_1 := /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 0\n                                        /// @src 0:16744:16758  \"opInfo.mUserOp\"\n                                        let _mpos := mload(var_outOpInfo_mpos)\n                                        /// @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                        let cleaned := and(/** @src 0:1296:1301  \"10000\" */ mload(/** @src 0:16789:16803  \"mUserOp.sender\" */ _mpos), /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ sub(shl(160, 1), 1))\n                                        /// @src 0:16856:16867  \"op.initCode\"\n                                        let expr_offset_1, expr_length_1 := access_calldata_tail_bytes_calldata(var_userOp_1632_offset, add(var_userOp_1632_offset, /** @src 0:13084:13112  \"mUserOp.verificationGasLimit\" */ 64))\n                                        /// @src 0:14894:15782  \"if (initCode.length != 0) {...\"\n                                        if /** @src 0:14898:14918  \"initCode.length != 0\" */ iszero(iszero(expr_length_1))\n                                        /// @src 0:14894:15782  \"if (initCode.length != 0) {...\"\n                                        {\n                                            /// @src 0:14986:15107  \"if (sender.code.length != 0) {...\"\n                                            if /** @src 0:14990:15013  \"sender.code.length != 0\" */ iszero(iszero(/** @src 0:14990:15008  \"sender.code.length\" */ extcodesize(cleaned)))\n                                            /// @src 0:14986:15107  \"if (sender.code.length != 0) {...\"\n                                            {\n                                                /// @src 0:15040:15092  \"FailedOp(opIndex, \\\"AA10 sender already constructed\\\")\"\n                                                let _8 := /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ mload(/** @src 0:13084:13112  \"mUserOp.verificationGasLimit\" */ 64)\n                                                /// @src 0:15040:15092  \"FailedOp(opIndex, \\\"AA10 sender already constructed\\\")\"\n                                                mstore(_8, /** @src 0:20671:20712  \"FailedOp(opIndex, \\\"AA24 signature error\\\")\" */ shl(225, 0x1101335b))\n                                                /// @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                                mstore(/** @src 0:15040:15092  \"FailedOp(opIndex, \\\"AA10 sender already constructed\\\")\" */ add(_8, 4), /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ var_opIndex)\n                                                mstore(add(/** @src 0:15040:15092  \"FailedOp(opIndex, \\\"AA10 sender already constructed\\\")\" */ _8, /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 36), /** @src 0:13084:13112  \"mUserOp.verificationGasLimit\" */ 64)\n                                                /// @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                                mstore(add(/** @src 0:15040:15092  \"FailedOp(opIndex, \\\"AA10 sender already constructed\\\")\" */ _8, /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 68), 31)\n                                                mstore(add(/** @src 0:15040:15092  \"FailedOp(opIndex, \\\"AA10 sender already constructed\\\")\" */ _8, /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 100), \"AA10 sender already constructed\")\n                                                /// @src 0:15040:15092  \"FailedOp(opIndex, \\\"AA10 sender already constructed\\\")\"\n                                                revert(_8, /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 132)\n                                            }\n                                            let _9 := mload(/** @src 0:15172:15207  \"opInfo.mUserOp.verificationGasLimit\" */ add(/** @src 0:15172:15186  \"opInfo.mUserOp\" */ mload(var_outOpInfo_mpos), /** @src 0:13084:13112  \"mUserOp.verificationGasLimit\" */ 64))\n                                            /// @src 0:15138:15218  \"senderCreator().createSender{gas: opInfo.mUserOp.verificationGasLimit}(initCode)\"\n                                            let _10 := /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ mload(/** @src 0:13084:13112  \"mUserOp.verificationGasLimit\" */ 64)\n                                            /// @src 0:15138:15218  \"senderCreator().createSender{gas: opInfo.mUserOp.verificationGasLimit}(initCode)\"\n                                            mstore(_10, /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ shl(225, 0x2b870d1b))\n                                            mstore(/** @src 0:15138:15218  \"senderCreator().createSender{gas: opInfo.mUserOp.verificationGasLimit}(initCode)\" */ add(_10, 4), /** @src 0:13061:13073  \"userOp.nonce\" */ 32)\n                                            /// @src 0:15138:15218  \"senderCreator().createSender{gas: opInfo.mUserOp.verificationGasLimit}(initCode)\"\n                                            let _11 := call(_9, /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ and(/** @src 0:1099:1113  \"_senderCreator\" */ loadimmutable(\"35\"), /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ sub(shl(160, 1), 1)), 0, /** @src 0:15138:15218  \"senderCreator().createSender{gas: opInfo.mUserOp.verificationGasLimit}(initCode)\" */ _10, sub(/** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ abi_encode_bytes_calldata(expr_offset_1, expr_length_1, add(/** @src 0:15138:15218  \"senderCreator().createSender{gas: opInfo.mUserOp.verificationGasLimit}(initCode)\" */ _10, /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 36)), /** @src 0:15138:15218  \"senderCreator().createSender{gas: opInfo.mUserOp.verificationGasLimit}(initCode)\" */ _10), _10, /** @src 0:13061:13073  \"userOp.nonce\" */ 32)\n                                            /// @src 0:15138:15218  \"senderCreator().createSender{gas: opInfo.mUserOp.verificationGasLimit}(initCode)\"\n                                            if iszero(_11)\n                                            {\n                                                /// @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                                let pos := mload(/** @src 0:13084:13112  \"mUserOp.verificationGasLimit\" */ 64)\n                                                /// @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                                returndatacopy(pos, 0, returndatasize())\n                                                revert(pos, returndatasize())\n                                            }\n                                            /// @src 0:15138:15218  \"senderCreator().createSender{gas: opInfo.mUserOp.verificationGasLimit}(initCode)\"\n                                            let expr_6 := /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 0\n                                            /// @src 0:15138:15218  \"senderCreator().createSender{gas: opInfo.mUserOp.verificationGasLimit}(initCode)\"\n                                            if _11\n                                            {\n                                                let _12 := /** @src 0:13061:13073  \"userOp.nonce\" */ 32\n                                                /// @src 0:15138:15218  \"senderCreator().createSender{gas: opInfo.mUserOp.verificationGasLimit}(initCode)\"\n                                                if gt(/** @src 0:13061:13073  \"userOp.nonce\" */ 32, /** @src 0:15138:15218  \"senderCreator().createSender{gas: opInfo.mUserOp.verificationGasLimit}(initCode)\" */ returndatasize()) { _12 := returndatasize() }\n                                                finalize_allocation(_10, _12)\n                                                expr_6 := abi_decode_address_fromMemory(_10, add(_10, _12))\n                                            }\n                                            /// @src 0:15236:15257  \"sender1 == address(0)\"\n                                            let _13 := /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ and(/** @src 0:15236:15257  \"sender1 == address(0)\" */ expr_6, /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ sub(shl(160, 1), 1))\n                                            /// @src 0:15232:15347  \"if (sender1 == address(0)) {...\"\n                                            if /** @src 0:15236:15257  \"sender1 == address(0)\" */ iszero(_13)\n                                            /// @src 0:15232:15347  \"if (sender1 == address(0)) {...\"\n                                            {\n                                                /// @src 0:15284:15332  \"FailedOp(opIndex, \\\"AA13 initCode failed or OOG\\\")\"\n                                                let _14 := /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ mload(/** @src 0:13084:13112  \"mUserOp.verificationGasLimit\" */ 64)\n                                                /// @src 0:15284:15332  \"FailedOp(opIndex, \\\"AA13 initCode failed or OOG\\\")\"\n                                                mstore(_14, /** @src 0:20671:20712  \"FailedOp(opIndex, \\\"AA24 signature error\\\")\" */ shl(225, 0x1101335b))\n                                                /// @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                                mstore(/** @src 0:15284:15332  \"FailedOp(opIndex, \\\"AA13 initCode failed or OOG\\\")\" */ add(_14, /** @src 0:15138:15218  \"senderCreator().createSender{gas: opInfo.mUserOp.verificationGasLimit}(initCode)\" */ 4), /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ var_opIndex)\n                                                mstore(add(/** @src 0:15284:15332  \"FailedOp(opIndex, \\\"AA13 initCode failed or OOG\\\")\" */ _14, /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 36), /** @src 0:13084:13112  \"mUserOp.verificationGasLimit\" */ 64)\n                                                /// @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                                mstore(add(/** @src 0:15284:15332  \"FailedOp(opIndex, \\\"AA13 initCode failed or OOG\\\")\" */ _14, /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 68), 27)\n                                                mstore(add(/** @src 0:15284:15332  \"FailedOp(opIndex, \\\"AA13 initCode failed or OOG\\\")\" */ _14, /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 100), \"AA13 initCode failed or OOG\")\n                                                /// @src 0:15284:15332  \"FailedOp(opIndex, \\\"AA13 initCode failed or OOG\\\")\"\n                                                revert(_14, /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 132)\n                                            }\n                                            /// @src 0:15360:15476  \"if (sender1 != sender) {...\"\n                                            if /** @src 0:15364:15381  \"sender1 != sender\" */ iszero(eq(_13, /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ cleaned))\n                                            /// @src 0:15360:15476  \"if (sender1 != sender) {...\"\n                                            {\n                                                /// @src 0:15408:15461  \"FailedOp(opIndex, \\\"AA14 initCode must return sender\\\")\"\n                                                let _15 := /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ mload(/** @src 0:13084:13112  \"mUserOp.verificationGasLimit\" */ 64)\n                                                /// @src 0:15408:15461  \"FailedOp(opIndex, \\\"AA14 initCode must return sender\\\")\"\n                                                mstore(_15, /** @src 0:20671:20712  \"FailedOp(opIndex, \\\"AA24 signature error\\\")\" */ shl(225, 0x1101335b))\n                                                /// @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                                mstore(/** @src 0:15408:15461  \"FailedOp(opIndex, \\\"AA14 initCode must return sender\\\")\" */ add(_15, /** @src 0:15138:15218  \"senderCreator().createSender{gas: opInfo.mUserOp.verificationGasLimit}(initCode)\" */ 4), /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ var_opIndex)\n                                                mstore(add(/** @src 0:15408:15461  \"FailedOp(opIndex, \\\"AA14 initCode must return sender\\\")\" */ _15, /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 36), /** @src 0:13084:13112  \"mUserOp.verificationGasLimit\" */ 64)\n                                                /// @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                                mstore(add(/** @src 0:15408:15461  \"FailedOp(opIndex, \\\"AA14 initCode must return sender\\\")\" */ _15, /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 68), /** @src 0:13061:13073  \"userOp.nonce\" */ 32)\n                                                /// @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                                mstore(add(/** @src 0:15408:15461  \"FailedOp(opIndex, \\\"AA14 initCode must return sender\\\")\" */ _15, /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 100), \"AA14 initCode must return sender\")\n                                                /// @src 0:15408:15461  \"FailedOp(opIndex, \\\"AA14 initCode must return sender\\\")\"\n                                                revert(_15, /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 132)\n                                            }\n                                            /// @src 0:15489:15612  \"if (sender1.code.length == 0) {...\"\n                                            if /** @src 0:15493:15517  \"sender1.code.length == 0\" */ iszero(/** @src 0:15493:15512  \"sender1.code.length\" */ extcodesize(expr_6))\n                                            /// @src 0:15489:15612  \"if (sender1.code.length == 0) {...\"\n                                            {\n                                                /// @src 0:15544:15597  \"FailedOp(opIndex, \\\"AA15 initCode must create sender\\\")\"\n                                                let _16 := /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ mload(/** @src 0:13084:13112  \"mUserOp.verificationGasLimit\" */ 64)\n                                                /// @src 0:15544:15597  \"FailedOp(opIndex, \\\"AA15 initCode must create sender\\\")\"\n                                                mstore(_16, /** @src 0:20671:20712  \"FailedOp(opIndex, \\\"AA24 signature error\\\")\" */ shl(225, 0x1101335b))\n                                                /// @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                                mstore(/** @src 0:15544:15597  \"FailedOp(opIndex, \\\"AA15 initCode must create sender\\\")\" */ add(_16, /** @src 0:15138:15218  \"senderCreator().createSender{gas: opInfo.mUserOp.verificationGasLimit}(initCode)\" */ 4), /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ var_opIndex)\n                                                mstore(add(/** @src 0:15544:15597  \"FailedOp(opIndex, \\\"AA15 initCode must create sender\\\")\" */ _16, /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 36), /** @src 0:13084:13112  \"mUserOp.verificationGasLimit\" */ 64)\n                                                /// @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                                mstore(add(/** @src 0:15544:15597  \"FailedOp(opIndex, \\\"AA15 initCode must create sender\\\")\" */ _16, /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 68), /** @src 0:13061:13073  \"userOp.nonce\" */ 32)\n                                                /// @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                                mstore(add(/** @src 0:15544:15597  \"FailedOp(opIndex, \\\"AA15 initCode must create sender\\\")\" */ _16, /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 100), \"AA15 initCode must create sender\")\n                                                /// @src 0:15544:15597  \"FailedOp(opIndex, \\\"AA15 initCode must create sender\\\")\"\n                                                revert(_16, /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 132)\n                                            }\n                                            /// @src 5:372:374  \"20\"\n                                            if gt(/** @src 0:15670:15672  \"20\" */ 0x14, /** @src 5:372:374  \"20\" */ expr_length_1)\n                                            {\n                                                /// @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                                revert(0, 0)\n                                            }\n                                            /// @src 0:1542:1546  \"2048\"\n                                            let _17 := mload(/** @src 0:22963:22983  \"outOpInfo.userOpHash\" */ add(var_outOpInfo_mpos, /** @src 0:13061:13073  \"userOp.nonce\" */ 32))\n                                            /// @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                            let cleaned_1 := and(/** @src 0:1296:1301  \"10000\" */ mload(/** @src 0:15746:15770  \"opInfo.mUserOp.paymaster\" */ add(/** @src 0:15746:15760  \"opInfo.mUserOp\" */ mload(var_outOpInfo_mpos), /** @src 0:13408:13431  \"userOp.paymasterAndData\" */ 224)), /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ sub(shl(160, 1), 1))\n                                            /// @src 0:15694:15771  \"AccountDeployed(opInfo.userOpHash, sender, factory, opInfo.mUserOp.paymaster)\"\n                                            let _18 := /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ mload(/** @src 0:13084:13112  \"mUserOp.verificationGasLimit\" */ 64)\n                                            /// @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                            mstore(_18, /** @src 5:372:374  \"20\" */ shr(/** @src 0:13114:13134  \"mUserOp.callGasLimit\" */ 96, /** @src 5:372:374  \"20\" */ calldataload(/** @src 0:15651:15674  \"bytes20(initCode[0:20])\" */ expr_offset_1)))\n                                            /// @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                            mstore(add(_18, /** @src 0:13061:13073  \"userOp.nonce\" */ 32), /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ cleaned_1)\n                                            /// @src 0:15694:15771  \"AccountDeployed(opInfo.userOpHash, sender, factory, opInfo.mUserOp.paymaster)\"\n                                            log3(_18, /** @src 0:13084:13112  \"mUserOp.verificationGasLimit\" */ 64, /** @src 0:15694:15771  \"AccountDeployed(opInfo.userOpHash, sender, factory, opInfo.mUserOp.paymaster)\" */ 0xd51a9c61267aa6196961883ecf5ff2da6619c37dac0fa92122513fb32c032d2d, _17, cleaned)\n                                        }\n                                        /// @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                        let cleaned_2 := and(/** @src 0:1296:1301  \"10000\" */ mload(/** @src 0:16902:16919  \"mUserOp.paymaster\" */ add(_mpos, /** @src 0:13408:13431  \"userOp.paymasterAndData\" */ 224)), /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ sub(shl(160, 1), 1))\n                                        /// @src 0:16933:16964  \"uint256 missingAccountFunds = 0\"\n                                        let var_missingAccountFunds := /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 0\n                                        /// @src 0:16978:17160  \"if (paymaster == address(0)) {...\"\n                                        if /** @src 0:16982:17005  \"paymaster == address(0)\" */ iszero(/** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ cleaned_2)\n                                        /// @src 0:16978:17160  \"if (paymaster == address(0)) {...\"\n                                        {\n                                            /// @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                            mstore(0, cleaned)\n                                            mstore(/** @src 0:13061:13073  \"userOp.nonce\" */ 32, /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 0)\n                                            let _19 := sload(keccak256(0, /** @src 0:13084:13112  \"mUserOp.verificationGasLimit\" */ 64))\n                                            /// @src 0:17096:17145  \"bal > requiredPrefund ? 0 : requiredPrefund - bal\"\n                                            let expr_7 := /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 0\n                                            /// @src 0:17096:17145  \"bal > requiredPrefund ? 0 : requiredPrefund - bal\"\n                                            switch /** @src 0:17096:17117  \"bal > requiredPrefund\" */ gt(_19, product)\n                                            case /** @src 0:17096:17145  \"bal > requiredPrefund ? 0 : requiredPrefund - bal\" */ 0 {\n                                                expr_7 := /** @src 0:1542:1546  \"2048\" */ sub(/** @src 0:17124:17145  \"requiredPrefund - bal\" */ product, _19)\n                                            }\n                                            default /// @src 0:17096:17145  \"bal > requiredPrefund ? 0 : requiredPrefund - bal\"\n                                            {\n                                                expr_7 := /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 0\n                                            }\n                                            /// @src 0:17074:17145  \"missingAccountFunds = bal > requiredPrefund ? 0 : requiredPrefund - bal\"\n                                            var_missingAccountFunds := expr_7\n                                        }\n                                        /// @src 0:1542:1546  \"2048\"\n                                        let _20 := mload(/** @src 0:22963:22983  \"outOpInfo.userOpHash\" */ add(var_outOpInfo_mpos, /** @src 0:13061:13073  \"userOp.nonce\" */ 32))\n                                        /// @src 0:17177:17279  \"IAccount(sender).validateUserOp{gas: verificationGasLimit}(op, opInfo.userOpHash, missingAccountFunds)\"\n                                        let _21 := /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ mload(/** @src 0:13084:13112  \"mUserOp.verificationGasLimit\" */ 64)\n                                        /// @src 0:17177:17279  \"IAccount(sender).validateUserOp{gas: verificationGasLimit}(op, opInfo.userOpHash, missingAccountFunds)\"\n                                        mstore(_21, /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ shl(226, 0x06608bdf))\n                                        /// @src 0:17177:17279  \"IAccount(sender).validateUserOp{gas: verificationGasLimit}(op, opInfo.userOpHash, missingAccountFunds)\"\n                                        let trySuccessCondition := call(_6, cleaned, /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 0, /** @src 0:17177:17279  \"IAccount(sender).validateUserOp{gas: verificationGasLimit}(op, opInfo.userOpHash, missingAccountFunds)\" */ _21, sub(abi_encode_struct_PackedUserOperation_calldata_bytes32_uint256(add(_21, 4), var_userOp_1632_offset, _20, var_missingAccountFunds), _21), _21, /** @src 0:13061:13073  \"userOp.nonce\" */ 32)\n                                        /// @src 0:17177:17279  \"IAccount(sender).validateUserOp{gas: verificationGasLimit}(op, opInfo.userOpHash, missingAccountFunds)\"\n                                        let expr_8 := /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 0\n                                        /// @src 0:17177:17279  \"IAccount(sender).validateUserOp{gas: verificationGasLimit}(op, opInfo.userOpHash, missingAccountFunds)\"\n                                        if trySuccessCondition\n                                        {\n                                            let _22 := /** @src 0:13061:13073  \"userOp.nonce\" */ 32\n                                            /// @src 0:17177:17279  \"IAccount(sender).validateUserOp{gas: verificationGasLimit}(op, opInfo.userOpHash, missingAccountFunds)\"\n                                            if gt(/** @src 0:13061:13073  \"userOp.nonce\" */ 32, /** @src 0:17177:17279  \"IAccount(sender).validateUserOp{gas: verificationGasLimit}(op, opInfo.userOpHash, missingAccountFunds)\" */ returndatasize()) { _22 := returndatasize() }\n                                            finalize_allocation(_21, _22)\n                                            /// @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                            if slt(sub(/** @src 0:17177:17279  \"IAccount(sender).validateUserOp{gas: verificationGasLimit}(op, opInfo.userOpHash, missingAccountFunds)\" */ add(_21, _22), /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ _21), /** @src 0:13061:13073  \"userOp.nonce\" */ 32)\n                                            /// @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                            { revert(0, 0) }\n                                            /// @src 0:17177:17279  \"IAccount(sender).validateUserOp{gas: verificationGasLimit}(op, opInfo.userOpHash, missingAccountFunds)\"\n                                            expr_8 := /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ mload(_21)\n                                        }\n                                        /// @src 0:17173:17525  \"try IAccount(sender).validateUserOp{gas: verificationGasLimit}(op, opInfo.userOpHash, missingAccountFunds)...\"\n                                        switch iszero(trySuccessCondition)\n                                        case 0 {\n                                            /// @src 0:17344:17376  \"validationData = _validationData\"\n                                            var_validationData_1 := expr_8\n                                        }\n                                        default /// @src 0:17173:17525  \"try IAccount(sender).validateUserOp{gas: verificationGasLimit}(op, opInfo.userOpHash, missingAccountFunds)...\"\n                                        {\n                                            /// @src 14:1204:1553  \"assembly (\\\"memory-safe\\\") {...\"\n                                            let usr$len := returndatasize()\n                                            /// @src 0:1542:1546  \"2048\"\n                                            let _23 := 0x0800\n                                            /// @src 14:1204:1553  \"assembly (\\\"memory-safe\\\") {...\"\n                                            if gt(usr$len, /** @src 0:1542:1546  \"2048\" */ _23)\n                                            /// @src 14:1204:1553  \"assembly (\\\"memory-safe\\\") {...\"\n                                            {\n                                                usr$len := /** @src 0:1542:1546  \"2048\" */ _23\n                                            }\n                                            /// @src 14:1204:1553  \"assembly (\\\"memory-safe\\\") {...\"\n                                            let usr$ptr := mload(/** @src 0:13084:13112  \"mUserOp.verificationGasLimit\" */ 64)\n                                            /// @src 14:1204:1553  \"assembly (\\\"memory-safe\\\") {...\"\n                                            mstore(/** @src 0:13084:13112  \"mUserOp.verificationGasLimit\" */ 64, /** @src 14:1204:1553  \"assembly (\\\"memory-safe\\\") {...\" */ add(add(usr$ptr, usr$len), /** @src 0:13061:13073  \"userOp.nonce\" */ 32))\n                                            /// @src 14:1204:1553  \"assembly (\\\"memory-safe\\\") {...\"\n                                            mstore(usr$ptr, usr$len)\n                                            returndatacopy(add(usr$ptr, /** @src 0:13061:13073  \"userOp.nonce\" */ 32), /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 0, /** @src 14:1204:1553  \"assembly (\\\"memory-safe\\\") {...\" */ usr$len)\n                                            /// @src 0:17423:17510  \"FailedOpWithRevert(opIndex, \\\"AA23 reverted\\\", Exec.getReturnData(REVERT_REASON_MAX_LEN))\"\n                                            let _24 := /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ mload(/** @src 0:13084:13112  \"mUserOp.verificationGasLimit\" */ 64)\n                                            /// @src 0:17423:17510  \"FailedOpWithRevert(opIndex, \\\"AA23 reverted\\\", Exec.getReturnData(REVERT_REASON_MAX_LEN))\"\n                                            mstore(_24, shl(224, 0x65c8fd4d))\n                                            /// @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                            mstore(/** @src 0:17423:17510  \"FailedOpWithRevert(opIndex, \\\"AA23 reverted\\\", Exec.getReturnData(REVERT_REASON_MAX_LEN))\" */ add(_24, /** @src 0:17177:17279  \"IAccount(sender).validateUserOp{gas: verificationGasLimit}(op, opInfo.userOpHash, missingAccountFunds)\" */ 4), /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ var_opIndex)\n                                            mstore(add(/** @src 0:17423:17510  \"FailedOpWithRevert(opIndex, \\\"AA23 reverted\\\", Exec.getReturnData(REVERT_REASON_MAX_LEN))\" */ _24, /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 36), /** @src 0:13114:13134  \"mUserOp.callGasLimit\" */ 96)\n                                            /// @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                            mstore(add(/** @src 0:17423:17510  \"FailedOpWithRevert(opIndex, \\\"AA23 reverted\\\", Exec.getReturnData(REVERT_REASON_MAX_LEN))\" */ _24, /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 100), 13)\n                                            mstore(add(/** @src 0:17423:17510  \"FailedOpWithRevert(opIndex, \\\"AA23 reverted\\\", Exec.getReturnData(REVERT_REASON_MAX_LEN))\" */ _24, /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 132), \"AA23 reverted\")\n                                            mstore(add(/** @src 0:17423:17510  \"FailedOpWithRevert(opIndex, \\\"AA23 reverted\\\", Exec.getReturnData(REVERT_REASON_MAX_LEN))\" */ _24, /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 68), /** @src 0:13230:13255  \"userOp.preVerificationGas\" */ 160)\n                                            /// @src 0:17423:17510  \"FailedOpWithRevert(opIndex, \\\"AA23 reverted\\\", Exec.getReturnData(REVERT_REASON_MAX_LEN))\"\n                                            revert(_24, sub(/** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ abi_encode_bytes(usr$ptr, add(/** @src 0:17423:17510  \"FailedOpWithRevert(opIndex, \\\"AA23 reverted\\\", Exec.getReturnData(REVERT_REASON_MAX_LEN))\" */ _24, /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 164)), /** @src 0:17423:17510  \"FailedOpWithRevert(opIndex, \\\"AA23 reverted\\\", Exec.getReturnData(REVERT_REASON_MAX_LEN))\" */ _24))\n                                        }\n                                        /// @src 0:17538:17907  \"if (paymaster == address(0)) {...\"\n                                        if /** @src 0:16982:17005  \"paymaster == address(0)\" */ iszero(/** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ cleaned_2)\n                                        /// @src 0:17538:17907  \"if (paymaster == address(0)) {...\"\n                                        {\n                                            /// @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                            mstore(0, cleaned)\n                                            mstore(/** @src 0:13061:13073  \"userOp.nonce\" */ 32, /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 0)\n                                            let dataSlot := keccak256(0, /** @src 0:13084:13112  \"mUserOp.verificationGasLimit\" */ 64)\n                                            /// @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                            let _25 := sload(/** @src 0:17670:17688  \"senderInfo.deposit\" */ dataSlot)\n                                            /// @src 0:17706:17829  \"if (requiredPrefund > deposit) {...\"\n                                            if /** @src 0:17710:17735  \"requiredPrefund > deposit\" */ gt(product, _25)\n                                            /// @src 0:17706:17829  \"if (requiredPrefund > deposit) {...\"\n                                            {\n                                                /// @src 0:17766:17810  \"FailedOp(opIndex, \\\"AA21 didn't pay prefund\\\")\"\n                                                let _26 := /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ mload(/** @src 0:13084:13112  \"mUserOp.verificationGasLimit\" */ 64)\n                                                /// @src 0:17766:17810  \"FailedOp(opIndex, \\\"AA21 didn't pay prefund\\\")\"\n                                                mstore(_26, /** @src 0:20671:20712  \"FailedOp(opIndex, \\\"AA24 signature error\\\")\" */ shl(225, 0x1101335b))\n                                                /// @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                                mstore(/** @src 0:17766:17810  \"FailedOp(opIndex, \\\"AA21 didn't pay prefund\\\")\" */ add(_26, /** @src 0:17177:17279  \"IAccount(sender).validateUserOp{gas: verificationGasLimit}(op, opInfo.userOpHash, missingAccountFunds)\" */ 4), /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ var_opIndex)\n                                                mstore(add(/** @src 0:17766:17810  \"FailedOp(opIndex, \\\"AA21 didn't pay prefund\\\")\" */ _26, /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 36), /** @src 0:13084:13112  \"mUserOp.verificationGasLimit\" */ 64)\n                                                /// @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                                mstore(add(/** @src 0:17766:17810  \"FailedOp(opIndex, \\\"AA21 didn't pay prefund\\\")\" */ _26, /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 68), 23)\n                                                mstore(add(/** @src 0:17766:17810  \"FailedOp(opIndex, \\\"AA21 didn't pay prefund\\\")\" */ _26, /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 100), \"AA21 didn't pay prefund\")\n                                                /// @src 0:17766:17810  \"FailedOp(opIndex, \\\"AA21 didn't pay prefund\\\")\"\n                                                revert(_26, /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 132)\n                                            }\n                                            sstore(dataSlot, /** @src 0:1542:1546  \"2048\" */ sub(/** @src 0:17867:17892  \"deposit - requiredPrefund\" */ _25, product))\n                                        }\n                                        /// @src 0:23642:23752  \"validationData = _validateAccountPrepayment(opIndex, userOp, outOpInfo, requiredPreFund, verificationGasLimit)\"\n                                        var_validationData := var_validationData_1\n                                        /// @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                        let cleaned_3 := and(/** @src 0:1296:1301  \"10000\" */ mload(/** @src 0:23792:23806  \"mUserOp.sender\" */ _431_mpos), /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ sub(shl(160, 1), 1))\n                                        let _27 := mload(/** @src 0:13045:13058  \"mUserOp.nonce\" */ add(_431_mpos, /** @src 0:13061:13073  \"userOp.nonce\" */ 32))\n                                        /// @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                        mstore(0, cleaned_3)\n                                        mstore(/** @src 0:13061:13073  \"userOp.nonce\" */ 32, /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 1)\n                                        let _28 := keccak256(0, /** @src 0:13084:13112  \"mUserOp.verificationGasLimit\" */ 64)\n                                        /// @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                        mstore(0, shr(/** @src 0:13084:13112  \"mUserOp.verificationGasLimit\" */ 64, /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ _27))\n                                        mstore(/** @src 0:13061:13073  \"userOp.nonce\" */ 32, /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ _28)\n                                        let dataSlot_1 := keccak256(0, /** @src 0:13084:13112  \"mUserOp.verificationGasLimit\" */ 64)\n                                        /// @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                        let _29 := sload(/** @src 2:1373:1407  \"nonceSequenceNumber[sender][key]++\" */ dataSlot_1)\n                                        /// @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                        sstore(dataSlot_1, /** @src 2:1373:1407  \"nonceSequenceNumber[sender][key]++\" */ increment_uint256(_29))\n                                        /// @src 0:23763:23903  \"if (!_validateAndUpdateNonce(mUserOp.sender, mUserOp.nonce)) {...\"\n                                        if /** @src 0:23767:23822  \"!_validateAndUpdateNonce(mUserOp.sender, mUserOp.nonce)\" */ iszero(/** @src 2:1373:1414  \"nonceSequenceNumber[sender][key]++ == seq\" */ eq(_29, /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ and(/** @src 2:1343:1356  \"uint64(nonce)\" */ _27, /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 0xffffffffffffffff)))\n                                        /// @src 0:23763:23903  \"if (!_validateAndUpdateNonce(mUserOp.sender, mUserOp.nonce)) {...\"\n                                        {\n                                            /// @src 0:23845:23892  \"FailedOp(opIndex, \\\"AA25 invalid account nonce\\\")\"\n                                            let _30 := /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ mload(/** @src 0:13084:13112  \"mUserOp.verificationGasLimit\" */ 64)\n                                            /// @src 0:23845:23892  \"FailedOp(opIndex, \\\"AA25 invalid account nonce\\\")\"\n                                            mstore(_30, /** @src 0:20671:20712  \"FailedOp(opIndex, \\\"AA24 signature error\\\")\" */ shl(225, 0x1101335b))\n                                            /// @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                            mstore(/** @src 0:23845:23892  \"FailedOp(opIndex, \\\"AA25 invalid account nonce\\\")\" */ add(_30, /** @src 0:17177:17279  \"IAccount(sender).validateUserOp{gas: verificationGasLimit}(op, opInfo.userOpHash, missingAccountFunds)\" */ 4), /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ var_opIndex)\n                                            mstore(add(/** @src 0:23845:23892  \"FailedOp(opIndex, \\\"AA25 invalid account nonce\\\")\" */ _30, /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 36), /** @src 0:13084:13112  \"mUserOp.verificationGasLimit\" */ 64)\n                                            /// @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                            mstore(add(/** @src 0:23845:23892  \"FailedOp(opIndex, \\\"AA25 invalid account nonce\\\")\" */ _30, /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 68), 26)\n                                            mstore(add(/** @src 0:23845:23892  \"FailedOp(opIndex, \\\"AA25 invalid account nonce\\\")\" */ _30, /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 100), \"AA25 invalid account nonce\")\n                                            /// @src 0:23845:23892  \"FailedOp(opIndex, \\\"AA25 invalid account nonce\\\")\"\n                                            revert(_30, /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 132)\n                                        }\n                                        /// @src 0:23937:24075  \"if (preGas - gasleft() > verificationGasLimit) {...\"\n                                        if /** @src 0:23941:23982  \"preGas - gasleft() > verificationGasLimit\" */ gt(/** @src 0:1542:1546  \"2048\" */ sub(expr, /** @src 0:23950:23959  \"gasleft()\" */ gas()), /** @src 0:23941:23982  \"preGas - gasleft() > verificationGasLimit\" */ _6)\n                                        /// @src 0:23937:24075  \"if (preGas - gasleft() > verificationGasLimit) {...\"\n                                        {\n                                            /// @src 0:24009:24060  \"FailedOp(opIndex, \\\"AA26 over verificationGasLimit\\\")\"\n                                            let _31 := /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ mload(/** @src 0:13084:13112  \"mUserOp.verificationGasLimit\" */ 64)\n                                            /// @src 0:24009:24060  \"FailedOp(opIndex, \\\"AA26 over verificationGasLimit\\\")\"\n                                            mstore(_31, /** @src 0:20671:20712  \"FailedOp(opIndex, \\\"AA24 signature error\\\")\" */ shl(225, 0x1101335b))\n                                            /// @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                            mstore(/** @src 0:24009:24060  \"FailedOp(opIndex, \\\"AA26 over verificationGasLimit\\\")\" */ add(_31, /** @src 0:17177:17279  \"IAccount(sender).validateUserOp{gas: verificationGasLimit}(op, opInfo.userOpHash, missingAccountFunds)\" */ 4), /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ var_opIndex)\n                                            mstore(add(/** @src 0:24009:24060  \"FailedOp(opIndex, \\\"AA26 over verificationGasLimit\\\")\" */ _31, /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 36), /** @src 0:13084:13112  \"mUserOp.verificationGasLimit\" */ 64)\n                                            /// @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                            mstore(add(/** @src 0:24009:24060  \"FailedOp(opIndex, \\\"AA26 over verificationGasLimit\\\")\" */ _31, /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 68), 30)\n                                            mstore(add(/** @src 0:24009:24060  \"FailedOp(opIndex, \\\"AA26 over verificationGasLimit\\\")\" */ _31, /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 100), \"AA26 over verificationGasLimit\")\n                                            /// @src 0:24009:24060  \"FailedOp(opIndex, \\\"AA26 over verificationGasLimit\\\")\"\n                                            revert(_31, /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 132)\n                                        }\n                                        /// @src 0:24095:24115  \"bytes memory context\"\n                                        let var_context_1749_mpos := /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 0\n                                        /// @src 0:24095:24115  \"bytes memory context\"\n                                        var_context_1749_mpos := /** @src 0:13114:13134  \"mUserOp.callGasLimit\" */ 96\n                                        /// @src 0:24125:24313  \"if (mUserOp.paymaster != address(0)) {...\"\n                                        if /** @src 0:24129:24160  \"mUserOp.paymaster != address(0)\" */ iszero(iszero(/** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ and(/** @src 0:1296:1301  \"10000\" */ mload(/** @src 0:24129:24146  \"mUserOp.paymaster\" */ add(_431_mpos, /** @src 0:13408:13431  \"userOp.paymasterAndData\" */ 224)), /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ sub(shl(160, 1), 1))))\n                                        /// @src 0:24125:24313  \"if (mUserOp.paymaster != address(0)) {...\"\n                                        {\n                                            /// @src 0:24229:24302  \"_validatePaymasterPrepayment(opIndex, userOp, outOpInfo, requiredPreFund)\"\n                                            let var_context_mpos := /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 0\n                                            /// @src 0:24229:24302  \"_validatePaymasterPrepayment(opIndex, userOp, outOpInfo, requiredPreFund)\"\n                                            let var_validationData_2 := /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 0\n                                            /// @src 0:18780:18789  \"gasleft()\"\n                                            let expr_9 := gas()\n                                            /// @src 0:18833:18847  \"opInfo.mUserOp\"\n                                            let _mpos_1 := mload(var_outOpInfo_mpos)\n                                            /// @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                            let cleaned_4 := and(/** @src 0:1296:1301  \"10000\" */ mload(/** @src 0:18881:18898  \"mUserOp.paymaster\" */ add(_mpos_1, /** @src 0:13408:13431  \"userOp.paymasterAndData\" */ 224)), /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ sub(shl(160, 1), 1))\n                                            mstore(0, cleaned_4)\n                                            mstore(/** @src 0:13061:13073  \"userOp.nonce\" */ 32, /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 0)\n                                            let dataSlot_2 := keccak256(0, /** @src 0:13084:13112  \"mUserOp.verificationGasLimit\" */ 64)\n                                            /// @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                            let _32 := sload(/** @src 0:18999:19020  \"paymasterInfo.deposit\" */ dataSlot_2)\n                                            /// @src 0:19034:19156  \"if (deposit < requiredPreFund) {...\"\n                                            if /** @src 0:19038:19063  \"deposit < requiredPreFund\" */ lt(_32, product)\n                                            /// @src 0:19034:19156  \"if (deposit < requiredPreFund) {...\"\n                                            {\n                                                /// @src 0:19090:19141  \"FailedOp(opIndex, \\\"AA31 paymaster deposit too low\\\")\"\n                                                let _33 := /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ mload(/** @src 0:13084:13112  \"mUserOp.verificationGasLimit\" */ 64)\n                                                /// @src 0:19090:19141  \"FailedOp(opIndex, \\\"AA31 paymaster deposit too low\\\")\"\n                                                mstore(_33, /** @src 0:20671:20712  \"FailedOp(opIndex, \\\"AA24 signature error\\\")\" */ shl(225, 0x1101335b))\n                                                /// @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                                mstore(/** @src 0:19090:19141  \"FailedOp(opIndex, \\\"AA31 paymaster deposit too low\\\")\" */ add(_33, /** @src 0:17177:17279  \"IAccount(sender).validateUserOp{gas: verificationGasLimit}(op, opInfo.userOpHash, missingAccountFunds)\" */ 4), /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ var_opIndex)\n                                                mstore(add(/** @src 0:19090:19141  \"FailedOp(opIndex, \\\"AA31 paymaster deposit too low\\\")\" */ _33, /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 36), /** @src 0:13084:13112  \"mUserOp.verificationGasLimit\" */ 64)\n                                                /// @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                                mstore(add(/** @src 0:19090:19141  \"FailedOp(opIndex, \\\"AA31 paymaster deposit too low\\\")\" */ _33, /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 68), 30)\n                                                mstore(add(/** @src 0:19090:19141  \"FailedOp(opIndex, \\\"AA31 paymaster deposit too low\\\")\" */ _33, /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 100), \"AA31 paymaster deposit too low\")\n                                                /// @src 0:19090:19141  \"FailedOp(opIndex, \\\"AA31 paymaster deposit too low\\\")\"\n                                                revert(_33, /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 132)\n                                            }\n                                            sstore(dataSlot_2, /** @src 0:1542:1546  \"2048\" */ sub(/** @src 0:19193:19218  \"deposit - requiredPreFund\" */ _32, product))\n                                            /// @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                            let _34 := mload(/** @src 0:19265:19302  \"mUserOp.paymasterVerificationGasLimit\" */ add(_mpos_1, /** @src 0:13167:13190  \"userOp.accountGasLimits\" */ 128))\n                                            /// @src 0:1542:1546  \"2048\"\n                                            let _35 := mload(/** @src 0:22963:22983  \"outOpInfo.userOpHash\" */ add(var_outOpInfo_mpos, /** @src 0:13061:13073  \"userOp.nonce\" */ 32))\n                                            /// @src 0:19320:19464  \"IPaymaster(paymaster).validatePaymasterUserOp{gas: pmVerificationGasLimit}(...\"\n                                            let _36 := /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ mload(/** @src 0:13084:13112  \"mUserOp.verificationGasLimit\" */ 64)\n                                            /// @src 0:19320:19464  \"IPaymaster(paymaster).validatePaymasterUserOp{gas: pmVerificationGasLimit}(...\"\n                                            mstore(_36, /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ shl(226, 0x14add44b))\n                                            /// @src 0:19320:19464  \"IPaymaster(paymaster).validatePaymasterUserOp{gas: pmVerificationGasLimit}(...\"\n                                            let trySuccessCondition_1 := call(_34, cleaned_4, /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 0, /** @src 0:19320:19464  \"IPaymaster(paymaster).validatePaymasterUserOp{gas: pmVerificationGasLimit}(...\" */ _36, sub(abi_encode_struct_PackedUserOperation_calldata_bytes32_uint256(add(_36, /** @src 0:17177:17279  \"IAccount(sender).validateUserOp{gas: verificationGasLimit}(op, opInfo.userOpHash, missingAccountFunds)\" */ 4), /** @src 0:19320:19464  \"IPaymaster(paymaster).validatePaymasterUserOp{gas: pmVerificationGasLimit}(...\" */ var_userOp_1632_offset, _35, product), _36), _36, /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 0)\n                                            /// @src 0:19320:19464  \"IPaymaster(paymaster).validatePaymasterUserOp{gas: pmVerificationGasLimit}(...\"\n                                            let expr_component_mpos := /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 0\n                                            let expr_component := 0\n                                            /// @src 0:19320:19464  \"IPaymaster(paymaster).validatePaymasterUserOp{gas: pmVerificationGasLimit}(...\"\n                                            if trySuccessCondition_1\n                                            {\n                                                let _37 := returndatasize()\n                                                returndatacopy(_36, /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 0, /** @src 0:19320:19464  \"IPaymaster(paymaster).validatePaymasterUserOp{gas: pmVerificationGasLimit}(...\" */ _37)\n                                                finalize_allocation(_36, _37)\n                                                /// @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                                if slt(sub(/** @src 0:19320:19464  \"IPaymaster(paymaster).validatePaymasterUserOp{gas: pmVerificationGasLimit}(...\" */ add(_36, _37), /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ _36), /** @src 0:13084:13112  \"mUserOp.verificationGasLimit\" */ 64)\n                                                /// @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                                { revert(0, 0) }\n                                                let offset := mload(_36)\n                                                if gt(offset, 0xffffffffffffffff) { revert(0, 0) }\n                                                if iszero(slt(add(add(_36, offset), 0x1f), /** @src 0:19320:19464  \"IPaymaster(paymaster).validatePaymasterUserOp{gas: pmVerificationGasLimit}(...\" */ add(_36, _37)))\n                                                /// @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                                { revert(0, 0) }\n                                                let _38 := mload(add(_36, offset))\n                                                let _39 := array_allocation_size_bytes(_38)\n                                                let memPtr_2 := mload(/** @src 0:13084:13112  \"mUserOp.verificationGasLimit\" */ 64)\n                                                /// @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                                finalize_allocation(memPtr_2, _39)\n                                                mstore(memPtr_2, _38)\n                                                if gt(add(add(add(_36, offset), _38), /** @src 0:13061:13073  \"userOp.nonce\" */ 32), /** @src 0:19320:19464  \"IPaymaster(paymaster).validatePaymasterUserOp{gas: pmVerificationGasLimit}(...\" */ add(_36, _37))\n                                                /// @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                                { revert(0, 0) }\n                                                copy_memory_to_memory_with_cleanup(add(add(_36, offset), /** @src 0:13061:13073  \"userOp.nonce\" */ 32), /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ add(memPtr_2, /** @src 0:13061:13073  \"userOp.nonce\" */ 32), /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ _38)\n                                                let value_1 := mload(add(_36, /** @src 0:13061:13073  \"userOp.nonce\" */ 32))\n                                                /// @src 0:19320:19464  \"IPaymaster(paymaster).validatePaymasterUserOp{gas: pmVerificationGasLimit}(...\"\n                                                expr_component_mpos := memPtr_2\n                                                expr_component := value_1\n                                            }\n                                            /// @src 0:19316:19757  \"try IPaymaster(paymaster).validatePaymasterUserOp{gas: pmVerificationGasLimit}(...\"\n                                            switch iszero(trySuccessCondition_1)\n                                            case 0 {\n                                                /// @src 0:19540:19558  \"context = _context\"\n                                                var_context_mpos := expr_component_mpos\n                                                /// @src 0:19576:19608  \"validationData = _validationData\"\n                                                var_validationData_2 := expr_component\n                                            }\n                                            default /// @src 0:19316:19757  \"try IPaymaster(paymaster).validatePaymasterUserOp{gas: pmVerificationGasLimit}(...\"\n                                            {\n                                                /// @src 14:1204:1553  \"assembly (\\\"memory-safe\\\") {...\"\n                                                let usr$len_1 := returndatasize()\n                                                /// @src 0:1542:1546  \"2048\"\n                                                let _40 := 0x0800\n                                                /// @src 14:1204:1553  \"assembly (\\\"memory-safe\\\") {...\"\n                                                if gt(usr$len_1, /** @src 0:1542:1546  \"2048\" */ _40)\n                                                /// @src 14:1204:1553  \"assembly (\\\"memory-safe\\\") {...\"\n                                                {\n                                                    usr$len_1 := /** @src 0:1542:1546  \"2048\" */ _40\n                                                }\n                                                /// @src 14:1204:1553  \"assembly (\\\"memory-safe\\\") {...\"\n                                                let usr$ptr_1 := mload(/** @src 0:13084:13112  \"mUserOp.verificationGasLimit\" */ 64)\n                                                /// @src 14:1204:1553  \"assembly (\\\"memory-safe\\\") {...\"\n                                                mstore(/** @src 0:13084:13112  \"mUserOp.verificationGasLimit\" */ 64, /** @src 14:1204:1553  \"assembly (\\\"memory-safe\\\") {...\" */ add(add(usr$ptr_1, usr$len_1), /** @src 0:13061:13073  \"userOp.nonce\" */ 32))\n                                                /// @src 14:1204:1553  \"assembly (\\\"memory-safe\\\") {...\"\n                                                mstore(usr$ptr_1, usr$len_1)\n                                                returndatacopy(add(usr$ptr_1, /** @src 0:13061:13073  \"userOp.nonce\" */ 32), /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 0, /** @src 14:1204:1553  \"assembly (\\\"memory-safe\\\") {...\" */ usr$len_1)\n                                                /// @src 0:19655:19742  \"FailedOpWithRevert(opIndex, \\\"AA33 reverted\\\", Exec.getReturnData(REVERT_REASON_MAX_LEN))\"\n                                                let _41 := /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ mload(/** @src 0:13084:13112  \"mUserOp.verificationGasLimit\" */ 64)\n                                                /// @src 0:19655:19742  \"FailedOpWithRevert(opIndex, \\\"AA33 reverted\\\", Exec.getReturnData(REVERT_REASON_MAX_LEN))\"\n                                                mstore(_41, /** @src 0:17423:17510  \"FailedOpWithRevert(opIndex, \\\"AA23 reverted\\\", Exec.getReturnData(REVERT_REASON_MAX_LEN))\" */ shl(224, 0x65c8fd4d))\n                                                /// @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                                mstore(/** @src 0:19655:19742  \"FailedOpWithRevert(opIndex, \\\"AA33 reverted\\\", Exec.getReturnData(REVERT_REASON_MAX_LEN))\" */ add(_41, /** @src 0:17177:17279  \"IAccount(sender).validateUserOp{gas: verificationGasLimit}(op, opInfo.userOpHash, missingAccountFunds)\" */ 4), /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ var_opIndex)\n                                                mstore(add(/** @src 0:19655:19742  \"FailedOpWithRevert(opIndex, \\\"AA33 reverted\\\", Exec.getReturnData(REVERT_REASON_MAX_LEN))\" */ _41, /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 36), /** @src 0:13114:13134  \"mUserOp.callGasLimit\" */ 96)\n                                                /// @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                                mstore(add(/** @src 0:19655:19742  \"FailedOpWithRevert(opIndex, \\\"AA33 reverted\\\", Exec.getReturnData(REVERT_REASON_MAX_LEN))\" */ _41, /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 100), 13)\n                                                mstore(add(/** @src 0:19655:19742  \"FailedOpWithRevert(opIndex, \\\"AA33 reverted\\\", Exec.getReturnData(REVERT_REASON_MAX_LEN))\" */ _41, /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 132), \"AA33 reverted\")\n                                                mstore(add(/** @src 0:19655:19742  \"FailedOpWithRevert(opIndex, \\\"AA33 reverted\\\", Exec.getReturnData(REVERT_REASON_MAX_LEN))\" */ _41, /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 68), /** @src 0:13230:13255  \"userOp.preVerificationGas\" */ 160)\n                                                /// @src 0:19655:19742  \"FailedOpWithRevert(opIndex, \\\"AA33 reverted\\\", Exec.getReturnData(REVERT_REASON_MAX_LEN))\"\n                                                revert(_41, sub(/** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ abi_encode_bytes(usr$ptr_1, add(/** @src 0:19655:19742  \"FailedOpWithRevert(opIndex, \\\"AA33 reverted\\\", Exec.getReturnData(REVERT_REASON_MAX_LEN))\" */ _41, /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 164)), /** @src 0:19655:19742  \"FailedOpWithRevert(opIndex, \\\"AA33 reverted\\\", Exec.getReturnData(REVERT_REASON_MAX_LEN))\" */ _41))\n                                            }\n                                            /// @src 0:19770:19919  \"if (preGas - gasleft() > pmVerificationGasLimit) {...\"\n                                            if /** @src 0:19774:19817  \"preGas - gasleft() > pmVerificationGasLimit\" */ gt(/** @src 0:1542:1546  \"2048\" */ sub(expr_9, /** @src 0:19783:19792  \"gasleft()\" */ gas()), /** @src 0:19774:19817  \"preGas - gasleft() > pmVerificationGasLimit\" */ _34)\n                                            /// @src 0:19770:19919  \"if (preGas - gasleft() > pmVerificationGasLimit) {...\"\n                                            {\n                                                /// @src 0:19844:19904  \"FailedOp(opIndex, \\\"AA36 over paymasterVerificationGasLimit\\\")\"\n                                                let _42 := /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ mload(/** @src 0:13084:13112  \"mUserOp.verificationGasLimit\" */ 64)\n                                                /// @src 0:19844:19904  \"FailedOp(opIndex, \\\"AA36 over paymasterVerificationGasLimit\\\")\"\n                                                mstore(_42, /** @src 0:20671:20712  \"FailedOp(opIndex, \\\"AA24 signature error\\\")\" */ shl(225, 0x1101335b))\n                                                /// @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                                mstore(/** @src 0:19844:19904  \"FailedOp(opIndex, \\\"AA36 over paymasterVerificationGasLimit\\\")\" */ add(_42, /** @src 0:17177:17279  \"IAccount(sender).validateUserOp{gas: verificationGasLimit}(op, opInfo.userOpHash, missingAccountFunds)\" */ 4), /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ var_opIndex)\n                                                mstore(add(/** @src 0:19844:19904  \"FailedOp(opIndex, \\\"AA36 over paymasterVerificationGasLimit\\\")\" */ _42, /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 36), /** @src 0:13084:13112  \"mUserOp.verificationGasLimit\" */ 64)\n                                                /// @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                                mstore(add(/** @src 0:19844:19904  \"FailedOp(opIndex, \\\"AA36 over paymasterVerificationGasLimit\\\")\" */ _42, /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 68), 39)\n                                                mstore(add(/** @src 0:19844:19904  \"FailedOp(opIndex, \\\"AA36 over paymasterVerificationGasLimit\\\")\" */ _42, /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 100), \"AA36 over paymasterVerificationG\")\n                                                mstore(add(/** @src 0:19844:19904  \"FailedOp(opIndex, \\\"AA36 over paymasterVerificationGasLimit\\\")\" */ _42, /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 132), \"asLimit\")\n                                                /// @src 0:19844:19904  \"FailedOp(opIndex, \\\"AA36 over paymasterVerificationGasLimit\\\")\"\n                                                revert(_42, /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 164)\n                                            }\n                                            /// @src 0:24176:24302  \"(context, paymasterValidationData) =...\"\n                                            var_paymasterValidationData := var_validationData_2\n                                            var_context_1749_mpos := var_context_mpos\n                                        }\n                                        /// @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                        mstore(/** @src 0:24346:24363  \"outOpInfo.prefund\" */ add(var_outOpInfo_mpos, /** @src 0:13084:13112  \"mUserOp.verificationGasLimit\" */ 64), /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ product)\n                                        mstore(/** @src 0:24395:24418  \"outOpInfo.contextOffset\" */ add(var_outOpInfo_mpos, /** @src 0:13114:13134  \"mUserOp.callGasLimit\" */ 96), /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ var_context_1749_mpos)\n                                        mstore(/** @src 0:24466:24484  \"outOpInfo.preOpGas\" */ add(var_outOpInfo_mpos, /** @src 0:13167:13190  \"userOp.accountGasLimits\" */ 128), /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ add(/** @src 0:1542:1546  \"2048\" */ sub(expr, /** @src 0:24496:24505  \"gasleft()\" */ gas()), /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ calldataload(/** @src 0:13230:13255  \"userOp.preVerificationGas\" */ add(var_userOp_1632_offset, 160))))\n                                    }\n                                    /// @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                    function abi_encode_struct_UserOpInfo(value, pos)\n                                    {\n                                        let _1 := mload(value)\n                                        let _2 := sub(shl(160, 1), 1)\n                                        mstore(pos, and(mload(_1), _2))\n                                        mstore(add(pos, 0x20), mload(add(_1, 0x20)))\n                                        mstore(add(pos, 0x40), mload(add(_1, 0x40)))\n                                        mstore(add(pos, 0x60), mload(add(_1, 0x60)))\n                                        mstore(add(pos, 0x80), mload(add(_1, 0x80)))\n                                        mstore(add(pos, 0xa0), mload(add(_1, 0xa0)))\n                                        mstore(add(pos, 0xc0), mload(add(_1, 0xc0)))\n                                        mstore(add(pos, 0xe0), and(mload(add(_1, 0xe0)), _2))\n                                        let _3 := 0x0100\n                                        mstore(add(pos, _3), mload(add(_1, _3)))\n                                        let _4 := 0x0120\n                                        mstore(add(pos, _4), mload(add(_1, _4)))\n                                        mstore(add(pos, 0x0140), mload(add(value, 0x20)))\n                                        mstore(add(pos, 0x0160), mload(add(value, 0x40)))\n                                        mstore(add(pos, 0x0180), mload(add(value, 0x60)))\n                                        mstore(add(pos, 0x01a0), mload(add(value, 0x80)))\n                                    }\n                                    /// @ast-id 328 @src 0:3018:5928  \"function _executeUserOp(uint256 opIndex, PackedUserOperation calldata userOp, UserOpInfo memory opInfo)...\"\n                                    function fun_executeUserOp(var_opIndex, var_userOp_offset, var_opInfo_155_mpos) -> var_collected\n                                    {\n                                        /// @src 0:3206:3215  \"gasleft()\"\n                                        let expr := gas()\n                                        /// @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                        let _1 := mload(/** @src 0:3273:3293  \"opInfo.contextOffset\" */ add(var_opInfo_155_mpos, 96))\n                                        /// @src 0:3373:3456  \"assembly (\\\"memory-safe\\\") {...\"\n                                        let _2 := 0x40\n                                        let var_saveFreePtr := mload(_2)\n                                        /// @src 0:3495:3510  \"userOp.callData\"\n                                        let expr_offset, expr_182_length := access_calldata_tail_bytes_calldata(var_userOp_offset, add(var_userOp_offset, /** @src 0:3273:3293  \"opInfo.contextOffset\" */ 96))\n                                        /// @src 0:3524:3546  \"bytes memory innerCall\"\n                                        let var_innerCall_mpos := /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 0\n                                        /// @src 0:3560:3576  \"bytes4 methodSig\"\n                                        let var_methodSig := /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ var_innerCall_mpos\n                                        /// @src 0:3560:3576  \"bytes4 methodSig\"\n                                        var_methodSig := /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ var_innerCall_mpos\n                                        /// @src 0:3590:3734  \"assembly {...\"\n                                        if gt(expr_182_length, 3)\n                                        {\n                                            var_methodSig := calldataload(expr_offset)\n                                        }\n                                        /// @src 0:3764:3802  \"IAccountExecute.executeUserOp.selector\"\n                                        let _3 := shl(224, 0x8dd7712f)\n                                        /// @src 0:3747:4152  \"if (methodSig == IAccountExecute.executeUserOp.selector) {...\"\n                                        switch /** @src 0:3751:3802  \"methodSig == IAccountExecute.executeUserOp.selector\" */ eq(/** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ and(/** @src 0:3751:3802  \"methodSig == IAccountExecute.executeUserOp.selector\" */ var_methodSig, /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ shl(224, 0xffffffff)), /** @src 0:3764:3802  \"IAccountExecute.executeUserOp.selector\" */ _3)\n                                        case /** @src 0:3747:4152  \"if (methodSig == IAccountExecute.executeUserOp.selector) {...\" */ 0 {\n                                            /// @src 0:4074:4137  \"abi.encodeCall(this.innerHandleOp, (callData, opInfo, context))\"\n                                            mstore(add(var_saveFreePtr, 0x20), /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ shl(224, 4381779))\n                                            mstore(/** @src 0:4074:4137  \"abi.encodeCall(this.innerHandleOp, (callData, opInfo, context))\" */ add(var_saveFreePtr, 36), /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 512)\n                                            let tail := abi_encode_bytes_calldata(expr_offset, expr_182_length, add(/** @src 0:4074:4137  \"abi.encodeCall(this.innerHandleOp, (callData, opInfo, context))\" */ var_saveFreePtr, /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 548))\n                                            abi_encode_struct_UserOpInfo(var_opInfo_155_mpos, add(/** @src 0:4074:4137  \"abi.encodeCall(this.innerHandleOp, (callData, opInfo, context))\" */ var_saveFreePtr, /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 68))\n                                            mstore(add(/** @src 0:4074:4137  \"abi.encodeCall(this.innerHandleOp, (callData, opInfo, context))\" */ var_saveFreePtr, /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 516), add(sub(tail, /** @src 0:4074:4137  \"abi.encodeCall(this.innerHandleOp, (callData, opInfo, context))\" */ var_saveFreePtr), /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ not(35)))\n                                            /// @src 0:4074:4137  \"abi.encodeCall(this.innerHandleOp, (callData, opInfo, context))\"\n                                            let _4 := sub(/** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ abi_encode_bytes(_1, tail), /** @src 0:4074:4137  \"abi.encodeCall(this.innerHandleOp, (callData, opInfo, context))\" */ var_saveFreePtr)\n                                            mstore(var_saveFreePtr, add(_4, /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ not(31)))\n                                            /// @src 0:4074:4137  \"abi.encodeCall(this.innerHandleOp, (callData, opInfo, context))\"\n                                            finalize_allocation(var_saveFreePtr, _4)\n                                            /// @src 0:4062:4137  \"innerCall = abi.encodeCall(this.innerHandleOp, (callData, opInfo, context))\"\n                                            var_innerCall_mpos := var_saveFreePtr\n                                        }\n                                        default /// @src 0:3747:4152  \"if (methodSig == IAccountExecute.executeUserOp.selector) {...\"\n                                        {\n                                            /// @src 0:1542:1546  \"2048\"\n                                            let _5 := mload(/** @src 0:3906:3923  \"opInfo.userOpHash\" */ add(var_opInfo_155_mpos, 32))\n                                            /// @src 0:3851:3925  \"abi.encodeCall(IAccountExecute.executeUserOp, (userOp, opInfo.userOpHash))\"\n                                            let expr_mpos := /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ mload(/** @src 0:3373:3456  \"assembly (\\\"memory-safe\\\") {...\" */ _2)\n                                            /// @src 0:3851:3925  \"abi.encodeCall(IAccountExecute.executeUserOp, (userOp, opInfo.userOpHash))\"\n                                            mstore(add(expr_mpos, /** @src 0:3906:3923  \"opInfo.userOpHash\" */ 32), /** @src 0:3764:3802  \"IAccountExecute.executeUserOp.selector\" */ _3)\n                                            /// @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                            mstore(/** @src 0:3851:3925  \"abi.encodeCall(IAccountExecute.executeUserOp, (userOp, opInfo.userOpHash))\" */ add(expr_mpos, 36), /** @src 0:3373:3456  \"assembly (\\\"memory-safe\\\") {...\" */ _2)\n                                            /// @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                            let tail_1 := abi_encode_struct_PackedUserOperation_calldata(var_userOp_offset, add(/** @src 0:3851:3925  \"abi.encodeCall(IAccountExecute.executeUserOp, (userOp, opInfo.userOpHash))\" */ expr_mpos, /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 100))\n                                            mstore(add(/** @src 0:3851:3925  \"abi.encodeCall(IAccountExecute.executeUserOp, (userOp, opInfo.userOpHash))\" */ expr_mpos, /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 68), _5)\n                                            /// @src 0:3851:3925  \"abi.encodeCall(IAccountExecute.executeUserOp, (userOp, opInfo.userOpHash))\"\n                                            let _6 := sub(tail_1, expr_mpos)\n                                            let _7 := /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ not(31)\n                                            /// @src 0:3851:3925  \"abi.encodeCall(IAccountExecute.executeUserOp, (userOp, opInfo.userOpHash))\"\n                                            mstore(expr_mpos, add(_6, _7))\n                                            finalize_allocation(expr_mpos, _6)\n                                            /// @src 0:3955:4023  \"abi.encodeCall(this.innerHandleOp, (executeUserOp, opInfo, context))\"\n                                            let expr_217_mpos := /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ mload(/** @src 0:3373:3456  \"assembly (\\\"memory-safe\\\") {...\" */ _2)\n                                            /// @src 0:3955:4023  \"abi.encodeCall(this.innerHandleOp, (executeUserOp, opInfo, context))\"\n                                            mstore(add(expr_217_mpos, /** @src 0:3906:3923  \"opInfo.userOpHash\" */ 32), /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ shl(224, 4381779))\n                                            mstore(/** @src 0:3955:4023  \"abi.encodeCall(this.innerHandleOp, (executeUserOp, opInfo, context))\" */ add(expr_217_mpos, /** @src 0:3851:3925  \"abi.encodeCall(IAccountExecute.executeUserOp, (userOp, opInfo.userOpHash))\" */ 36), /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 512)\n                                            let tail_2 := abi_encode_bytes(expr_mpos, add(/** @src 0:3955:4023  \"abi.encodeCall(this.innerHandleOp, (executeUserOp, opInfo, context))\" */ expr_217_mpos, /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 548))\n                                            abi_encode_struct_UserOpInfo(var_opInfo_155_mpos, add(/** @src 0:3955:4023  \"abi.encodeCall(this.innerHandleOp, (executeUserOp, opInfo, context))\" */ expr_217_mpos, /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 68))\n                                            mstore(add(/** @src 0:3955:4023  \"abi.encodeCall(this.innerHandleOp, (executeUserOp, opInfo, context))\" */ expr_217_mpos, /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 516), add(sub(tail_2, /** @src 0:3955:4023  \"abi.encodeCall(this.innerHandleOp, (executeUserOp, opInfo, context))\" */ expr_217_mpos), /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ not(35)))\n                                            /// @src 0:3955:4023  \"abi.encodeCall(this.innerHandleOp, (executeUserOp, opInfo, context))\"\n                                            let _8 := sub(/** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ abi_encode_bytes(_1, tail_2), /** @src 0:3955:4023  \"abi.encodeCall(this.innerHandleOp, (executeUserOp, opInfo, context))\" */ expr_217_mpos)\n                                            mstore(expr_217_mpos, add(_8, /** @src 0:3851:3925  \"abi.encodeCall(IAccountExecute.executeUserOp, (userOp, opInfo.userOpHash))\" */ _7))\n                                            /// @src 0:3955:4023  \"abi.encodeCall(this.innerHandleOp, (executeUserOp, opInfo, context))\"\n                                            finalize_allocation(expr_217_mpos, _8)\n                                            /// @src 0:3943:4023  \"innerCall = abi.encodeCall(this.innerHandleOp, (executeUserOp, opInfo, context))\"\n                                            var_innerCall_mpos := expr_217_mpos\n                                        }\n                                        /// @src 0:4165:4385  \"assembly (\\\"memory-safe\\\") {...\"\n                                        let _9 := 32\n                                        let var_success := call(gas(), address(), /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 0, /** @src 0:4165:4385  \"assembly (\\\"memory-safe\\\") {...\" */ add(var_innerCall_mpos, _9), mload(var_innerCall_mpos), /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 0, /** @src 0:4165:4385  \"assembly (\\\"memory-safe\\\") {...\" */ _9)\n                                        var_collected := mload(/** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 0)\n                                        /// @src 0:4165:4385  \"assembly (\\\"memory-safe\\\") {...\"\n                                        mstore(/** @src 0:3373:3456  \"assembly (\\\"memory-safe\\\") {...\" */ _2, /** @src 0:4165:4385  \"assembly (\\\"memory-safe\\\") {...\" */ var_saveFreePtr)\n                                        /// @src 0:4404:5922  \"if (!success) {...\"\n                                        if /** @src 0:4408:4416  \"!success\" */ iszero(var_success)\n                                        /// @src 0:4404:5922  \"if (!success) {...\"\n                                        {\n                                            /// @src 0:4432:4455  \"bytes32 innerRevertCode\"\n                                            let var_innerRevertCode := /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 0\n                                            /// @src 0:4469:4697  \"assembly (\\\"memory-safe\\\") {...\"\n                                            if eq(/** @src 0:4165:4385  \"assembly (\\\"memory-safe\\\") {...\" */ _9, /** @src 0:4469:4697  \"assembly (\\\"memory-safe\\\") {...\" */ returndatasize())\n                                            {\n                                                returndatacopy(/** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ var_innerRevertCode, var_innerRevertCode, /** @src 0:4165:4385  \"assembly (\\\"memory-safe\\\") {...\" */ _9)\n                                                /// @src 0:4469:4697  \"assembly (\\\"memory-safe\\\") {...\"\n                                                var_innerRevertCode := mload(/** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ var_innerRevertCode)\n                                            }\n                                            /// @src 0:4710:5912  \"if (innerRevertCode == INNER_OUT_OF_GAS) {...\"\n                                            switch /** @src 0:4714:4749  \"innerRevertCode == INNER_OUT_OF_GAS\" */ eq(var_innerRevertCode, /** @src 0:11604:11730  \"assembly (\\\"memory-safe\\\") {...\" */ shl(224, 0xdeaddead))\n                                            case /** @src 0:4710:5912  \"if (innerRevertCode == INNER_OUT_OF_GAS) {...\" */ 0 {\n                                                /// @src 0:5006:5912  \"if (innerRevertCode == INNER_REVERT_LOW_PREFUND) {...\"\n                                                switch /** @src 0:5010:5053  \"innerRevertCode == INNER_REVERT_LOW_PREFUND\" */ eq(var_innerRevertCode, /** @src 0:27628:27774  \"assembly (\\\"memory-safe\\\") {...\" */ shl(224, 0xdeadaa51))\n                                                case /** @src 0:5006:5912  \"if (innerRevertCode == INNER_REVERT_LOW_PREFUND) {...\" */ 0 {\n                                                    /// @src 0:1542:1546  \"2048\"\n                                                    let _10 := mload(/** @src 0:5529:5546  \"opInfo.userOpHash\" */ add(var_opInfo_155_mpos, /** @src 0:4165:4385  \"assembly (\\\"memory-safe\\\") {...\" */ _9))\n                                                    /// @src 0:5568:5582  \"opInfo.mUserOp\"\n                                                    let _565_mpos := mload(var_opInfo_155_mpos)\n                                                    /// @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                                    let _11 := sub(shl(160, 1), 1)\n                                                    let cleaned := and(/** @src 0:1296:1301  \"10000\" */ mload(/** @src 0:5568:5589  \"opInfo.mUserOp.sender\" */ _565_mpos), /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ _11)\n                                                    let _12 := mload(/** @src 0:5611:5631  \"opInfo.mUserOp.nonce\" */ add(_565_mpos, /** @src 0:4165:4385  \"assembly (\\\"memory-safe\\\") {...\" */ _9))\n                                                    /// @src 14:1204:1553  \"assembly (\\\"memory-safe\\\") {...\"\n                                                    let usr$len := returndatasize()\n                                                    /// @src 0:1542:1546  \"2048\"\n                                                    let _13 := 0x0800\n                                                    /// @src 14:1204:1553  \"assembly (\\\"memory-safe\\\") {...\"\n                                                    if gt(usr$len, /** @src 0:1542:1546  \"2048\" */ _13)\n                                                    /// @src 14:1204:1553  \"assembly (\\\"memory-safe\\\") {...\"\n                                                    {\n                                                        usr$len := /** @src 0:1542:1546  \"2048\" */ _13\n                                                    }\n                                                    /// @src 14:1204:1553  \"assembly (\\\"memory-safe\\\") {...\"\n                                                    let usr$ptr := mload(/** @src 0:3373:3456  \"assembly (\\\"memory-safe\\\") {...\" */ _2)\n                                                    /// @src 14:1204:1553  \"assembly (\\\"memory-safe\\\") {...\"\n                                                    mstore(/** @src 0:3373:3456  \"assembly (\\\"memory-safe\\\") {...\" */ _2, /** @src 14:1204:1553  \"assembly (\\\"memory-safe\\\") {...\" */ add(add(usr$ptr, usr$len), /** @src 0:4165:4385  \"assembly (\\\"memory-safe\\\") {...\" */ _9))\n                                                    /// @src 14:1204:1553  \"assembly (\\\"memory-safe\\\") {...\"\n                                                    mstore(usr$ptr, usr$len)\n                                                    returndatacopy(add(usr$ptr, /** @src 0:4165:4385  \"assembly (\\\"memory-safe\\\") {...\" */ _9), /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 0, /** @src 14:1204:1553  \"assembly (\\\"memory-safe\\\") {...\" */ usr$len)\n                                                    /// @src 0:5489:5712  \"PostOpRevertReason(...\"\n                                                    let _14 := /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ mload(/** @src 0:3373:3456  \"assembly (\\\"memory-safe\\\") {...\" */ _2)\n                                                    /// @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                                    mstore(_14, _12)\n                                                    /// @src 0:1542:1546  \"2048\"\n                                                    mstore(add(_14, /** @src 0:4165:4385  \"assembly (\\\"memory-safe\\\") {...\" */ _9), /** @src 0:3373:3456  \"assembly (\\\"memory-safe\\\") {...\" */ _2)\n                                                    /// @src 0:5489:5712  \"PostOpRevertReason(...\"\n                                                    log3(_14, sub(/** @src 0:1542:1546  \"2048\" */ abi_encode_bytes(usr$ptr, add(_14, /** @src 0:3373:3456  \"assembly (\\\"memory-safe\\\") {...\" */ _2)), /** @src 0:5489:5712  \"PostOpRevertReason(...\" */ _14), 0xf62676f440ff169a3a9afdbf812e89e7f95975ee8e5c31214ffdef631c5f4792, _10, cleaned)\n                                                    /// @src 0:5751:5769  \"preGas - gasleft()\"\n                                                    let expr_1 := checked_sub_uint256(expr, /** @src 0:5760:5769  \"gasleft()\" */ gas())\n                                                    /// @src 0:5772:5787  \"opInfo.preOpGas\"\n                                                    let _15 := add(var_opInfo_155_mpos, 128)\n                                                    /// @src 0:5817:5897  \"_postExecution(IPaymaster.PostOpMode.postOpReverted, opInfo, context, actualGas)\"\n                                                    let var_actualGas := /** @src 0:5751:5787  \"preGas - gasleft() + opInfo.preOpGas\" */ checked_add_uint256(expr_1, /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ mload(/** @src 0:5772:5787  \"opInfo.preOpGas\" */ _15))\n                                                    /// @src 0:5817:5897  \"_postExecution(IPaymaster.PostOpMode.postOpReverted, opInfo, context, actualGas)\"\n                                                    let var_actualGasCost := /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 0\n                                                    /// @src 0:25391:25400  \"gasleft()\"\n                                                    let expr_2 := gas()\n                                                    /// @src 0:25434:25455  \"address refundAddress\"\n                                                    let var_refundAddress := /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ var_actualGasCost\n                                                    /// @src 0:25434:25455  \"address refundAddress\"\n                                                    let var_refundAddress_1 := /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ var_actualGasCost\n                                                    /// @src 0:25499:25513  \"opInfo.mUserOp\"\n                                                    let _mpos := mload(var_opInfo_155_mpos)\n                                                    /// @src 0:25546:25572  \"getUserOpGasPrice(mUserOp)\"\n                                                    let expr_3 := fun_getUserOpGasPrice(_mpos)\n                                                    /// @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                                    let cleaned_1 := and(/** @src 0:1296:1301  \"10000\" */ mload(/** @src 0:25607:25624  \"mUserOp.paymaster\" */ add(_mpos, 224)), /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ _11)\n                                                    /// @src 0:25638:26482  \"if (paymaster == address(0)) {...\"\n                                                    switch /** @src 0:25642:25665  \"paymaster == address(0)\" */ iszero(/** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ cleaned_1)\n                                                    case /** @src 0:25638:26482  \"if (paymaster == address(0)) {...\" */ 0 {\n                                                        /// @src 0:25754:25779  \"refundAddress = paymaster\"\n                                                        var_refundAddress := cleaned_1\n                                                        /// @src 0:25797:26468  \"if (context.length > 0) {...\"\n                                                        if /** @src 0:25801:25819  \"context.length > 0\" */ iszero(iszero(/** @src 0:1296:1301  \"10000\" */ mload(/** @src 0:25801:25815  \"context.length\" */ _1)))\n                                                        /// @src 0:25797:26468  \"if (context.length > 0) {...\"\n                                                        {\n                                                            /// @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                                            var_refundAddress_1 := var_actualGasCost\n                                                        }\n                                                    }\n                                                    default /// @src 0:25638:26482  \"if (paymaster == address(0)) {...\"\n                                                    {\n                                                        /// @src 0:25685:25715  \"refundAddress = mUserOp.sender\"\n                                                        var_refundAddress := /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ and(/** @src 0:1296:1301  \"10000\" */ mload(/** @src 0:25701:25715  \"mUserOp.sender\" */ _mpos), /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ _11)\n                                                    }\n                                                    /// @src 0:26495:26526  \"actualGas += preGas - gasleft()\"\n                                                    var_actualGas := /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ add(var_actualGas, /** @src 0:1542:1546  \"2048\" */ sub(expr_2, /** @src 0:26517:26526  \"gasleft()\" */ gas()))\n                                                    /// @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                                    let _16 := mload(/** @src 0:26649:26669  \"mUserOp.callGasLimit\" */ add(_mpos, /** @src 0:3273:3293  \"opInfo.contextOffset\" */ 96))\n                                                    /// @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                                    let sum := add(_16, mload(/** @src 0:26672:26703  \"mUserOp.paymasterPostOpGasLimit\" */ add(_mpos, 160)))\n                                                    /// @src 0:1542:1546  \"2048\"\n                                                    let diff := sub(var_actualGas, /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ mload(/** @src 0:26760:26775  \"opInfo.preOpGas\" */ _15))\n                                                    /// @src 0:26909:27183  \"if (executionGasLimit > executionGasUsed) {...\"\n                                                    if /** @src 0:26913:26949  \"executionGasLimit > executionGasUsed\" */ gt(sum, diff)\n                                                    /// @src 0:26909:27183  \"if (executionGasLimit > executionGasUsed) {...\"\n                                                    {\n                                                        /// @src 0:27135:27164  \"actualGas += unusedGasPenalty\"\n                                                        var_actualGas := /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ add(var_actualGas, div(mul(/** @src 0:1542:1546  \"2048\" */ sub(/** @src 0:26993:27029  \"executionGasLimit - executionGasUsed\" */ sum, diff), /** @src 0:1595:1597  \"10\" */ 0x0a), /** @src 0:27110:27113  \"100\" */ 0x64))\n                                                    }\n                                                    /// @src 0:27211:27247  \"actualGasCost = actualGas * gasPrice\"\n                                                    var_actualGasCost := /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ mul(/** @src 0:27227:27247  \"actualGas * gasPrice\" */ var_actualGas, expr_3)\n                                                    /// @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                                    let _17 := mload(/** @src 0:27279:27293  \"opInfo.prefund\" */ add(var_opInfo_155_mpos, /** @src 0:3373:3456  \"assembly (\\\"memory-safe\\\") {...\" */ _2))\n                                                    /// @src 0:27307:28100  \"if (prefund < actualGasCost) {...\"\n                                                    switch /** @src 0:27311:27334  \"prefund < actualGasCost\" */ lt(_17, var_actualGasCost)\n                                                    case /** @src 0:27307:28100  \"if (prefund < actualGasCost) {...\" */ 0 {\n                                                        /// @src 0:27888:27928  \"_incrementDeposit(refundAddress, refund)\"\n                                                        pop(fun_incrementDeposit(var_refundAddress, /** @src 0:1542:1546  \"2048\" */ sub(/** @src 0:27847:27870  \"prefund - actualGasCost\" */ _17, var_actualGasCost)))\n                                                        /// @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                                        if var_refundAddress_1\n                                                        {\n                                                            mstore(/** @src -1:-1:-1 */ var_refundAddress_1, /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ shl(224, 0x4e487b71))\n                                                            mstore(4, 0x21)\n                                                            revert(/** @src -1:-1:-1 */ var_refundAddress_1, /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 0x24)\n                                                        }\n                                                        /// @src 0:28075:28084  \"actualGas\"\n                                                        fun_emitUserOperationEvent(var_opInfo_155_mpos, var_actualGasCost, var_actualGas)\n                                                    }\n                                                    default /// @src 0:27307:28100  \"if (prefund < actualGasCost) {...\"\n                                                    {\n                                                        /// @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                                        if var_refundAddress_1\n                                                        {\n                                                            mstore(/** @src -1:-1:-1 */ var_refundAddress_1, /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ shl(224, 0x4e487b71))\n                                                            mstore(4, 0x21)\n                                                            revert(/** @src -1:-1:-1 */ var_refundAddress_1, /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 0x24)\n                                                        }\n                                                        /// @src 0:27426:27449  \"actualGasCost = prefund\"\n                                                        var_actualGasCost := _17\n                                                        /// @src 0:27489:27495  \"opInfo\"\n                                                        fun_emitPrefundTooLow(var_opInfo_155_mpos)\n                                                        /// @src 0:27571:27580  \"actualGas\"\n                                                        fun_emitUserOperationEvent(var_opInfo_155_mpos, _17, var_actualGas)\n                                                    }\n                                                    /// @src 0:5805:5897  \"collected = _postExecution(IPaymaster.PostOpMode.postOpReverted, opInfo, context, actualGas)\"\n                                                    var_collected := var_actualGasCost\n                                                }\n                                                default /// @src 0:5006:5912  \"if (innerRevertCode == INNER_REVERT_LOW_PREFUND) {...\"\n                                                {\n                                                    /// @src 0:5186:5204  \"preGas - gasleft()\"\n                                                    let expr_4 := checked_sub_uint256(expr, /** @src 0:5195:5204  \"gasleft()\" */ gas())\n                                                    /// @src 0:5186:5222  \"preGas - gasleft() + opInfo.preOpGas\"\n                                                    let expr_5 := checked_add_uint256(expr_4, /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ mload(/** @src 0:5207:5222  \"opInfo.preOpGas\" */ add(var_opInfo_155_mpos, 128)))\n                                                    /// @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                                    let _18 := mload(/** @src 0:5264:5278  \"opInfo.prefund\" */ add(var_opInfo_155_mpos, /** @src 0:3373:3456  \"assembly (\\\"memory-safe\\\") {...\" */ _2))\n                                                    /// @src 0:5314:5320  \"opInfo\"\n                                                    fun_emitPrefundTooLow(var_opInfo_155_mpos)\n                                                    /// @src 0:5392:5401  \"actualGas\"\n                                                    fun_emitUserOperationEvent(var_opInfo_155_mpos, _18, expr_5)\n                                                    /// @src 0:5420:5445  \"collected = actualGasCost\"\n                                                    var_collected := _18\n                                                }\n                                            }\n                                            default /// @src 0:4710:5912  \"if (innerRevertCode == INNER_OUT_OF_GAS) {...\"\n                                            {\n                                                /// @src 0:4949:4985  \"FailedOp(opIndex, \\\"AA95 out of gas\\\")\"\n                                                let _19 := /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ mload(/** @src 0:3373:3456  \"assembly (\\\"memory-safe\\\") {...\" */ _2)\n                                                /// @src 0:4949:4985  \"FailedOp(opIndex, \\\"AA95 out of gas\\\")\"\n                                                mstore(_19, /** @src 0:20671:20712  \"FailedOp(opIndex, \\\"AA24 signature error\\\")\" */ shl(225, 0x1101335b))\n                                                /// @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                                mstore(/** @src 0:4949:4985  \"FailedOp(opIndex, \\\"AA95 out of gas\\\")\" */ add(_19, 4), /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ var_opIndex)\n                                                /// @src 0:1473:1486  \"hex\\\"deadaa51\\\"\"\n                                                mstore(add(/** @src 0:4949:4985  \"FailedOp(opIndex, \\\"AA95 out of gas\\\")\" */ _19, /** @src 0:1473:1486  \"hex\\\"deadaa51\\\"\" */ 36), /** @src 0:3373:3456  \"assembly (\\\"memory-safe\\\") {...\" */ _2)\n                                                /// @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                                mstore(/** @src 0:1473:1486  \"hex\\\"deadaa51\\\"\" */ add(/** @src 0:4949:4985  \"FailedOp(opIndex, \\\"AA95 out of gas\\\")\" */ _19, /** @src 0:1473:1486  \"hex\\\"deadaa51\\\"\" */ 68), 15)\n                                                mstore(/** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ add(/** @src 0:4949:4985  \"FailedOp(opIndex, \\\"AA95 out of gas\\\")\" */ _19, /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 100), /** @src 0:1473:1486  \"hex\\\"deadaa51\\\"\" */ \"AA95 out of gas\")\n                                                /// @src 0:4949:4985  \"FailedOp(opIndex, \\\"AA95 out of gas\\\")\"\n                                                revert(_19, /** @src 0:1473:1486  \"hex\\\"deadaa51\\\"\" */ 132)\n                                            }\n                                        }\n                                    }\n                                    /// @ast-id 146 @src 0:2433:2711  \"function _compensate(address payable beneficiary, uint256 amount) internal {...\"\n                                    function fun_compensate(var_beneficiary, var_amount)\n                                    {\n                                        /// @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                        let _1 := and(/** @src 0:2526:2551  \"beneficiary != address(0)\" */ var_beneficiary, /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ sub(shl(160, 1), 1))\n                                        if /** @src 0:2526:2551  \"beneficiary != address(0)\" */ iszero(_1)\n                                        /// @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                        {\n                                            let memPtr := mload(64)\n                                            mstore(memPtr, shl(229, 4594637))\n                                            mstore(add(memPtr, 4), 32)\n                                            mstore(add(memPtr, 36), 24)\n                                            mstore(add(memPtr, 68), \"AA90 invalid beneficiary\")\n                                            revert(memPtr, 100)\n                                        }\n                                        /// @src 0:2608:2643  \"beneficiary.call{value: amount}(\\\"\\\")\"\n                                        let expr_138_component := call(gas(), _1, var_amount, /** @src 0:2549:2550  \"0\" */ 0x00, 0x00, 0x00, 0x00)\n                                        /// @src 0:2608:2643  \"beneficiary.call{value: amount}(\\\"\\\")\"\n                                        pop(extract_returndata())\n                                        /// @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                        if iszero(expr_138_component)\n                                        {\n                                            let memPtr_1 := mload(64)\n                                            mstore(memPtr_1, shl(229, 4594637))\n                                            mstore(add(memPtr_1, 4), 32)\n                                            mstore(add(memPtr_1, 36), 31)\n                                            mstore(add(memPtr_1, 68), \"AA91 failed send to beneficiary\")\n                                            revert(memPtr_1, 100)\n                                        }\n                                    }\n                                    /// @ast-id 2531 @src 4:1559:1818  \"function _incrementDeposit(address account, uint256 amount) internal returns (uint256) {...\"\n                                    function fun_incrementDeposit(var_account, var_amount) -> var\n                                    {\n                                        /// @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                        mstore(/** @src 4:1683:1691  \"deposits\" */ 0x00, /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ and(var_account, sub(shl(160, 1), 1)))\n                                        mstore(0x20, /** @src 4:1683:1691  \"deposits\" */ 0x00)\n                                        /// @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                        let dataSlot := keccak256(/** @src 4:1683:1691  \"deposits\" */ 0x00, /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 0x40)\n                                        /// @src 4:1730:1751  \"info.deposit + amount\"\n                                        let expr := checked_add_uint256(/** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ sload(/** @src 4:1730:1742  \"info.deposit\" */ dataSlot), /** @src 4:1730:1751  \"info.deposit + amount\" */ var_amount)\n                                        /// @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                        sstore(dataSlot, expr)\n                                        /// @src 4:1795:1811  \"return newAmount\"\n                                        var := expr\n                                    }\n                                    /// @ast-id 2057 @src 0:28360:28877  \"function getUserOpGasPrice(MemoryUserOp memory mUserOp) internal view returns (uint256) {...\"\n                                    function fun_getUserOpGasPrice(var_mUserOp_mpos) -> var_\n                                    {\n                                        /// @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                        let _1 := mload(/** @src 0:28505:28525  \"mUserOp.maxFeePerGas\" */ add(var_mUserOp_mpos, 256))\n                                        /// @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                        let _2 := mload(/** @src 0:28570:28598  \"mUserOp.maxPriorityFeePerGas\" */ add(var_mUserOp_mpos, 288))\n                                        /// @src 0:28612:28785  \"if (maxFeePerGas == maxPriorityFeePerGas) {...\"\n                                        if /** @src 0:28616:28652  \"maxFeePerGas == maxPriorityFeePerGas\" */ eq(_1, _2)\n                                        /// @src 0:28612:28785  \"if (maxFeePerGas == maxPriorityFeePerGas) {...\"\n                                        {\n                                            /// @src 0:28751:28770  \"return maxFeePerGas\"\n                                            var_ := _1\n                                            leave\n                                        }\n                                        /// @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                        let _3 := add(/** @src 0:28823:28859  \"maxPriorityFeePerGas + block.basefee\" */ _2, /** @src 0:28846:28859  \"block.basefee\" */ basefee())\n                                        /// @src 1:3338:3351  \"a < b ? a : b\"\n                                        let expr := /** @src -1:-1:-1 */ 0\n                                        /// @src 1:3338:3351  \"a < b ? a : b\"\n                                        switch /** @src 1:3338:3343  \"a < b\" */ lt(_1, _3)\n                                        case /** @src 1:3338:3351  \"a < b ? a : b\" */ 0 { expr := _3 }\n                                        default { expr := _1 }\n                                        /// @src 0:28798:28860  \"return min(maxFeePerGas, maxPriorityFeePerGas + block.basefee)\"\n                                        var_ := expr\n                                    }\n                                    /// @ast-id 358 @src 0:5934:6344  \"function emitUserOperationEvent(UserOpInfo memory opInfo, bool success, uint256 actualGasCost, uint256 actualGas)...\"\n                                    function fun_emitUserOperationEvent(var_opInfo_mpos, var_actualGasCost, var_actualGas)\n                                    {\n                                        /// @src 0:1542:1546  \"2048\"\n                                        let _1 := mload(/** @src 0:6132:6149  \"opInfo.userOpHash\" */ add(var_opInfo_mpos, 32))\n                                        /// @src 0:6163:6177  \"opInfo.mUserOp\"\n                                        let _mpos := mload(var_opInfo_mpos)\n                                        /// @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                        let _2 := sub(shl(160, 1), 1)\n                                        let cleaned := and(/** @src 0:1296:1301  \"10000\" */ mload(/** @src 0:6163:6184  \"opInfo.mUserOp.sender\" */ _mpos), /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ _2)\n                                        let cleaned_1 := and(/** @src 0:1296:1301  \"10000\" */ mload(/** @src 0:6198:6222  \"opInfo.mUserOp.paymaster\" */ add(_mpos, 224)), /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ _2)\n                                        let _3 := mload(/** @src 0:6236:6256  \"opInfo.mUserOp.nonce\" */ add(_mpos, /** @src 0:6132:6149  \"opInfo.userOpHash\" */ 32))\n                                        /// @src 0:6100:6337  \"UserOperationEvent(...\"\n                                        let _4 := /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ mload(64)\n                                        mstore(_4, _3)\n                                        mstore(add(_4, /** @src 0:6132:6149  \"opInfo.userOpHash\" */ 32), /** @src -1:-1:-1 */ 0)\n                                        /// @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                        mstore(add(_4, 64), var_actualGasCost)\n                                        mstore(add(_4, 96), var_actualGas)\n                                        /// @src 0:6100:6337  \"UserOperationEvent(...\"\n                                        log4(_4, /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 128, /** @src 0:6100:6337  \"UserOperationEvent(...\" */ 0x49628fd1471006c1482da88028e9ce4dbb080b815c9b0344d39e5a8e6ec1419f, _1, cleaned, cleaned_1)\n                                    }\n                                    /// @ast-id 376 @src 0:6350:6532  \"function emitPrefundTooLow(UserOpInfo memory opInfo) internal virtual {...\"\n                                    function fun_emitPrefundTooLow(var_opInfo_mpos)\n                                    {\n                                        /// @src 0:1542:1546  \"2048\"\n                                        let _1 := mload(/** @src 0:6462:6479  \"opInfo.userOpHash\" */ add(var_opInfo_mpos, 32))\n                                        /// @src 0:6481:6495  \"opInfo.mUserOp\"\n                                        let _665_mpos := mload(var_opInfo_mpos)\n                                        /// @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                        let cleaned := and(/** @src 0:1296:1301  \"10000\" */ mload(/** @src 0:6481:6502  \"opInfo.mUserOp.sender\" */ _665_mpos), /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ sub(shl(160, 1), 1))\n                                        let _2 := mload(/** @src 0:6504:6524  \"opInfo.mUserOp.nonce\" */ add(_665_mpos, /** @src 0:6462:6479  \"opInfo.userOpHash\" */ 32))\n                                        /// @src 0:6435:6525  \"UserOperationPrefundTooLow(opInfo.userOpHash, opInfo.mUserOp.sender, opInfo.mUserOp.nonce)\"\n                                        let _3 := /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ mload(64)\n                                        mstore(_3, _2)\n                                        /// @src 0:6435:6525  \"UserOperationPrefundTooLow(opInfo.userOpHash, opInfo.mUserOp.sender, opInfo.mUserOp.nonce)\"\n                                        log3(_3, /** @src 0:6462:6479  \"opInfo.userOpHash\" */ 32, /** @src 0:6435:6525  \"UserOperationPrefundTooLow(opInfo.userOpHash, opInfo.mUserOp.sender, opInfo.mUserOp.nonce)\" */ 0x67b4fa9642f42120bf031f3051d1824b0fe25627945b27b8a6a65d5761d5482e, _1, cleaned)\n                                    }\n                                    /// @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                    function abi_encode_struct_PackedUserOperation_calldata_bytes32_uint256(headStart, value0, value1, value2) -> tail\n                                    {\n                                        mstore(headStart, 96)\n                                        tail := abi_encode_struct_PackedUserOperation_calldata(value0, add(headStart, 96))\n                                        mstore(add(headStart, 32), value1)\n                                        mstore(add(headStart, 64), value2)\n                                    }\n                                    /// @ast-id 1626 @src 0:21739:22239  \"function _getValidationData(uint256 validationData)...\"\n                                    function fun_getValidationData(var_validationData) -> var_aggregator, var_outOfTimeRange\n                                    {\n                                        /// @src 0:21893:21969  \"if (validationData == 0) {...\"\n                                        if /** @src 0:21897:21916  \"validationData == 0\" */ iszero(var_validationData)\n                                        /// @src 0:21893:21969  \"if (validationData == 0) {...\"\n                                        {\n                                            /// @src 0:21932:21958  \"return (address(0), false)\"\n                                            var_aggregator := /** @src 0:21915:21916  \"0\" */ 0x00\n                                            /// @src 0:21932:21958  \"return (address(0), false)\"\n                                            var_outOfTimeRange := /** @src 0:21915:21916  \"0\" */ 0x00\n                                            /// @src 0:21932:21958  \"return (address(0), false)\"\n                                            leave\n                                        }\n                                        /// @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                        let memPtr := mload(64)\n                                        finalize_allocation_26350(memPtr)\n                                        mstore(memPtr, /** @src 0:21915:21916  \"0\" */ 0x00)\n                                        /// @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                        mstore(add(memPtr, 32), /** @src 0:21915:21916  \"0\" */ 0x00)\n                                        /// @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                        mstore(add(memPtr, 64), /** @src 0:21915:21916  \"0\" */ 0x00)\n                                        /// @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                        let _1 := and(/** @src 1:1507:1530  \"uint160(validationData)\" */ var_validationData, /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ sub(shl(160, 1), 1))\n                                        let _2 := 0xffffffffffff\n                                        /// @src 1:1537:1586  \"uint48 validUntil = uint48(validationData >> 160)\"\n                                        let var_validUntil := /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ and(shr(/** @src 1:1582:1585  \"160\" */ 0xa0, /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ var_validationData), _2)\n                                        /// @src 1:1592:1659  \"if (validUntil == 0) {...\"\n                                        if /** @src 1:1596:1611  \"validUntil == 0\" */ iszero(/** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ var_validUntil)\n                                        /// @src 1:1592:1659  \"if (validUntil == 0) {...\"\n                                        {\n                                            /// @src 1:1623:1652  \"validUntil = type(uint48).max\"\n                                            var_validUntil := /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ _2\n                                        }\n                                        let result := shr(/** @src 1:1710:1718  \"48 + 160\" */ 0xd0, /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ var_validationData)\n                                        let memPtr_1 := mload(64)\n                                        finalize_allocation_26350(memPtr_1)\n                                        mstore(memPtr_1, _1)\n                                        mstore(/** @src 1:1733:1783  \"ValidationData(aggregator, validAfter, validUntil)\" */ add(memPtr_1, /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 32), result)\n                                        let _3 := and(var_validUntil, _2)\n                                        mstore(/** @src 1:1733:1783  \"ValidationData(aggregator, validAfter, validUntil)\" */ add(memPtr_1, /** @src 0:789:29689  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 64), _3)\n                                        /// @src 0:22124:22194  \"block.timestamp > data.validUntil || block.timestamp < data.validAfter\"\n                                        let expr := /** @src 0:22124:22157  \"block.timestamp > data.validUntil\" */ gt(/** @src 0:22124:22139  \"block.timestamp\" */ timestamp(), /** @src 0:22124:22157  \"block.timestamp > data.validUntil\" */ _3)\n                                        /// @src 0:22124:22194  \"block.timestamp > data.validUntil || block.timestamp < data.validAfter\"\n                                        if iszero(expr)\n                                        {\n                                            expr := /** @src 0:22161:22194  \"block.timestamp < data.validAfter\" */ lt(/** @src 0:22124:22139  \"block.timestamp\" */ timestamp(), /** @src 0:22161:22194  \"block.timestamp < data.validAfter\" */ result)\n                                        }\n                                        /// @src 0:22107:22194  \"outOfTimeRange = block.timestamp > data.validUntil || block.timestamp < data.validAfter\"\n                                        var_outOfTimeRange := expr\n                                        /// @src 0:22204:22232  \"aggregator = data.aggregator\"\n                                        var_aggregator := _1\n                                    }\n                                }\n                                data \".metadata\" hex\"a164736f6c6343000818000a\"\n                            }\n                            /// @use-src 3:\"lib/account-abstraction/contracts/core/SenderCreator.sol\"\n                            object \"SenderCreator_2418\" {\n                                code {\n                                    {\n                                        /// @src 3:205:1231  \"contract SenderCreator {...\"\n                                        let _1 := memoryguard(0x80)\n                                        mstore(64, _1)\n                                        if callvalue() { revert(0, 0) }\n                                        let _2 := datasize(\"SenderCreator_2418_deployed\")\n                                        codecopy(_1, dataoffset(\"SenderCreator_2418_deployed\"), _2)\n                                        return(_1, _2)\n                                    }\n                                }\n                                /// @use-src 3:\"lib/account-abstraction/contracts/core/SenderCreator.sol\"\n                                object \"SenderCreator_2418_deployed\" {\n                                    code {\n                                        {\n                                            /// @src 3:205:1231  \"contract SenderCreator {...\"\n                                            let _1 := memoryguard(0x80)\n                                            if iszero(lt(calldatasize(), 4))\n                                            {\n                                                let _2 := 0\n                                                if eq(0x570e1a36, shr(224, calldataload(_2)))\n                                                {\n                                                    if callvalue() { revert(_2, _2) }\n                                                    if slt(add(calldatasize(), not(3)), 32) { revert(_2, _2) }\n                                                    let offset := calldataload(4)\n                                                    let _3 := 0xffffffffffffffff\n                                                    if gt(offset, _3) { revert(_2, _2) }\n                                                    if iszero(slt(add(offset, 35), calldatasize())) { revert(_2, _2) }\n                                                    let length := calldataload(add(4, offset))\n                                                    if gt(length, _3) { revert(_2, _2) }\n                                                    if gt(add(add(offset, length), 36), calldatasize()) { revert(_2, _2) }\n                                                    let var_sender := _2\n                                                    if gt(/** @src 3:726:728  \"20\" */ 0x14, /** @src 3:205:1231  \"contract SenderCreator {...\" */ length) { revert(_2, _2) }\n                                                    let lengthOut := add(length, not(19))\n                                                    if gt(lengthOut, _3)\n                                                    {\n                                                        mstore(_2, shl(224, 0x4e487b71))\n                                                        mstore(4, 0x41)\n                                                        revert(_2, 36)\n                                                    }\n                                                    let _4 := not(31)\n                                                    let newFreePtr := add(_1, and(add(and(add(length, 11), _4), 63), _4))\n                                                    if or(gt(newFreePtr, _3), lt(newFreePtr, _1))\n                                                    {\n                                                        mstore(_2, shl(224, 0x4e487b71))\n                                                        mstore(4, 0x41)\n                                                        revert(_2, 36)\n                                                    }\n                                                    mstore(64, newFreePtr)\n                                                    mstore(_1, lengthOut)\n                                                    let dst := add(_1, 32)\n                                                    calldatacopy(dst, add(offset, 56), lengthOut)\n                                                    mstore(add(add(_1, length), 12), _2)\n                                                    /// @src 3:863:1156  \"assembly (\\\"memory-safe\\\") {...\"\n                                                    let var_success := call(gas(), /** @src 3:205:1231  \"contract SenderCreator {...\" */ shr(96, calldataload(add(offset, 36))), _2, /** @src 3:863:1156  \"assembly (\\\"memory-safe\\\") {...\" */ dst, mload(_1), /** @src 3:205:1231  \"contract SenderCreator {...\" */ _2, 32)\n                                                    /// @src 3:863:1156  \"assembly (\\\"memory-safe\\\") {...\"\n                                                    var_sender := mload(/** @src 3:205:1231  \"contract SenderCreator {...\" */ _2)\n                                                    /// @src 3:1165:1223  \"if (!success) {...\"\n                                                    if /** @src 3:1169:1177  \"!success\" */ iszero(var_success)\n                                                    /// @src 3:1165:1223  \"if (!success) {...\"\n                                                    {\n                                                        /// @src 3:1193:1212  \"sender = address(0)\"\n                                                        var_sender := /** @src 3:205:1231  \"contract SenderCreator {...\" */ _2\n                                                    }\n                                                    let memPos := mload(64)\n                                                    mstore(memPos, and(var_sender, sub(shl(160, 1), 1)))\n                                                    return(memPos, 32)\n                                                }\n                                            }\n                                            revert(0, 0)\n                                        }\n                                    }\n                                    data \".metadata\" hex\"a164736f6c6343000818000a\"\n                                }\n                            }\n                        }\n                        data \".metadata\" hex\"a164736f6c6343000818000a\"\n                    }\n                }\n                /// @use-src 6:\"lib/account-abstraction/contracts/interfaces/IAccount.sol\", 60:\"lib/openzeppelin-contracts/contracts/access/Ownable.sol\", 69:\"lib/openzeppelin-contracts/contracts/utils/Context.sol\", 81:\"src/ethereum/MinimalAccount.sol\"\n                object \"MinimalAccount_51163\" {\n                    code {\n                        {\n                            /// @src 81:697:4162  \"contract MinimalAccount is IAccount, Ownable {...\"\n                            let _1 := memoryguard(0xa0)\n                            if callvalue() { revert(0, 0) }\n                            let programSize := datasize(\"MinimalAccount_51163\")\n                            let argSize := sub(codesize(), programSize)\n                            let newFreePtr := add(_1, and(add(argSize, 31), not(31)))\n                            if or(gt(newFreePtr, sub(shl(64, 1), 1)), lt(newFreePtr, _1))\n                            {\n                                mstore(/** @src -1:-1:-1 */ 0, /** @src 81:697:4162  \"contract MinimalAccount is IAccount, Ownable {...\" */ shl(224, 0x4e487b71))\n                                mstore(4, 0x41)\n                                revert(/** @src -1:-1:-1 */ 0, /** @src 81:697:4162  \"contract MinimalAccount is IAccount, Ownable {...\" */ 0x24)\n                            }\n                            mstore(64, newFreePtr)\n                            codecopy(_1, programSize, argSize)\n                            if slt(sub(add(_1, argSize), _1), 32)\n                            {\n                                revert(/** @src -1:-1:-1 */ 0, 0)\n                            }\n                            /// @src 81:697:4162  \"contract MinimalAccount is IAccount, Ownable {...\"\n                            let value := mload(_1)\n                            let _2 := sub(shl(160, 1), 1)\n                            let _3 := and(value, _2)\n                            if iszero(eq(value, _3))\n                            {\n                                revert(/** @src -1:-1:-1 */ 0, 0)\n                            }\n                            /// @src 60:1269:1364  \"if (initialOwner == address(0)) {...\"\n                            if /** @src 60:1273:1299  \"initialOwner == address(0)\" */ iszero(/** @src 81:2100:2110  \"msg.sender\" */ caller())\n                            /// @src 60:1269:1364  \"if (initialOwner == address(0)) {...\"\n                            {\n                                /// @src 60:1322:1353  \"OwnableInvalidOwner(address(0))\"\n                                let _4 := /** @src 81:697:4162  \"contract MinimalAccount is IAccount, Ownable {...\" */ mload(64)\n                                /// @src 60:1322:1353  \"OwnableInvalidOwner(address(0))\"\n                                mstore(_4, shl(224, 0x1e4fbdf7))\n                                /// @src 81:697:4162  \"contract MinimalAccount is IAccount, Ownable {...\"\n                                mstore(/** @src 60:1322:1353  \"OwnableInvalidOwner(address(0))\" */ add(_4, 4), /** @src -1:-1:-1 */ 0)\n                                /// @src 60:1322:1353  \"OwnableInvalidOwner(address(0))\"\n                                revert(_4, /** @src 81:697:4162  \"contract MinimalAccount is IAccount, Ownable {...\" */ 36)\n                            }\n                            let _5 := sload(/** @src -1:-1:-1 */ 0)\n                            /// @src 81:697:4162  \"contract MinimalAccount is IAccount, Ownable {...\"\n                            sstore(/** @src -1:-1:-1 */ 0, /** @src 81:697:4162  \"contract MinimalAccount is IAccount, Ownable {...\" */ or(and(_5, not(sub(shl(160, 1), 1))), /** @src 81:2100:2110  \"msg.sender\" */ caller()))\n                            /// @src 60:3052:3092  \"OwnershipTransferred(oldOwner, newOwner)\"\n                            let _6 := /** @src 81:697:4162  \"contract MinimalAccount is IAccount, Ownable {...\" */ mload(64)\n                            /// @src 60:3052:3092  \"OwnershipTransferred(oldOwner, newOwner)\"\n                            log3(/** @src -1:-1:-1 */ 0, 0, /** @src 60:3052:3092  \"OwnershipTransferred(oldOwner, newOwner)\" */ 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0, /** @src 81:697:4162  \"contract MinimalAccount is IAccount, Ownable {...\" */ and(_5, _2), /** @src 81:2100:2110  \"msg.sender\" */ caller())\n                            /// @src 81:2122:2160  \"i_entryPoint = IEntryPoint(entryPoint)\"\n                            mstore(128, /** @src 81:697:4162  \"contract MinimalAccount is IAccount, Ownable {...\" */ _3)\n                            let _7 := datasize(\"MinimalAccount_51163_deployed\")\n                            codecopy(_6, dataoffset(\"MinimalAccount_51163_deployed\"), _7)\n                            setimmutable(_6, \"50967\", mload(/** @src 81:2122:2160  \"i_entryPoint = IEntryPoint(entryPoint)\" */ 128))\n                            /// @src 81:697:4162  \"contract MinimalAccount is IAccount, Ownable {...\"\n                            return(_6, _7)\n                        }\n                    }\n                    /// @use-src 1:\"lib/account-abstraction/contracts/core/Helpers.sol\", 60:\"lib/openzeppelin-contracts/contracts/access/Ownable.sol\", 69:\"lib/openzeppelin-contracts/contracts/utils/Context.sol\", 72:\"lib/openzeppelin-contracts/contracts/utils/cryptography/ECDSA.sol\", 73:\"lib/openzeppelin-contracts/contracts/utils/cryptography/MessageHashUtils.sol\", 81:\"src/ethereum/MinimalAccount.sol\"\n                    object \"MinimalAccount_51163_deployed\" {\n                        code {\n                            {\n                                /// @src 81:697:4162  \"contract MinimalAccount is IAccount, Ownable {...\"\n                                let _1 := memoryguard(0x80)\n                                let _2 := 64\n                                mstore(_2, _1)\n                                let _3 := 4\n                                if iszero(lt(calldatasize(), _3))\n                                {\n                                    let _4 := 0\n                                    switch shr(224, calldataload(_4))\n                                    case 0x19822f7c {\n                                        if callvalue() { revert(_4, _4) }\n                                        let _5 := not(3)\n                                        if slt(add(calldatasize(), _5), 96) { revert(_4, _4) }\n                                        let offset := calldataload(_3)\n                                        if gt(offset, 0xffffffffffffffff) { revert(_4, _4) }\n                                        if slt(add(sub(calldatasize(), offset), _5), 288) { revert(_4, _4) }\n                                        let value := calldataload(68)\n                                        /// @src 81:1538:1643  \"if (msg.sender != address(i_entryPoint)) {...\"\n                                        if /** @src 81:1542:1577  \"msg.sender != address(i_entryPoint)\" */ iszero(eq(/** @src 81:1542:1552  \"msg.sender\" */ caller(), /** @src 81:697:4162  \"contract MinimalAccount is IAccount, Ownable {...\" */ and(/** @src 81:1564:1576  \"i_entryPoint\" */ loadimmutable(\"50967\"), /** @src 81:697:4162  \"contract MinimalAccount is IAccount, Ownable {...\" */ sub(shl(160, 1), 1))))\n                                        /// @src 81:1538:1643  \"if (msg.sender != address(i_entryPoint)) {...\"\n                                        {\n                                            /// @src 81:1600:1632  \"MinimalAccount__OnlyEntryPoint()\"\n                                            mstore(_1, shl(225, 0x54068c25))\n                                            revert(_1, /** @src 81:697:4162  \"contract MinimalAccount is IAccount, Ownable {...\" */ _3)\n                                        }\n                                        /// @src 81:2440:2495  \"validationData = _validateSignature(userOp, userOpHash)\"\n                                        let var_validationData := /** @src 81:2457:2495  \"_validateSignature(userOp, userOpHash)\" */ fun_validateSignature(/** @src 81:697:4162  \"contract MinimalAccount is IAccount, Ownable {...\" */ add(_3, offset), calldataload(36))\n                                        /// @src 81:3682:3857  \"if (missingAccountFunds > 0) {...\"\n                                        if /** @src 81:3686:3709  \"missingAccountFunds > 0\" */ iszero(iszero(value))\n                                        /// @src 81:3682:3857  \"if (missingAccountFunds > 0) {...\"\n                                        {\n                                            /// @src 81:3743:3823  \"payable(msg.sender).call{value: missingAccountFunds, gas: type(uint256).max}(\\\"\\\")\"\n                                            pop(call(/** @src 81:3801:3818  \"type(uint256).max\" */ not(0), /** @src 81:1542:1552  \"msg.sender\" */ caller(), /** @src 81:3743:3823  \"payable(msg.sender).call{value: missingAccountFunds, gas: type(uint256).max}(\\\"\\\")\" */ value, /** @src 81:697:4162  \"contract MinimalAccount is IAccount, Ownable {...\" */ _4, _4, _4, _4))\n                                            /// @src 81:3743:3823  \"payable(msg.sender).call{value: missingAccountFunds, gas: type(uint256).max}(\\\"\\\")\"\n                                            pop(extract_returndata())\n                                        }\n                                        /// @src 81:697:4162  \"contract MinimalAccount is IAccount, Ownable {...\"\n                                        let memPos := mload(_2)\n                                        mstore(memPos, var_validationData)\n                                        return(memPos, 32)\n                                    }\n                                    case 0x44ab613f {\n                                        if callvalue() { revert(_4, _4) }\n                                        if slt(add(calldatasize(), not(3)), _4) { revert(_4, _4) }\n                                        let memPos_1 := mload(_2)\n                                        mstore(memPos_1, and(/** @src 81:4140:4152  \"i_entryPoint\" */ loadimmutable(\"50967\"), /** @src 81:697:4162  \"contract MinimalAccount is IAccount, Ownable {...\" */ sub(shl(160, 1), 1)))\n                                        return(memPos_1, 32)\n                                    }\n                                    case 0x715018a6 {\n                                        if callvalue() { revert(_4, _4) }\n                                        if slt(add(calldatasize(), not(3)), _4) { revert(_4, _4) }\n                                        /// @src 60:1500:1562  \"modifier onlyOwner() {...\"\n                                        fun_checkOwner()\n                                        /// @src 81:697:4162  \"contract MinimalAccount is IAccount, Ownable {...\"\n                                        let _6 := sload(_4)\n                                        sstore(_4, and(_6, shl(160, 0xffffffffffffffffffffffff)))\n                                        /// @src 60:3052:3092  \"OwnershipTransferred(oldOwner, newOwner)\"\n                                        log3(/** @src 81:697:4162  \"contract MinimalAccount is IAccount, Ownable {...\" */ _4, _4, /** @src 60:3052:3092  \"OwnershipTransferred(oldOwner, newOwner)\" */ 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0, /** @src 81:697:4162  \"contract MinimalAccount is IAccount, Ownable {...\" */ and(_6, sub(shl(160, 1), 1)), _4)\n                                        return(_4, _4)\n                                    }\n                                    case 0x8da5cb5b {\n                                        if callvalue() { revert(_4, _4) }\n                                        if slt(add(calldatasize(), not(3)), _4) { revert(_4, _4) }\n                                        let cleaned := and(sload(_4), sub(shl(160, 1), 1))\n                                        let memPos_2 := mload(_2)\n                                        mstore(memPos_2, cleaned)\n                                        return(memPos_2, 32)\n                                    }\n                                    case 0xb61d27f6 {\n                                        if callvalue() { revert(_4, _4) }\n                                        if slt(add(calldatasize(), not(3)), 96) { revert(_4, _4) }\n                                        let value0 := abi_decode_address()\n                                        let _7 := 68\n                                        let offset_1 := calldataload(68)\n                                        let _8 := 0xffffffffffffffff\n                                        if gt(offset_1, _8) { revert(_4, _4) }\n                                        if iszero(slt(add(offset_1, 35), calldatasize())) { revert(_4, _4) }\n                                        let length := calldataload(add(_3, offset_1))\n                                        if gt(length, _8) { revert(_4, _4) }\n                                        if gt(add(add(offset_1, length), 36), calldatasize()) { revert(_4, _4) }\n                                        let _9 := sub(shl(160, 1), 1)\n                                        /// @src 81:1713:1773  \"msg.sender != address(i_entryPoint) && msg.sender != owner()\"\n                                        let expr := /** @src 81:1713:1748  \"msg.sender != address(i_entryPoint)\" */ iszero(eq(/** @src 81:1713:1723  \"msg.sender\" */ caller(), /** @src 81:697:4162  \"contract MinimalAccount is IAccount, Ownable {...\" */ and(/** @src 81:1735:1747  \"i_entryPoint\" */ loadimmutable(\"50967\"), /** @src 81:697:4162  \"contract MinimalAccount is IAccount, Ownable {...\" */ _9)))\n                                        /// @src 81:1713:1773  \"msg.sender != address(i_entryPoint) && msg.sender != owner()\"\n                                        if expr\n                                        {\n                                            expr := /** @src 81:1752:1773  \"msg.sender != owner()\" */ iszero(eq(/** @src 81:1713:1723  \"msg.sender\" */ caller(), /** @src 81:697:4162  \"contract MinimalAccount is IAccount, Ownable {...\" */ and(sload(_4), _9)))\n                                        }\n                                        /// @src 81:1709:1846  \"if (msg.sender != address(i_entryPoint) && msg.sender != owner()) {...\"\n                                        if expr\n                                        {\n                                            /// @src 81:1796:1835  \"MinimalAccount__OnlyEntryPointOrOwner()\"\n                                            let _10 := /** @src 81:697:4162  \"contract MinimalAccount is IAccount, Ownable {...\" */ mload(_2)\n                                            /// @src 81:1796:1835  \"MinimalAccount__OnlyEntryPointOrOwner()\"\n                                            mstore(_10, shl(225, 0x54b4aab7))\n                                            revert(_10, /** @src 81:697:4162  \"contract MinimalAccount is IAccount, Ownable {...\" */ _3)\n                                        }\n                                        /// @src 81:2736:2773  \"dest.call{value: value}(functionData)\"\n                                        let _11 := /** @src 81:697:4162  \"contract MinimalAccount is IAccount, Ownable {...\" */ mload(_2)\n                                        calldatacopy(_11, add(offset_1, 36), length)\n                                        let _12 := add(_11, length)\n                                        mstore(_12, _4)\n                                        /// @src 81:2736:2773  \"dest.call{value: value}(functionData)\"\n                                        let expr_component := call(gas(), value0, /** @src 81:697:4162  \"contract MinimalAccount is IAccount, Ownable {...\" */ calldataload(36), /** @src 81:2736:2773  \"dest.call{value: value}(functionData)\" */ _11, sub(/** @src 81:697:4162  \"contract MinimalAccount is IAccount, Ownable {...\" */ _12, /** @src 81:2736:2773  \"dest.call{value: value}(functionData)\" */ _11), /** @src 81:697:4162  \"contract MinimalAccount is IAccount, Ownable {...\" */ _4, _4)\n                                        /// @src 81:2736:2773  \"dest.call{value: value}(functionData)\"\n                                        let expr_component_mpos := extract_returndata()\n                                        /// @src 81:2783:2863  \"if (!success) {...\"\n                                        if /** @src 81:2787:2795  \"!success\" */ iszero(expr_component)\n                                        /// @src 81:2783:2863  \"if (!success) {...\"\n                                        {\n                                            /// @src 81:2818:2852  \"MinimalAccount__CallFailed(result)\"\n                                            let _13 := /** @src 81:697:4162  \"contract MinimalAccount is IAccount, Ownable {...\" */ mload(_2)\n                                            /// @src 81:2818:2852  \"MinimalAccount__CallFailed(result)\"\n                                            mstore(_13, shl(228, 0x038fe215))\n                                            /// @src 81:697:4162  \"contract MinimalAccount is IAccount, Ownable {...\"\n                                            let _14 := 32\n                                            mstore(/** @src 81:2818:2852  \"MinimalAccount__CallFailed(result)\" */ add(_13, /** @src 81:697:4162  \"contract MinimalAccount is IAccount, Ownable {...\" */ _3), 32)\n                                            let length_1 := mload(expr_component_mpos)\n                                            mstore(add(/** @src 81:2818:2852  \"MinimalAccount__CallFailed(result)\" */ _13, /** @src 81:697:4162  \"contract MinimalAccount is IAccount, Ownable {...\" */ 36), length_1)\n                                            let i := _4\n                                            for { } lt(i, length_1) { i := add(i, _14) }\n                                            {\n                                                mstore(add(add(/** @src 81:2818:2852  \"MinimalAccount__CallFailed(result)\" */ _13, /** @src 81:697:4162  \"contract MinimalAccount is IAccount, Ownable {...\" */ i), _7), mload(add(add(expr_component_mpos, i), _14)))\n                                            }\n                                            mstore(add(add(/** @src 81:2818:2852  \"MinimalAccount__CallFailed(result)\" */ _13, /** @src 81:697:4162  \"contract MinimalAccount is IAccount, Ownable {...\" */ length_1), 68), _4)\n                                            /// @src 81:2818:2852  \"MinimalAccount__CallFailed(result)\"\n                                            revert(_13, add(sub(/** @src 81:697:4162  \"contract MinimalAccount is IAccount, Ownable {...\" */ add(/** @src 81:2818:2852  \"MinimalAccount__CallFailed(result)\" */ _13, /** @src 81:697:4162  \"contract MinimalAccount is IAccount, Ownable {...\" */ and(add(length_1, 0x1f), not(31))), /** @src 81:2818:2852  \"MinimalAccount__CallFailed(result)\" */ _13), /** @src 81:697:4162  \"contract MinimalAccount is IAccount, Ownable {...\" */ 68))\n                                        }\n                                        return(_4, _4)\n                                    }\n                                    case 0xf2fde38b {\n                                        if callvalue() { revert(_4, _4) }\n                                        if slt(add(calldatasize(), not(3)), 32) { revert(_4, _4) }\n                                        let value0_1 := abi_decode_address()\n                                        /// @src 60:1500:1562  \"modifier onlyOwner() {...\"\n                                        fun_checkOwner()\n                                        /// @src 81:697:4162  \"contract MinimalAccount is IAccount, Ownable {...\"\n                                        let _15 := sub(shl(160, 1), 1)\n                                        let _16 := and(/** @src 60:2627:2649  \"newOwner == address(0)\" */ value0_1, /** @src 81:697:4162  \"contract MinimalAccount is IAccount, Ownable {...\" */ _15)\n                                        /// @src 60:2623:2714  \"if (newOwner == address(0)) {...\"\n                                        if /** @src 60:2627:2649  \"newOwner == address(0)\" */ iszero(/** @src 81:697:4162  \"contract MinimalAccount is IAccount, Ownable {...\" */ _16)\n                                        /// @src 60:2623:2714  \"if (newOwner == address(0)) {...\"\n                                        {\n                                            /// @src 60:2672:2703  \"OwnableInvalidOwner(address(0))\"\n                                            let _17 := /** @src 81:697:4162  \"contract MinimalAccount is IAccount, Ownable {...\" */ mload(_2)\n                                            /// @src 60:2672:2703  \"OwnableInvalidOwner(address(0))\"\n                                            mstore(_17, shl(224, 0x1e4fbdf7))\n                                            /// @src 81:697:4162  \"contract MinimalAccount is IAccount, Ownable {...\"\n                                            mstore(/** @src 60:2672:2703  \"OwnableInvalidOwner(address(0))\" */ add(_17, /** @src 81:697:4162  \"contract MinimalAccount is IAccount, Ownable {...\" */ _3), _4)\n                                            /// @src 60:2672:2703  \"OwnableInvalidOwner(address(0))\"\n                                            revert(_17, /** @src 81:697:4162  \"contract MinimalAccount is IAccount, Ownable {...\" */ 36)\n                                        }\n                                        let _18 := sload(_4)\n                                        sstore(_4, or(and(_18, shl(160, 0xffffffffffffffffffffffff)), _16))\n                                        /// @src 60:3052:3092  \"OwnershipTransferred(oldOwner, newOwner)\"\n                                        log3(/** @src 81:697:4162  \"contract MinimalAccount is IAccount, Ownable {...\" */ _4, _4, /** @src 60:3052:3092  \"OwnershipTransferred(oldOwner, newOwner)\" */ 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0, /** @src 81:697:4162  \"contract MinimalAccount is IAccount, Ownable {...\" */ and(_18, _15), /** @src 60:3052:3092  \"OwnershipTransferred(oldOwner, newOwner)\" */ _16)\n                                        /// @src 81:697:4162  \"contract MinimalAccount is IAccount, Ownable {...\"\n                                        return(_4, _4)\n                                    }\n                                }\n                                if iszero(calldatasize()) { stop() }\n                                revert(0, 0)\n                            }\n                            function abi_decode_address() -> value\n                            {\n                                value := calldataload(4)\n                                if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(0, 0) }\n                            }\n                            function allocate_memory(size) -> memPtr\n                            {\n                                memPtr := mload(64)\n                                let newFreePtr := add(memPtr, and(add(size, 31), not(31)))\n                                if or(gt(newFreePtr, 0xffffffffffffffff), lt(newFreePtr, memPtr))\n                                {\n                                    mstore(0, shl(224, 0x4e487b71))\n                                    mstore(4, 0x41)\n                                    revert(0, 0x24)\n                                }\n                                mstore(64, newFreePtr)\n                            }\n                            function array_allocation_size_bytes(length) -> size\n                            {\n                                if gt(length, 0xffffffffffffffff)\n                                {\n                                    mstore(0, shl(224, 0x4e487b71))\n                                    mstore(4, 0x41)\n                                    revert(0, 0x24)\n                                }\n                                size := add(and(add(length, 31), not(31)), 0x20)\n                            }\n                            function extract_returndata() -> data\n                            {\n                                switch returndatasize()\n                                case 0 { data := 96 }\n                                default {\n                                    let _1 := returndatasize()\n                                    let memPtr := allocate_memory(array_allocation_size_bytes(_1))\n                                    mstore(memPtr, _1)\n                                    data := memPtr\n                                    returndatacopy(add(memPtr, 0x20), /** @src -1:-1:-1 */ 0, /** @src 81:697:4162  \"contract MinimalAccount is IAccount, Ownable {...\" */ returndatasize())\n                                }\n                            }\n                            /// @ast-id 51119 @src 81:3144:3607  \"function _validateSignature(PackedUserOperation calldata userOp, bytes32 userOpHash)...\"\n                            function fun_validateSignature(var_userOp_offset, var_userOpHash) -> var_validationData\n                            {\n                                /// @src -1:-1:-1\n                                let _1 := 0\n                                /// @src 73:1367:1676  \"assembly {...\"\n                                mstore(/** @src -1:-1:-1 */ _1, /** @src 73:1367:1676  \"assembly {...\" */ \"\\x19Ethereum Signed Message:\\n32\")\n                                mstore(0x1c, var_userOpHash)\n                                let var_digest := keccak256(/** @src -1:-1:-1 */ _1, /** @src 73:1367:1676  \"assembly {...\" */ 0x3c)\n                                /// @src 81:697:4162  \"contract MinimalAccount is IAccount, Ownable {...\"\n                                let rel_offset_of_tail := calldataload(/** @src 81:3459:3475  \"userOp.signature\" */ add(var_userOp_offset, 256))\n                                /// @src 81:697:4162  \"contract MinimalAccount is IAccount, Ownable {...\"\n                                if iszero(slt(rel_offset_of_tail, add(sub(calldatasize(), var_userOp_offset), not(30))))\n                                {\n                                    revert(/** @src -1:-1:-1 */ _1, _1)\n                                }\n                                /// @src 81:697:4162  \"contract MinimalAccount is IAccount, Ownable {...\"\n                                let addr := add(var_userOp_offset, rel_offset_of_tail)\n                                let length := calldataload(addr)\n                                if gt(length, 0xffffffffffffffff)\n                                {\n                                    revert(/** @src -1:-1:-1 */ _1, _1)\n                                }\n                                /// @src 81:697:4162  \"contract MinimalAccount is IAccount, Ownable {...\"\n                                let addr_1 := add(addr, 0x20)\n                                if sgt(addr_1, sub(calldatasize(), length))\n                                {\n                                    revert(/** @src -1:-1:-1 */ _1, _1)\n                                }\n                                /// @src 81:697:4162  \"contract MinimalAccount is IAccount, Ownable {...\"\n                                let array := allocate_memory(array_allocation_size_bytes(length))\n                                mstore(array, length)\n                                if gt(add(add(addr, length), 0x20), calldatasize())\n                                {\n                                    revert(/** @src -1:-1:-1 */ _1, _1)\n                                }\n                                /// @src 81:697:4162  \"contract MinimalAccount is IAccount, Ownable {...\"\n                                calldatacopy(add(array, 0x20), addr_1, length)\n                                mstore(add(add(array, length), 0x20), /** @src -1:-1:-1 */ _1)\n                                /// @src 72:3859:3886  \"tryRecover(hash, signature)\"\n                                let expr_component, expr_component_1, expr_component_2 := fun_tryRecover_48818(var_digest, array)\n                                /// @src 72:3915:3923  \"errorArg\"\n                                fun_throwError(expr_component_1, expr_component_2)\n                                /// @src 81:697:4162  \"contract MinimalAccount is IAccount, Ownable {...\"\n                                let _2 := sub(shl(160, 1), 1)\n                                /// @src 81:3486:3562  \"if (signer != owner()) {...\"\n                                if /** @src 81:3490:3507  \"signer != owner()\" */ iszero(eq(/** @src 81:697:4162  \"contract MinimalAccount is IAccount, Ownable {...\" */ and(/** @src 81:3490:3507  \"signer != owner()\" */ expr_component, /** @src 81:697:4162  \"contract MinimalAccount is IAccount, Ownable {...\" */ _2), and(sload(/** @src -1:-1:-1 */ _1), /** @src 81:697:4162  \"contract MinimalAccount is IAccount, Ownable {...\" */ _2)))\n                                /// @src 81:3486:3562  \"if (signer != owner()) {...\"\n                                {\n                                    /// @src 81:3523:3551  \"return SIG_VALIDATION_FAILED\"\n                                    var_validationData := /** @src 1:305:306  \"1\" */ 0x01\n                                    /// @src 81:3523:3551  \"return SIG_VALIDATION_FAILED\"\n                                    leave\n                                }\n                                /// @src 81:3571:3600  \"return SIG_VALIDATION_SUCCESS\"\n                                var_validationData := /** @src -1:-1:-1 */ _1\n                            }\n                            /// @ast-id 46951 @src 60:1796:1958  \"function _checkOwner() internal view virtual {...\"\n                            function fun_checkOwner()\n                            {\n                                /// @src 81:697:4162  \"contract MinimalAccount is IAccount, Ownable {...\"\n                                let cleaned := and(sload(/** @src 60:1710:1716  \"_owner\" */ 0x00), /** @src 81:697:4162  \"contract MinimalAccount is IAccount, Ownable {...\" */ sub(shl(160, 1), 1))\n                                /// @src 60:1851:1952  \"if (owner() != _msgSender()) {...\"\n                                if /** @src 60:1855:1878  \"owner() != _msgSender()\" */ iszero(eq(/** @src 81:697:4162  \"contract MinimalAccount is IAccount, Ownable {...\" */ cleaned, /** @src 69:735:745  \"msg.sender\" */ caller()))\n                                /// @src 60:1851:1952  \"if (owner() != _msgSender()) {...\"\n                                {\n                                    /// @src 60:1901:1941  \"OwnableUnauthorizedAccount(_msgSender())\"\n                                    let _1 := /** @src 81:697:4162  \"contract MinimalAccount is IAccount, Ownable {...\" */ mload(64)\n                                    /// @src 60:1901:1941  \"OwnableUnauthorizedAccount(_msgSender())\"\n                                    mstore(_1, shl(224, 0x118cdaa7))\n                                    /// @src 81:697:4162  \"contract MinimalAccount is IAccount, Ownable {...\"\n                                    mstore(/** @src 60:1901:1941  \"OwnableUnauthorizedAccount(_msgSender())\" */ add(_1, 4), /** @src 69:735:745  \"msg.sender\" */ caller())\n                                    /// @src 60:1901:1941  \"OwnableUnauthorizedAccount(_msgSender())\"\n                                    revert(_1, /** @src 81:697:4162  \"contract MinimalAccount is IAccount, Ownable {...\" */ 36)\n                                }\n                            }\n                            /// @ast-id 48818 @src 72:2129:2895  \"function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError, bytes32) {...\"\n                            function fun_tryRecover_48818(var_hash, var_signature_mpos) -> var, var_, var_1\n                            {\n                                /// @src 72:2256:2272  \"signature.length\"\n                                let expr := /** @src 81:697:4162  \"contract MinimalAccount is IAccount, Ownable {...\" */ mload(/** @src 72:2256:2272  \"signature.length\" */ var_signature_mpos)\n                                /// @src 72:2252:2889  \"if (signature.length == 65) {...\"\n                                switch /** @src 72:2256:2278  \"signature.length == 65\" */ eq(expr, /** @src 72:2276:2278  \"65\" */ 0x41)\n                                case /** @src 72:2252:2889  \"if (signature.length == 65) {...\" */ 0 {\n                                    /// @src 72:2795:2878  \"return (address(0), RecoverError.InvalidSignatureLength, bytes32(signature.length))\"\n                                    var := /** @src 72:2811:2812  \"0\" */ 0x00\n                                    /// @src 72:2795:2878  \"return (address(0), RecoverError.InvalidSignatureLength, bytes32(signature.length))\"\n                                    var_ := /** @src 72:2815:2850  \"RecoverError.InvalidSignatureLength\" */ 2\n                                    /// @src 72:2795:2878  \"return (address(0), RecoverError.InvalidSignatureLength, bytes32(signature.length))\"\n                                    var_1 := expr\n                                    leave\n                                }\n                                default /// @src 72:2252:2889  \"if (signature.length == 65) {...\"\n                                {\n                                    /// @src 72:2539:2719  \"assembly {...\"\n                                    let var_r := mload(add(var_signature_mpos, 0x20))\n                                    /// @src 72:2739:2764  \"tryRecover(hash, v, r, s)\"\n                                    let expr_48799_component, expr_component, expr_component_1 := fun_tryRecover(var_hash, /** @src 72:2539:2719  \"assembly {...\" */ byte(/** @src -1:-1:-1 */ 0, /** @src 72:2539:2719  \"assembly {...\" */ mload(add(var_signature_mpos, 0x60))), /** @src 72:2739:2764  \"tryRecover(hash, v, r, s)\" */ var_r, /** @src 72:2539:2719  \"assembly {...\" */ mload(add(var_signature_mpos, 0x40)))\n                                    /// @src 72:2732:2764  \"return tryRecover(hash, v, r, s)\"\n                                    var := expr_48799_component\n                                    var_ := expr_component\n                                    var_1 := expr_component_1\n                                    leave\n                                }\n                            }\n                            /// @ast-id 49091 @src 72:7196:7728  \"function _throwError(RecoverError error, bytes32 errorArg) private pure {...\"\n                            function fun_throwError(var_error, var_errorArg)\n                            {\n                                /// @src 81:697:4162  \"contract MinimalAccount is IAccount, Ownable {...\"\n                                if iszero(lt(var_error, 4))\n                                {\n                                    mstore(/** @src 72:7291:7311  \"RecoverError.NoError\" */ 0, /** @src 81:697:4162  \"contract MinimalAccount is IAccount, Ownable {...\" */ shl(224, 0x4e487b71))\n                                    mstore(4, 0x21)\n                                    revert(/** @src 72:7291:7311  \"RecoverError.NoError\" */ 0, /** @src 81:697:4162  \"contract MinimalAccount is IAccount, Ownable {...\" */ 0x24)\n                                }\n                                /// @src 72:7278:7722  \"if (error == RecoverError.NoError) {...\"\n                                switch /** @src 72:7282:7311  \"error == RecoverError.NoError\" */ iszero(var_error)\n                                case /** @src 72:7278:7722  \"if (error == RecoverError.NoError) {...\" */ 0 {\n                                    /// @src 72:7374:7722  \"if (error == RecoverError.InvalidSignature) {...\"\n                                    switch /** @src 72:7378:7416  \"error == RecoverError.InvalidSignature\" */ eq(var_error, /** @src 81:697:4162  \"contract MinimalAccount is IAccount, Ownable {...\" */ 1)\n                                    case /** @src 72:7374:7722  \"if (error == RecoverError.InvalidSignature) {...\" */ 0 {\n                                        /// @src 72:7479:7722  \"if (error == RecoverError.InvalidSignatureLength) {...\"\n                                        switch /** @src 72:7483:7527  \"error == RecoverError.InvalidSignatureLength\" */ eq(var_error, /** @src 72:7492:7527  \"RecoverError.InvalidSignatureLength\" */ 2)\n                                        case /** @src 72:7479:7722  \"if (error == RecoverError.InvalidSignatureLength) {...\" */ 0 {\n                                            /// @src 72:7613:7722  \"if (error == RecoverError.InvalidSignatureS) {...\"\n                                            if /** @src 72:7617:7656  \"error == RecoverError.InvalidSignatureS\" */ eq(var_error, /** @src 72:7626:7656  \"RecoverError.InvalidSignatureS\" */ 3)\n                                            /// @src 72:7613:7722  \"if (error == RecoverError.InvalidSignatureS) {...\"\n                                            {\n                                                /// @src 72:7679:7711  \"ECDSAInvalidSignatureS(errorArg)\"\n                                                let _1 := /** @src 81:697:4162  \"contract MinimalAccount is IAccount, Ownable {...\" */ mload(64)\n                                                /// @src 72:7679:7711  \"ECDSAInvalidSignatureS(errorArg)\"\n                                                mstore(_1, shl(226, 0x35e2f383))\n                                                /// @src 81:697:4162  \"contract MinimalAccount is IAccount, Ownable {...\"\n                                                mstore(/** @src 72:7679:7711  \"ECDSAInvalidSignatureS(errorArg)\" */ add(_1, /** @src 81:697:4162  \"contract MinimalAccount is IAccount, Ownable {...\" */ 4), var_errorArg)\n                                                /// @src 72:7679:7711  \"ECDSAInvalidSignatureS(errorArg)\"\n                                                revert(_1, /** @src 81:697:4162  \"contract MinimalAccount is IAccount, Ownable {...\" */ 36)\n                                            }\n                                        }\n                                        default /// @src 72:7479:7722  \"if (error == RecoverError.InvalidSignatureLength) {...\"\n                                        {\n                                            /// @src 72:7550:7596  \"ECDSAInvalidSignatureLength(uint256(errorArg))\"\n                                            let _2 := /** @src 81:697:4162  \"contract MinimalAccount is IAccount, Ownable {...\" */ mload(64)\n                                            /// @src 72:7550:7596  \"ECDSAInvalidSignatureLength(uint256(errorArg))\"\n                                            mstore(_2, shl(224, 0xfce698f7))\n                                            /// @src 81:697:4162  \"contract MinimalAccount is IAccount, Ownable {...\"\n                                            mstore(/** @src 72:7550:7596  \"ECDSAInvalidSignatureLength(uint256(errorArg))\" */ add(_2, /** @src 81:697:4162  \"contract MinimalAccount is IAccount, Ownable {...\" */ 4), var_errorArg)\n                                            /// @src 72:7550:7596  \"ECDSAInvalidSignatureLength(uint256(errorArg))\"\n                                            revert(_2, /** @src 81:697:4162  \"contract MinimalAccount is IAccount, Ownable {...\" */ 36)\n                                        }\n                                    }\n                                    default /// @src 72:7374:7722  \"if (error == RecoverError.InvalidSignature) {...\"\n                                    {\n                                        /// @src 72:7439:7462  \"ECDSAInvalidSignature()\"\n                                        let _3 := /** @src 81:697:4162  \"contract MinimalAccount is IAccount, Ownable {...\" */ mload(64)\n                                        /// @src 72:7439:7462  \"ECDSAInvalidSignature()\"\n                                        mstore(_3, shl(224, 0xf645eedf))\n                                        revert(_3, /** @src 81:697:4162  \"contract MinimalAccount is IAccount, Ownable {...\" */ 4)\n                                    }\n                                }\n                                default /// @src 72:7278:7722  \"if (error == RecoverError.NoError) {...\"\n                                {\n                                    /// @src 72:7327:7334  \"return;\"\n                                    leave\n                                }\n                            }\n                            /// @ast-id 49006 @src 72:5140:6670  \"function tryRecover(...\"\n                            function fun_tryRecover(var_hash, var_v, var_r, var_s) -> var, var_1, var_2\n                            {\n                                /// @src 72:6182:6346  \"if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {...\"\n                                if /** @src 72:6186:6265  \"uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0\" */ gt(var_s, /** @src 72:6199:6265  \"0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0\" */ 0x7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0)\n                                /// @src 72:6182:6346  \"if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {...\"\n                                {\n                                    /// @src 72:6281:6335  \"return (address(0), RecoverError.InvalidSignatureS, s)\"\n                                    var := /** @src 72:6297:6298  \"0\" */ 0x00\n                                    /// @src 72:6281:6335  \"return (address(0), RecoverError.InvalidSignatureS, s)\"\n                                    var_1 := /** @src 72:6301:6331  \"RecoverError.InvalidSignatureS\" */ 3\n                                    /// @src 72:6281:6335  \"return (address(0), RecoverError.InvalidSignatureS, s)\"\n                                    var_2 := var_s\n                                    leave\n                                }\n                                /// @src 72:6457:6481  \"ecrecover(hash, v, r, s)\"\n                                let _1 := /** @src 81:697:4162  \"contract MinimalAccount is IAccount, Ownable {...\" */ mload(64)\n                                mstore(_1, var_hash)\n                                mstore(add(_1, 32), and(var_v, 0xff))\n                                mstore(add(_1, 64), var_r)\n                                mstore(add(_1, 96), var_s)\n                                /// @src -1:-1:-1\n                                let _2 := 0\n                                /// @src 72:6457:6481  \"ecrecover(hash, v, r, s)\"\n                                mstore(/** @src -1:-1:-1 */ _2, _2)\n                                /// @src 72:6457:6481  \"ecrecover(hash, v, r, s)\"\n                                if iszero(staticcall(gas(), 1, _1, /** @src 81:697:4162  \"contract MinimalAccount is IAccount, Ownable {...\" */ 128, /** @src -1:-1:-1 */ _2, /** @src 81:697:4162  \"contract MinimalAccount is IAccount, Ownable {...\" */ 32))\n                                /// @src 72:6457:6481  \"ecrecover(hash, v, r, s)\"\n                                {\n                                    /// @src 81:697:4162  \"contract MinimalAccount is IAccount, Ownable {...\"\n                                    let pos := mload(64)\n                                    returndatacopy(pos, /** @src -1:-1:-1 */ _2, /** @src 81:697:4162  \"contract MinimalAccount is IAccount, Ownable {...\" */ returndatasize())\n                                    revert(pos, returndatasize())\n                                }\n                                /// @src 72:6457:6481  \"ecrecover(hash, v, r, s)\"\n                                let _3 := mload(/** @src -1:-1:-1 */ _2)\n                                /// @src 72:6491:6604  \"if (signer == address(0)) {...\"\n                                if /** @src 72:6495:6515  \"signer == address(0)\" */ iszero(/** @src 81:697:4162  \"contract MinimalAccount is IAccount, Ownable {...\" */ and(/** @src 72:6495:6515  \"signer == address(0)\" */ _3, /** @src 81:697:4162  \"contract MinimalAccount is IAccount, Ownable {...\" */ sub(shl(160, 1), 1)))\n                                /// @src 72:6491:6604  \"if (signer == address(0)) {...\"\n                                {\n                                    /// @src 72:6531:6593  \"return (address(0), RecoverError.InvalidSignature, bytes32(0))\"\n                                    var := /** @src -1:-1:-1 */ _2\n                                    /// @src 72:6531:6593  \"return (address(0), RecoverError.InvalidSignature, bytes32(0))\"\n                                    var_1 := /** @src 72:6457:6481  \"ecrecover(hash, v, r, s)\" */ 1\n                                    /// @src 72:6531:6593  \"return (address(0), RecoverError.InvalidSignature, bytes32(0))\"\n                                    var_2 := /** @src -1:-1:-1 */ _2\n                                    /// @src 72:6531:6593  \"return (address(0), RecoverError.InvalidSignature, bytes32(0))\"\n                                    leave\n                                }\n                                /// @src 72:6614:6663  \"return (signer, RecoverError.NoError, bytes32(0))\"\n                                var := _3\n                                var_1 := /** @src -1:-1:-1 */ _2\n                                /// @src 72:6614:6663  \"return (signer, RecoverError.NoError, bytes32(0))\"\n                                var_2 := /** @src -1:-1:-1 */ _2\n                            }\n                        }\n                        data \".metadata\" hex\"a164736f6c6343000818000a\"\n                    }\n                }\n                data \".metadata\" hex\"a164736f6c6343000818000a\"\n            }\n        }\n        data \".metadata\" hex\"a164736f6c6343000818000a\"\n    }\n}\n","hash":"01000627ecf2d9851a9ec46202596ec2224428b7f2c8115cd0edccbeaefffb81","factoryDependencies":{"010000bb33ee534cf80c02825bd61e52b3fa56b6603510c3796fe9ac0518a92d":"script/DeployMinimalAccount.s.sol:DeployMinimal","010001191bd0c20330815eebb1830a5ce2fc61c5966f725b42e03468f37140f6":"lib/openzeppelin-contracts/contracts/mocks/token/ERC20Mock.sol:ERC20Mock","0100021d470f2f3c83be45f7b8541247d8b58dd557fbb4fea211d7eb54178100":"script/SendPackedUserOp.s.sol:SendPackedUserOp"},"id":83}